package io.github.onograph.test;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ModRegTest2 {

  public static boolean debug = false;

  @Test
  public void test1001() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1001");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat6 = v300_1.relationship();
    boolean boolean8 = v300_1.equals((java.lang.Object) 24);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat9 = v300_1.schema();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat10 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat11 = v300_1.node();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat6);
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat9);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat10);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat11);
  }

  @Test
  public void test1002() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1002");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v310_0.relationship();
    java.lang.String str2 = v310_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat3 = v310_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat4 = v310_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat5 = v310_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat6 = v310_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat7 = v310_0.relationshipGroup();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat9 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord10 = relationshipHighLimitRecordFormat9.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord13 = relationshipHighLimitRecordFormat12.newRecord();
    org.neo4j.internal.id.IdSequence idSequence15 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext16 = null;
    relationshipHighLimitRecordFormat9.prepare(relationshipRecord13, (int) (short) 1, idSequence15,
        cursorContext16);
    boolean boolean18 = v310_0.equals((java.lang.Object) relationshipHighLimitRecordFormat9);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat19 = v310_0.relationshipTypeToken();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_1_0" + "'", str2,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat3);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat4);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat5);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat6);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat7);
    org.junit.Assert.assertNotNull(relationshipRecord10);
    org.junit.Assert.assertNotNull(relationshipRecord13);
    org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat19);
  }

  @Test
  public void test1003() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1003");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.FactoryHighLimitDefaultImpl factoryHighLimitDefaultImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.FactoryHighLimitDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats1 = factoryHighLimitDefaultImpl0.newInstance();
    java.lang.String str2 = factoryHighLimitDefaultImpl0.getName();
    java.lang.String str3 = factoryHighLimitDefaultImpl0.getName();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats4 = factoryHighLimitDefaultImpl0.newInstance();
    java.lang.String str5 = factoryHighLimitDefaultImpl0.getName();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats6 = factoryHighLimitDefaultImpl0.newInstance();
    java.lang.String str7 = factoryHighLimitDefaultImpl0.getName();
    org.junit.Assert.assertNotNull(recordFormats1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_4_0" + "'", str2,
        "high_limitV3_4_0");
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "high_limitV3_4_0" + "'", str3,
        "high_limitV3_4_0");
    org.junit.Assert.assertNotNull(recordFormats4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "high_limitV3_4_0" + "'", str5,
        "high_limitV3_4_0");
    org.junit.Assert.assertNotNull(recordFormats6);
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "high_limitV3_4_0" + "'", str7,
        "high_limitV3_4_0");
  }

  @Test
  public void test1004() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1004");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord1 = null;
    org.neo4j.internal.id.IdSequence idSequence3 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext4 = null;
    propertyRecordFormat0.prepare(propertyRecord1, (int) (short) -1, idSequence3, cursorContext4);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat6 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader7 = null;
    int int8 = propertyRecordFormat6.getRecordSize(storeHeader7);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader9 = null;
    int int10 = propertyRecordFormat6.getRecordSize(storeHeader9);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl11 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean13 = recordFormatDynamicRecordImpl11.equals((java.lang.Object) 100.0f);
    int int16 = recordFormatDynamicRecordImpl11.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord17 = recordFormatDynamicRecordImpl11.newRecord();
    int int20 = recordFormatDynamicRecordImpl11.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord21 = recordFormatDynamicRecordImpl11.newRecord();
    int int24 = recordFormatDynamicRecordImpl11.getPageSize((int) '4', (int) (short) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_25 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat26 = v320_25.relationship();
    boolean boolean27 = recordFormatDynamicRecordImpl11.equals((java.lang.Object) v320_25);
    boolean boolean28 = propertyRecordFormat6.equals(
        (java.lang.Object) recordFormatDynamicRecordImpl11);
    long long29 = propertyRecordFormat6.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat30 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long31 = propertyOneByteHeaderRecordFormat30.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat32 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat33 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord34 = propertyRecordFormat33.newRecord();
    long long35 = propertyOneByteHeaderRecordFormat32.getNextRecordReference(propertyRecord34);
    long long36 = propertyOneByteHeaderRecordFormat30.getNextRecordReference(propertyRecord34);
    int int39 = propertyOneByteHeaderRecordFormat30.getPageSize(64, (int) (short) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat40 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord41 = propertyRecordFormat40.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat42 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader43 = null;
    int int44 = propertyRecordFormat42.getRecordSize(storeHeader43);
    long long45 = propertyRecordFormat42.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat46 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat47 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord48 = propertyRecordFormat47.newRecord();
    long long49 = propertyOneByteHeaderRecordFormat46.getNextRecordReference(propertyRecord48);
    org.neo4j.internal.id.IdSequence idSequence51 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext52 = null;
    propertyRecordFormat42.prepare(propertyRecord48, 0, idSequence51, cursorContext52);
    long long54 = propertyRecordFormat40.getNextRecordReference(propertyRecord48);
    org.neo4j.internal.id.IdSequence idSequence56 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext57 = null;
    propertyOneByteHeaderRecordFormat30.prepare(propertyRecord48, (int) (short) 0, idSequence56,
        cursorContext57);
    long long59 = propertyRecordFormat6.getNextRecordReference(propertyRecord48);
    org.neo4j.io.pagecache.PageCursor pageCursor60 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad61 = null;
    try {
      propertyRecordFormat0.read(propertyRecord48, pageCursor60, recordLoad61, (int) (short) 0, 52);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int8 + "' != '" + 48 + "'", int8 == 48);
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 48 + "'", int10 == 48);
    org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16 + "'", int16 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord17);
    org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord21);
    org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat26);
    org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1125899906842623L + "'",
        long29 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1125899906842623L + "'",
        long31 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord34);
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
    org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
    org.junit.Assert.assertTrue("'" + int39 + "' != '" + 64 + "'", int39 == 64);
    org.junit.Assert.assertNotNull(propertyRecord41);
    org.junit.Assert.assertTrue("'" + int44 + "' != '" + 48 + "'", int44 == 48);
    org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1125899906842623L + "'",
        long45 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord48);
    org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
    org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-1L) + "'", long54 == (-1L));
    org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-1L) + "'", long59 == (-1L));
  }

  @Test
  public void test1005() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1005");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        0);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long3 = relationshipGroupHighLimitRecordFormat2.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord5 = null;
    long long6 = relationshipGroupHighLimitRecordFormat4.getNextRecordReference(
        relationshipGroupRecord5);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord7 = relationshipGroupHighLimitRecordFormat4.newRecord();
    org.neo4j.internal.id.IdSequence idSequence9 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext10 = null;
    relationshipGroupHighLimitRecordFormat2.prepare(relationshipGroupRecord7, (int) (byte) 1,
        idSequence9, cursorContext10);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long13 = relationshipGroupHighLimitRecordFormat12.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat14 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord15 = null;
    long long16 = relationshipGroupHighLimitRecordFormat14.getNextRecordReference(
        relationshipGroupRecord15);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord17 = relationshipGroupHighLimitRecordFormat14.newRecord();
    org.neo4j.internal.id.IdSequence idSequence19 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext20 = null;
    relationshipGroupHighLimitRecordFormat12.prepare(relationshipGroupRecord17, (int) (byte) 1,
        idSequence19, cursorContext20);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat22 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord23 = null;
    long long24 = relationshipGroupHighLimitRecordFormat22.getNextRecordReference(
        relationshipGroupRecord23);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord25 = relationshipGroupHighLimitRecordFormat22.newRecord();
    org.neo4j.internal.id.IdSequence idSequence27 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext28 = null;
    relationshipGroupHighLimitRecordFormat12.prepare(relationshipGroupRecord25, 0, idSequence27,
        cursorContext28);
    org.neo4j.internal.id.IdSequence idSequence31 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext32 = null;
    relationshipGroupHighLimitRecordFormat2.prepare(relationshipGroupRecord25, 128, idSequence31,
        cursorContext32);
    org.neo4j.internal.id.IdSequence idSequence35 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext36 = null;
    relationshipGroupHighLimitRecordFormat1.prepare(relationshipGroupRecord25, 16, idSequence35,
        cursorContext36);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord38 = relationshipGroupHighLimitRecordFormat1.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat39 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long40 = relationshipGroupHighLimitRecordFormat39.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat41 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord42 = null;
    long long43 = relationshipGroupHighLimitRecordFormat41.getNextRecordReference(
        relationshipGroupRecord42);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord44 = relationshipGroupHighLimitRecordFormat41.newRecord();
    org.neo4j.internal.id.IdSequence idSequence46 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext47 = null;
    relationshipGroupHighLimitRecordFormat39.prepare(relationshipGroupRecord44, (int) (byte) 1,
        idSequence46, cursorContext47);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat49 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long50 = relationshipGroupHighLimitRecordFormat49.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat51 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord52 = null;
    long long53 = relationshipGroupHighLimitRecordFormat51.getNextRecordReference(
        relationshipGroupRecord52);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord54 = relationshipGroupHighLimitRecordFormat51.newRecord();
    org.neo4j.internal.id.IdSequence idSequence56 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext57 = null;
    relationshipGroupHighLimitRecordFormat49.prepare(relationshipGroupRecord54, (int) (byte) 1,
        idSequence56, cursorContext57);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat59 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord60 = null;
    long long61 = relationshipGroupHighLimitRecordFormat59.getNextRecordReference(
        relationshipGroupRecord60);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord62 = relationshipGroupHighLimitRecordFormat59.newRecord();
    org.neo4j.internal.id.IdSequence idSequence64 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext65 = null;
    relationshipGroupHighLimitRecordFormat49.prepare(relationshipGroupRecord62, 0, idSequence64,
        cursorContext65);
    org.neo4j.internal.id.IdSequence idSequence68 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext69 = null;
    relationshipGroupHighLimitRecordFormat39.prepare(relationshipGroupRecord62, 128, idSequence68,
        cursorContext69);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat71 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long72 = relationshipGroupHighLimitRecordFormat71.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat73 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord74 = null;
    long long75 = relationshipGroupHighLimitRecordFormat73.getNextRecordReference(
        relationshipGroupRecord74);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord76 = relationshipGroupHighLimitRecordFormat73.newRecord();
    org.neo4j.internal.id.IdSequence idSequence78 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext79 = null;
    relationshipGroupHighLimitRecordFormat71.prepare(relationshipGroupRecord76, (int) (byte) 1,
        idSequence78, cursorContext79);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat81 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord82 = null;
    long long83 = relationshipGroupHighLimitRecordFormat81.getNextRecordReference(
        relationshipGroupRecord82);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord84 = relationshipGroupHighLimitRecordFormat81.newRecord();
    org.neo4j.internal.id.IdSequence idSequence86 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext87 = null;
    relationshipGroupHighLimitRecordFormat71.prepare(relationshipGroupRecord84, 0, idSequence86,
        cursorContext87);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord89 = relationshipGroupHighLimitRecordFormat71.newRecord();
    org.neo4j.internal.id.IdSequence idSequence91 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext92 = null;
    relationshipGroupHighLimitRecordFormat39.prepare(relationshipGroupRecord89, 8, idSequence91,
        cursorContext92);
    org.neo4j.io.pagecache.PageCursor pageCursor94 = null;
    try {
      relationshipGroupHighLimitRecordFormat1.write(relationshipGroupRecord89, pageCursor94,
          (int) (short) -1, (int) (byte) 10);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1125899906842623L + "'",
        long3 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord7);
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1125899906842623L + "'",
        long13 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord17);
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord25);
    org.junit.Assert.assertNotNull(relationshipGroupRecord38);
    org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1125899906842623L + "'",
        long40 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord44);
    org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1125899906842623L + "'",
        long50 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-1L) + "'", long53 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord54);
    org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord62);
    org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1125899906842623L + "'",
        long72 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-1L) + "'", long75 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord76);
    org.junit.Assert.assertTrue("'" + long83 + "' != '" + (-1L) + "'", long83 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord84);
    org.junit.Assert.assertNotNull(relationshipGroupRecord89);
  }

  @Test
  public void test1006() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1006");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat1 = v306_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat2 = v306_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat3 = v306_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat4 = v306_0.property();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily5 = v306_0.getFormatFamily();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily6 = v306_0.getFormatFamily();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat7 = v306_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat8 = v306_0.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat9 = v306_0.node();
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat1);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat2);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat3);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat4);
    org.junit.Assert.assertTrue(
        "'" + formatFamily5 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily5.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertTrue(
        "'" + formatFamily6 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily6.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat7);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat8);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat9);
  }

  @Test
  public void test1007() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1007");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v310_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat2 = v310_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat3 = v310_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat4 = v310_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat5 = v310_0.relationshipGroup();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat3);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat4);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat5);
  }

  @Test
  public void test1008() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1008");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = null;
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    recordFormatDynamicRecordImpl0.prepare(dynamicRecord6, (int) (byte) -1, idSequence8,
        cursorContext9);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl11 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean13 = recordFormatDynamicRecordImpl11.equals((java.lang.Object) 100.0f);
    int int16 = recordFormatDynamicRecordImpl11.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord17 = recordFormatDynamicRecordImpl11.newRecord();
    long long18 = recordFormatDynamicRecordImpl0.getNextRecordReference(dynamicRecord17);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_19 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat20 = v300_19.labelToken();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily21 = v300_19.getFormatFamily();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat22 = v300_19.propertyKeyToken();
    boolean boolean23 = recordFormatDynamicRecordImpl0.equals(
        (java.lang.Object) propertyKeyTokenRecordRecordFormat22);
    int int26 = recordFormatDynamicRecordImpl0.getPageSize(10, 52);
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16 + "'", int16 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord17);
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat20);
    org.junit.Assert.assertTrue(
        "'" + formatFamily21 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily21.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat22);
    org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
  }

  @Test
  public void test1009() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1009");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    long long3 = recordFormatDynamicRecordImpl0.getMaxId();
    int int4 = recordFormatDynamicRecordImpl0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord5 = recordFormatDynamicRecordImpl0.newRecord();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1125899906842623L + "'",
        long3 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 12 + "'", int4 == 12);
    org.junit.Assert.assertNotNull(dynamicRecord5);
  }

  @Test
  public void test1010() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1010");
    }
    long long2 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.torete(
        (long) '#', 60L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 25L + "'", long2 == 25L);
  }

  @Test
  public void test1011() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1011");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord1 = propertyRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader3 = null;
    int int4 = propertyRecordFormat2.getRecordSize(storeHeader3);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl5 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats6 = highLimitFactoryDefaultImpl5.newInstance();
    boolean boolean7 = propertyRecordFormat2.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl5);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat9 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean10 = propertyRecordFormat2.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord11 = propertyRecordFormat2.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader13 = null;
    int int14 = propertyRecordFormat12.getRecordSize(storeHeader13);
    long long15 = propertyRecordFormat12.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat16 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat17 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord18 = propertyRecordFormat17.newRecord();
    long long19 = propertyOneByteHeaderRecordFormat16.getNextRecordReference(propertyRecord18);
    org.neo4j.internal.id.IdSequence idSequence21 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext22 = null;
    propertyRecordFormat12.prepare(propertyRecord18, 0, idSequence21, cursorContext22);
    org.neo4j.internal.id.IdSequence idSequence25 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext26 = null;
    propertyRecordFormat2.prepare(propertyRecord18, 0, idSequence25, cursorContext26);
    org.neo4j.io.pagecache.PageCursor pageCursor28 = null;
    try {
      propertyRecordFormat0.write(propertyRecord18, pageCursor28, (int) 'a', 0);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(propertyRecord1);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 48 + "'", int4 == 48);
    org.junit.Assert.assertNotNull(recordFormats6);
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    org.junit.Assert.assertNotNull(propertyRecord11);
    org.junit.Assert.assertTrue("'" + int14 + "' != '" + 48 + "'", int14 == 48);
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1125899906842623L + "'",
        long15 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord18);
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
  }

  @Test
  public void test1012() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1012");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v306_0.relationship();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray2 = v306_0.capabilities();
    java.lang.String str3 = v306_0.introductionVersion();
    java.lang.String str4 = v306_0.toString();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(capabilityArray2);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "3.0.6" + "'", str3, "3.0.6");
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RecordFormat:V306[vE.H.0b]" + "'", str4,
        "RecordFormat:V306[vE.H.0b]");
  }

  @Test
  public void test1013() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1013");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat1 = v306_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat2 = v306_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat3 = v306_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat4 = v306_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat5 = v306_0.property();
    java.lang.String str6 = v306_0.toString();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat7 = v306_0.relationshipTypeToken();
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat1);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat2);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat3);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat4);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat5);
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RecordFormat:V306[vE.H.0b]" + "'", str6,
        "RecordFormat:V306[vE.H.0b]");
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat7);
  }

  @Test
  public void test1014() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1014");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod(0L,
        (long) '4');
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 52L + "'", long2 == 52L);
  }

  @Test
  public void test1015() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1015");
    }
    org.neo4j.io.pagecache.PageCursor pageCursor1 = null;
    try {
      io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.enoForPa(
          (long) (short) 10, pageCursor1);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test1016() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1016");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = relationshipGroupRecordFormat0.getRecordSize(storeHeader1);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord3 = relationshipGroupRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader5 = null;
    int int6 = relationshipGroupRecordFormat4.getRecordSize(storeHeader5);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long8 = relationshipGroupHighLimitRecordFormat7.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat9 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord10 = null;
    long long11 = relationshipGroupHighLimitRecordFormat9.getNextRecordReference(
        relationshipGroupRecord10);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord12 = relationshipGroupHighLimitRecordFormat9.newRecord();
    org.neo4j.internal.id.IdSequence idSequence14 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext15 = null;
    relationshipGroupHighLimitRecordFormat7.prepare(relationshipGroupRecord12, (int) (byte) 1,
        idSequence14, cursorContext15);
    org.neo4j.internal.id.IdSequence idSequence18 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext19 = null;
    relationshipGroupRecordFormat4.prepare(relationshipGroupRecord12, 0, idSequence18,
        cursorContext19);
    long long21 = relationshipGroupRecordFormat0.getNextRecordReference(relationshipGroupRecord12);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat22 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader23 = null;
    int int24 = relationshipGroupRecordFormat22.getRecordSize(storeHeader23);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord25 = relationshipGroupRecordFormat22.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat26 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader27 = null;
    int int28 = relationshipGroupRecordFormat26.getRecordSize(storeHeader27);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat29 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long30 = relationshipGroupHighLimitRecordFormat29.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat31 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord32 = null;
    long long33 = relationshipGroupHighLimitRecordFormat31.getNextRecordReference(
        relationshipGroupRecord32);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord34 = relationshipGroupHighLimitRecordFormat31.newRecord();
    org.neo4j.internal.id.IdSequence idSequence36 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext37 = null;
    relationshipGroupHighLimitRecordFormat29.prepare(relationshipGroupRecord34, (int) (byte) 1,
        idSequence36, cursorContext37);
    org.neo4j.internal.id.IdSequence idSequence40 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext41 = null;
    relationshipGroupRecordFormat26.prepare(relationshipGroupRecord34, 0, idSequence40,
        cursorContext41);
    long long43 = relationshipGroupRecordFormat22.getNextRecordReference(relationshipGroupRecord34);
    org.neo4j.internal.id.IdSequence idSequence45 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext46 = null;
    relationshipGroupRecordFormat0.prepare(relationshipGroupRecord34, 4, idSequence45,
        cursorContext46);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader48 = null;
    int int49 = relationshipGroupRecordFormat0.getRecordSize(storeHeader48);
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_50 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat51 = v310_50.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat52 = v310_50.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat53 = v310_50.propertyKeyToken();
    boolean boolean54 = relationshipGroupRecordFormat0.equals(
        (java.lang.Object) propertyKeyTokenRecordRecordFormat53);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 32 + "'", int2 == 32);
    org.junit.Assert.assertNotNull(relationshipGroupRecord3);
    org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
    org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1125899906842623L + "'",
        long8 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord12);
    org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
    org.junit.Assert.assertTrue("'" + int24 + "' != '" + 32 + "'", int24 == 32);
    org.junit.Assert.assertNotNull(relationshipGroupRecord25);
    org.junit.Assert.assertTrue("'" + int28 + "' != '" + 32 + "'", int28 == 32);
    org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1125899906842623L + "'",
        long30 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord34);
    org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
    org.junit.Assert.assertTrue("'" + int49 + "' != '" + 32 + "'", int49 == 32);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat51);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat52);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat53);
    org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
  }

  @Test
  public void test1017() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1017");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod((long) 35,
        249L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 251L + "'", long2 == 251L);
  }

  @Test
  public void test1018() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1018");
    }
    java.util.function.Function<org.neo4j.kernel.impl.store.StoreHeader, java.lang.Integer> storeHeaderFunction1 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.fixedRecordSize(
        32);
    org.junit.Assert.assertNotNull(storeHeaderFunction1);
  }

  @Test
  public void test1019() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1019");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord1 = null;
    long long2 = nodeRecordFormat0.getNextRecordReference(nodeRecord1);
    int int3 = nodeRecordFormat0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader4 = null;
    int int5 = nodeRecordFormat0.getRecordSize(storeHeader4);
    int int8 = nodeRecordFormat0.getPageSize((int) '4', (int) (short) 1);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord9 = nodeRecordFormat0.newRecord();
    int int12 = nodeRecordFormat0.getPageSize(32, (int) 'a');
    int int15 = nodeRecordFormat0.getPageSize(1, 32);
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_16 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat17 = v306_16.node();
    org.neo4j.storageengine.api.format.Capability capability18 = null;
    boolean boolean19 = v306_16.hasCapability(capability18);
    org.neo4j.storageengine.api.format.Capability capability20 = null;
    boolean boolean21 = v306_16.hasCapability(capability20);
    boolean boolean22 = nodeRecordFormat0.equals((java.lang.Object) v306_16);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat23 = v306_16.relationshipTypeToken();
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
    org.junit.Assert.assertNotNull(nodeRecord9);
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat17);
    org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat23);
  }

  @Test
  public void test1020() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1020");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord1 = null;
    long long2 = nodeRecordFormat0.getNextRecordReference(nodeRecord1);
    int int3 = nodeRecordFormat0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader4 = null;
    int int5 = nodeRecordFormat0.getRecordSize(storeHeader4);
    int int8 = nodeRecordFormat0.getPageSize((int) '4', (int) (short) 1);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord9 = nodeRecordFormat0.newRecord();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord10 = nodeRecordFormat0.newRecord();
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
    org.junit.Assert.assertNotNull(nodeRecord9);
    org.junit.Assert.assertNotNull(nodeRecord10);
  }

  @Test
  public void test1021() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1021");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    int int3 = recordFormatDynamicRecordImpl0.getPageSize(24, 8);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl4 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    int int7 = recordFormatDynamicRecordImpl4.getPageSize(24, 8);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl8 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean10 = recordFormatDynamicRecordImpl8.equals((java.lang.Object) 100.0f);
    int int13 = recordFormatDynamicRecordImpl8.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord14 = recordFormatDynamicRecordImpl8.newRecord();
    long long15 = recordFormatDynamicRecordImpl4.getNextRecordReference(dynamicRecord14);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord16 = recordFormatDynamicRecordImpl4.newRecord();
    long long17 = recordFormatDynamicRecordImpl0.getNextRecordReference(dynamicRecord16);
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 24 + "'", int3 == 24);
    org.junit.Assert.assertTrue("'" + int7 + "' != '" + 24 + "'", int7 == 24);
    org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord14);
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
    org.junit.Assert.assertNotNull(dynamicRecord16);
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
  }

  @Test
  public void test1022() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1022");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long1 = relationshipGroupHighLimitRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord3 = null;
    long long4 = relationshipGroupHighLimitRecordFormat2.getNextRecordReference(
        relationshipGroupRecord3);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord5 = relationshipGroupHighLimitRecordFormat2.newRecord();
    org.neo4j.internal.id.IdSequence idSequence7 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext8 = null;
    relationshipGroupHighLimitRecordFormat0.prepare(relationshipGroupRecord5, (int) (byte) 1,
        idSequence7, cursorContext8);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat10 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord11 = null;
    long long12 = relationshipGroupHighLimitRecordFormat10.getNextRecordReference(
        relationshipGroupRecord11);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord13 = relationshipGroupHighLimitRecordFormat10.newRecord();
    org.neo4j.internal.id.IdSequence idSequence15 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext16 = null;
    relationshipGroupHighLimitRecordFormat0.prepare(relationshipGroupRecord13, 0, idSequence15,
        cursorContext16);
    long long18 = relationshipGroupHighLimitRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord19 = relationshipGroupHighLimitRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat20 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat21 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long22 = relationshipGroupHighLimitRecordFormat21.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat23 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord24 = null;
    long long25 = relationshipGroupHighLimitRecordFormat23.getNextRecordReference(
        relationshipGroupRecord24);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord26 = relationshipGroupHighLimitRecordFormat23.newRecord();
    org.neo4j.internal.id.IdSequence idSequence28 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext29 = null;
    relationshipGroupHighLimitRecordFormat21.prepare(relationshipGroupRecord26, (int) (byte) 1,
        idSequence28, cursorContext29);
    long long31 = relationshipGroupHighLimitRecordFormat20.getNextRecordReference(
        relationshipGroupRecord26);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat32 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long33 = relationshipGroupHighLimitRecordFormat32.getMaxId();
    long long34 = relationshipGroupHighLimitRecordFormat32.getMaxId();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord35 = relationshipGroupHighLimitRecordFormat32.newRecord();
    org.neo4j.internal.id.IdSequence idSequence37 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext38 = null;
    relationshipGroupHighLimitRecordFormat20.prepare(relationshipGroupRecord35, 3, idSequence37,
        cursorContext38);
    org.neo4j.internal.id.IdSequence idSequence41 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext42 = null;
    relationshipGroupHighLimitRecordFormat0.prepare(relationshipGroupRecord35, 32, idSequence41,
        cursorContext42);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat45 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        0);
    long long46 = relationshipGroupHighLimitRecordFormat45.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat47 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat48 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long49 = relationshipGroupHighLimitRecordFormat48.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat50 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord51 = null;
    long long52 = relationshipGroupHighLimitRecordFormat50.getNextRecordReference(
        relationshipGroupRecord51);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord53 = relationshipGroupHighLimitRecordFormat50.newRecord();
    org.neo4j.internal.id.IdSequence idSequence55 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext56 = null;
    relationshipGroupHighLimitRecordFormat48.prepare(relationshipGroupRecord53, (int) (byte) 1,
        idSequence55, cursorContext56);
    long long58 = relationshipGroupHighLimitRecordFormat47.getNextRecordReference(
        relationshipGroupRecord53);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat59 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long60 = relationshipGroupHighLimitRecordFormat59.getMaxId();
    long long61 = relationshipGroupHighLimitRecordFormat59.getMaxId();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord62 = relationshipGroupHighLimitRecordFormat59.newRecord();
    org.neo4j.internal.id.IdSequence idSequence64 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext65 = null;
    relationshipGroupHighLimitRecordFormat47.prepare(relationshipGroupRecord62, 3, idSequence64,
        cursorContext65);
    long long67 = relationshipGroupHighLimitRecordFormat45.getNextRecordReference(
        relationshipGroupRecord62);
    org.neo4j.io.pagecache.PageCursor pageCursor68 = null;
    try {
      relationshipGroupHighLimitRecordFormat0.write(relationshipGroupRecord62, pageCursor68, 35,
          12);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord5);
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord13);
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1125899906842623L + "'",
        long18 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipGroupRecord19);
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1125899906842623L + "'",
        long22 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord26);
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
    org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1125899906842623L + "'",
        long33 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1125899906842623L + "'",
        long34 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipGroupRecord35);
    org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1125899906842623L + "'",
        long46 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1125899906842623L + "'",
        long49 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord53);
    org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-1L) + "'", long58 == (-1L));
    org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1125899906842623L + "'",
        long60 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1125899906842623L + "'",
        long61 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipGroupRecord62);
    org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-1L) + "'", long67 == (-1L));
  }

  @Test
  public void test1023() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1023");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord2 = propertyRecordFormat1.newRecord();
    long long3 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord2);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord6 = propertyRecordFormat5.newRecord();
    long long7 = propertyOneByteHeaderRecordFormat4.getNextRecordReference(propertyRecord6);
    long long8 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord6);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader9 = null;
    int int10 = propertyOneByteHeaderRecordFormat0.getRecordSize(storeHeader9);
    long long11 = propertyOneByteHeaderRecordFormat0.getMaxId();
    org.junit.Assert.assertNotNull(propertyRecord2);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord6);
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
    org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 48 + "'", int10 == 48);
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1125899906842623L + "'",
        long11 == 1125899906842623L);
  }

  @Test
  public void test1024() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1024");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat6 = v300_1.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat7 = v300_1.relationship();
    java.lang.String str8 = v300_1.name();
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_9 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.storageengine.api.format.Capability capability10 = null;
    boolean boolean11 = v310_9.hasCapability(capability10);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat12 = v310_9.labelToken();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType13 = null;
    boolean boolean14 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v310_9, capabilityType13);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat15 = v300_1.property();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat6);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat7);
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "high_limitV3_0_0" + "'", str8,
        "high_limitV3_0_0");
    org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat12);
    org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat15);
  }

  @Test
  public void test1025() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1025");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    int int1 = recordFormatDynamicRecordImpl0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord2 = recordFormatDynamicRecordImpl0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl3 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    int int6 = recordFormatDynamicRecordImpl3.getPageSize((int) (byte) 10, 50);
    boolean boolean7 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) (byte) 10);
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 12 + "'", int1 == 12);
    org.junit.Assert.assertNotNull(dynamicRecord2);
    org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
  }

  @Test
  public void test1026() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1026");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.FactoryHighLimitDefaultImpl factoryHighLimitDefaultImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.FactoryHighLimitDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats1 = factoryHighLimitDefaultImpl0.newInstance();
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_2 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_3 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat4 = v300_3.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat5 = v300_3.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType6 = null;
    boolean boolean7 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_2,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_3, capabilityType6);
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_8 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat9 = v310_8.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat10 = v310_8.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat11 = v310_8.labelToken();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType12 = null;
    boolean boolean13 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_3,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v310_8, capabilityType12);
    org.neo4j.storageengine.api.format.CapabilityType capabilityType14 = null;
    boolean boolean15 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        recordFormats1, (org.neo4j.kernel.impl.store.format.RecordFormats) v300_3,
        capabilityType14);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat16 = v300_3.labelToken();
    java.lang.String str17 = v300_3.name();
    int int18 = v300_3.generation();
    org.junit.Assert.assertNotNull(recordFormats1);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat4);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat5);
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat9);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat10);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat11);
    org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat16);
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "high_limitV3_0_0" + "'", str17,
        "high_limitV3_0_0");
    org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
  }

  @Test
  public void test1027() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1027");
    }
    io.github.onograph.internal.batchimport.EnterpriseBatchImporterFactory enterpriseBatchImporterFactory0 = new io.github.onograph.internal.batchimport.EnterpriseBatchImporterFactory();
    java.lang.String str1 = enterpriseBatchImporterFactory0.getName();
    org.neo4j.io.layout.DatabaseLayout databaseLayout2 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction3 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer4 = null;
    org.neo4j.internal.batchimport.Configuration configuration5 = null;
    org.neo4j.logging.internal.LogService logService6 = null;
    org.neo4j.internal.batchimport.staging.ExecutionMonitor executionMonitor7 = null;
    org.neo4j.internal.batchimport.AdditionalInitialIds additionalInitialIds8 = null;
    org.neo4j.configuration.Config config9 = null;
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_10 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.storageengine.api.format.Capability capability11 = null;
    boolean boolean12 = v310_10.hasCapability(capability11);
    int int13 = v310_10.generation();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat14 = v310_10.propertyKeyToken();
    java.lang.String str15 = v310_10.name();
    org.neo4j.internal.batchimport.ImportLogic.Monitor monitor16 = null;
    org.neo4j.scheduler.JobScheduler jobScheduler17 = null;
    org.neo4j.internal.batchimport.input.Collector collector18 = null;
    org.neo4j.storageengine.api.LogFilesInitializer logFilesInitializer19 = null;
    org.neo4j.internal.batchimport.IndexImporterFactory indexImporterFactory20 = null;
    org.neo4j.memory.MemoryTracker memoryTracker21 = null;
    try {
      org.neo4j.internal.batchimport.BatchImporter batchImporter22 = enterpriseBatchImporterFactory0.instantiate(
          databaseLayout2, fileSystemAbstraction3, pageCacheTracer4, configuration5, logService6,
          executionMonitor7, additionalInitialIds8, config9,
          (org.neo4j.kernel.impl.store.format.RecordFormats) v310_10, monitor16, jobScheduler17,
          collector18, logFilesInitializer19, indexImporterFactory20, memoryTracker21);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "restartable" + "'", str1, "restartable");
    org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat14);
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "high_limitV3_1_0" + "'", str15,
        "high_limitV3_1_0");
  }

  @Test
  public void test1028() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1028");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat1 = v300_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat2 = v300_0.node();
    java.lang.String str3 = v300_0.name();
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat1);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat2);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "high_limitV3_0_0" + "'", str3,
        "high_limitV3_0_0");
  }

  @Test
  public void test1029() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1029");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v310_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat2 = v310_0.propertyKeyToken();
    java.lang.String str3 = v310_0.name();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily4 = v310_0.getFormatFamily();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat2);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "high_limitV3_1_0" + "'", str3,
        "high_limitV3_1_0");
    org.junit.Assert.assertTrue(
        "'" + formatFamily4 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily4.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
  }

  @Test
  public void test1030() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1030");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod((-3L), 251L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
  }

  @Test
  public void test1031() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1031");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    int int1 = propertyRecordFormat0.getRecordHeaderSize();
    long long2 = propertyRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_3 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat4 = v310_3.relationship();
    java.lang.String str5 = v310_3.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat6 = v310_3.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat7 = v310_3.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat8 = v310_3.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat9 = v310_3.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat10 = v310_3.relationshipTypeToken();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat11 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long12 = propertyOneByteHeaderRecordFormat11.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat13 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat14 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord15 = propertyRecordFormat14.newRecord();
    long long16 = propertyOneByteHeaderRecordFormat13.getNextRecordReference(propertyRecord15);
    long long17 = propertyOneByteHeaderRecordFormat11.getNextRecordReference(propertyRecord15);
    boolean boolean18 = v310_3.equals((java.lang.Object) propertyRecord15);
    org.neo4j.io.pagecache.PageCursor pageCursor19 = null;
    try {
      propertyRecordFormat0.write(propertyRecord15, pageCursor19, (int) (short) -1, 30);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1125899906842623L + "'",
        long2 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "high_limitV3_1_0" + "'", str5,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat6);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat7);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat8);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat9);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat10);
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1125899906842623L + "'",
        long12 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord15);
    org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
  }

  @Test
  public void test1032() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1032");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod((-24L),
        (-98L));
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-2L) + "'", long2 == (-2L));
  }

  @Test
  public void test1033() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1033");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v306_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat2 = v306_0.schema();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat3 = v306_0.labelToken();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily4 = v306_0.getFormatFamily();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat5 = v306_0.property();
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_6 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.storageengine.api.format.Capability capability7 = null;
    boolean boolean8 = v310_6.hasCapability(capability7);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat9 = v310_6.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat10 = v310_6.node();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType11 = null;
    boolean boolean12 = v306_0.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v310_6, capabilityType11);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat13 = v310_6.node();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat2);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat3);
    org.junit.Assert.assertTrue(
        "'" + formatFamily4 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily4.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat5);
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat9);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat10);
    org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat13);
  }

  @Test
  public void test1034() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1034");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.FactoryHighLimitDefaultImpl factoryHighLimitDefaultImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.FactoryHighLimitDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats1 = factoryHighLimitDefaultImpl0.newInstance();
    java.lang.String str2 = factoryHighLimitDefaultImpl0.getName();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats3 = factoryHighLimitDefaultImpl0.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats4 = factoryHighLimitDefaultImpl0.newInstance();
    org.junit.Assert.assertNotNull(recordFormats1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_2_0" + "'", str2,
        "high_limitV3_2_0");
    org.junit.Assert.assertNotNull(recordFormats3);
    org.junit.Assert.assertNotNull(recordFormats4);
  }

  @Test
  public void test1035() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1035");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v306_0.relationship();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray2 = v306_0.capabilities();
    java.lang.String str3 = v306_0.introductionVersion();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat4 = v306_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat5 = v306_0.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat6 = v306_0.node();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(capabilityArray2);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "3.0.6" + "'", str3, "3.0.6");
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat4);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat5);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat6);
  }

  @Test
  public void test1036() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1036");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_2 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_3 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat4 = v300_3.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat5 = v300_3.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType6 = null;
    boolean boolean7 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_2,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_3, capabilityType6);
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_8 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat9 = v310_8.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat10 = v310_8.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat11 = v310_8.labelToken();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType12 = null;
    boolean boolean13 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_3,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v310_8, capabilityType12);
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily14 = v310_8.getFormatFamily();
    boolean boolean15 = relationshipHighLimitRecordFormat1.equals(
        (java.lang.Object) formatFamily14);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat4);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat5);
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat9);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat10);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat11);
    org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    org.junit.Assert.assertTrue(
        "'" + formatFamily14 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily14.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
  }

  @Test
  public void test1037() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1037");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    java.lang.String str1 = v306_0.storeVersion();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v306_0.labelToken();
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "vE.H.0b" + "'", str1, "vE.H.0b");
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
  }

  @Test
  public void test1038() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1038");
    }
    java.util.function.Function<org.neo4j.kernel.impl.store.StoreHeader, java.lang.Integer> storeHeaderFunction1 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.fixedRecordSize(
        (int) (short) -1);
    org.junit.Assert.assertNotNull(storeHeaderFunction1);
  }

  @Test
  public void test1039() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1039");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v310_0.relationship();
    java.lang.String str2 = v310_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat3 = v310_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat4 = v310_0.node();
    java.lang.String str5 = v310_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat6 = v310_0.propertyKeyToken();
    java.lang.String str7 = v310_0.toString();
    int int8 = v310_0.generation();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat9 = v310_0.node();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_1_0" + "'", str2,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat3);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "high_limitV3_1_0" + "'", str5,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat6);
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "RecordFormat:V310[vE.H.2]" + "'", str7,
        "RecordFormat:V310[vE.H.2]");
    org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat9);
  }

  @Test
  public void test1040() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1040");
    }
    java.util.function.Function<org.neo4j.kernel.impl.store.StoreHeader, java.lang.Integer> storeHeaderFunction1 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.fixedRecordSize(
        50);
    org.junit.Assert.assertNotNull(storeHeaderFunction1);
  }

  @Test
  public void test1041() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1041");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = recordFormatDynamicRecordImpl0.newRecord();
    int int9 = recordFormatDynamicRecordImpl0.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord10 = recordFormatDynamicRecordImpl0.newRecord();
    int int13 = recordFormatDynamicRecordImpl0.getPageSize((int) '4', (int) (short) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_14 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat15 = v320_14.relationship();
    boolean boolean16 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) v320_14);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat17 = v320_14.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat18 = v320_14.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat19 = v320_14.dynamic();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord6);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord10);
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat15);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat17);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat18);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat19);
  }

  @Test
  public void test1042() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1042");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    int int3 = relationshipGroupRecordFormat0.getPageSize((int) 'a', (int) (short) 100);
    long long4 = relationshipGroupRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord5 = relationshipGroupRecordFormat0.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord6 = relationshipGroupRecordFormat0.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord7 = relationshipGroupRecordFormat0.newRecord();
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1125899906842623L + "'",
        long4 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipGroupRecord5);
    org.junit.Assert.assertNotNull(relationshipGroupRecord6);
    org.junit.Assert.assertNotNull(relationshipGroupRecord7);
  }

  @Test
  public void test1043() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1043");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long1 = propertyOneByteHeaderRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord2 = propertyOneByteHeaderRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long4 = propertyOneByteHeaderRecordFormat3.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord5 = propertyOneByteHeaderRecordFormat3.newRecord();
    long long6 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord5);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader7 = null;
    int int8 = propertyOneByteHeaderRecordFormat0.getRecordSize(storeHeader7);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader9 = null;
    int int10 = propertyOneByteHeaderRecordFormat0.getRecordSize(storeHeader9);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat11 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord13 = propertyRecordFormat12.newRecord();
    long long14 = propertyOneByteHeaderRecordFormat11.getNextRecordReference(propertyRecord13);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader15 = null;
    int int16 = propertyOneByteHeaderRecordFormat11.getRecordSize(storeHeader15);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat17 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long18 = propertyOneByteHeaderRecordFormat17.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat19 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat20 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord21 = propertyRecordFormat20.newRecord();
    long long22 = propertyOneByteHeaderRecordFormat19.getNextRecordReference(propertyRecord21);
    long long23 = propertyOneByteHeaderRecordFormat17.getNextRecordReference(propertyRecord21);
    org.neo4j.internal.id.IdSequence idSequence25 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext26 = null;
    propertyOneByteHeaderRecordFormat11.prepare(propertyRecord21, 64, idSequence25,
        cursorContext26);
    org.neo4j.io.pagecache.PageCursor pageCursor28 = null;
    try {
      propertyOneByteHeaderRecordFormat0.write(propertyRecord21, pageCursor28, 128, 64);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord2);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1125899906842623L + "'",
        long4 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord5);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    org.junit.Assert.assertTrue("'" + int8 + "' != '" + 48 + "'", int8 == 48);
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 48 + "'", int10 == 48);
    org.junit.Assert.assertNotNull(propertyRecord13);
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    org.junit.Assert.assertTrue("'" + int16 + "' != '" + 48 + "'", int16 == 48);
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1125899906842623L + "'",
        long18 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord21);
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
  }

  @Test
  public void test1044() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1044");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v300_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat2 = v300_0.relationshipTypeToken();
    java.lang.String str3 = v300_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat4 = v300_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat5 = v300_0.node();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat2);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "high_limitV3_0_0" + "'", str3,
        "high_limitV3_0_0");
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat4);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat5);
  }

  @Test
  public void test1045() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1045");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord1 = null;
    long long2 = nodeRecordFormat0.getNextRecordReference(nodeRecord1);
    int int3 = nodeRecordFormat0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader4 = null;
    int int5 = nodeRecordFormat0.getRecordSize(storeHeader4);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader6 = null;
    int int7 = nodeRecordFormat0.getRecordSize(storeHeader6);
    int int10 = nodeRecordFormat0.getPageSize(100, (int) (byte) -1);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader11 = null;
    int int12 = nodeRecordFormat0.getRecordSize(storeHeader11);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 16 + "'", int12 == 16);
  }

  @Test
  public void test1046() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1046");
    }
    java.util.function.Function<org.neo4j.kernel.impl.store.StoreHeader, java.lang.Integer> storeHeaderFunction1 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.fixedRecordSize(
        50);
    org.junit.Assert.assertNotNull(storeHeaderFunction1);
  }

  @Test
  public void test1047() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1047");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 1);
    int int4 = nodeHighLimitRecordFormat1.getPageSize(48, (int) '#');
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord5 = nodeHighLimitRecordFormat1.newRecord();
    int int6 = nodeHighLimitRecordFormat1.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord8 = null;
    long long9 = nodeRecordFormat7.getNextRecordReference(nodeRecord8);
    int int10 = nodeRecordFormat7.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader11 = null;
    int int12 = nodeRecordFormat7.getRecordSize(storeHeader11);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat13 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord14 = null;
    long long15 = nodeRecordFormat13.getNextRecordReference(nodeRecord14);
    int int16 = nodeRecordFormat13.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader17 = null;
    int int18 = nodeRecordFormat13.getRecordSize(storeHeader17);
    int int21 = nodeRecordFormat13.getPageSize((int) '4', (int) (short) 1);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord22 = nodeRecordFormat13.newRecord();
    long long23 = nodeRecordFormat7.getNextRecordReference(nodeRecord22);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord24 = nodeRecordFormat7.newRecord();
    int int27 = nodeRecordFormat7.getPageSize((int) (short) 0, (int) (byte) -1);
    int int30 = nodeRecordFormat7.getPageSize(52, (int) (byte) 10);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat31 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord32 = null;
    long long33 = nodeRecordFormat31.getNextRecordReference(nodeRecord32);
    int int34 = nodeRecordFormat31.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader35 = null;
    int int36 = nodeRecordFormat31.getRecordSize(storeHeader35);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat37 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord38 = null;
    long long39 = nodeRecordFormat37.getNextRecordReference(nodeRecord38);
    int int40 = nodeRecordFormat37.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader41 = null;
    int int42 = nodeRecordFormat37.getRecordSize(storeHeader41);
    int int45 = nodeRecordFormat37.getPageSize((int) '4', (int) (short) 1);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord46 = nodeRecordFormat37.newRecord();
    long long47 = nodeRecordFormat31.getNextRecordReference(nodeRecord46);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord48 = nodeRecordFormat31.newRecord();
    long long49 = nodeRecordFormat7.getNextRecordReference(nodeRecord48);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord50 = nodeRecordFormat7.newRecord();
    org.neo4j.io.pagecache.PageCursor pageCursor51 = null;
    try {
      nodeHighLimitRecordFormat1.write(nodeRecord50, pageCursor51, 99, (int) 'a');
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
    org.junit.Assert.assertNotNull(nodeRecord5);
    org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 16 + "'", int12 == 16);
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
    org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16);
    org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
    org.junit.Assert.assertNotNull(nodeRecord22);
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
    org.junit.Assert.assertNotNull(nodeRecord24);
    org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    org.junit.Assert.assertTrue("'" + int30 + "' != '" + 50 + "'", int30 == 50);
    org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
    org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    org.junit.Assert.assertTrue("'" + int36 + "' != '" + 16 + "'", int36 == 16);
    org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
    org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    org.junit.Assert.assertTrue("'" + int42 + "' != '" + 16 + "'", int42 == 16);
    org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
    org.junit.Assert.assertNotNull(nodeRecord46);
    org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
    org.junit.Assert.assertNotNull(nodeRecord48);
    org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
    org.junit.Assert.assertNotNull(nodeRecord50);
  }

  @Test
  public void test1048() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1048");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod((-108L),
        139L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-97L) + "'", long2 == (-97L));
  }

  @Test
  public void test1049() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1049");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod((long) 10,
        99L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 107L + "'", long2 == 107L);
  }

  @Test
  public void test1050() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1050");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl6 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    int int9 = recordFormatDynamicRecordImpl6.getPageSize(24, 8);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl10 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean12 = recordFormatDynamicRecordImpl10.equals((java.lang.Object) 100.0f);
    int int15 = recordFormatDynamicRecordImpl10.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord16 = recordFormatDynamicRecordImpl10.newRecord();
    long long17 = recordFormatDynamicRecordImpl6.getNextRecordReference(dynamicRecord16);
    org.neo4j.internal.id.IdSequence idSequence19 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext20 = null;
    recordFormatDynamicRecordImpl0.prepare(dynamicRecord16, 10, idSequence19, cursorContext20);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader22 = null;
    try {
      int int23 = recordFormatDynamicRecordImpl0.getRecordSize(storeHeader22);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 24 + "'", int9 == 24);
    org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    org.junit.Assert.assertTrue("'" + int15 + "' != '" + 16 + "'", int15 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord16);
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
  }

  @Test
  public void test1051() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1051");
    }
    java.util.function.Function<org.neo4j.kernel.impl.store.StoreHeader, java.lang.Integer> storeHeaderFunction1 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.fixedRecordSize(
        1);
    org.junit.Assert.assertNotNull(storeHeaderFunction1);
  }

  @Test
  public void test1052() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1052");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    int int3 = relationshipGroupRecordFormat0.getPageSize((int) 'a', (int) (short) 100);
    long long4 = relationshipGroupRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord5 = relationshipGroupRecordFormat0.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord6 = relationshipGroupRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat8 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        0);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat9 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long10 = relationshipGroupHighLimitRecordFormat9.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat11 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord12 = null;
    long long13 = relationshipGroupHighLimitRecordFormat11.getNextRecordReference(
        relationshipGroupRecord12);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord14 = relationshipGroupHighLimitRecordFormat11.newRecord();
    org.neo4j.internal.id.IdSequence idSequence16 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext17 = null;
    relationshipGroupHighLimitRecordFormat9.prepare(relationshipGroupRecord14, (int) (byte) 1,
        idSequence16, cursorContext17);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat19 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long20 = relationshipGroupHighLimitRecordFormat19.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat21 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord22 = null;
    long long23 = relationshipGroupHighLimitRecordFormat21.getNextRecordReference(
        relationshipGroupRecord22);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord24 = relationshipGroupHighLimitRecordFormat21.newRecord();
    org.neo4j.internal.id.IdSequence idSequence26 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext27 = null;
    relationshipGroupHighLimitRecordFormat19.prepare(relationshipGroupRecord24, (int) (byte) 1,
        idSequence26, cursorContext27);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat29 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord30 = null;
    long long31 = relationshipGroupHighLimitRecordFormat29.getNextRecordReference(
        relationshipGroupRecord30);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord32 = relationshipGroupHighLimitRecordFormat29.newRecord();
    org.neo4j.internal.id.IdSequence idSequence34 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext35 = null;
    relationshipGroupHighLimitRecordFormat19.prepare(relationshipGroupRecord32, 0, idSequence34,
        cursorContext35);
    org.neo4j.internal.id.IdSequence idSequence38 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext39 = null;
    relationshipGroupHighLimitRecordFormat9.prepare(relationshipGroupRecord32, 128, idSequence38,
        cursorContext39);
    org.neo4j.internal.id.IdSequence idSequence42 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext43 = null;
    relationshipGroupHighLimitRecordFormat8.prepare(relationshipGroupRecord32, 16, idSequence42,
        cursorContext43);
    org.neo4j.internal.id.IdSequence idSequence46 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext47 = null;
    relationshipGroupRecordFormat0.prepare(relationshipGroupRecord32, 52, idSequence46,
        cursorContext47);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord49 = relationshipGroupRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat51 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        (int) (short) 10);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord52 = relationshipGroupHighLimitRecordFormat51.newRecord();
    org.neo4j.internal.id.IdSequence idSequence54 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext55 = null;
    relationshipGroupRecordFormat0.prepare(relationshipGroupRecord52, 12, idSequence54,
        cursorContext55);
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1125899906842623L + "'",
        long4 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipGroupRecord5);
    org.junit.Assert.assertNotNull(relationshipGroupRecord6);
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1125899906842623L + "'",
        long10 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord14);
    org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1125899906842623L + "'",
        long20 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord24);
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord32);
    org.junit.Assert.assertNotNull(relationshipGroupRecord49);
    org.junit.Assert.assertNotNull(relationshipGroupRecord52);
  }

  @Test
  public void test1053() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1053");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = propertyRecordFormat0.getRecordSize(storeHeader1);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader3 = null;
    int int4 = propertyRecordFormat0.getRecordSize(storeHeader3);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord5 = null;
    try {
      long long6 = propertyRecordFormat0.getNextRecordReference(propertyRecord5);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 48 + "'", int4 == 48);
  }

  @Test
  public void test1054() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1054");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        32);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord3 = relationshipRecordFormat2.newRecord();
    int int4 = relationshipRecordFormat2.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat6 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord7 = relationshipRecordFormat6.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord8 = relationshipRecordFormat6.newRecord();
    org.neo4j.internal.id.IdSequence idSequence10 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext11 = null;
    relationshipRecordFormat5.prepare(relationshipRecord8, 100, idSequence10, cursorContext11);
    long long13 = relationshipRecordFormat2.getNextRecordReference(relationshipRecord8);
    org.neo4j.internal.id.IdSequence idSequence15 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext16 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord8, (int) (byte) 1, idSequence15,
        cursorContext16);
    org.neo4j.io.pagecache.PageCursor pageCursor18 = null;
    try {
      boolean boolean19 = relationshipHighLimitRecordFormat1.isInUse(pageCursor18);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(relationshipRecord3);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord7);
    org.junit.Assert.assertNotNull(relationshipRecord8);
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
  }

  @Test
  public void test1055() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1055");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        32);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord3 = relationshipRecordFormat2.newRecord();
    int int4 = relationshipRecordFormat2.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat6 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord7 = relationshipRecordFormat6.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord8 = relationshipRecordFormat6.newRecord();
    org.neo4j.internal.id.IdSequence idSequence10 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext11 = null;
    relationshipRecordFormat5.prepare(relationshipRecord8, 100, idSequence10, cursorContext11);
    long long13 = relationshipRecordFormat2.getNextRecordReference(relationshipRecord8);
    org.neo4j.internal.id.IdSequence idSequence15 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext16 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord8, (int) (byte) 1, idSequence15,
        cursorContext16);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat19 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat20 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord21 = relationshipRecordFormat20.newRecord();
    long long22 = relationshipHighLimitRecordFormat19.getNextRecordReference(relationshipRecord21);
    org.neo4j.io.pagecache.PageCursor pageCursor23 = null;
    try {
      relationshipHighLimitRecordFormat1.write(relationshipRecord21, pageCursor23, 48,
          (int) (short) 0);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(relationshipRecord3);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord7);
    org.junit.Assert.assertNotNull(relationshipRecord8);
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord21);
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
  }

  @Test
  public void test1056() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1056");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.FactoryHighLimitDefaultImpl factoryHighLimitDefaultImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.FactoryHighLimitDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats1 = factoryHighLimitDefaultImpl0.newInstance();
    java.lang.String str2 = factoryHighLimitDefaultImpl0.getName();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats3 = factoryHighLimitDefaultImpl0.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats4 = factoryHighLimitDefaultImpl0.newInstance();
    java.lang.String str5 = factoryHighLimitDefaultImpl0.getName();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats6 = factoryHighLimitDefaultImpl0.newInstance();
    java.lang.String str7 = factoryHighLimitDefaultImpl0.getName();
    org.junit.Assert.assertNotNull(recordFormats1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_0_6" + "'", str2,
        "high_limitV3_0_6");
    org.junit.Assert.assertNotNull(recordFormats3);
    org.junit.Assert.assertNotNull(recordFormats4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "high_limitV3_0_6" + "'", str5,
        "high_limitV3_0_6");
    org.junit.Assert.assertNotNull(recordFormats6);
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "high_limitV3_0_6" + "'", str7,
        "high_limitV3_0_6");
  }

  @Test
  public void test1057() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1057");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v310_0.relationship();
    java.lang.String str2 = v310_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat3 = v310_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat4 = v310_0.node();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray5 = v310_0.capabilities();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat6 = v310_0.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat7 = v310_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat8 = v310_0.relationshipGroup();
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_9 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat10 = v320_9.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat11 = v320_9.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType12 = null;
    boolean boolean13 = v310_0.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v320_9, capabilityType12);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat14 = v310_0.propertyKeyToken();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_1_0" + "'", str2,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat3);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat4);
    org.junit.Assert.assertNotNull(capabilityArray5);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat6);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat7);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat8);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat10);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat11);
    org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat14);
  }

  @Test
  public void test1058() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1058");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v320_0.relationship();
    java.lang.String str2 = v320_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat3 = v320_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat4 = v320_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat5 = v320_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat6 = v320_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat7 = v320_0.relationshipGroup();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_2_0" + "'", str2,
        "high_limitV3_2_0");
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat3);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat4);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat5);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat6);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat7);
  }

  @Test
  public void test1059() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1059");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v306_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v306_0.labelToken();
    boolean boolean4 = v306_0.equals((java.lang.Object) 64);
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily5 = v306_0.getFormatFamily();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertTrue(
        "'" + formatFamily5 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily5.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
  }

  @Test
  public void test1060() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1060");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long1 = relationshipGroupHighLimitRecordFormat0.getMaxId();
    int int2 = relationshipGroupHighLimitRecordFormat0.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    int int6 = relationshipGroupRecordFormat3.getPageSize((int) 'a', (int) (short) 100);
    long long7 = relationshipGroupRecordFormat3.getMaxId();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord8 = relationshipGroupRecordFormat3.newRecord();
    org.neo4j.io.pagecache.PageCursor pageCursor9 = null;
    try {
      relationshipGroupHighLimitRecordFormat0.write(relationshipGroupRecord8, pageCursor9, 32,
          (int) ' ');
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1125899906842623L + "'",
        long7 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipGroupRecord8);
  }

  @Test
  public void test1061() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1061");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod(138L, 118L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 254L + "'", long2 == 254L);
  }

  @Test
  public void test1062() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1062");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v320_0.relationship();
    java.lang.String str2 = v320_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat3 = v320_0.relationshipGroup();
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_4 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat5 = v320_4.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat6 = v320_4.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat7 = v320_4.property();
    java.lang.String str8 = v320_4.name();
    java.lang.String str9 = v320_4.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat10 = v320_4.relationship();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType11 = null;
    boolean boolean12 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v320_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v320_4, capabilityType11);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat13 = v320_4.node();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_2_0" + "'", str2,
        "high_limitV3_2_0");
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat3);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat5);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat6);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat7);
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "high_limitV3_2_0" + "'", str8,
        "high_limitV3_2_0");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "high_limitV3_2_0" + "'", str9,
        "high_limitV3_2_0");
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat10);
    org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat13);
  }

  @Test
  public void test1063() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1063");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat1 = v320_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat2 = v320_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat3 = v320_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat4 = v320_0.relationship();
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat1);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat2);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat3);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat4);
  }

  @Test
  public void test1064() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1064");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    long long3 = recordFormatDynamicRecordImpl0.getMaxId();
    int int6 = recordFormatDynamicRecordImpl0.getPageSize(64, 48);
    int int9 = recordFormatDynamicRecordImpl0.getPageSize(10, (int) (short) 100);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl10 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean12 = recordFormatDynamicRecordImpl10.equals((java.lang.Object) 100.0f);
    int int15 = recordFormatDynamicRecordImpl10.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord16 = null;
    org.neo4j.internal.id.IdSequence idSequence18 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext19 = null;
    recordFormatDynamicRecordImpl10.prepare(dynamicRecord16, (int) (byte) -1, idSequence18,
        cursorContext19);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl21 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean23 = recordFormatDynamicRecordImpl21.equals((java.lang.Object) 100.0f);
    int int26 = recordFormatDynamicRecordImpl21.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord27 = recordFormatDynamicRecordImpl21.newRecord();
    long long28 = recordFormatDynamicRecordImpl10.getNextRecordReference(dynamicRecord27);
    org.neo4j.internal.id.IdSequence idSequence30 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext31 = null;
    recordFormatDynamicRecordImpl0.prepare(dynamicRecord27, (int) (short) 1, idSequence30,
        cursorContext31);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl33 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean35 = recordFormatDynamicRecordImpl33.equals((java.lang.Object) 100.0f);
    long long36 = recordFormatDynamicRecordImpl33.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl37 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean39 = recordFormatDynamicRecordImpl37.equals((java.lang.Object) 100.0f);
    int int42 = recordFormatDynamicRecordImpl37.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord43 = null;
    org.neo4j.internal.id.IdSequence idSequence45 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext46 = null;
    recordFormatDynamicRecordImpl37.prepare(dynamicRecord43, (int) (byte) -1, idSequence45,
        cursorContext46);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl48 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean50 = recordFormatDynamicRecordImpl48.equals((java.lang.Object) 100.0f);
    int int53 = recordFormatDynamicRecordImpl48.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord54 = recordFormatDynamicRecordImpl48.newRecord();
    long long55 = recordFormatDynamicRecordImpl37.getNextRecordReference(dynamicRecord54);
    org.neo4j.internal.id.IdSequence idSequence57 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext58 = null;
    recordFormatDynamicRecordImpl33.prepare(dynamicRecord54, (int) (short) 10, idSequence57,
        cursorContext58);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl60 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean62 = recordFormatDynamicRecordImpl60.equals((java.lang.Object) 100.0f);
    long long63 = recordFormatDynamicRecordImpl60.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl64 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean66 = recordFormatDynamicRecordImpl64.equals((java.lang.Object) 100.0f);
    int int69 = recordFormatDynamicRecordImpl64.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord70 = null;
    org.neo4j.internal.id.IdSequence idSequence72 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext73 = null;
    recordFormatDynamicRecordImpl64.prepare(dynamicRecord70, (int) (byte) -1, idSequence72,
        cursorContext73);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl75 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean77 = recordFormatDynamicRecordImpl75.equals((java.lang.Object) 100.0f);
    int int80 = recordFormatDynamicRecordImpl75.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord81 = recordFormatDynamicRecordImpl75.newRecord();
    long long82 = recordFormatDynamicRecordImpl64.getNextRecordReference(dynamicRecord81);
    org.neo4j.internal.id.IdSequence idSequence84 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext85 = null;
    recordFormatDynamicRecordImpl60.prepare(dynamicRecord81, (int) (short) 10, idSequence84,
        cursorContext85);
    long long87 = recordFormatDynamicRecordImpl33.getNextRecordReference(dynamicRecord81);
    long long88 = recordFormatDynamicRecordImpl0.getNextRecordReference(dynamicRecord81);
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1125899906842623L + "'",
        long3 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int6 + "' != '" + 48 + "'", int6 == 48);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    org.junit.Assert.assertTrue("'" + int15 + "' != '" + 16 + "'", int15 == 16);
    org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    org.junit.Assert.assertTrue("'" + int26 + "' != '" + 16 + "'", int26 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord27);
    org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1125899906842623L + "'",
        long36 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    org.junit.Assert.assertTrue("'" + int42 + "' != '" + 16 + "'", int42 == 16);
    org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    org.junit.Assert.assertTrue("'" + int53 + "' != '" + 16 + "'", int53 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord54);
    org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1125899906842623L + "'",
        long63 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    org.junit.Assert.assertTrue("'" + int69 + "' != '" + 16 + "'", int69 == 16);
    org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    org.junit.Assert.assertTrue("'" + int80 + "' != '" + 16 + "'", int80 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord81);
    org.junit.Assert.assertTrue("'" + long82 + "' != '" + (-1L) + "'", long82 == (-1L));
    org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-1L) + "'", long87 == (-1L));
    org.junit.Assert.assertTrue("'" + long88 + "' != '" + (-1L) + "'", long88 == (-1L));
  }

  @Test
  public void test1065() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1065");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = relationshipGroupRecordFormat0.getRecordSize(storeHeader1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long4 = relationshipGroupHighLimitRecordFormat3.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord6 = null;
    long long7 = relationshipGroupHighLimitRecordFormat5.getNextRecordReference(
        relationshipGroupRecord6);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord8 = relationshipGroupHighLimitRecordFormat5.newRecord();
    org.neo4j.internal.id.IdSequence idSequence10 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext11 = null;
    relationshipGroupHighLimitRecordFormat3.prepare(relationshipGroupRecord8, (int) (byte) 1,
        idSequence10, cursorContext11);
    org.neo4j.internal.id.IdSequence idSequence14 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext15 = null;
    relationshipGroupRecordFormat0.prepare(relationshipGroupRecord8, 0, idSequence14,
        cursorContext15);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader17 = null;
    int int18 = relationshipGroupRecordFormat0.getRecordSize(storeHeader17);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord19 = relationshipGroupRecordFormat0.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord20 = relationshipGroupRecordFormat0.newRecord();
    try {
      int int23 = relationshipGroupRecordFormat0.getPageSize(1, 0);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.ArithmeticException; message: / by zero");
    } catch (java.lang.ArithmeticException e) {
    }
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 32 + "'", int2 == 32);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1125899906842623L + "'",
        long4 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord8);
    org.junit.Assert.assertTrue("'" + int18 + "' != '" + 32 + "'", int18 == 32);
    org.junit.Assert.assertNotNull(relationshipGroupRecord19);
    org.junit.Assert.assertNotNull(relationshipGroupRecord20);
  }

  @Test
  public void test1066() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1066");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    int int3 = relationshipGroupRecordFormat0.getPageSize((int) 'a', (int) (short) 100);
    int int6 = relationshipGroupRecordFormat0.getPageSize(0, 100);
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
  }

  @Test
  public void test1067() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1067");
    }
    java.util.function.Function<org.neo4j.kernel.impl.store.StoreHeader, java.lang.Integer> storeHeaderFunction1 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.fixedRecordSize(
        24);
    org.junit.Assert.assertNotNull(storeHeaderFunction1);
  }

  @Test
  public void test1068() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1068");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.FactoryHighLimitRecordFormatsImpl factoryHighLimitRecordFormatsImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.FactoryHighLimitRecordFormatsImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats1 = factoryHighLimitRecordFormatsImpl0.newInstance();
    java.lang.String str2 = factoryHighLimitRecordFormatsImpl0.getName();
    java.lang.String str3 = factoryHighLimitRecordFormatsImpl0.getName();
    org.junit.Assert.assertNotNull(recordFormats1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limit" + "'", str2, "high_limit");
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "high_limit" + "'", str3, "high_limit");
  }

  @Test
  public void test1069() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1069");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.FactoryHighLimitDefaultImpl factoryHighLimitDefaultImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.FactoryHighLimitDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats1 = factoryHighLimitDefaultImpl0.newInstance();
    java.lang.String str2 = factoryHighLimitDefaultImpl0.getName();
    java.lang.String str3 = factoryHighLimitDefaultImpl0.getName();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats4 = factoryHighLimitDefaultImpl0.newInstance();
    java.lang.String str5 = factoryHighLimitDefaultImpl0.getName();
    java.lang.String str6 = factoryHighLimitDefaultImpl0.getName();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats7 = factoryHighLimitDefaultImpl0.newInstance();
    org.junit.Assert.assertNotNull(recordFormats1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_4_0" + "'", str2,
        "high_limitV3_4_0");
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "high_limitV3_4_0" + "'", str3,
        "high_limitV3_4_0");
    org.junit.Assert.assertNotNull(recordFormats4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "high_limitV3_4_0" + "'", str5,
        "high_limitV3_4_0");
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "high_limitV3_4_0" + "'", str6,
        "high_limitV3_4_0");
    org.junit.Assert.assertNotNull(recordFormats7);
  }

  @Test
  public void test1070() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1070");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord1 = null;
    org.neo4j.internal.id.IdSequence idSequence3 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext4 = null;
    propertyRecordFormat0.prepare(propertyRecord1, (int) (short) -1, idSequence3, cursorContext4);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord6 = propertyRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat8 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord9 = propertyRecordFormat8.newRecord();
    long long10 = propertyOneByteHeaderRecordFormat7.getNextRecordReference(propertyRecord9);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader11 = null;
    int int12 = propertyOneByteHeaderRecordFormat7.getRecordSize(storeHeader11);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat13 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long14 = propertyOneByteHeaderRecordFormat13.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat16 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord17 = propertyRecordFormat16.newRecord();
    long long18 = propertyOneByteHeaderRecordFormat15.getNextRecordReference(propertyRecord17);
    long long19 = propertyOneByteHeaderRecordFormat13.getNextRecordReference(propertyRecord17);
    org.neo4j.internal.id.IdSequence idSequence21 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext22 = null;
    propertyOneByteHeaderRecordFormat7.prepare(propertyRecord17, 64, idSequence21, cursorContext22);
    long long24 = propertyRecordFormat0.getNextRecordReference(propertyRecord17);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat25 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader26 = null;
    int int27 = propertyRecordFormat25.getRecordSize(storeHeader26);
    long long28 = propertyRecordFormat25.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum highLimitEncEnum29 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8;
    boolean boolean30 = propertyRecordFormat25.equals((java.lang.Object) highLimitEncEnum29);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord31 = null;
    org.neo4j.internal.id.IdSequence idSequence33 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext34 = null;
    propertyRecordFormat25.prepare(propertyRecord31, 128, idSequence33, cursorContext34);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat36 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat37 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord38 = propertyRecordFormat37.newRecord();
    long long39 = propertyOneByteHeaderRecordFormat36.getNextRecordReference(propertyRecord38);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat40 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat41 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord42 = propertyRecordFormat41.newRecord();
    long long43 = propertyOneByteHeaderRecordFormat40.getNextRecordReference(propertyRecord42);
    long long44 = propertyOneByteHeaderRecordFormat36.getNextRecordReference(propertyRecord42);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat45 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long46 = propertyOneByteHeaderRecordFormat45.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord47 = propertyOneByteHeaderRecordFormat45.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat48 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long49 = propertyOneByteHeaderRecordFormat48.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord50 = propertyOneByteHeaderRecordFormat48.newRecord();
    long long51 = propertyOneByteHeaderRecordFormat45.getNextRecordReference(propertyRecord50);
    org.neo4j.internal.id.IdSequence idSequence53 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext54 = null;
    propertyOneByteHeaderRecordFormat36.prepare(propertyRecord50, (int) (byte) -1, idSequence53,
        cursorContext54);
    long long56 = propertyRecordFormat25.getNextRecordReference(propertyRecord50);
    long long57 = propertyRecordFormat0.getNextRecordReference(propertyRecord50);
    long long58 = propertyRecordFormat0.getMaxId();
    org.junit.Assert.assertNotNull(propertyRecord6);
    org.junit.Assert.assertNotNull(propertyRecord9);
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 48 + "'", int12 == 48);
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1125899906842623L + "'",
        long14 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord17);
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
    org.junit.Assert.assertTrue("'" + int27 + "' != '" + 48 + "'", int27 == 48);
    org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1125899906842623L + "'",
        long28 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + highLimitEncEnum29 + "' != '"
            + io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8 + "'",
        highLimitEncEnum29.equals(
            io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8));
    org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    org.junit.Assert.assertNotNull(propertyRecord38);
    org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord42);
    org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
    org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
    org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1125899906842623L + "'",
        long46 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord47);
    org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1125899906842623L + "'",
        long49 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord50);
    org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
    org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-1L) + "'", long56 == (-1L));
    org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
    org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1125899906842623L + "'",
        long58 == 1125899906842623L);
  }

  @Test
  public void test1071() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1071");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat1 = v306_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat2 = v306_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat3 = v306_0.node();
    java.lang.String str4 = v306_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.MetaDataRecord> metaDataRecordRecordFormat5 = v306_0.metaData();
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_6 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat7 = v310_6.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat8 = v310_6.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat9 = v310_6.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat10 = v310_6.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat11 = v310_6.propertyKeyToken();
    boolean boolean12 = v306_0.equals((java.lang.Object) propertyKeyTokenRecordRecordFormat11);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat13 = v306_0.relationship();
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat1);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat2);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "high_limitV3_0_6" + "'", str4,
        "high_limitV3_0_6");
    org.junit.Assert.assertNotNull(metaDataRecordRecordFormat5);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat7);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat8);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat9);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat10);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat11);
    org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat13);
  }

  @Test
  public void test1072() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1072");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v310_0.relationship();
    java.lang.String str2 = v310_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat3 = v310_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat4 = v310_0.node();
    java.lang.String str5 = v310_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat6 = v310_0.propertyKeyToken();
    java.lang.String str7 = v310_0.toString();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat8 = v310_0.propertyKeyToken();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_1_0" + "'", str2,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat3);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "high_limitV3_1_0" + "'", str5,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat6);
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "RecordFormat:V310[vE.H.2]" + "'", str7,
        "RecordFormat:V310[vE.H.2]");
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat8);
  }

  @Test
  public void test1073() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1073");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (byte) 1);
    long long2 = nodeHighLimitRecordFormat1.getMaxId();
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1125899906842623L + "'",
        long2 == 1125899906842623L);
  }

  @Test
  public void test1074() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1074");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v300_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat2 = v300_0.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat3 = v300_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.MetaDataRecord> metaDataRecordRecordFormat4 = v300_0.metaData();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat5 = v300_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.MetaDataRecord> metaDataRecordRecordFormat6 = v300_0.metaData();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat3);
    org.junit.Assert.assertNotNull(metaDataRecordRecordFormat4);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat5);
    org.junit.Assert.assertNotNull(metaDataRecordRecordFormat6);
  }

  @Test
  public void test1075() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1075");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        0);
    long long2 = relationshipGroupHighLimitRecordFormat1.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long4 = relationshipGroupHighLimitRecordFormat3.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord6 = null;
    long long7 = relationshipGroupHighLimitRecordFormat5.getNextRecordReference(
        relationshipGroupRecord6);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord8 = relationshipGroupHighLimitRecordFormat5.newRecord();
    org.neo4j.internal.id.IdSequence idSequence10 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext11 = null;
    relationshipGroupHighLimitRecordFormat3.prepare(relationshipGroupRecord8, 0, idSequence10,
        cursorContext11);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl13 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean15 = recordFormatDynamicRecordImpl13.equals((java.lang.Object) 100.0f);
    int int18 = recordFormatDynamicRecordImpl13.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord19 = recordFormatDynamicRecordImpl13.newRecord();
    boolean boolean20 = relationshipGroupHighLimitRecordFormat3.equals(
        (java.lang.Object) recordFormatDynamicRecordImpl13);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat21 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader22 = null;
    int int23 = relationshipGroupRecordFormat21.getRecordSize(storeHeader22);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord24 = relationshipGroupRecordFormat21.newRecord();
    org.neo4j.internal.id.IdSequence idSequence26 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext27 = null;
    relationshipGroupHighLimitRecordFormat3.prepare(relationshipGroupRecord24, (int) (short) 0,
        idSequence26, cursorContext27);
    org.neo4j.internal.id.IdSequence idSequence30 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext31 = null;
    relationshipGroupHighLimitRecordFormat1.prepare(relationshipGroupRecord24, (int) '4',
        idSequence30, cursorContext31);
    int int33 = relationshipGroupHighLimitRecordFormat1.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat34 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long35 = relationshipGroupHighLimitRecordFormat34.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat36 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord37 = null;
    long long38 = relationshipGroupHighLimitRecordFormat36.getNextRecordReference(
        relationshipGroupRecord37);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord39 = relationshipGroupHighLimitRecordFormat36.newRecord();
    org.neo4j.internal.id.IdSequence idSequence41 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext42 = null;
    relationshipGroupHighLimitRecordFormat34.prepare(relationshipGroupRecord39, (int) (byte) 1,
        idSequence41, cursorContext42);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat44 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long45 = relationshipGroupHighLimitRecordFormat44.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat46 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord47 = null;
    long long48 = relationshipGroupHighLimitRecordFormat46.getNextRecordReference(
        relationshipGroupRecord47);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord49 = relationshipGroupHighLimitRecordFormat46.newRecord();
    org.neo4j.internal.id.IdSequence idSequence51 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext52 = null;
    relationshipGroupHighLimitRecordFormat44.prepare(relationshipGroupRecord49, (int) (byte) 1,
        idSequence51, cursorContext52);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat54 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord55 = null;
    long long56 = relationshipGroupHighLimitRecordFormat54.getNextRecordReference(
        relationshipGroupRecord55);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord57 = relationshipGroupHighLimitRecordFormat54.newRecord();
    org.neo4j.internal.id.IdSequence idSequence59 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext60 = null;
    relationshipGroupHighLimitRecordFormat44.prepare(relationshipGroupRecord57, 0, idSequence59,
        cursorContext60);
    org.neo4j.internal.id.IdSequence idSequence63 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext64 = null;
    relationshipGroupHighLimitRecordFormat34.prepare(relationshipGroupRecord57, 128, idSequence63,
        cursorContext64);
    org.neo4j.io.pagecache.PageCursor pageCursor66 = null;
    try {
      relationshipGroupHighLimitRecordFormat1.write(relationshipGroupRecord57, pageCursor66, 10,
          (int) 'a');
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1125899906842623L + "'",
        long2 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1125899906842623L + "'",
        long4 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord8);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord19);
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    org.junit.Assert.assertTrue("'" + int23 + "' != '" + 32 + "'", int23 == 32);
    org.junit.Assert.assertNotNull(relationshipGroupRecord24);
    org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1125899906842623L + "'",
        long35 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord39);
    org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1125899906842623L + "'",
        long45 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord49);
    org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-1L) + "'", long56 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord57);
  }

  @Test
  public void test1076() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1076");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    int int3 = recordFormatDynamicRecordImpl0.getPageSize(24, 8);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl4 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean6 = recordFormatDynamicRecordImpl4.equals((java.lang.Object) 100.0f);
    int int9 = recordFormatDynamicRecordImpl4.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord10 = recordFormatDynamicRecordImpl4.newRecord();
    long long11 = recordFormatDynamicRecordImpl0.getNextRecordReference(dynamicRecord10);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl12 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean14 = recordFormatDynamicRecordImpl12.equals((java.lang.Object) 100.0f);
    int int17 = recordFormatDynamicRecordImpl12.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord18 = recordFormatDynamicRecordImpl12.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl19 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean21 = recordFormatDynamicRecordImpl19.equals((java.lang.Object) 100.0f);
    int int24 = recordFormatDynamicRecordImpl19.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord25 = recordFormatDynamicRecordImpl19.newRecord();
    long long26 = recordFormatDynamicRecordImpl12.getNextRecordReference(dynamicRecord25);
    long long27 = recordFormatDynamicRecordImpl0.getNextRecordReference(dynamicRecord25);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl28 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean30 = recordFormatDynamicRecordImpl28.equals((java.lang.Object) 100.0f);
    int int33 = recordFormatDynamicRecordImpl28.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord34 = recordFormatDynamicRecordImpl28.newRecord();
    int int37 = recordFormatDynamicRecordImpl28.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord38 = recordFormatDynamicRecordImpl28.newRecord();
    org.neo4j.io.pagecache.PageCursor pageCursor39 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad40 = null;
    try {
      recordFormatDynamicRecordImpl0.read(dynamicRecord38, pageCursor39, recordLoad40, 128,
          (int) (short) 1);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 24 + "'", int3 == 24);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16 + "'", int9 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord10);
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    org.junit.Assert.assertTrue("'" + int17 + "' != '" + 16 + "'", int17 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord18);
    org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    org.junit.Assert.assertTrue("'" + int24 + "' != '" + 16 + "'", int24 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord25);
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
    org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    org.junit.Assert.assertTrue("'" + int33 + "' != '" + 16 + "'", int33 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord34);
    org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord38);
  }

  @Test
  public void test1077() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1077");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord2 = relationshipRecordFormat1.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord3 = relationshipRecordFormat1.newRecord();
    org.neo4j.internal.id.IdSequence idSequence5 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext6 = null;
    relationshipRecordFormat0.prepare(relationshipRecord3, 100, idSequence5, cursorContext6);
    long long8 = relationshipRecordFormat0.getMaxId();
    long long9 = relationshipRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat10 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord11 = relationshipRecordFormat10.newRecord();
    int int12 = relationshipRecordFormat10.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat13 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat14 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord15 = relationshipRecordFormat14.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord16 = relationshipRecordFormat14.newRecord();
    org.neo4j.internal.id.IdSequence idSequence18 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext19 = null;
    relationshipRecordFormat13.prepare(relationshipRecord16, 100, idSequence18, cursorContext19);
    long long21 = relationshipRecordFormat10.getNextRecordReference(relationshipRecord16);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat22 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat23 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord24 = relationshipRecordFormat23.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord25 = relationshipRecordFormat23.newRecord();
    org.neo4j.internal.id.IdSequence idSequence27 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext28 = null;
    relationshipRecordFormat22.prepare(relationshipRecord25, 100, idSequence27, cursorContext28);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat31 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord32 = relationshipHighLimitRecordFormat31.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat34 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord35 = relationshipHighLimitRecordFormat34.newRecord();
    org.neo4j.internal.id.IdSequence idSequence37 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext38 = null;
    relationshipHighLimitRecordFormat31.prepare(relationshipRecord35, (int) (short) 1, idSequence37,
        cursorContext38);
    org.neo4j.internal.id.IdSequence idSequence41 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext42 = null;
    relationshipRecordFormat22.prepare(relationshipRecord35, 24, idSequence41, cursorContext42);
    long long44 = relationshipRecordFormat10.getNextRecordReference(relationshipRecord35);
    org.neo4j.internal.id.IdSequence idSequence46 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext47 = null;
    relationshipRecordFormat0.prepare(relationshipRecord35, 128, idSequence46, cursorContext47);
    org.neo4j.io.pagecache.PageCursor pageCursor49 = null;
    try {
      boolean boolean50 = relationshipRecordFormat0.isInUse(pageCursor49);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(relationshipRecord2);
    org.junit.Assert.assertNotNull(relationshipRecord3);
    org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1125899906842623L + "'",
        long8 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1125899906842623L + "'",
        long9 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipRecord11);
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord15);
    org.junit.Assert.assertNotNull(relationshipRecord16);
    org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord24);
    org.junit.Assert.assertNotNull(relationshipRecord25);
    org.junit.Assert.assertNotNull(relationshipRecord32);
    org.junit.Assert.assertNotNull(relationshipRecord35);
    org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
  }

  @Test
  public void test1078() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1078");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord1 = null;
    long long2 = nodeRecordFormat0.getNextRecordReference(nodeRecord1);
    int int3 = nodeRecordFormat0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader4 = null;
    int int5 = nodeRecordFormat0.getRecordSize(storeHeader4);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord6 = nodeRecordFormat0.newRecord();
    int int9 = nodeRecordFormat0.getPageSize((int) (short) 0, 4);
    long long10 = nodeRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader11 = null;
    int int12 = nodeRecordFormat0.getRecordSize(storeHeader11);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(nodeRecord6);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1125899906842623L + "'",
        long10 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 16 + "'", int12 == 16);
  }

  @Test
  public void test1079() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1079");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long1 = relationshipGroupHighLimitRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord3 = null;
    long long4 = relationshipGroupHighLimitRecordFormat2.getNextRecordReference(
        relationshipGroupRecord3);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord5 = relationshipGroupHighLimitRecordFormat2.newRecord();
    org.neo4j.internal.id.IdSequence idSequence7 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext8 = null;
    relationshipGroupHighLimitRecordFormat0.prepare(relationshipGroupRecord5, (int) (byte) 1,
        idSequence7, cursorContext8);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat10 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord11 = null;
    long long12 = relationshipGroupHighLimitRecordFormat10.getNextRecordReference(
        relationshipGroupRecord11);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord13 = relationshipGroupHighLimitRecordFormat10.newRecord();
    org.neo4j.internal.id.IdSequence idSequence15 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext16 = null;
    relationshipGroupHighLimitRecordFormat0.prepare(relationshipGroupRecord13, 0, idSequence15,
        cursorContext16);
    long long18 = relationshipGroupHighLimitRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord19 = relationshipGroupHighLimitRecordFormat0.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord20 = relationshipGroupHighLimitRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat21 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord22 = relationshipRecordFormat21.newRecord();
    int int23 = relationshipRecordFormat21.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat24 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat25 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord26 = relationshipRecordFormat25.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord27 = relationshipRecordFormat25.newRecord();
    org.neo4j.internal.id.IdSequence idSequence29 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext30 = null;
    relationshipRecordFormat24.prepare(relationshipRecord27, 100, idSequence29, cursorContext30);
    long long32 = relationshipRecordFormat21.getNextRecordReference(relationshipRecord27);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat33 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord34 = relationshipRecordFormat33.newRecord();
    int int35 = relationshipRecordFormat33.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat36 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat37 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord38 = relationshipRecordFormat37.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord39 = relationshipRecordFormat37.newRecord();
    org.neo4j.internal.id.IdSequence idSequence41 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext42 = null;
    relationshipRecordFormat36.prepare(relationshipRecord39, 100, idSequence41, cursorContext42);
    long long44 = relationshipRecordFormat33.getNextRecordReference(relationshipRecord39);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat45 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat46 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord47 = relationshipRecordFormat46.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord48 = relationshipRecordFormat46.newRecord();
    org.neo4j.internal.id.IdSequence idSequence50 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext51 = null;
    relationshipRecordFormat45.prepare(relationshipRecord48, 100, idSequence50, cursorContext51);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat54 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord55 = relationshipHighLimitRecordFormat54.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat57 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord58 = relationshipHighLimitRecordFormat57.newRecord();
    org.neo4j.internal.id.IdSequence idSequence60 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext61 = null;
    relationshipHighLimitRecordFormat54.prepare(relationshipRecord58, (int) (short) 1, idSequence60,
        cursorContext61);
    org.neo4j.internal.id.IdSequence idSequence64 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext65 = null;
    relationshipRecordFormat45.prepare(relationshipRecord58, 24, idSequence64, cursorContext65);
    long long67 = relationshipRecordFormat33.getNextRecordReference(relationshipRecord58);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat69 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord70 = relationshipHighLimitRecordFormat69.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat72 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord73 = relationshipHighLimitRecordFormat72.newRecord();
    org.neo4j.internal.id.IdSequence idSequence75 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext76 = null;
    relationshipHighLimitRecordFormat69.prepare(relationshipRecord73, (int) (short) 1, idSequence75,
        cursorContext76);
    org.neo4j.internal.id.IdSequence idSequence79 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext80 = null;
    relationshipRecordFormat33.prepare(relationshipRecord73, 12, idSequence79, cursorContext80);
    org.neo4j.internal.id.IdSequence idSequence83 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext84 = null;
    relationshipRecordFormat21.prepare(relationshipRecord73, 8, idSequence83, cursorContext84);
    boolean boolean86 = relationshipGroupHighLimitRecordFormat0.equals(
        (java.lang.Object) idSequence83);
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord5);
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord13);
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1125899906842623L + "'",
        long18 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipGroupRecord19);
    org.junit.Assert.assertNotNull(relationshipGroupRecord20);
    org.junit.Assert.assertNotNull(relationshipRecord22);
    org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord26);
    org.junit.Assert.assertNotNull(relationshipRecord27);
    org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord34);
    org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord38);
    org.junit.Assert.assertNotNull(relationshipRecord39);
    org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord47);
    org.junit.Assert.assertNotNull(relationshipRecord48);
    org.junit.Assert.assertNotNull(relationshipRecord55);
    org.junit.Assert.assertNotNull(relationshipRecord58);
    org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-1L) + "'", long67 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord70);
    org.junit.Assert.assertNotNull(relationshipRecord73);
    org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
  }

  @Test
  public void test1080() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1080");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long2 = propertyOneByteHeaderRecordFormat1.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord5 = propertyRecordFormat4.newRecord();
    long long6 = propertyOneByteHeaderRecordFormat3.getNextRecordReference(propertyRecord5);
    long long7 = propertyOneByteHeaderRecordFormat1.getNextRecordReference(propertyRecord5);
    org.neo4j.io.pagecache.PageCursor pageCursor8 = null;
    try {
      propertyRecordFormat0.write(propertyRecord5, pageCursor8, 4, (int) (short) -1);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1125899906842623L + "'",
        long2 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord5);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
  }

  @Test
  public void test1081() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1081");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = null;
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    recordFormatDynamicRecordImpl0.prepare(dynamicRecord6, (int) (byte) -1, idSequence8,
        cursorContext9);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord11 = recordFormatDynamicRecordImpl0.newRecord();
    int int14 = recordFormatDynamicRecordImpl0.getPageSize(96, 16);
    int int15 = recordFormatDynamicRecordImpl0.getRecordHeaderSize();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord11);
    org.junit.Assert.assertTrue("'" + int14 + "' != '" + 96 + "'", int14 == 96);
    org.junit.Assert.assertTrue("'" + int15 + "' != '" + 12 + "'", int15 == 12);
  }

  @Test
  public void test1082() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1082");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.storageengine.api.format.Capability capability1 = null;
    boolean boolean2 = v310_0.hasCapability(capability1);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat3 = v310_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats4 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitRecordFormats.RCD_FMXS;
    org.neo4j.storageengine.api.format.CapabilityType capabilityType5 = null;
    boolean boolean6 = v310_0.hasCompatibleCapabilities(recordFormats4, capabilityType5);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat7 = v310_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat8 = v310_0.dynamic();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat3);
    org.junit.Assert.assertNotNull(recordFormats4);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat7);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat8);
  }

  @Test
  public void test1083() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1083");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord2 = relationshipHighLimitRecordFormat1.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord5 = relationshipHighLimitRecordFormat4.newRecord();
    org.neo4j.internal.id.IdSequence idSequence7 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext8 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord5, (int) (short) 1, idSequence7,
        cursorContext8);
    int int10 = relationshipHighLimitRecordFormat1.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat11 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader12 = null;
    int int13 = relationshipRecordFormat11.getRecordSize(storeHeader12);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat16 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord17 = relationshipRecordFormat16.newRecord();
    long long18 = relationshipHighLimitRecordFormat15.getNextRecordReference(relationshipRecord17);
    org.neo4j.internal.id.IdSequence idSequence20 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext21 = null;
    relationshipRecordFormat11.prepare(relationshipRecord17, 3, idSequence20, cursorContext21);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord23 = relationshipRecordFormat11.newRecord();
    org.neo4j.internal.id.IdSequence idSequence25 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext26 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord23, (int) (byte) 10, idSequence25,
        cursorContext26);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader28 = null;
    int int29 = relationshipHighLimitRecordFormat1.getRecordSize(storeHeader28);
    org.junit.Assert.assertNotNull(relationshipRecord2);
    org.junit.Assert.assertNotNull(relationshipRecord5);
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 32 + "'", int13 == 32);
    org.junit.Assert.assertNotNull(relationshipRecord17);
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord23);
    org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
  }

  @Test
  public void test1084() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1084");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_6 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat7 = v306_6.node();
    org.neo4j.storageengine.api.format.Capability capability8 = null;
    boolean boolean9 = v306_6.hasCapability(capability8);
    org.neo4j.storageengine.api.format.CapabilityType capabilityType10 = null;
    boolean boolean11 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_6, capabilityType10);
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily12 = v300_1.getFormatFamily();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily13 = v300_1.getFormatFamily();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat7);
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    org.junit.Assert.assertTrue(
        "'" + formatFamily12 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily12.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertTrue(
        "'" + formatFamily13 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily13.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
  }

  @Test
  public void test1085() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1085");
    }
    org.neo4j.io.pagecache.PageCursor pageCursor1 = null;
    try {
      io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.enoForPa(117L,
          pageCursor1);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test1086() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1086");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    int int1 = relationshipRecordFormat0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord2 = relationshipRecordFormat0.newRecord();
    long long3 = relationshipRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        (-1));
    boolean boolean6 = relationshipRecordFormat0.equals(
        (java.lang.Object) relationshipGroupHighLimitRecordFormat5);
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord2);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1125899906842623L + "'",
        long3 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
  }

  @Test
  public void test1087() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1087");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v320_0.relationship();
    java.lang.String str2 = v320_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat3 = v320_0.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat4 = v320_0.relationshipGroup();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat5 = v320_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily6 = v320_0.getFormatFamily();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily7 = v320_0.getFormatFamily();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat8 = v320_0.labelToken();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_2_0" + "'", str2,
        "high_limitV3_2_0");
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat3);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat4);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat5);
    org.junit.Assert.assertTrue(
        "'" + formatFamily6 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily6.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertTrue(
        "'" + formatFamily7 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily7.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat8);
  }

  @Test
  public void test1088() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1088");
    }
    java.util.function.Function<org.neo4j.kernel.impl.store.StoreHeader, java.lang.Integer> storeHeaderFunction1 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.fixedRecordSize(
        48);
    org.junit.Assert.assertNotNull(storeHeaderFunction1);
  }

  @Test
  public void test1089() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1089");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        2);
    int int4 = relationshipGroupHighLimitRecordFormat1.getPageSize(96, 12);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 96 + "'", int4 == 96);
  }

  @Test
  public void test1090() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1090");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) ' ');
    long long2 = relationshipHighLimitRecordFormat1.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat6 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord8 = relationshipRecordFormat7.newRecord();
    long long9 = relationshipHighLimitRecordFormat6.getNextRecordReference(relationshipRecord8);
    org.neo4j.internal.id.IdSequence idSequence11 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext12 = null;
    relationshipHighLimitRecordFormat4.prepare(relationshipRecord8, (int) (byte) 10, idSequence11,
        cursorContext12);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord16 = relationshipHighLimitRecordFormat15.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat18 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord19 = relationshipHighLimitRecordFormat18.newRecord();
    org.neo4j.internal.id.IdSequence idSequence21 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext22 = null;
    relationshipHighLimitRecordFormat15.prepare(relationshipRecord19, (int) (short) 1, idSequence21,
        cursorContext22);
    long long24 = relationshipHighLimitRecordFormat4.getNextRecordReference(relationshipRecord19);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord25 = relationshipHighLimitRecordFormat4.newRecord();
    org.neo4j.io.pagecache.PageCursor pageCursor26 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad27 = null;
    try {
      relationshipHighLimitRecordFormat1.read(relationshipRecord25, pageCursor26, recordLoad27,
          (int) 'a', 35);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1125899906842623L + "'",
        long2 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipRecord8);
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord16);
    org.junit.Assert.assertNotNull(relationshipRecord19);
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord25);
  }

  @Test
  public void test1091() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1091");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat1 = v310_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat2 = v310_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat3 = v310_0.property();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat1);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat3);
  }

  @Test
  public void test1092() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1092");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat1 = v320_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat2 = v320_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat3 = v320_0.property();
    java.lang.String str4 = v320_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat5 = v320_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormats[] recordFormatsArray6 = v320_0.compatibleVersionsForRollingUpgrade();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat7 = v320_0.relationshipTypeToken();
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat1);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat2);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "high_limitV3_2_0" + "'", str4,
        "high_limitV3_2_0");
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat5);
    org.junit.Assert.assertNotNull(recordFormatsArray6);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat7);
  }

  @Test
  public void test1093() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1093");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_6 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat7 = v306_6.node();
    org.neo4j.storageengine.api.format.Capability capability8 = null;
    boolean boolean9 = v306_6.hasCapability(capability8);
    org.neo4j.storageengine.api.format.CapabilityType capabilityType10 = null;
    boolean boolean11 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_6, capabilityType10);
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily12 = v300_1.getFormatFamily();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat13 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat14 = v300_1.propertyKeyToken();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat7);
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    org.junit.Assert.assertTrue(
        "'" + formatFamily12 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily12.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat13);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat14);
  }

  @Test
  public void test1094() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1094");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    int int1 = relationshipRecordFormat0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord2 = relationshipRecordFormat0.newRecord();
    long long3 = relationshipRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) '4');
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord6 = relationshipHighLimitRecordFormat5.newRecord();
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    relationshipRecordFormat0.prepare(relationshipRecord6, (int) (byte) -1, idSequence8,
        cursorContext9);
    org.neo4j.io.pagecache.PageCursor pageCursor11 = null;
    try {
      boolean boolean12 = relationshipRecordFormat0.isInUse(pageCursor11);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord2);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1125899906842623L + "'",
        long3 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipRecord6);
  }

  @Test
  public void test1095() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1095");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = relationshipRecordFormat0.getRecordSize(storeHeader1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord5 = relationshipRecordFormat4.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord6 = relationshipRecordFormat4.newRecord();
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    relationshipRecordFormat3.prepare(relationshipRecord6, 100, idSequence8, cursorContext9);
    int int13 = relationshipRecordFormat3.getPageSize(0, 3);
    int int14 = relationshipRecordFormat3.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat16 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat18 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat19 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord20 = relationshipRecordFormat19.newRecord();
    long long21 = relationshipHighLimitRecordFormat18.getNextRecordReference(relationshipRecord20);
    org.neo4j.internal.id.IdSequence idSequence23 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext24 = null;
    relationshipHighLimitRecordFormat16.prepare(relationshipRecord20, (int) (byte) 10, idSequence23,
        cursorContext24);
    org.neo4j.internal.id.IdSequence idSequence27 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext28 = null;
    relationshipRecordFormat3.prepare(relationshipRecord20, 30, idSequence27, cursorContext28);
    org.neo4j.internal.id.IdSequence idSequence31 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext32 = null;
    relationshipRecordFormat0.prepare(relationshipRecord20, (int) '4', idSequence31,
        cursorContext32);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 32 + "'", int2 == 32);
    org.junit.Assert.assertNotNull(relationshipRecord5);
    org.junit.Assert.assertNotNull(relationshipRecord6);
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord20);
    org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
  }

  @Test
  public void test1096() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1096");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v300_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat2 = v300_0.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat3 = v300_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.MetaDataRecord> metaDataRecordRecordFormat4 = v300_0.metaData();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat5 = v300_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.MetaDataRecord> metaDataRecordRecordFormat6 = v300_0.metaData();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat3);
    org.junit.Assert.assertNotNull(metaDataRecordRecordFormat4);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat5);
    org.junit.Assert.assertNotNull(metaDataRecordRecordFormat6);
  }

  @Test
  public void test1097() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1097");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = recordFormatDynamicRecordImpl0.newRecord();
    int int9 = recordFormatDynamicRecordImpl0.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord10 = recordFormatDynamicRecordImpl0.newRecord();
    int int13 = recordFormatDynamicRecordImpl0.getPageSize((int) '4', (int) (short) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_14 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat15 = v320_14.relationship();
    boolean boolean16 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) v320_14);
    int int19 = recordFormatDynamicRecordImpl0.getPageSize(16, 8);
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_20 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat21 = v310_20.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat22 = v310_20.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat23 = v310_20.labelToken();
    boolean boolean24 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) v310_20);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat25 = v310_20.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat26 = v310_20.relationshipTypeToken();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord6);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord10);
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat15);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    org.junit.Assert.assertTrue("'" + int19 + "' != '" + 16 + "'", int19 == 16);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat21);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat22);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat23);
    org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat25);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat26);
  }

  @Test
  public void test1098() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1098");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord1 = propertyRecordFormat0.newRecord();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader2 = null;
    int int3 = propertyRecordFormat0.getRecordSize(storeHeader2);
    org.junit.Assert.assertNotNull(propertyRecord1);
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 48 + "'", int3 == 48);
  }

  @Test
  public void test1099() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1099");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord2 = relationshipRecordFormat1.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord3 = relationshipRecordFormat1.newRecord();
    org.neo4j.internal.id.IdSequence idSequence5 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext6 = null;
    relationshipRecordFormat0.prepare(relationshipRecord3, 100, idSequence5, cursorContext6);
    long long8 = relationshipRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat9 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader10 = null;
    int int11 = relationshipRecordFormat9.getRecordSize(storeHeader10);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat13 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat14 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord15 = relationshipRecordFormat14.newRecord();
    long long16 = relationshipHighLimitRecordFormat13.getNextRecordReference(relationshipRecord15);
    org.neo4j.internal.id.IdSequence idSequence18 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext19 = null;
    relationshipRecordFormat9.prepare(relationshipRecord15, 3, idSequence18, cursorContext19);
    long long21 = relationshipRecordFormat0.getNextRecordReference(relationshipRecord15);
    long long22 = relationshipRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_23 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat24 = v300_23.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat25 = v300_23.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat26 = v300_23.propertyKeyToken();
    boolean boolean27 = relationshipRecordFormat0.equals(
        (java.lang.Object) propertyKeyTokenRecordRecordFormat26);
    int int28 = relationshipRecordFormat0.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat29 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader30 = null;
    int int31 = relationshipRecordFormat29.getRecordSize(storeHeader30);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat33 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat34 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord35 = relationshipRecordFormat34.newRecord();
    long long36 = relationshipHighLimitRecordFormat33.getNextRecordReference(relationshipRecord35);
    org.neo4j.internal.id.IdSequence idSequence38 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext39 = null;
    relationshipRecordFormat29.prepare(relationshipRecord35, 3, idSequence38, cursorContext39);
    org.neo4j.internal.id.IdSequence idSequence42 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext43 = null;
    relationshipRecordFormat0.prepare(relationshipRecord35, 96, idSequence42, cursorContext43);
    org.junit.Assert.assertNotNull(relationshipRecord2);
    org.junit.Assert.assertNotNull(relationshipRecord3);
    org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1125899906842623L + "'",
        long8 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int11 + "' != '" + 32 + "'", int11 == 32);
    org.junit.Assert.assertNotNull(relationshipRecord15);
    org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1125899906842623L + "'",
        long22 == 1125899906842623L);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat24);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat25);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat26);
    org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    org.junit.Assert.assertTrue("'" + int31 + "' != '" + 32 + "'", int31 == 32);
    org.junit.Assert.assertNotNull(relationshipRecord35);
    org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
  }

  @Test
  public void test1100() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1100");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) '4');
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord6 = relationshipHighLimitRecordFormat5.newRecord();
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    relationshipHighLimitRecordFormat3.prepare(relationshipRecord6, (int) 'a', idSequence8,
        cursorContext9);
    org.neo4j.internal.id.IdSequence idSequence12 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext13 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord6, 10, idSequence12,
        cursorContext13);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat16 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat17 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord18 = relationshipRecordFormat17.newRecord();
    long long19 = relationshipHighLimitRecordFormat16.getNextRecordReference(relationshipRecord18);
    org.neo4j.internal.id.IdSequence idSequence21 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext22 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord18, 96, idSequence21,
        cursorContext22);
    int int26 = relationshipHighLimitRecordFormat1.getPageSize(16, (int) '#');
    org.junit.Assert.assertNotNull(relationshipRecord6);
    org.junit.Assert.assertNotNull(relationshipRecord18);
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
    org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
  }

  @Test
  public void test1101() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1101");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v310_0.relationship();
    java.lang.String str2 = v310_0.name();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray3 = v310_0.capabilities();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_1_0" + "'", str2,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(capabilityArray3);
  }

  @Test
  public void test1102() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1102");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long1 = propertyOneByteHeaderRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord4 = propertyRecordFormat3.newRecord();
    long long5 = propertyOneByteHeaderRecordFormat2.getNextRecordReference(propertyRecord4);
    long long6 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord4);
    int int9 = propertyOneByteHeaderRecordFormat0.getPageSize(24, 32);
    org.neo4j.io.pagecache.PageCursor pageCursor10 = null;
    try {
      boolean boolean11 = propertyOneByteHeaderRecordFormat0.isInUse(pageCursor10);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord4);
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
  }

  @Test
  public void test1103() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1103");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod(
        (long) (byte) 10, 118L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 126L + "'", long2 == 126L);
  }

  @Test
  public void test1104() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1104");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        128);
  }

  @Test
  public void test1105() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1105");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        (int) (byte) 1);
    int int4 = relationshipGroupHighLimitRecordFormat1.getPageSize(96, 52);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
  }

  @Test
  public void test1106() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1106");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat1 = v320_0.dynamic();
    java.lang.String str2 = v320_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat3 = v320_0.relationship();
    java.lang.String str4 = v320_0.name();
    java.lang.String str5 = v320_0.name();
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_2_0" + "'", str2,
        "high_limitV3_2_0");
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "high_limitV3_2_0" + "'", str4,
        "high_limitV3_2_0");
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "high_limitV3_2_0" + "'", str5,
        "high_limitV3_2_0");
  }

  @Test
  public void test1107() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1107");
    }
    org.neo4j.io.pagecache.PageCursor pageCursor1 = null;
    try {
      io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.enoForPa(234L,
          pageCursor1);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test1108() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1108");
    }
    org.neo4j.internal.batchimport.AdditionalInitialIds additionalInitialIds0 = null;
    org.neo4j.internal.batchimport.input.Collector collector1 = null;
    org.neo4j.internal.batchimport.Configuration configuration2 = null;
    org.neo4j.configuration.Config config3 = null;
    org.neo4j.io.layout.DatabaseLayout databaseLayout4 = null;
    org.neo4j.internal.batchimport.staging.ExecutionMonitor executionMonitor5 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.internal.batchimport.IndexImporterFactory indexImporterFactory7 = null;
    org.neo4j.scheduler.JobScheduler jobScheduler8 = null;
    org.neo4j.storageengine.api.LogFilesInitializer logFilesInitializer9 = null;
    org.neo4j.logging.internal.LogService logService10 = null;
    org.neo4j.memory.MemoryTracker memoryTracker11 = null;
    org.neo4j.internal.batchimport.ImportLogic.Monitor monitor12 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer13 = null;
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_14 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_15 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat16 = v300_15.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat17 = v300_15.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType18 = null;
    boolean boolean19 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_14,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_15, capabilityType18);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat20 = v300_15.relationship();
    boolean boolean22 = v300_15.equals((java.lang.Object) 24);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat23 = v300_15.schema();
    int int24 = v300_15.generation();
    try {
      io.github.onograph.internal.batchimport.EnterpriseBatchImporter enterpriseBatchImporter25 = new io.github.onograph.internal.batchimport.EnterpriseBatchImporter(
          additionalInitialIds0, collector1, configuration2, config3, databaseLayout4,
          executionMonitor5, fileSystemAbstraction6, indexImporterFactory7, jobScheduler8,
          logFilesInitializer9, logService10, memoryTracker11, monitor12, pageCacheTracer13,
          (org.neo4j.kernel.impl.store.format.RecordFormats) v300_15);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat16);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat17);
    org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat20);
    org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat23);
    org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
  }

  @Test
  public void test1109() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1109");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v320_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat2 = v320_0.relationshipGroup();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat3 = v320_0.labelToken();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat2);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat3);
  }

  @Test
  public void test1110() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1110");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat1 = v306_0.node();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily2 = v306_0.getFormatFamily();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily3 = v306_0.getFormatFamily();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat4 = v306_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat5 = v306_0.labelToken();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_6 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat7 = v300_6.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat8 = v300_6.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat9 = v300_6.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat10 = v300_6.node();
    org.neo4j.kernel.impl.store.format.RecordFormats[] recordFormatsArray11 = v300_6.compatibleVersionsForRollingUpgrade();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType12 = null;
    boolean boolean13 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_6, capabilityType12);
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily14 = v300_6.getFormatFamily();
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat1);
    org.junit.Assert.assertTrue(
        "'" + formatFamily2 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily2.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertTrue(
        "'" + formatFamily3 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily3.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat4);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat5);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat7);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat8);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat9);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat10);
    org.junit.Assert.assertNotNull(recordFormatsArray11);
    org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    org.junit.Assert.assertTrue(
        "'" + formatFamily14 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily14.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
  }

  @Test
  public void test1111() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1111");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat6 = v300_1.relationship();
    boolean boolean8 = v300_1.equals((java.lang.Object) 24);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat9 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat10 = v300_1.relationshipTypeToken();
    java.lang.String str11 = v300_1.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat12 = v300_1.dynamic();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat6);
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat9);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat10);
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "high_limitV3_0_0" + "'", str11,
        "high_limitV3_0_0");
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat12);
  }

  @Test
  public void test1112() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1112");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    long long3 = recordFormatDynamicRecordImpl0.getMaxId();
    int int6 = recordFormatDynamicRecordImpl0.getPageSize(64, 48);
    int int9 = recordFormatDynamicRecordImpl0.getPageSize(10, (int) (short) 100);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord10 = recordFormatDynamicRecordImpl0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl11 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean13 = recordFormatDynamicRecordImpl11.equals((java.lang.Object) 100.0f);
    int int16 = recordFormatDynamicRecordImpl11.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord17 = recordFormatDynamicRecordImpl11.newRecord();
    int int20 = recordFormatDynamicRecordImpl11.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord21 = recordFormatDynamicRecordImpl11.newRecord();
    org.neo4j.internal.id.IdSequence idSequence23 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext24 = null;
    recordFormatDynamicRecordImpl0.prepare(dynamicRecord21, 24, idSequence23, cursorContext24);
    long long26 = recordFormatDynamicRecordImpl0.getMaxId();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1125899906842623L + "'",
        long3 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int6 + "' != '" + 48 + "'", int6 == 48);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    org.junit.Assert.assertNotNull(dynamicRecord10);
    org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16 + "'", int16 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord17);
    org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord21);
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1125899906842623L + "'",
        long26 == 1125899906842623L);
  }

  @Test
  public void test1113() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1113");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord2 = relationshipHighLimitRecordFormat1.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord5 = relationshipHighLimitRecordFormat4.newRecord();
    org.neo4j.internal.id.IdSequence idSequence7 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext8 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord5, (int) (short) 1, idSequence7,
        cursorContext8);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat11 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord12 = relationshipHighLimitRecordFormat11.newRecord();
    org.neo4j.internal.id.IdSequence idSequence14 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext15 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord12, (int) (short) 1, idSequence14,
        cursorContext15);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat17 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord18 = null;
    long long19 = nodeRecordFormat17.getNextRecordReference(nodeRecord18);
    int int20 = nodeRecordFormat17.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader21 = null;
    int int22 = nodeRecordFormat17.getRecordSize(storeHeader21);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader23 = null;
    int int24 = nodeRecordFormat17.getRecordSize(storeHeader23);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord25 = null;
    long long26 = nodeRecordFormat17.getNextRecordReference(nodeRecord25);
    boolean boolean27 = relationshipHighLimitRecordFormat1.equals(
        (java.lang.Object) nodeRecordFormat17);
    org.neo4j.io.pagecache.PageCursor pageCursor28 = null;
    try {
      boolean boolean29 = nodeRecordFormat17.isInUse(pageCursor28);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(relationshipRecord2);
    org.junit.Assert.assertNotNull(relationshipRecord5);
    org.junit.Assert.assertNotNull(relationshipRecord12);
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
    org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    org.junit.Assert.assertTrue("'" + int22 + "' != '" + 16 + "'", int22 == 16);
    org.junit.Assert.assertTrue("'" + int24 + "' != '" + 16 + "'", int24 == 16);
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
  }

  @Test
  public void test1114() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1114");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long1 = propertyOneByteHeaderRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord2 = propertyOneByteHeaderRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long4 = propertyOneByteHeaderRecordFormat3.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord5 = propertyOneByteHeaderRecordFormat3.newRecord();
    long long6 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord5);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader7 = null;
    int int8 = propertyOneByteHeaderRecordFormat0.getRecordSize(storeHeader7);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat9 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord10 = propertyRecordFormat9.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat11 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader12 = null;
    int int13 = propertyRecordFormat11.getRecordSize(storeHeader12);
    long long14 = propertyRecordFormat11.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat16 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord17 = propertyRecordFormat16.newRecord();
    long long18 = propertyOneByteHeaderRecordFormat15.getNextRecordReference(propertyRecord17);
    org.neo4j.internal.id.IdSequence idSequence20 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext21 = null;
    propertyRecordFormat11.prepare(propertyRecord17, 0, idSequence20, cursorContext21);
    long long23 = propertyRecordFormat9.getNextRecordReference(propertyRecord17);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat24 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader25 = null;
    int int26 = propertyRecordFormat24.getRecordSize(storeHeader25);
    int int29 = propertyRecordFormat24.getPageSize((int) (byte) -1, 128);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat30 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long31 = propertyOneByteHeaderRecordFormat30.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord32 = propertyOneByteHeaderRecordFormat30.newRecord();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord33 = propertyOneByteHeaderRecordFormat30.newRecord();
    long long34 = propertyRecordFormat24.getNextRecordReference(propertyRecord33);
    long long35 = propertyRecordFormat9.getNextRecordReference(propertyRecord33);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat36 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long37 = propertyOneByteHeaderRecordFormat36.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat38 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat39 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord40 = propertyRecordFormat39.newRecord();
    long long41 = propertyOneByteHeaderRecordFormat38.getNextRecordReference(propertyRecord40);
    long long42 = propertyOneByteHeaderRecordFormat36.getNextRecordReference(propertyRecord40);
    long long43 = propertyRecordFormat9.getNextRecordReference(propertyRecord40);
    long long44 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord40);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat45 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long46 = propertyOneByteHeaderRecordFormat45.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord47 = propertyOneByteHeaderRecordFormat45.newRecord();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord48 = propertyOneByteHeaderRecordFormat45.newRecord();
    org.neo4j.io.pagecache.PageCursor pageCursor49 = null;
    try {
      propertyOneByteHeaderRecordFormat0.write(propertyRecord48, pageCursor49, (int) (byte) 0, 99);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord2);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1125899906842623L + "'",
        long4 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord5);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    org.junit.Assert.assertTrue("'" + int8 + "' != '" + 48 + "'", int8 == 48);
    org.junit.Assert.assertNotNull(propertyRecord10);
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 48 + "'", int13 == 48);
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1125899906842623L + "'",
        long14 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord17);
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
    org.junit.Assert.assertTrue("'" + int26 + "' != '" + 48 + "'", int26 == 48);
    org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1125899906842623L + "'",
        long31 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord32);
    org.junit.Assert.assertNotNull(propertyRecord33);
    org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1125899906842623L + "'",
        long37 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord40);
    org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
    org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
    org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
    org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
    org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1125899906842623L + "'",
        long46 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord47);
    org.junit.Assert.assertNotNull(propertyRecord48);
  }

  @Test
  public void test1115() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1115");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v310_0.relationship();
    java.lang.String str2 = v310_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat3 = v310_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat4 = v310_0.node();
    java.lang.String str5 = v310_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat6 = v310_0.relationshipGroup();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_1_0" + "'", str2,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat3);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "high_limitV3_1_0" + "'", str5,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat6);
  }

  @Test
  public void test1116() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1116");
    }
    java.util.function.Function<org.neo4j.kernel.impl.store.StoreHeader, java.lang.Integer> storeHeaderFunction1 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.fixedRecordSize(
        (int) (byte) 0);
    org.junit.Assert.assertNotNull(storeHeaderFunction1);
  }

  @Test
  public void test1117() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1117");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.FactoryHighLimitDefaultImpl factoryHighLimitDefaultImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.FactoryHighLimitDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats1 = factoryHighLimitDefaultImpl0.newInstance();
    java.lang.String str2 = factoryHighLimitDefaultImpl0.getName();
    java.lang.String str3 = factoryHighLimitDefaultImpl0.getName();
    org.junit.Assert.assertNotNull(recordFormats1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_2_0" + "'", str2,
        "high_limitV3_2_0");
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "high_limitV3_2_0" + "'", str3,
        "high_limitV3_2_0");
  }

  @Test
  public void test1118() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1118");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord2 = propertyRecordFormat1.newRecord();
    long long3 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord2);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord6 = propertyRecordFormat5.newRecord();
    long long7 = propertyOneByteHeaderRecordFormat4.getNextRecordReference(propertyRecord6);
    long long8 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord6);
    int int11 = propertyOneByteHeaderRecordFormat0.getPageSize(50, (int) (short) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader13 = null;
    int int14 = propertyRecordFormat12.getRecordSize(storeHeader13);
    long long15 = propertyRecordFormat12.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum highLimitEncEnum16 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8;
    boolean boolean17 = propertyRecordFormat12.equals((java.lang.Object) highLimitEncEnum16);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord18 = null;
    org.neo4j.internal.id.IdSequence idSequence20 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext21 = null;
    propertyRecordFormat12.prepare(propertyRecord18, 128, idSequence20, cursorContext21);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat23 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord24 = null;
    org.neo4j.internal.id.IdSequence idSequence26 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext27 = null;
    propertyRecordFormat23.prepare(propertyRecord24, (int) (short) -1, idSequence26,
        cursorContext27);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord29 = propertyRecordFormat23.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat30 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat31 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord32 = propertyRecordFormat31.newRecord();
    long long33 = propertyOneByteHeaderRecordFormat30.getNextRecordReference(propertyRecord32);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader34 = null;
    int int35 = propertyOneByteHeaderRecordFormat30.getRecordSize(storeHeader34);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat36 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long37 = propertyOneByteHeaderRecordFormat36.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat38 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat39 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord40 = propertyRecordFormat39.newRecord();
    long long41 = propertyOneByteHeaderRecordFormat38.getNextRecordReference(propertyRecord40);
    long long42 = propertyOneByteHeaderRecordFormat36.getNextRecordReference(propertyRecord40);
    org.neo4j.internal.id.IdSequence idSequence44 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext45 = null;
    propertyOneByteHeaderRecordFormat30.prepare(propertyRecord40, 64, idSequence44,
        cursorContext45);
    long long47 = propertyRecordFormat23.getNextRecordReference(propertyRecord40);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord48 = propertyRecordFormat23.newRecord();
    long long49 = propertyRecordFormat12.getNextRecordReference(propertyRecord48);
    org.neo4j.io.pagecache.PageCursor pageCursor50 = null;
    try {
      propertyOneByteHeaderRecordFormat0.write(propertyRecord48, pageCursor50, (int) (byte) 1, 64);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(propertyRecord2);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord6);
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
    org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
    org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
    org.junit.Assert.assertTrue("'" + int14 + "' != '" + 48 + "'", int14 == 48);
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1125899906842623L + "'",
        long15 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + highLimitEncEnum16 + "' != '"
            + io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8 + "'",
        highLimitEncEnum16.equals(
            io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8));
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    org.junit.Assert.assertNotNull(propertyRecord29);
    org.junit.Assert.assertNotNull(propertyRecord32);
    org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
    org.junit.Assert.assertTrue("'" + int35 + "' != '" + 48 + "'", int35 == 48);
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1125899906842623L + "'",
        long37 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord40);
    org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
    org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
    org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord48);
    org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
  }

  @Test
  public void test1119() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1119");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_2 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat3 = v300_2.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat4 = v300_2.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType5 = null;
    boolean boolean6 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_1,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_2, capabilityType5);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat7 = v300_2.relationship();
    boolean boolean8 = relationshipGroupRecordFormat0.equals(
        (java.lang.Object) relationshipRecordRecordFormat7);
    int int9 = relationshipGroupRecordFormat0.getRecordHeaderSize();
    org.neo4j.io.pagecache.PageCursor pageCursor10 = null;
    try {
      boolean boolean11 = relationshipGroupRecordFormat0.isInUse(pageCursor10);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat3);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat4);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat7);
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
  }

  @Test
  public void test1120() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1120");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat1 = v320_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat2 = v320_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat3 = v320_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat4 = v320_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat5 = v320_0.relationshipGroup();
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat1);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat2);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat3);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat4);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat5);
  }

  @Test
  public void test1121() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1121");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long1 = relationshipGroupHighLimitRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader3 = null;
    int int4 = relationshipGroupRecordFormat2.getRecordSize(storeHeader3);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long6 = relationshipGroupHighLimitRecordFormat5.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord8 = null;
    long long9 = relationshipGroupHighLimitRecordFormat7.getNextRecordReference(
        relationshipGroupRecord8);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord10 = relationshipGroupHighLimitRecordFormat7.newRecord();
    org.neo4j.internal.id.IdSequence idSequence12 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext13 = null;
    relationshipGroupHighLimitRecordFormat5.prepare(relationshipGroupRecord10, (int) (byte) 1,
        idSequence12, cursorContext13);
    org.neo4j.internal.id.IdSequence idSequence16 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext17 = null;
    relationshipGroupRecordFormat2.prepare(relationshipGroupRecord10, 0, idSequence16,
        cursorContext17);
    org.neo4j.internal.id.IdSequence idSequence20 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext21 = null;
    relationshipGroupHighLimitRecordFormat0.prepare(relationshipGroupRecord10, 64, idSequence20,
        cursorContext21);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord23 = relationshipGroupHighLimitRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat25 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        24);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat26 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader27 = null;
    int int28 = relationshipGroupRecordFormat26.getRecordSize(storeHeader27);
    long long29 = relationshipGroupRecordFormat26.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat30 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord31 = null;
    long long32 = relationshipGroupHighLimitRecordFormat30.getNextRecordReference(
        relationshipGroupRecord31);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord33 = relationshipGroupHighLimitRecordFormat30.newRecord();
    org.neo4j.internal.id.IdSequence idSequence35 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext36 = null;
    relationshipGroupRecordFormat26.prepare(relationshipGroupRecord33, 128, idSequence35,
        cursorContext36);
    org.neo4j.internal.id.IdSequence idSequence39 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext40 = null;
    relationshipGroupHighLimitRecordFormat25.prepare(relationshipGroupRecord33, 24, idSequence39,
        cursorContext40);
    org.neo4j.io.pagecache.PageCursor pageCursor42 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad43 = null;
    try {
      relationshipGroupHighLimitRecordFormat0.read(relationshipGroupRecord33, pageCursor42,
          recordLoad43, 64, (int) (byte) -1);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1125899906842623L + "'",
        long6 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord10);
    org.junit.Assert.assertNotNull(relationshipGroupRecord23);
    org.junit.Assert.assertTrue("'" + int28 + "' != '" + 32 + "'", int28 == 32);
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1125899906842623L + "'",
        long29 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord33);
  }

  @Test
  public void test1122() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1122");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    int int3 = relationshipGroupRecordFormat0.getPageSize((int) 'a', (int) (short) 100);
    long long4 = relationshipGroupRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord5 = relationshipGroupRecordFormat0.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord6 = relationshipGroupRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat8 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        0);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat9 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long10 = relationshipGroupHighLimitRecordFormat9.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat11 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord12 = null;
    long long13 = relationshipGroupHighLimitRecordFormat11.getNextRecordReference(
        relationshipGroupRecord12);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord14 = relationshipGroupHighLimitRecordFormat11.newRecord();
    org.neo4j.internal.id.IdSequence idSequence16 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext17 = null;
    relationshipGroupHighLimitRecordFormat9.prepare(relationshipGroupRecord14, (int) (byte) 1,
        idSequence16, cursorContext17);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat19 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long20 = relationshipGroupHighLimitRecordFormat19.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat21 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord22 = null;
    long long23 = relationshipGroupHighLimitRecordFormat21.getNextRecordReference(
        relationshipGroupRecord22);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord24 = relationshipGroupHighLimitRecordFormat21.newRecord();
    org.neo4j.internal.id.IdSequence idSequence26 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext27 = null;
    relationshipGroupHighLimitRecordFormat19.prepare(relationshipGroupRecord24, (int) (byte) 1,
        idSequence26, cursorContext27);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat29 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord30 = null;
    long long31 = relationshipGroupHighLimitRecordFormat29.getNextRecordReference(
        relationshipGroupRecord30);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord32 = relationshipGroupHighLimitRecordFormat29.newRecord();
    org.neo4j.internal.id.IdSequence idSequence34 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext35 = null;
    relationshipGroupHighLimitRecordFormat19.prepare(relationshipGroupRecord32, 0, idSequence34,
        cursorContext35);
    org.neo4j.internal.id.IdSequence idSequence38 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext39 = null;
    relationshipGroupHighLimitRecordFormat9.prepare(relationshipGroupRecord32, 128, idSequence38,
        cursorContext39);
    org.neo4j.internal.id.IdSequence idSequence42 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext43 = null;
    relationshipGroupHighLimitRecordFormat8.prepare(relationshipGroupRecord32, 16, idSequence42,
        cursorContext43);
    org.neo4j.internal.id.IdSequence idSequence46 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext47 = null;
    relationshipGroupRecordFormat0.prepare(relationshipGroupRecord32, 52, idSequence46,
        cursorContext47);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord49 = relationshipGroupRecordFormat0.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord50 = relationshipGroupRecordFormat0.newRecord();
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1125899906842623L + "'",
        long4 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipGroupRecord5);
    org.junit.Assert.assertNotNull(relationshipGroupRecord6);
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1125899906842623L + "'",
        long10 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord14);
    org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1125899906842623L + "'",
        long20 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord24);
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord32);
    org.junit.Assert.assertNotNull(relationshipGroupRecord49);
    org.junit.Assert.assertNotNull(relationshipGroupRecord50);
  }

  @Test
  public void test1123() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1123");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        0);
    long long3 = relationshipGroupHighLimitRecordFormat2.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long5 = relationshipGroupHighLimitRecordFormat4.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat6 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord7 = null;
    long long8 = relationshipGroupHighLimitRecordFormat6.getNextRecordReference(
        relationshipGroupRecord7);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord9 = relationshipGroupHighLimitRecordFormat6.newRecord();
    org.neo4j.internal.id.IdSequence idSequence11 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext12 = null;
    relationshipGroupHighLimitRecordFormat4.prepare(relationshipGroupRecord9, 0, idSequence11,
        cursorContext12);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl14 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean16 = recordFormatDynamicRecordImpl14.equals((java.lang.Object) 100.0f);
    int int19 = recordFormatDynamicRecordImpl14.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord20 = recordFormatDynamicRecordImpl14.newRecord();
    boolean boolean21 = relationshipGroupHighLimitRecordFormat4.equals(
        (java.lang.Object) recordFormatDynamicRecordImpl14);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat22 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader23 = null;
    int int24 = relationshipGroupRecordFormat22.getRecordSize(storeHeader23);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord25 = relationshipGroupRecordFormat22.newRecord();
    org.neo4j.internal.id.IdSequence idSequence27 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext28 = null;
    relationshipGroupHighLimitRecordFormat4.prepare(relationshipGroupRecord25, (int) (short) 0,
        idSequence27, cursorContext28);
    org.neo4j.internal.id.IdSequence idSequence31 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext32 = null;
    relationshipGroupHighLimitRecordFormat2.prepare(relationshipGroupRecord25, (int) '4',
        idSequence31, cursorContext32);
    org.neo4j.internal.id.IdSequence idSequence35 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext36 = null;
    relationshipGroupHighLimitRecordFormat0.prepare(relationshipGroupRecord25, 128, idSequence35,
        cursorContext36);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1125899906842623L + "'",
        long3 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1125899906842623L + "'",
        long5 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord9);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    org.junit.Assert.assertTrue("'" + int19 + "' != '" + 16 + "'", int19 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord20);
    org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    org.junit.Assert.assertTrue("'" + int24 + "' != '" + 32 + "'", int24 == 32);
    org.junit.Assert.assertNotNull(relationshipGroupRecord25);
  }

  @Test
  public void test1124() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1124");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.NodeRecordFormat nodeRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.NodeRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord2 = null;
    long long3 = nodeRecordFormat1.getNextRecordReference(nodeRecord2);
    int int4 = nodeRecordFormat1.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader5 = null;
    int int6 = nodeRecordFormat1.getRecordSize(storeHeader5);
    int int9 = nodeRecordFormat1.getPageSize((int) '4', (int) (short) 1);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord10 = nodeRecordFormat1.newRecord();
    int int11 = nodeRecordFormat0.rerdtlgForRE(nodeRecord10);
    long long12 = nodeRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord13 = nodeRecordFormat0.newRecord();
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    org.junit.Assert.assertTrue("'" + int6 + "' != '" + 16 + "'", int6 == 16);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
    org.junit.Assert.assertNotNull(nodeRecord10);
    org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1125899906842623L + "'",
        long12 == 1125899906842623L);
    org.junit.Assert.assertNotNull(nodeRecord13);
  }

  @Test
  public void test1125() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1125");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord1 = null;
    org.neo4j.internal.id.IdSequence idSequence3 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext4 = null;
    propertyRecordFormat0.prepare(propertyRecord1, (int) (short) -1, idSequence3, cursorContext4);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord6 = propertyRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat8 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord9 = propertyRecordFormat8.newRecord();
    long long10 = propertyOneByteHeaderRecordFormat7.getNextRecordReference(propertyRecord9);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader11 = null;
    int int12 = propertyOneByteHeaderRecordFormat7.getRecordSize(storeHeader11);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat13 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long14 = propertyOneByteHeaderRecordFormat13.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat16 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord17 = propertyRecordFormat16.newRecord();
    long long18 = propertyOneByteHeaderRecordFormat15.getNextRecordReference(propertyRecord17);
    long long19 = propertyOneByteHeaderRecordFormat13.getNextRecordReference(propertyRecord17);
    org.neo4j.internal.id.IdSequence idSequence21 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext22 = null;
    propertyOneByteHeaderRecordFormat7.prepare(propertyRecord17, 64, idSequence21, cursorContext22);
    long long24 = propertyRecordFormat0.getNextRecordReference(propertyRecord17);
    boolean boolean26 = propertyRecordFormat0.equals((java.lang.Object) 100);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat27 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader28 = null;
    int int29 = propertyRecordFormat27.getRecordSize(storeHeader28);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl30 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats31 = highLimitFactoryDefaultImpl30.newInstance();
    boolean boolean32 = propertyRecordFormat27.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl30);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat34 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean35 = propertyRecordFormat27.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord36 = propertyRecordFormat27.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat37 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader38 = null;
    int int39 = propertyRecordFormat37.getRecordSize(storeHeader38);
    long long40 = propertyRecordFormat37.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat41 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat42 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord43 = propertyRecordFormat42.newRecord();
    long long44 = propertyOneByteHeaderRecordFormat41.getNextRecordReference(propertyRecord43);
    org.neo4j.internal.id.IdSequence idSequence46 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext47 = null;
    propertyRecordFormat37.prepare(propertyRecord43, 0, idSequence46, cursorContext47);
    org.neo4j.internal.id.IdSequence idSequence50 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext51 = null;
    propertyRecordFormat27.prepare(propertyRecord43, 0, idSequence50, cursorContext51);
    long long53 = propertyRecordFormat0.getNextRecordReference(propertyRecord43);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat54 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader55 = null;
    int int56 = propertyRecordFormat54.getRecordSize(storeHeader55);
    long long57 = propertyRecordFormat54.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat58 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat59 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord60 = propertyRecordFormat59.newRecord();
    long long61 = propertyOneByteHeaderRecordFormat58.getNextRecordReference(propertyRecord60);
    org.neo4j.internal.id.IdSequence idSequence63 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext64 = null;
    propertyRecordFormat54.prepare(propertyRecord60, 0, idSequence63, cursorContext64);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat66 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader67 = null;
    int int68 = propertyRecordFormat66.getRecordSize(storeHeader67);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl69 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats70 = highLimitFactoryDefaultImpl69.newInstance();
    boolean boolean71 = propertyRecordFormat66.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl69);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat73 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean74 = propertyRecordFormat66.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord75 = null;
    org.neo4j.internal.id.IdSequence idSequence77 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext78 = null;
    propertyRecordFormat66.prepare(propertyRecord75, (int) (short) 0, idSequence77,
        cursorContext78);
    boolean boolean81 = propertyRecordFormat66.equals((java.lang.Object) "3.0.6");
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat82 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader83 = null;
    int int84 = propertyRecordFormat82.getRecordSize(storeHeader83);
    int int87 = propertyRecordFormat82.getPageSize((int) (byte) -1, 128);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat88 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long89 = propertyOneByteHeaderRecordFormat88.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord90 = propertyOneByteHeaderRecordFormat88.newRecord();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord91 = propertyOneByteHeaderRecordFormat88.newRecord();
    long long92 = propertyRecordFormat82.getNextRecordReference(propertyRecord91);
    long long93 = propertyRecordFormat66.getNextRecordReference(propertyRecord91);
    long long94 = propertyRecordFormat54.getNextRecordReference(propertyRecord91);
    long long95 = propertyRecordFormat0.getNextRecordReference(propertyRecord91);
    int int98 = propertyRecordFormat0.getPageSize(4, (int) (short) -1);
    org.junit.Assert.assertNotNull(propertyRecord6);
    org.junit.Assert.assertNotNull(propertyRecord9);
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 48 + "'", int12 == 48);
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1125899906842623L + "'",
        long14 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord17);
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    org.junit.Assert.assertTrue("'" + int29 + "' != '" + 48 + "'", int29 == 48);
    org.junit.Assert.assertNotNull(recordFormats31);
    org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    org.junit.Assert.assertNotNull(propertyRecord36);
    org.junit.Assert.assertTrue("'" + int39 + "' != '" + 48 + "'", int39 == 48);
    org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1125899906842623L + "'",
        long40 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord43);
    org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
    org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-1L) + "'", long53 == (-1L));
    org.junit.Assert.assertTrue("'" + int56 + "' != '" + 48 + "'", int56 == 48);
    org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1125899906842623L + "'",
        long57 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord60);
    org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
    org.junit.Assert.assertTrue("'" + int68 + "' != '" + 48 + "'", int68 == 48);
    org.junit.Assert.assertNotNull(recordFormats70);
    org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    org.junit.Assert.assertTrue("'" + int84 + "' != '" + 48 + "'", int84 == 48);
    org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    org.junit.Assert.assertTrue("'" + long89 + "' != '" + 1125899906842623L + "'",
        long89 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord90);
    org.junit.Assert.assertNotNull(propertyRecord91);
    org.junit.Assert.assertTrue("'" + long92 + "' != '" + (-1L) + "'", long92 == (-1L));
    org.junit.Assert.assertTrue("'" + long93 + "' != '" + (-1L) + "'", long93 == (-1L));
    org.junit.Assert.assertTrue("'" + long94 + "' != '" + (-1L) + "'", long94 == (-1L));
    org.junit.Assert.assertTrue("'" + long95 + "' != '" + (-1L) + "'", long95 == (-1L));
    org.junit.Assert.assertTrue("'" + int98 + "' != '" + 4 + "'", int98 == 4);
  }

  @Test
  public void test1126() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1126");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = recordFormatDynamicRecordImpl0.newRecord();
    int int9 = recordFormatDynamicRecordImpl0.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord10 = recordFormatDynamicRecordImpl0.newRecord();
    int int13 = recordFormatDynamicRecordImpl0.getPageSize((int) '4', (int) (short) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_14 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat15 = v320_14.relationship();
    boolean boolean16 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) v320_14);
    int int19 = recordFormatDynamicRecordImpl0.getPageSize(16, 8);
    int int22 = recordFormatDynamicRecordImpl0.getPageSize(35, 2);
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord6);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord10);
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat15);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    org.junit.Assert.assertTrue("'" + int19 + "' != '" + 16 + "'", int19 == 16);
    org.junit.Assert.assertTrue("'" + int22 + "' != '" + 34 + "'", int22 == 34);
  }

  @Test
  public void test1127() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1127");
    }
    org.neo4j.io.pagecache.PageCursor pageCursor1 = null;
    try {
      io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.enoForPa(58L,
          pageCursor1);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test1128() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1128");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = propertyRecordFormat0.getRecordSize(storeHeader1);
    int int5 = propertyRecordFormat0.getPageSize((int) (byte) -1, 128);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat6 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long7 = propertyOneByteHeaderRecordFormat6.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord8 = propertyOneByteHeaderRecordFormat6.newRecord();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord9 = propertyOneByteHeaderRecordFormat6.newRecord();
    long long10 = propertyRecordFormat0.getNextRecordReference(propertyRecord9);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord11 = propertyRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long13 = propertyOneByteHeaderRecordFormat12.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord14 = propertyOneByteHeaderRecordFormat12.newRecord();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord15 = propertyOneByteHeaderRecordFormat12.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat16 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader17 = null;
    int int18 = propertyRecordFormat16.getRecordSize(storeHeader17);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl19 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats20 = highLimitFactoryDefaultImpl19.newInstance();
    boolean boolean21 = propertyRecordFormat16.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl19);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat23 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean24 = propertyRecordFormat16.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord25 = null;
    org.neo4j.internal.id.IdSequence idSequence27 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext28 = null;
    propertyRecordFormat16.prepare(propertyRecord25, (int) (short) 0, idSequence27,
        cursorContext28);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat30 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord31 = propertyRecordFormat30.newRecord();
    org.neo4j.internal.id.IdSequence idSequence33 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext34 = null;
    propertyRecordFormat16.prepare(propertyRecord31, 52, idSequence33, cursorContext34);
    long long36 = propertyOneByteHeaderRecordFormat12.getNextRecordReference(propertyRecord31);
    org.neo4j.io.pagecache.PageCursor pageCursor37 = null;
    try {
      propertyRecordFormat0.write(propertyRecord31, pageCursor37, (int) '#', 12);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1125899906842623L + "'",
        long7 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord8);
    org.junit.Assert.assertNotNull(propertyRecord9);
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord11);
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1125899906842623L + "'",
        long13 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord14);
    org.junit.Assert.assertNotNull(propertyRecord15);
    org.junit.Assert.assertTrue("'" + int18 + "' != '" + 48 + "'", int18 == 48);
    org.junit.Assert.assertNotNull(recordFormats20);
    org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    org.junit.Assert.assertNotNull(propertyRecord31);
    org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
  }

  @Test
  public void test1129() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1129");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = propertyRecordFormat0.getRecordSize(storeHeader1);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl3 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats4 = highLimitFactoryDefaultImpl3.newInstance();
    boolean boolean5 = propertyRecordFormat0.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl3);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean8 = propertyRecordFormat0.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord9 = null;
    org.neo4j.internal.id.IdSequence idSequence11 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext12 = null;
    propertyRecordFormat0.prepare(propertyRecord9, (int) (short) 0, idSequence11, cursorContext12);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat14 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord15 = propertyRecordFormat14.newRecord();
    org.neo4j.internal.id.IdSequence idSequence17 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext18 = null;
    propertyRecordFormat0.prepare(propertyRecord15, 52, idSequence17, cursorContext18);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord20 = propertyRecordFormat0.newRecord();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader21 = null;
    int int22 = propertyRecordFormat0.getRecordSize(storeHeader21);
    org.neo4j.io.pagecache.PageCursor pageCursor23 = null;
    try {
      boolean boolean24 = propertyRecordFormat0.isInUse(pageCursor23);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    org.junit.Assert.assertNotNull(recordFormats4);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    org.junit.Assert.assertNotNull(propertyRecord15);
    org.junit.Assert.assertNotNull(propertyRecord20);
    org.junit.Assert.assertTrue("'" + int22 + "' != '" + 48 + "'", int22 == 48);
  }

  @Test
  public void test1130() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1130");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod((long) 0,
        63L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 63L + "'", long2 == 63L);
  }

  @Test
  public void test1131() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1131");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.FactoryHighLimitDefaultImpl factoryHighLimitDefaultImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.FactoryHighLimitDefaultImpl();
    java.lang.String str1 = factoryHighLimitDefaultImpl0.getName();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats2 = factoryHighLimitDefaultImpl0.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats3 = factoryHighLimitDefaultImpl0.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats4 = factoryHighLimitDefaultImpl0.newInstance();
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "high_limitV3_2_0" + "'", str1,
        "high_limitV3_2_0");
    org.junit.Assert.assertNotNull(recordFormats2);
    org.junit.Assert.assertNotNull(recordFormats3);
    org.junit.Assert.assertNotNull(recordFormats4);
  }

  @Test
  public void test1132() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1132");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long1 = propertyOneByteHeaderRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord2 = propertyOneByteHeaderRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long4 = propertyOneByteHeaderRecordFormat3.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord5 = propertyOneByteHeaderRecordFormat3.newRecord();
    long long6 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord5);
    int int7 = propertyOneByteHeaderRecordFormat0.getRecordHeaderSize();
    int int8 = propertyOneByteHeaderRecordFormat0.getRecordHeaderSize();
    int int9 = propertyOneByteHeaderRecordFormat0.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat10 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader11 = null;
    int int12 = propertyRecordFormat10.getRecordSize(storeHeader11);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl13 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats14 = highLimitFactoryDefaultImpl13.newInstance();
    boolean boolean15 = propertyRecordFormat10.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl13);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat17 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean18 = propertyRecordFormat10.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord19 = null;
    org.neo4j.internal.id.IdSequence idSequence21 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext22 = null;
    propertyRecordFormat10.prepare(propertyRecord19, (int) (short) 0, idSequence21,
        cursorContext22);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat24 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord25 = propertyRecordFormat24.newRecord();
    org.neo4j.internal.id.IdSequence idSequence27 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext28 = null;
    propertyRecordFormat10.prepare(propertyRecord25, 52, idSequence27, cursorContext28);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader30 = null;
    int int31 = propertyRecordFormat10.getRecordSize(storeHeader30);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat32 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader33 = null;
    int int34 = propertyRecordFormat32.getRecordSize(storeHeader33);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl35 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats36 = highLimitFactoryDefaultImpl35.newInstance();
    boolean boolean37 = propertyRecordFormat32.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl35);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat39 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean40 = propertyRecordFormat32.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord41 = null;
    org.neo4j.internal.id.IdSequence idSequence43 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext44 = null;
    propertyRecordFormat32.prepare(propertyRecord41, (int) (short) 0, idSequence43,
        cursorContext44);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat46 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord47 = propertyRecordFormat46.newRecord();
    org.neo4j.internal.id.IdSequence idSequence49 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext50 = null;
    propertyRecordFormat32.prepare(propertyRecord47, 52, idSequence49, cursorContext50);
    long long52 = propertyRecordFormat10.getNextRecordReference(propertyRecord47);
    long long53 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord47);
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_54 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat55 = v306_54.node();
    org.neo4j.storageengine.api.format.Capability capability56 = null;
    boolean boolean57 = v306_54.hasCapability(capability56);
    org.neo4j.storageengine.api.format.Capability capability58 = null;
    boolean boolean59 = v306_54.hasCapability(capability58);
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats60 = io.github.onograph.kernel.srv.store.format.highlimit.v340.V340.RCD_FMXS;
    org.neo4j.kernel.impl.store.format.RecordFormats[] recordFormatsArray61 = recordFormats60.compatibleVersionsForRollingUpgrade();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType62 = null;
    boolean boolean63 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_54, recordFormats60,
        capabilityType62);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat64 = v306_54.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat65 = v306_54.propertyKeyToken();
    boolean boolean66 = propertyOneByteHeaderRecordFormat0.equals((java.lang.Object) v306_54);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat67 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader68 = null;
    int int69 = propertyRecordFormat67.getRecordSize(storeHeader68);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader70 = null;
    int int71 = propertyRecordFormat67.getRecordSize(storeHeader70);
    int int72 = propertyRecordFormat67.getRecordHeaderSize();
    long long73 = propertyRecordFormat67.getMaxId();
    long long74 = propertyRecordFormat67.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat75 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader76 = null;
    int int77 = propertyRecordFormat75.getRecordSize(storeHeader76);
    long long78 = propertyRecordFormat75.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat79 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat80 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord81 = propertyRecordFormat80.newRecord();
    long long82 = propertyOneByteHeaderRecordFormat79.getNextRecordReference(propertyRecord81);
    org.neo4j.internal.id.IdSequence idSequence84 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext85 = null;
    propertyRecordFormat75.prepare(propertyRecord81, 0, idSequence84, cursorContext85);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord87 = propertyRecordFormat75.newRecord();
    long long88 = propertyRecordFormat67.getNextRecordReference(propertyRecord87);
    org.neo4j.internal.id.IdSequence idSequence90 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext91 = null;
    propertyOneByteHeaderRecordFormat0.prepare(propertyRecord87, 10, idSequence90, cursorContext91);
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord2);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1125899906842623L + "'",
        long4 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord5);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 48 + "'", int12 == 48);
    org.junit.Assert.assertNotNull(recordFormats14);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    org.junit.Assert.assertNotNull(propertyRecord25);
    org.junit.Assert.assertTrue("'" + int31 + "' != '" + 48 + "'", int31 == 48);
    org.junit.Assert.assertTrue("'" + int34 + "' != '" + 48 + "'", int34 == 48);
    org.junit.Assert.assertNotNull(recordFormats36);
    org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    org.junit.Assert.assertNotNull(propertyRecord47);
    org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
    org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-1L) + "'", long53 == (-1L));
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat55);
    org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    org.junit.Assert.assertNotNull(recordFormats60);
    org.junit.Assert.assertNotNull(recordFormatsArray61);
    org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat64);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat65);
    org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    org.junit.Assert.assertTrue("'" + int69 + "' != '" + 48 + "'", int69 == 48);
    org.junit.Assert.assertTrue("'" + int71 + "' != '" + 48 + "'", int71 == 48);
    org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1125899906842623L + "'",
        long73 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1125899906842623L + "'",
        long74 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int77 + "' != '" + 48 + "'", int77 == 48);
    org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1125899906842623L + "'",
        long78 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord81);
    org.junit.Assert.assertTrue("'" + long82 + "' != '" + (-1L) + "'", long82 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord87);
    org.junit.Assert.assertTrue("'" + long88 + "' != '" + (-1L) + "'", long88 == (-1L));
  }

  @Test
  public void test1133() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1133");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord1 = relationshipRecordFormat0.newRecord();
    int int2 = relationshipRecordFormat0.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord5 = relationshipRecordFormat4.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord6 = relationshipRecordFormat4.newRecord();
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    relationshipRecordFormat3.prepare(relationshipRecord6, 100, idSequence8, cursorContext9);
    long long11 = relationshipRecordFormat0.getNextRecordReference(relationshipRecord6);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat13 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord14 = relationshipRecordFormat13.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord15 = relationshipRecordFormat13.newRecord();
    org.neo4j.internal.id.IdSequence idSequence17 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext18 = null;
    relationshipRecordFormat12.prepare(relationshipRecord15, 100, idSequence17, cursorContext18);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat21 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord22 = relationshipHighLimitRecordFormat21.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat24 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord25 = relationshipHighLimitRecordFormat24.newRecord();
    org.neo4j.internal.id.IdSequence idSequence27 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext28 = null;
    relationshipHighLimitRecordFormat21.prepare(relationshipRecord25, (int) (short) 1, idSequence27,
        cursorContext28);
    org.neo4j.internal.id.IdSequence idSequence31 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext32 = null;
    relationshipRecordFormat12.prepare(relationshipRecord25, 24, idSequence31, cursorContext32);
    long long34 = relationshipRecordFormat0.getNextRecordReference(relationshipRecord25);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat36 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord37 = relationshipHighLimitRecordFormat36.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat39 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord40 = relationshipHighLimitRecordFormat39.newRecord();
    org.neo4j.internal.id.IdSequence idSequence42 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext43 = null;
    relationshipHighLimitRecordFormat36.prepare(relationshipRecord40, (int) (short) 1, idSequence42,
        cursorContext43);
    org.neo4j.internal.id.IdSequence idSequence46 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext47 = null;
    relationshipRecordFormat0.prepare(relationshipRecord40, 12, idSequence46, cursorContext47);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader49 = null;
    int int50 = relationshipRecordFormat0.getRecordSize(storeHeader49);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader51 = null;
    int int52 = relationshipRecordFormat0.getRecordSize(storeHeader51);
    org.junit.Assert.assertNotNull(relationshipRecord1);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord5);
    org.junit.Assert.assertNotNull(relationshipRecord6);
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord14);
    org.junit.Assert.assertNotNull(relationshipRecord15);
    org.junit.Assert.assertNotNull(relationshipRecord22);
    org.junit.Assert.assertNotNull(relationshipRecord25);
    org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord37);
    org.junit.Assert.assertNotNull(relationshipRecord40);
    org.junit.Assert.assertTrue("'" + int50 + "' != '" + 32 + "'", int50 == 32);
    org.junit.Assert.assertTrue("'" + int52 + "' != '" + 32 + "'", int52 == 32);
  }

  @Test
  public void test1134() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1134");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) '4');
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord6 = relationshipHighLimitRecordFormat5.newRecord();
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    relationshipHighLimitRecordFormat3.prepare(relationshipRecord6, (int) 'a', idSequence8,
        cursorContext9);
    org.neo4j.internal.id.IdSequence idSequence12 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext13 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord6, 10, idSequence12,
        cursorContext13);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat16 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat17 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord18 = relationshipRecordFormat17.newRecord();
    long long19 = relationshipHighLimitRecordFormat16.getNextRecordReference(relationshipRecord18);
    org.neo4j.internal.id.IdSequence idSequence21 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext22 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord18, 96, idSequence21,
        cursorContext22);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord24 = relationshipHighLimitRecordFormat1.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_25 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_26 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat27 = v300_26.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat28 = v300_26.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType29 = null;
    boolean boolean30 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_25,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_26, capabilityType29);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat31 = v300_26.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat32 = v300_26.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat33 = v300_26.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat34 = v300_26.property();
    boolean boolean35 = relationshipHighLimitRecordFormat1.equals(
        (java.lang.Object) propertyRecordRecordFormat34);
    org.junit.Assert.assertNotNull(relationshipRecord6);
    org.junit.Assert.assertNotNull(relationshipRecord18);
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord24);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat27);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat28);
    org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat31);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat32);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat33);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat34);
    org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
  }

  @Test
  public void test1135() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1135");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord2 = relationshipHighLimitRecordFormat1.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord5 = relationshipHighLimitRecordFormat4.newRecord();
    org.neo4j.internal.id.IdSequence idSequence7 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext8 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord5, (int) (short) 1, idSequence7,
        cursorContext8);
    int int10 = relationshipHighLimitRecordFormat1.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_11 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat12 = v310_11.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat13 = v310_11.relationshipGroup();
    java.lang.String str14 = v310_11.name();
    boolean boolean15 = relationshipHighLimitRecordFormat1.equals((java.lang.Object) v310_11);
    org.junit.Assert.assertNotNull(relationshipRecord2);
    org.junit.Assert.assertNotNull(relationshipRecord5);
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat12);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat13);
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "high_limitV3_1_0" + "'", str14,
        "high_limitV3_1_0");
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
  }

  @Test
  public void test1136() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1136");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    int int6 = recordFormatDynamicRecordImpl0.getRecordHeaderSize();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertTrue("'" + int6 + "' != '" + 12 + "'", int6 == 12);
  }

  @Test
  public void test1137() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1137");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = propertyRecordFormat0.getRecordSize(storeHeader1);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl3 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats4 = highLimitFactoryDefaultImpl3.newInstance();
    boolean boolean5 = propertyRecordFormat0.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl3);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean8 = propertyRecordFormat0.equals((java.lang.Object) (short) 100);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat9 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord10 = propertyRecordFormat9.newRecord();
    long long11 = propertyRecordFormat0.getNextRecordReference(propertyRecord10);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader12 = null;
    int int13 = propertyRecordFormat0.getRecordSize(storeHeader12);
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_14 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat15 = v306_14.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat16 = v306_14.schema();
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_17 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat18 = v310_17.relationship();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType19 = null;
    boolean boolean20 = v306_14.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v310_17, capabilityType19);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat21 = v306_14.relationship();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily22 = v306_14.getFormatFamily();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat23 = v306_14.relationship();
    boolean boolean24 = propertyRecordFormat0.equals(
        (java.lang.Object) relationshipRecordRecordFormat23);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    org.junit.Assert.assertNotNull(recordFormats4);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    org.junit.Assert.assertNotNull(propertyRecord10);
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 48 + "'", int13 == 48);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat15);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat16);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat18);
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat21);
    org.junit.Assert.assertTrue(
        "'" + formatFamily22 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily22.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat23);
    org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
  }

  @Test
  public void test1138() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1138");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        (int) (short) 10);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord2 = relationshipGroupHighLimitRecordFormat1.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord3 = relationshipGroupHighLimitRecordFormat1.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord5 = null;
    long long6 = relationshipGroupHighLimitRecordFormat4.getNextRecordReference(
        relationshipGroupRecord5);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord7 = relationshipGroupHighLimitRecordFormat4.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat8 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader9 = null;
    int int10 = relationshipGroupRecordFormat8.getRecordSize(storeHeader9);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat11 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long12 = relationshipGroupHighLimitRecordFormat11.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat13 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord14 = null;
    long long15 = relationshipGroupHighLimitRecordFormat13.getNextRecordReference(
        relationshipGroupRecord14);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord16 = relationshipGroupHighLimitRecordFormat13.newRecord();
    org.neo4j.internal.id.IdSequence idSequence18 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext19 = null;
    relationshipGroupHighLimitRecordFormat11.prepare(relationshipGroupRecord16, (int) (byte) 1,
        idSequence18, cursorContext19);
    org.neo4j.internal.id.IdSequence idSequence22 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext23 = null;
    relationshipGroupRecordFormat8.prepare(relationshipGroupRecord16, 0, idSequence22,
        cursorContext23);
    org.neo4j.internal.id.IdSequence idSequence26 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext27 = null;
    relationshipGroupHighLimitRecordFormat4.prepare(relationshipGroupRecord16, (int) '4',
        idSequence26, cursorContext27);
    org.neo4j.io.pagecache.PageCursor pageCursor29 = null;
    try {
      relationshipGroupHighLimitRecordFormat1.write(relationshipGroupRecord16, pageCursor29, 32,
          16);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(relationshipGroupRecord2);
    org.junit.Assert.assertNotNull(relationshipGroupRecord3);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord7);
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1125899906842623L + "'",
        long12 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord16);
  }

  @Test
  public void test1139() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1139");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    int int4 = nodeHighLimitRecordFormat1.getPageSize(35, (int) (byte) -1);
    long long5 = nodeHighLimitRecordFormat1.getMaxId();
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1125899906842623L + "'",
        long5 == 1125899906842623L);
  }

  @Test
  public void test1140() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1140");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v306_0.relationship();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray2 = v306_0.capabilities();
    java.lang.String str3 = v306_0.introductionVersion();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat4 = v306_0.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat5 = v306_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat6 = v306_0.propertyKeyToken();
    java.lang.String str7 = v306_0.name();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(capabilityArray2);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "3.0.6" + "'", str3, "3.0.6");
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat4);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat5);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat6);
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "high_limitV3_0_6" + "'", str7,
        "high_limitV3_0_6");
  }

  @Test
  public void test1141() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1141");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v306_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat2 = v306_0.schema();
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_3 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat4 = v310_3.relationship();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType5 = null;
    boolean boolean6 = v306_0.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v310_3, capabilityType5);
    java.lang.String str7 = v310_3.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat8 = v310_3.property();
    java.lang.String str9 = v310_3.storeVersion();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat2);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat4);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "high_limitV3_1_0" + "'", str7,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat8);
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "vE.H.2" + "'", str9, "vE.H.2");
  }

  @Test
  public void test1142() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1142");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    int int3 = recordFormatDynamicRecordImpl0.getPageSize(24, 8);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl4 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean6 = recordFormatDynamicRecordImpl4.equals((java.lang.Object) 100.0f);
    int int9 = recordFormatDynamicRecordImpl4.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord10 = recordFormatDynamicRecordImpl4.newRecord();
    long long11 = recordFormatDynamicRecordImpl0.getNextRecordReference(dynamicRecord10);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl12 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean14 = recordFormatDynamicRecordImpl12.equals((java.lang.Object) 100.0f);
    int int17 = recordFormatDynamicRecordImpl12.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord18 = recordFormatDynamicRecordImpl12.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl19 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean21 = recordFormatDynamicRecordImpl19.equals((java.lang.Object) 100.0f);
    int int24 = recordFormatDynamicRecordImpl19.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord25 = recordFormatDynamicRecordImpl19.newRecord();
    long long26 = recordFormatDynamicRecordImpl12.getNextRecordReference(dynamicRecord25);
    long long27 = recordFormatDynamicRecordImpl0.getNextRecordReference(dynamicRecord25);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl28 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean30 = recordFormatDynamicRecordImpl28.equals((java.lang.Object) 100.0f);
    long long31 = recordFormatDynamicRecordImpl28.getMaxId();
    int int34 = recordFormatDynamicRecordImpl28.getPageSize(64, 48);
    int int35 = recordFormatDynamicRecordImpl28.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord36 = recordFormatDynamicRecordImpl28.newRecord();
    org.neo4j.io.pagecache.PageCursor pageCursor37 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad38 = null;
    try {
      recordFormatDynamicRecordImpl0.read(dynamicRecord36, pageCursor37, recordLoad38,
          (int) (short) -1, 128);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 24 + "'", int3 == 24);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16 + "'", int9 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord10);
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    org.junit.Assert.assertTrue("'" + int17 + "' != '" + 16 + "'", int17 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord18);
    org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    org.junit.Assert.assertTrue("'" + int24 + "' != '" + 16 + "'", int24 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord25);
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
    org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1125899906842623L + "'",
        long31 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int34 + "' != '" + 48 + "'", int34 == 48);
    org.junit.Assert.assertTrue("'" + int35 + "' != '" + 12 + "'", int35 == 12);
    org.junit.Assert.assertNotNull(dynamicRecord36);
  }

  @Test
  public void test1143() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1143");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl6 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean8 = recordFormatDynamicRecordImpl6.equals((java.lang.Object) 100.0f);
    int int11 = recordFormatDynamicRecordImpl6.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord12 = recordFormatDynamicRecordImpl6.newRecord();
    int int15 = recordFormatDynamicRecordImpl6.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord16 = recordFormatDynamicRecordImpl6.newRecord();
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord17 = recordFormatDynamicRecordImpl6.newRecord();
    org.neo4j.internal.id.IdSequence idSequence19 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext20 = null;
    recordFormatDynamicRecordImpl0.prepare(dynamicRecord17, 10, idSequence19, cursorContext20);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat22 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader23 = null;
    int int24 = propertyRecordFormat22.getRecordSize(storeHeader23);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl25 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats26 = highLimitFactoryDefaultImpl25.newInstance();
    boolean boolean27 = propertyRecordFormat22.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl25);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat29 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean30 = propertyRecordFormat22.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord31 = propertyRecordFormat22.newRecord();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader32 = null;
    int int33 = propertyRecordFormat22.getRecordSize(storeHeader32);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat34 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat35 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord36 = propertyRecordFormat35.newRecord();
    long long37 = propertyOneByteHeaderRecordFormat34.getNextRecordReference(propertyRecord36);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat38 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat39 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord40 = propertyRecordFormat39.newRecord();
    long long41 = propertyOneByteHeaderRecordFormat38.getNextRecordReference(propertyRecord40);
    long long42 = propertyOneByteHeaderRecordFormat34.getNextRecordReference(propertyRecord40);
    org.neo4j.internal.id.IdSequence idSequence44 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext45 = null;
    propertyRecordFormat22.prepare(propertyRecord40, 99, idSequence44, cursorContext45);
    boolean boolean47 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) idSequence44);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl48 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean50 = recordFormatDynamicRecordImpl48.equals((java.lang.Object) 100.0f);
    int int53 = recordFormatDynamicRecordImpl48.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord54 = recordFormatDynamicRecordImpl48.newRecord();
    int int57 = recordFormatDynamicRecordImpl48.getPageSize(48, 35);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl58 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    int int59 = recordFormatDynamicRecordImpl58.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord60 = recordFormatDynamicRecordImpl58.newRecord();
    org.neo4j.internal.id.IdSequence idSequence62 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext63 = null;
    recordFormatDynamicRecordImpl48.prepare(dynamicRecord60, (int) (byte) 1, idSequence62,
        cursorContext63);
    org.neo4j.io.pagecache.PageCursor pageCursor65 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad66 = null;
    try {
      recordFormatDynamicRecordImpl0.read(dynamicRecord60, pageCursor65, recordLoad66, 48, 48);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    org.junit.Assert.assertTrue("'" + int11 + "' != '" + 16 + "'", int11 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord12);
    org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord16);
    org.junit.Assert.assertNotNull(dynamicRecord17);
    org.junit.Assert.assertTrue("'" + int24 + "' != '" + 48 + "'", int24 == 48);
    org.junit.Assert.assertNotNull(recordFormats26);
    org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    org.junit.Assert.assertNotNull(propertyRecord31);
    org.junit.Assert.assertTrue("'" + int33 + "' != '" + 48 + "'", int33 == 48);
    org.junit.Assert.assertNotNull(propertyRecord36);
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord40);
    org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
    org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    org.junit.Assert.assertTrue("'" + int53 + "' != '" + 16 + "'", int53 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord54);
    org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
    org.junit.Assert.assertTrue("'" + int59 + "' != '" + 12 + "'", int59 == 12);
    org.junit.Assert.assertNotNull(dynamicRecord60);
  }

  @Test
  public void test1144() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1144");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat6 = v300_1.relationship();
    boolean boolean8 = v300_1.equals((java.lang.Object) 24);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat9 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily10 = v300_1.getFormatFamily();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat11 = v300_1.relationshipGroup();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.MetaDataRecord> metaDataRecordRecordFormat12 = v300_1.metaData();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat6);
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat9);
    org.junit.Assert.assertTrue(
        "'" + formatFamily10 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily10.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat11);
    org.junit.Assert.assertNotNull(metaDataRecordRecordFormat12);
  }

  @Test
  public void test1145() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1145");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat1 = v310_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat2 = v310_0.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat3 = v310_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat4 = v310_0.relationshipGroup();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat5 = v310_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat6 = v310_0.relationshipTypeToken();
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat1);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat3);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat4);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat5);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat6);
  }

  @Test
  public void test1146() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1146");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat1 = v306_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat2 = v306_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat3 = v306_0.node();
    java.lang.String str4 = v306_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat5 = v306_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat6 = v306_0.node();
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat1);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat2);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "high_limitV3_0_6" + "'", str4,
        "high_limitV3_0_6");
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat5);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat6);
  }

  @Test
  public void test1147() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1147");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v306_0.relationship();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray2 = v306_0.capabilities();
    java.lang.String str3 = v306_0.introductionVersion();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat4 = v306_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat5 = v306_0.propertyKeyToken();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(capabilityArray2);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "3.0.6" + "'", str3, "3.0.6");
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat4);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat5);
  }

  @Test
  public void test1148() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1148");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat1 = v320_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat2 = v320_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat3 = v320_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat4 = v320_0.property();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily5 = v320_0.getFormatFamily();
    org.neo4j.storageengine.api.format.Capability capability6 = null;
    boolean boolean7 = v320_0.hasCapability(capability6);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat8 = v320_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat9 = v320_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat10 = v320_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat11 = v320_0.node();
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat1);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat2);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat3);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat4);
    org.junit.Assert.assertTrue(
        "'" + formatFamily5 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily5.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat8);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat9);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat10);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat11);
  }

  @Test
  public void test1149() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1149");
    }
    java.util.function.Function<org.neo4j.kernel.impl.store.StoreHeader, java.lang.Integer> storeHeaderFunction1 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.fixedRecordSize(
        30);
    org.junit.Assert.assertNotNull(storeHeaderFunction1);
  }

  @Test
  public void test1150() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1150");
    }
    org.neo4j.io.pagecache.PageCursor pageCursor1 = null;
    try {
      io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.enoForPa(144L,
          pageCursor1);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test1151() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1151");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long1 = propertyOneByteHeaderRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord4 = propertyRecordFormat3.newRecord();
    long long5 = propertyOneByteHeaderRecordFormat2.getNextRecordReference(propertyRecord4);
    long long6 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord4);
    int int9 = propertyOneByteHeaderRecordFormat0.getPageSize(64, (int) (short) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat10 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord11 = propertyRecordFormat10.newRecord();
    long long12 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord11);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat13 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader14 = null;
    int int15 = propertyRecordFormat13.getRecordSize(storeHeader14);
    long long16 = propertyRecordFormat13.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat17 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat18 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord19 = propertyRecordFormat18.newRecord();
    long long20 = propertyOneByteHeaderRecordFormat17.getNextRecordReference(propertyRecord19);
    org.neo4j.internal.id.IdSequence idSequence22 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext23 = null;
    propertyRecordFormat13.prepare(propertyRecord19, 0, idSequence22, cursorContext23);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord25 = propertyRecordFormat13.newRecord();
    long long26 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord25);
    long long27 = propertyOneByteHeaderRecordFormat0.getMaxId();
    long long28 = propertyOneByteHeaderRecordFormat0.getMaxId();
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord4);
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 64 + "'", int9 == 64);
    org.junit.Assert.assertNotNull(propertyRecord11);
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
    org.junit.Assert.assertTrue("'" + int15 + "' != '" + 48 + "'", int15 == 48);
    org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1125899906842623L + "'",
        long16 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord19);
    org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord25);
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
    org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1125899906842623L + "'",
        long27 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1125899906842623L + "'",
        long28 == 1125899906842623L);
  }

  @Test
  public void test1152() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1152");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    org.neo4j.storageengine.api.format.Capability[] capabilityArray6 = v306_0.capabilities();
    org.neo4j.kernel.impl.store.format.RecordFormats[] recordFormatsArray7 = v306_0.compatibleVersionsForRollingUpgrade();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat8 = v306_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat9 = v306_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat10 = v306_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat11 = v306_0.schema();
    java.lang.String str12 = v306_0.storeVersion();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(capabilityArray6);
    org.junit.Assert.assertNotNull(recordFormatsArray7);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat8);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat9);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat10);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat11);
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "vE.H.0b" + "'", str12, "vE.H.0b");
  }

  @Test
  public void test1153() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1153");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord1 = null;
    long long2 = nodeRecordFormat0.getNextRecordReference(nodeRecord1);
    int int3 = nodeRecordFormat0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader4 = null;
    int int5 = nodeRecordFormat0.getRecordSize(storeHeader4);
    int int8 = nodeRecordFormat0.getPageSize((int) '4', (int) (short) 1);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord9 = nodeRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_10 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat11 = v306_10.relationship();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray12 = v306_10.capabilities();
    java.lang.String str13 = v306_10.introductionVersion();
    boolean boolean14 = nodeRecordFormat0.equals((java.lang.Object) v306_10);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_15 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily16 = v300_15.getFormatFamily();
    boolean boolean17 = v306_10.equals((java.lang.Object) formatFamily16);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat18 = v306_10.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat19 = v306_10.node();
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
    org.junit.Assert.assertNotNull(nodeRecord9);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat11);
    org.junit.Assert.assertNotNull(capabilityArray12);
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "3.0.6" + "'", str13, "3.0.6");
    org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    org.junit.Assert.assertTrue(
        "'" + formatFamily16 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily16.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat18);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat19);
  }

  @Test
  public void test1154() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1154");
    }
    long long2 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.torete(
        (long) 99, (long) (byte) 100);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
  }

  @Test
  public void test1155() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1155");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord1 = relationshipRecordFormat0.newRecord();
    int int2 = relationshipRecordFormat0.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord5 = relationshipRecordFormat4.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord6 = relationshipRecordFormat4.newRecord();
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    relationshipRecordFormat3.prepare(relationshipRecord6, 100, idSequence8, cursorContext9);
    long long11 = relationshipRecordFormat0.getNextRecordReference(relationshipRecord6);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat13 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord14 = relationshipRecordFormat13.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord15 = relationshipRecordFormat13.newRecord();
    org.neo4j.internal.id.IdSequence idSequence17 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext18 = null;
    relationshipRecordFormat12.prepare(relationshipRecord15, 100, idSequence17, cursorContext18);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat21 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord22 = relationshipHighLimitRecordFormat21.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat24 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord25 = relationshipHighLimitRecordFormat24.newRecord();
    org.neo4j.internal.id.IdSequence idSequence27 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext28 = null;
    relationshipHighLimitRecordFormat21.prepare(relationshipRecord25, (int) (short) 1, idSequence27,
        cursorContext28);
    org.neo4j.internal.id.IdSequence idSequence31 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext32 = null;
    relationshipRecordFormat12.prepare(relationshipRecord25, 24, idSequence31, cursorContext32);
    long long34 = relationshipRecordFormat0.getNextRecordReference(relationshipRecord25);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat36 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord37 = relationshipHighLimitRecordFormat36.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat39 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord40 = relationshipHighLimitRecordFormat39.newRecord();
    org.neo4j.internal.id.IdSequence idSequence42 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext43 = null;
    relationshipHighLimitRecordFormat36.prepare(relationshipRecord40, (int) (short) 1, idSequence42,
        cursorContext43);
    org.neo4j.internal.id.IdSequence idSequence46 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext47 = null;
    relationshipRecordFormat0.prepare(relationshipRecord40, 12, idSequence46, cursorContext47);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat50 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat52 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat53 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord54 = relationshipRecordFormat53.newRecord();
    long long55 = relationshipHighLimitRecordFormat52.getNextRecordReference(relationshipRecord54);
    org.neo4j.internal.id.IdSequence idSequence57 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext58 = null;
    relationshipHighLimitRecordFormat50.prepare(relationshipRecord54, (int) (byte) 10, idSequence57,
        cursorContext58);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat61 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord62 = relationshipHighLimitRecordFormat61.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat64 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord65 = relationshipHighLimitRecordFormat64.newRecord();
    org.neo4j.internal.id.IdSequence idSequence67 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext68 = null;
    relationshipHighLimitRecordFormat61.prepare(relationshipRecord65, (int) (short) 1, idSequence67,
        cursorContext68);
    long long70 = relationshipHighLimitRecordFormat50.getNextRecordReference(relationshipRecord65);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord71 = relationshipHighLimitRecordFormat50.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord72 = relationshipHighLimitRecordFormat50.newRecord();
    org.neo4j.internal.id.IdSequence idSequence74 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext75 = null;
    relationshipRecordFormat0.prepare(relationshipRecord72, 48, idSequence74, cursorContext75);
    org.junit.Assert.assertNotNull(relationshipRecord1);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord5);
    org.junit.Assert.assertNotNull(relationshipRecord6);
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord14);
    org.junit.Assert.assertNotNull(relationshipRecord15);
    org.junit.Assert.assertNotNull(relationshipRecord22);
    org.junit.Assert.assertNotNull(relationshipRecord25);
    org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord37);
    org.junit.Assert.assertNotNull(relationshipRecord40);
    org.junit.Assert.assertNotNull(relationshipRecord54);
    org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord62);
    org.junit.Assert.assertNotNull(relationshipRecord65);
    org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-1L) + "'", long70 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord71);
    org.junit.Assert.assertNotNull(relationshipRecord72);
  }

  @Test
  public void test1156() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1156");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.storageengine.api.format.Capability capability1 = null;
    boolean boolean2 = v310_0.hasCapability(capability1);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat3 = v310_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat4 = v310_0.node();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily5 = v310_0.getFormatFamily();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat3);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat4);
    org.junit.Assert.assertTrue(
        "'" + formatFamily5 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily5.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
  }

  @Test
  public void test1157() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1157");
    }
    java.util.function.Function<org.neo4j.kernel.impl.store.StoreHeader, java.lang.Integer> storeHeaderFunction1 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.fixedRecordSize(
        10);
    org.junit.Assert.assertNotNull(storeHeaderFunction1);
  }

  @Test
  public void test1158() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1158");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.FactoryHighLimitDefaultImpl factoryHighLimitDefaultImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.FactoryHighLimitDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats1 = factoryHighLimitDefaultImpl0.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats2 = factoryHighLimitDefaultImpl0.newInstance();
    java.lang.String str3 = factoryHighLimitDefaultImpl0.getName();
    org.junit.Assert.assertNotNull(recordFormats1);
    org.junit.Assert.assertNotNull(recordFormats2);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "high_limitV3_0_6" + "'", str3,
        "high_limitV3_0_6");
  }

  @Test
  public void test1159() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1159");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord2 = relationshipRecordFormat1.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord3 = relationshipRecordFormat1.newRecord();
    org.neo4j.internal.id.IdSequence idSequence5 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext6 = null;
    relationshipRecordFormat0.prepare(relationshipRecord3, 100, idSequence5, cursorContext6);
    long long8 = relationshipRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat9 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader10 = null;
    int int11 = relationshipRecordFormat9.getRecordSize(storeHeader10);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat13 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat14 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord15 = relationshipRecordFormat14.newRecord();
    long long16 = relationshipHighLimitRecordFormat13.getNextRecordReference(relationshipRecord15);
    org.neo4j.internal.id.IdSequence idSequence18 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext19 = null;
    relationshipRecordFormat9.prepare(relationshipRecord15, 3, idSequence18, cursorContext19);
    long long21 = relationshipRecordFormat0.getNextRecordReference(relationshipRecord15);
    long long22 = relationshipRecordFormat0.getMaxId();
    org.neo4j.io.pagecache.PageCursor pageCursor23 = null;
    try {
      boolean boolean24 = relationshipRecordFormat0.isInUse(pageCursor23);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(relationshipRecord2);
    org.junit.Assert.assertNotNull(relationshipRecord3);
    org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1125899906842623L + "'",
        long8 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int11 + "' != '" + 32 + "'", int11 == 32);
    org.junit.Assert.assertNotNull(relationshipRecord15);
    org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1125899906842623L + "'",
        long22 == 1125899906842623L);
  }

  @Test
  public void test1160() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1160");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long1 = relationshipGroupHighLimitRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord3 = null;
    long long4 = relationshipGroupHighLimitRecordFormat2.getNextRecordReference(
        relationshipGroupRecord3);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord5 = relationshipGroupHighLimitRecordFormat2.newRecord();
    org.neo4j.internal.id.IdSequence idSequence7 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext8 = null;
    relationshipGroupHighLimitRecordFormat0.prepare(relationshipGroupRecord5, 0, idSequence7,
        cursorContext8);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl10 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean12 = recordFormatDynamicRecordImpl10.equals((java.lang.Object) 100.0f);
    int int15 = recordFormatDynamicRecordImpl10.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord16 = recordFormatDynamicRecordImpl10.newRecord();
    boolean boolean17 = relationshipGroupHighLimitRecordFormat0.equals(
        (java.lang.Object) recordFormatDynamicRecordImpl10);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord18 = null;
    org.neo4j.internal.id.IdSequence idSequence20 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext21 = null;
    try {
      relationshipGroupHighLimitRecordFormat0.prepare(relationshipGroupRecord18, 8, idSequence20,
          cursorContext21);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord5);
    org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    org.junit.Assert.assertTrue("'" + int15 + "' != '" + 16 + "'", int15 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord16);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
  }

  @Test
  public void test1161() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1161");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = nodeRecordFormat0.getRecordSize(storeHeader1);
    boolean boolean4 = nodeRecordFormat0.equals((java.lang.Object) 8);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord5 = nodeRecordFormat0.newRecord();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord6 = nodeRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_7 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat8 = v300_7.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat9 = v300_7.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat10 = v300_7.labelToken();
    boolean boolean11 = nodeRecordFormat0.equals((java.lang.Object) v300_7);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord12 = nodeRecordFormat0.newRecord();
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertNotNull(nodeRecord5);
    org.junit.Assert.assertNotNull(nodeRecord6);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat8);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat9);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat10);
    org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    org.junit.Assert.assertNotNull(nodeRecord12);
  }

  @Test
  public void test1162() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1162");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v310_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat2 = v310_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat3 = v310_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat4 = v310_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat5 = v310_0.relationshipGroup();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat6 = v310_0.propertyKeyToken();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat3);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat4);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat5);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat6);
  }

  @Test
  public void test1163() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1163");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord5 = relationshipRecordFormat4.newRecord();
    long long6 = relationshipHighLimitRecordFormat3.getNextRecordReference(relationshipRecord5);
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord5, (int) (byte) 10, idSequence8,
        cursorContext9);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord13 = relationshipHighLimitRecordFormat12.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord16 = relationshipHighLimitRecordFormat15.newRecord();
    org.neo4j.internal.id.IdSequence idSequence18 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext19 = null;
    relationshipHighLimitRecordFormat12.prepare(relationshipRecord16, (int) (short) 1, idSequence18,
        cursorContext19);
    long long21 = relationshipHighLimitRecordFormat1.getNextRecordReference(relationshipRecord16);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord22 = relationshipHighLimitRecordFormat1.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord23 = relationshipHighLimitRecordFormat1.newRecord();
    org.neo4j.io.pagecache.PageCursor pageCursor24 = null;
    try {
      boolean boolean25 = relationshipHighLimitRecordFormat1.isInUse(pageCursor24);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(relationshipRecord5);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord13);
    org.junit.Assert.assertNotNull(relationshipRecord16);
    org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord22);
    org.junit.Assert.assertNotNull(relationshipRecord23);
  }

  @Test
  public void test1164() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1164");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord1 = relationshipRecordFormat0.newRecord();
    int int2 = relationshipRecordFormat0.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord5 = relationshipRecordFormat4.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord6 = relationshipRecordFormat4.newRecord();
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    relationshipRecordFormat3.prepare(relationshipRecord6, 100, idSequence8, cursorContext9);
    long long11 = relationshipRecordFormat0.getNextRecordReference(relationshipRecord6);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat13 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord14 = relationshipRecordFormat13.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord15 = relationshipRecordFormat13.newRecord();
    org.neo4j.internal.id.IdSequence idSequence17 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext18 = null;
    relationshipRecordFormat12.prepare(relationshipRecord15, 100, idSequence17, cursorContext18);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat21 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord22 = relationshipHighLimitRecordFormat21.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat24 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord25 = relationshipHighLimitRecordFormat24.newRecord();
    org.neo4j.internal.id.IdSequence idSequence27 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext28 = null;
    relationshipHighLimitRecordFormat21.prepare(relationshipRecord25, (int) (short) 1, idSequence27,
        cursorContext28);
    org.neo4j.internal.id.IdSequence idSequence31 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext32 = null;
    relationshipRecordFormat12.prepare(relationshipRecord25, 24, idSequence31, cursorContext32);
    long long34 = relationshipRecordFormat0.getNextRecordReference(relationshipRecord25);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat36 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord37 = relationshipHighLimitRecordFormat36.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat39 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord40 = relationshipHighLimitRecordFormat39.newRecord();
    org.neo4j.internal.id.IdSequence idSequence42 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext43 = null;
    relationshipHighLimitRecordFormat36.prepare(relationshipRecord40, (int) (short) 1, idSequence42,
        cursorContext43);
    org.neo4j.internal.id.IdSequence idSequence46 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext47 = null;
    relationshipRecordFormat0.prepare(relationshipRecord40, 12, idSequence46, cursorContext47);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader49 = null;
    int int50 = relationshipRecordFormat0.getRecordSize(storeHeader49);
    long long51 = relationshipRecordFormat0.getMaxId();
    org.junit.Assert.assertNotNull(relationshipRecord1);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord5);
    org.junit.Assert.assertNotNull(relationshipRecord6);
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord14);
    org.junit.Assert.assertNotNull(relationshipRecord15);
    org.junit.Assert.assertNotNull(relationshipRecord22);
    org.junit.Assert.assertNotNull(relationshipRecord25);
    org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord37);
    org.junit.Assert.assertNotNull(relationshipRecord40);
    org.junit.Assert.assertTrue("'" + int50 + "' != '" + 32 + "'", int50 == 32);
    org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1125899906842623L + "'",
        long51 == 1125899906842623L);
  }

  @Test
  public void test1165() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1165");
    }
    io.github.onograph.internal.batchimport.EnterpriseBatchImporterFactory enterpriseBatchImporterFactory0 = new io.github.onograph.internal.batchimport.EnterpriseBatchImporterFactory();
    java.lang.String str1 = enterpriseBatchImporterFactory0.getName();
    org.neo4j.io.layout.DatabaseLayout databaseLayout2 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction3 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer4 = null;
    org.neo4j.internal.batchimport.Configuration configuration5 = null;
    org.neo4j.logging.internal.LogService logService6 = null;
    org.neo4j.internal.batchimport.staging.ExecutionMonitor executionMonitor7 = null;
    org.neo4j.internal.batchimport.AdditionalInitialIds additionalInitialIds8 = null;
    org.neo4j.configuration.Config config9 = null;
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_10 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat11 = v306_10.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat12 = v306_10.schema();
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_13 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat14 = v310_13.relationship();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType15 = null;
    boolean boolean16 = v306_10.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v310_13, capabilityType15);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat17 = v306_10.relationship();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily18 = v306_10.getFormatFamily();
    java.lang.String str19 = v306_10.toString();
    org.neo4j.internal.batchimport.ImportLogic.Monitor monitor20 = null;
    org.neo4j.scheduler.JobScheduler jobScheduler21 = null;
    org.neo4j.internal.batchimport.input.Collector collector22 = null;
    org.neo4j.storageengine.api.LogFilesInitializer logFilesInitializer23 = null;
    org.neo4j.internal.batchimport.IndexImporterFactory indexImporterFactory24 = null;
    org.neo4j.memory.MemoryTracker memoryTracker25 = null;
    try {
      org.neo4j.internal.batchimport.BatchImporter batchImporter26 = enterpriseBatchImporterFactory0.instantiate(
          databaseLayout2, fileSystemAbstraction3, pageCacheTracer4, configuration5, logService6,
          executionMonitor7, additionalInitialIds8, config9,
          (org.neo4j.kernel.impl.store.format.RecordFormats) v306_10, monitor20, jobScheduler21,
          collector22, logFilesInitializer23, indexImporterFactory24, memoryTracker25);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "restartable" + "'", str1, "restartable");
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat11);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat12);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat14);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat17);
    org.junit.Assert.assertTrue(
        "'" + formatFamily18 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily18.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "RecordFormat:V306[vE.H.0b]" + "'",
        str19, "RecordFormat:V306[vE.H.0b]");
  }

  @Test
  public void test1166() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1166");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat1 = v320_0.dynamic();
    java.lang.String str2 = v320_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat3 = v320_0.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat4 = v320_0.relationship();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl5 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean7 = recordFormatDynamicRecordImpl5.equals((java.lang.Object) 100.0f);
    int int10 = recordFormatDynamicRecordImpl5.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord11 = recordFormatDynamicRecordImpl5.newRecord();
    int int14 = recordFormatDynamicRecordImpl5.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord15 = recordFormatDynamicRecordImpl5.newRecord();
    int int18 = recordFormatDynamicRecordImpl5.getPageSize((int) '4', (int) (short) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_19 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat20 = v320_19.relationship();
    boolean boolean21 = recordFormatDynamicRecordImpl5.equals((java.lang.Object) v320_19);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat22 = v320_19.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat23 = v320_19.relationshipGroup();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat24 = v320_19.node();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType25 = null;
    boolean boolean26 = v320_0.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v320_19, capabilityType25);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_2_0" + "'", str2,
        "high_limitV3_2_0");
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat3);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat4);
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord11);
    org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord15);
    org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat20);
    org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat22);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat23);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat24);
    org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
  }

  @Test
  public void test1167() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1167");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v306_0.relationship();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray2 = v306_0.capabilities();
    java.lang.String str3 = v306_0.introductionVersion();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat4 = v306_0.relationshipGroup();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat5 = v306_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat6 = v306_0.node();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(capabilityArray2);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "3.0.6" + "'", str3, "3.0.6");
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat4);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat5);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat6);
  }

  @Test
  public void test1168() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1168");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat1 = v306_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat2 = v306_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat3 = v306_0.property();
    java.lang.String str4 = v306_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat5 = v306_0.dynamic();
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat1);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat2);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "high_limitV3_0_6" + "'", str4,
        "high_limitV3_0_6");
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat5);
  }

  @Test
  public void test1169() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1169");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord2 = relationshipHighLimitRecordFormat1.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord4 = relationshipRecordFormat3.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord5 = relationshipRecordFormat3.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord8 = relationshipHighLimitRecordFormat7.newRecord();
    org.neo4j.internal.id.IdSequence idSequence10 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext11 = null;
    relationshipRecordFormat3.prepare(relationshipRecord8, (int) (byte) 100, idSequence10,
        cursorContext11);
    org.neo4j.internal.id.IdSequence idSequence14 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext15 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord8, 100, idSequence14,
        cursorContext15);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader17 = null;
    int int18 = relationshipHighLimitRecordFormat1.getRecordSize(storeHeader17);
    int int21 = relationshipHighLimitRecordFormat1.getPageSize(100, (int) (byte) 1);
    org.junit.Assert.assertNotNull(relationshipRecord2);
    org.junit.Assert.assertNotNull(relationshipRecord4);
    org.junit.Assert.assertNotNull(relationshipRecord5);
    org.junit.Assert.assertNotNull(relationshipRecord8);
    org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
  }

  @Test
  public void test1170() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1170");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long1 = propertyOneByteHeaderRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord4 = propertyRecordFormat3.newRecord();
    long long5 = propertyOneByteHeaderRecordFormat2.getNextRecordReference(propertyRecord4);
    long long6 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord4);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat8 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord9 = propertyRecordFormat8.newRecord();
    long long10 = propertyOneByteHeaderRecordFormat7.getNextRecordReference(propertyRecord9);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat11 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord13 = propertyRecordFormat12.newRecord();
    long long14 = propertyOneByteHeaderRecordFormat11.getNextRecordReference(propertyRecord13);
    long long15 = propertyOneByteHeaderRecordFormat7.getNextRecordReference(propertyRecord13);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat16 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long17 = propertyOneByteHeaderRecordFormat16.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord18 = propertyOneByteHeaderRecordFormat16.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat19 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long20 = propertyOneByteHeaderRecordFormat19.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord21 = propertyOneByteHeaderRecordFormat19.newRecord();
    long long22 = propertyOneByteHeaderRecordFormat16.getNextRecordReference(propertyRecord21);
    org.neo4j.internal.id.IdSequence idSequence24 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext25 = null;
    propertyOneByteHeaderRecordFormat7.prepare(propertyRecord21, (int) (byte) -1, idSequence24,
        cursorContext25);
    long long27 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord21);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader28 = null;
    int int29 = propertyOneByteHeaderRecordFormat0.getRecordSize(storeHeader28);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat30 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long31 = propertyOneByteHeaderRecordFormat30.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord32 = propertyOneByteHeaderRecordFormat30.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat33 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long34 = propertyOneByteHeaderRecordFormat33.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord35 = propertyOneByteHeaderRecordFormat33.newRecord();
    long long36 = propertyOneByteHeaderRecordFormat30.getNextRecordReference(propertyRecord35);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader37 = null;
    int int38 = propertyOneByteHeaderRecordFormat30.getRecordSize(storeHeader37);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord39 = propertyOneByteHeaderRecordFormat30.newRecord();
    long long40 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord39);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat41 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader42 = null;
    int int43 = propertyRecordFormat41.getRecordSize(storeHeader42);
    long long44 = propertyRecordFormat41.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum highLimitEncEnum45 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8;
    boolean boolean46 = propertyRecordFormat41.equals((java.lang.Object) highLimitEncEnum45);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord47 = null;
    org.neo4j.internal.id.IdSequence idSequence49 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext50 = null;
    propertyRecordFormat41.prepare(propertyRecord47, 128, idSequence49, cursorContext50);
    long long52 = propertyRecordFormat41.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat53 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader54 = null;
    int int55 = propertyRecordFormat53.getRecordSize(storeHeader54);
    long long56 = propertyRecordFormat53.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum highLimitEncEnum57 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8;
    boolean boolean58 = propertyRecordFormat53.equals((java.lang.Object) highLimitEncEnum57);
    long long59 = propertyRecordFormat53.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord60 = propertyRecordFormat53.newRecord();
    long long61 = propertyRecordFormat41.getNextRecordReference(propertyRecord60);
    org.neo4j.internal.id.IdSequence idSequence63 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext64 = null;
    propertyOneByteHeaderRecordFormat0.prepare(propertyRecord60, 8, idSequence63, cursorContext64);
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord4);
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord9);
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord13);
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1125899906842623L + "'",
        long17 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord18);
    org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1125899906842623L + "'",
        long20 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord21);
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
    org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
    org.junit.Assert.assertTrue("'" + int29 + "' != '" + 48 + "'", int29 == 48);
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1125899906842623L + "'",
        long31 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord32);
    org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1125899906842623L + "'",
        long34 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord35);
    org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
    org.junit.Assert.assertTrue("'" + int38 + "' != '" + 48 + "'", int38 == 48);
    org.junit.Assert.assertNotNull(propertyRecord39);
    org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
    org.junit.Assert.assertTrue("'" + int43 + "' != '" + 48 + "'", int43 == 48);
    org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1125899906842623L + "'",
        long44 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + highLimitEncEnum45 + "' != '"
            + io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8 + "'",
        highLimitEncEnum45.equals(
            io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8));
    org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1125899906842623L + "'",
        long52 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int55 + "' != '" + 48 + "'", int55 == 48);
    org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1125899906842623L + "'",
        long56 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + highLimitEncEnum57 + "' != '"
            + io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8 + "'",
        highLimitEncEnum57.equals(
            io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8));
    org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1125899906842623L + "'",
        long59 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord60);
    org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
  }

  @Test
  public void test1171() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1171");
    }
    long long2 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.toable((-2L),
        (long) 24);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 22L + "'", long2 == 22L);
  }

  @Test
  public void test1172() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1172");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        0);
    long long2 = relationshipGroupHighLimitRecordFormat1.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long4 = relationshipGroupHighLimitRecordFormat3.getMaxId();
    long long5 = relationshipGroupHighLimitRecordFormat3.getMaxId();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord6 = relationshipGroupHighLimitRecordFormat3.newRecord();
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    relationshipGroupHighLimitRecordFormat1.prepare(relationshipGroupRecord6, (int) (short) 0,
        idSequence8, cursorContext9);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader11 = null;
    int int12 = relationshipGroupHighLimitRecordFormat1.getRecordSize(storeHeader11);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat13 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord14 = null;
    long long15 = relationshipGroupHighLimitRecordFormat13.getNextRecordReference(
        relationshipGroupRecord14);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord16 = relationshipGroupHighLimitRecordFormat13.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat17 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader18 = null;
    int int19 = relationshipGroupRecordFormat17.getRecordSize(storeHeader18);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat20 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long21 = relationshipGroupHighLimitRecordFormat20.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat22 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord23 = null;
    long long24 = relationshipGroupHighLimitRecordFormat22.getNextRecordReference(
        relationshipGroupRecord23);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord25 = relationshipGroupHighLimitRecordFormat22.newRecord();
    org.neo4j.internal.id.IdSequence idSequence27 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext28 = null;
    relationshipGroupHighLimitRecordFormat20.prepare(relationshipGroupRecord25, (int) (byte) 1,
        idSequence27, cursorContext28);
    org.neo4j.internal.id.IdSequence idSequence31 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext32 = null;
    relationshipGroupRecordFormat17.prepare(relationshipGroupRecord25, 0, idSequence31,
        cursorContext32);
    org.neo4j.internal.id.IdSequence idSequence35 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext36 = null;
    relationshipGroupHighLimitRecordFormat13.prepare(relationshipGroupRecord25, (int) '4',
        idSequence35, cursorContext36);
    org.neo4j.internal.id.IdSequence idSequence39 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext40 = null;
    relationshipGroupHighLimitRecordFormat1.prepare(relationshipGroupRecord25, (int) (byte) 0,
        idSequence39, cursorContext40);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat43 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        24);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat44 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader45 = null;
    int int46 = relationshipGroupRecordFormat44.getRecordSize(storeHeader45);
    long long47 = relationshipGroupRecordFormat44.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat48 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord49 = null;
    long long50 = relationshipGroupHighLimitRecordFormat48.getNextRecordReference(
        relationshipGroupRecord49);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord51 = relationshipGroupHighLimitRecordFormat48.newRecord();
    org.neo4j.internal.id.IdSequence idSequence53 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext54 = null;
    relationshipGroupRecordFormat44.prepare(relationshipGroupRecord51, 128, idSequence53,
        cursorContext54);
    org.neo4j.internal.id.IdSequence idSequence57 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext58 = null;
    relationshipGroupHighLimitRecordFormat43.prepare(relationshipGroupRecord51, 24, idSequence57,
        cursorContext58);
    org.neo4j.internal.id.IdSequence idSequence61 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext62 = null;
    relationshipGroupHighLimitRecordFormat1.prepare(relationshipGroupRecord51, 10, idSequence61,
        cursorContext62);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1125899906842623L + "'",
        long2 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1125899906842623L + "'",
        long4 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1125899906842623L + "'",
        long5 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipGroupRecord6);
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord16);
    org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
    org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1125899906842623L + "'",
        long21 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord25);
    org.junit.Assert.assertTrue("'" + int46 + "' != '" + 32 + "'", int46 == 32);
    org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1125899906842623L + "'",
        long47 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord51);
  }

  @Test
  public void test1173() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1173");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v320_0.relationship();
    java.lang.String str2 = v320_0.name();
    java.lang.String str3 = v320_0.name();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_2_0" + "'", str2,
        "high_limitV3_2_0");
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "high_limitV3_2_0" + "'", str3,
        "high_limitV3_2_0");
  }

  @Test
  public void test1174() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1174");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = propertyRecordFormat0.getRecordSize(storeHeader1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader4 = null;
    int int5 = propertyRecordFormat3.getRecordSize(storeHeader4);
    long long6 = propertyRecordFormat3.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat8 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord9 = propertyRecordFormat8.newRecord();
    long long10 = propertyOneByteHeaderRecordFormat7.getNextRecordReference(propertyRecord9);
    org.neo4j.internal.id.IdSequence idSequence12 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext13 = null;
    propertyRecordFormat3.prepare(propertyRecord9, 0, idSequence12, cursorContext13);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord15 = propertyRecordFormat3.newRecord();
    org.neo4j.io.pagecache.PageCursor pageCursor16 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad17 = null;
    try {
      propertyRecordFormat0.read(propertyRecord15, pageCursor16, recordLoad17, (int) (short) 10, 1);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 48 + "'", int5 == 48);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1125899906842623L + "'",
        long6 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord9);
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord15);
  }

  @Test
  public void test1175() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1175");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        0);
    long long4 = relationshipGroupHighLimitRecordFormat3.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long6 = relationshipGroupHighLimitRecordFormat5.getMaxId();
    long long7 = relationshipGroupHighLimitRecordFormat5.getMaxId();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord8 = relationshipGroupHighLimitRecordFormat5.newRecord();
    org.neo4j.internal.id.IdSequence idSequence10 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext11 = null;
    relationshipGroupHighLimitRecordFormat3.prepare(relationshipGroupRecord8, (int) (short) 0,
        idSequence10, cursorContext11);
    org.neo4j.io.pagecache.PageCursor pageCursor13 = null;
    try {
      relationshipGroupHighLimitRecordFormat1.write(relationshipGroupRecord8, pageCursor13,
          (int) (short) -1, 0);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1125899906842623L + "'",
        long4 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1125899906842623L + "'",
        long6 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1125899906842623L + "'",
        long7 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipGroupRecord8);
  }

  @Test
  public void test1176() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1176");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        0);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long3 = relationshipGroupHighLimitRecordFormat2.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord5 = null;
    long long6 = relationshipGroupHighLimitRecordFormat4.getNextRecordReference(
        relationshipGroupRecord5);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord7 = relationshipGroupHighLimitRecordFormat4.newRecord();
    org.neo4j.internal.id.IdSequence idSequence9 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext10 = null;
    relationshipGroupHighLimitRecordFormat2.prepare(relationshipGroupRecord7, (int) (byte) 1,
        idSequence9, cursorContext10);
    org.neo4j.internal.id.IdSequence idSequence13 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext14 = null;
    relationshipGroupHighLimitRecordFormat1.prepare(relationshipGroupRecord7, 10, idSequence13,
        cursorContext14);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat16 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long17 = relationshipGroupHighLimitRecordFormat16.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat18 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord19 = null;
    long long20 = relationshipGroupHighLimitRecordFormat18.getNextRecordReference(
        relationshipGroupRecord19);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord21 = relationshipGroupHighLimitRecordFormat18.newRecord();
    org.neo4j.internal.id.IdSequence idSequence23 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext24 = null;
    relationshipGroupHighLimitRecordFormat16.prepare(relationshipGroupRecord21, (int) (byte) 1,
        idSequence23, cursorContext24);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat26 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord27 = null;
    long long28 = relationshipGroupHighLimitRecordFormat26.getNextRecordReference(
        relationshipGroupRecord27);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord29 = relationshipGroupHighLimitRecordFormat26.newRecord();
    org.neo4j.internal.id.IdSequence idSequence31 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext32 = null;
    relationshipGroupHighLimitRecordFormat16.prepare(relationshipGroupRecord29, 0, idSequence31,
        cursorContext32);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord34 = relationshipGroupHighLimitRecordFormat16.newRecord();
    org.neo4j.internal.id.IdSequence idSequence36 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext37 = null;
    relationshipGroupHighLimitRecordFormat1.prepare(relationshipGroupRecord34, (int) (short) 0,
        idSequence36, cursorContext37);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1125899906842623L + "'",
        long3 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord7);
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1125899906842623L + "'",
        long17 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord21);
    org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord29);
    org.junit.Assert.assertNotNull(relationshipGroupRecord34);
  }

  @Test
  public void test1177() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1177");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord1 = null;
    long long2 = nodeRecordFormat0.getNextRecordReference(nodeRecord1);
    int int5 = nodeRecordFormat0.getPageSize((int) (short) 100, 4);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat6 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat();
    long long7 = nodeHighLimitRecordFormat6.getMaxId();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord8 = nodeHighLimitRecordFormat6.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat9 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord10 = null;
    long long11 = nodeRecordFormat9.getNextRecordReference(nodeRecord10);
    int int12 = nodeRecordFormat9.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader13 = null;
    int int14 = nodeRecordFormat9.getRecordSize(storeHeader13);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord16 = null;
    long long17 = nodeRecordFormat15.getNextRecordReference(nodeRecord16);
    int int18 = nodeRecordFormat15.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader19 = null;
    int int20 = nodeRecordFormat15.getRecordSize(storeHeader19);
    int int23 = nodeRecordFormat15.getPageSize((int) '4', (int) (short) 1);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord24 = nodeRecordFormat15.newRecord();
    long long25 = nodeRecordFormat9.getNextRecordReference(nodeRecord24);
    long long26 = nodeHighLimitRecordFormat6.getNextRecordReference(nodeRecord24);
    long long27 = nodeRecordFormat0.getNextRecordReference(nodeRecord24);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1125899906842623L + "'",
        long7 == 1125899906842623L);
    org.junit.Assert.assertNotNull(nodeRecord8);
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    org.junit.Assert.assertTrue("'" + int14 + "' != '" + 16 + "'", int14 == 16);
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16);
    org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
    org.junit.Assert.assertNotNull(nodeRecord24);
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
    org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
  }

  @Test
  public void test1178() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1178");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod(235L,
        (long) ' ');
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 235L + "'", long2 == 235L);
  }

  @Test
  public void test1179() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1179");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    org.neo4j.storageengine.api.format.Capability[] capabilityArray6 = v306_0.capabilities();
    org.neo4j.kernel.impl.store.format.RecordFormats[] recordFormatsArray7 = v306_0.compatibleVersionsForRollingUpgrade();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat8 = v306_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat9 = v306_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat10 = v306_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat11 = v306_0.relationshipGroup();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(capabilityArray6);
    org.junit.Assert.assertNotNull(recordFormatsArray7);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat8);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat9);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat10);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat11);
  }

  @Test
  public void test1180() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1180");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = recordFormatDynamicRecordImpl0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl7 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean9 = recordFormatDynamicRecordImpl7.equals((java.lang.Object) 100.0f);
    int int12 = recordFormatDynamicRecordImpl7.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord13 = recordFormatDynamicRecordImpl7.newRecord();
    long long14 = recordFormatDynamicRecordImpl0.getNextRecordReference(dynamicRecord13);
    int int15 = recordFormatDynamicRecordImpl0.getRecordHeaderSize();
    int int16 = recordFormatDynamicRecordImpl0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord17 = null;
    org.neo4j.internal.id.IdSequence idSequence19 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext20 = null;
    recordFormatDynamicRecordImpl0.prepare(dynamicRecord17, (int) (byte) 100, idSequence19,
        cursorContext20);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl22 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean24 = recordFormatDynamicRecordImpl22.equals((java.lang.Object) 100.0f);
    int int27 = recordFormatDynamicRecordImpl22.getPageSize(16, (-1));
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl28 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    int int31 = recordFormatDynamicRecordImpl28.getPageSize(24, 8);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl32 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean34 = recordFormatDynamicRecordImpl32.equals((java.lang.Object) 100.0f);
    int int37 = recordFormatDynamicRecordImpl32.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord38 = recordFormatDynamicRecordImpl32.newRecord();
    long long39 = recordFormatDynamicRecordImpl28.getNextRecordReference(dynamicRecord38);
    org.neo4j.internal.id.IdSequence idSequence41 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext42 = null;
    recordFormatDynamicRecordImpl22.prepare(dynamicRecord38, 10, idSequence41, cursorContext42);
    org.neo4j.internal.id.IdSequence idSequence45 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext46 = null;
    recordFormatDynamicRecordImpl0.prepare(dynamicRecord38, 12, idSequence45, cursorContext46);
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_48 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat49 = v320_48.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat50 = v320_48.labelToken();
    boolean boolean51 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) v320_48);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat52 = v320_48.relationshipTypeToken();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord6);
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 16 + "'", int12 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord13);
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    org.junit.Assert.assertTrue("'" + int15 + "' != '" + 12 + "'", int15 == 12);
    org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
    org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    org.junit.Assert.assertTrue("'" + int27 + "' != '" + 16 + "'", int27 == 16);
    org.junit.Assert.assertTrue("'" + int31 + "' != '" + 24 + "'", int31 == 24);
    org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    org.junit.Assert.assertTrue("'" + int37 + "' != '" + 16 + "'", int37 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord38);
    org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat49);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat50);
    org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat52);
  }

  @Test
  public void test1181() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1181");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    try {
      int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, 0);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.ArithmeticException; message: / by zero");
    } catch (java.lang.ArithmeticException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
  }

  @Test
  public void test1182() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1182");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat1 = v306_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat2 = v306_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat3 = v306_0.property();
    java.lang.String str4 = v306_0.name();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily5 = v306_0.getFormatFamily();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat6 = v306_0.labelToken();
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat1);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat2);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "high_limitV3_0_6" + "'", str4,
        "high_limitV3_0_6");
    org.junit.Assert.assertTrue(
        "'" + formatFamily5 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily5.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat6);
  }

  @Test
  public void test1183() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1183");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = propertyRecordFormat0.getRecordSize(storeHeader1);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl3 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats4 = highLimitFactoryDefaultImpl3.newInstance();
    boolean boolean5 = propertyRecordFormat0.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl3);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean8 = propertyRecordFormat0.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord9 = null;
    org.neo4j.internal.id.IdSequence idSequence11 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext12 = null;
    propertyRecordFormat0.prepare(propertyRecord9, (int) (short) 0, idSequence11, cursorContext12);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat14 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord15 = propertyRecordFormat14.newRecord();
    org.neo4j.internal.id.IdSequence idSequence17 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext18 = null;
    propertyRecordFormat0.prepare(propertyRecord15, 52, idSequence17, cursorContext18);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord20 = propertyRecordFormat0.newRecord();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader21 = null;
    int int22 = propertyRecordFormat0.getRecordSize(storeHeader21);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat23 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long24 = propertyOneByteHeaderRecordFormat23.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat25 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat26 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord27 = propertyRecordFormat26.newRecord();
    long long28 = propertyOneByteHeaderRecordFormat25.getNextRecordReference(propertyRecord27);
    long long29 = propertyOneByteHeaderRecordFormat23.getNextRecordReference(propertyRecord27);
    int int32 = propertyOneByteHeaderRecordFormat23.getPageSize(64, (int) (short) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat33 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord34 = propertyRecordFormat33.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat35 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader36 = null;
    int int37 = propertyRecordFormat35.getRecordSize(storeHeader36);
    long long38 = propertyRecordFormat35.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat39 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat40 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord41 = propertyRecordFormat40.newRecord();
    long long42 = propertyOneByteHeaderRecordFormat39.getNextRecordReference(propertyRecord41);
    org.neo4j.internal.id.IdSequence idSequence44 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext45 = null;
    propertyRecordFormat35.prepare(propertyRecord41, 0, idSequence44, cursorContext45);
    long long47 = propertyRecordFormat33.getNextRecordReference(propertyRecord41);
    org.neo4j.internal.id.IdSequence idSequence49 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext50 = null;
    propertyOneByteHeaderRecordFormat23.prepare(propertyRecord41, (int) (short) 0, idSequence49,
        cursorContext50);
    org.neo4j.io.pagecache.PageCursor pageCursor52 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad53 = null;
    try {
      propertyRecordFormat0.read(propertyRecord41, pageCursor52, recordLoad53, (int) (short) 10,
          (int) ' ');
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    org.junit.Assert.assertNotNull(recordFormats4);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    org.junit.Assert.assertNotNull(propertyRecord15);
    org.junit.Assert.assertNotNull(propertyRecord20);
    org.junit.Assert.assertTrue("'" + int22 + "' != '" + 48 + "'", int22 == 48);
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1125899906842623L + "'",
        long24 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord27);
    org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
    org.junit.Assert.assertTrue("'" + int32 + "' != '" + 64 + "'", int32 == 64);
    org.junit.Assert.assertNotNull(propertyRecord34);
    org.junit.Assert.assertTrue("'" + int37 + "' != '" + 48 + "'", int37 == 48);
    org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1125899906842623L + "'",
        long38 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord41);
    org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
    org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
  }

  @Test
  public void test1184() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1184");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.storageengine.api.format.Capability capability1 = null;
    boolean boolean2 = v310_0.hasCapability(capability1);
    int int3 = v310_0.generation();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat4 = v310_0.propertyKeyToken();
    java.lang.String str5 = v310_0.name();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray6 = v310_0.capabilities();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "high_limitV3_1_0" + "'", str5,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(capabilityArray6);
  }

  @Test
  public void test1185() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1185");
    }
    long long2 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.toable(2L,
        235L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 237L + "'", long2 == 237L);
  }

  @Test
  public void test1186() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1186");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat1 = v320_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v320_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat3 = v320_0.node();
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat1);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat3);
  }

  @Test
  public void test1187() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1187");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    int int3 = relationshipGroupRecordFormat0.getPageSize((int) 'a', (int) (short) 100);
    long long4 = relationshipGroupRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord5 = relationshipGroupRecordFormat0.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord6 = relationshipGroupRecordFormat0.newRecord();
    long long7 = relationshipGroupRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader8 = null;
    int int9 = relationshipGroupRecordFormat0.getRecordSize(storeHeader8);
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1125899906842623L + "'",
        long4 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipGroupRecord5);
    org.junit.Assert.assertNotNull(relationshipGroupRecord6);
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1125899906842623L + "'",
        long7 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 32 + "'", int9 == 32);
  }

  @Test
  public void test1188() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1188");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = propertyRecordFormat0.getRecordSize(storeHeader1);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl3 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats4 = highLimitFactoryDefaultImpl3.newInstance();
    boolean boolean5 = propertyRecordFormat0.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl3);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean8 = propertyRecordFormat0.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord9 = null;
    org.neo4j.internal.id.IdSequence idSequence11 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext12 = null;
    propertyRecordFormat0.prepare(propertyRecord9, (int) (short) 0, idSequence11, cursorContext12);
    long long14 = propertyRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader16 = null;
    int int17 = propertyRecordFormat15.getRecordSize(storeHeader16);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl18 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats19 = highLimitFactoryDefaultImpl18.newInstance();
    boolean boolean20 = propertyRecordFormat15.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl18);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat22 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean23 = propertyRecordFormat15.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord24 = propertyRecordFormat15.newRecord();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader25 = null;
    int int26 = propertyRecordFormat15.getRecordSize(storeHeader25);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat27 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat28 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord29 = propertyRecordFormat28.newRecord();
    long long30 = propertyOneByteHeaderRecordFormat27.getNextRecordReference(propertyRecord29);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat31 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat32 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord33 = propertyRecordFormat32.newRecord();
    long long34 = propertyOneByteHeaderRecordFormat31.getNextRecordReference(propertyRecord33);
    long long35 = propertyOneByteHeaderRecordFormat27.getNextRecordReference(propertyRecord33);
    org.neo4j.internal.id.IdSequence idSequence37 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext38 = null;
    propertyRecordFormat15.prepare(propertyRecord33, 99, idSequence37, cursorContext38);
    org.neo4j.io.pagecache.PageCursor pageCursor40 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad41 = null;
    try {
      propertyRecordFormat0.read(propertyRecord33, pageCursor40, recordLoad41, 35, 32);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    org.junit.Assert.assertNotNull(recordFormats4);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1125899906842623L + "'",
        long14 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int17 + "' != '" + 48 + "'", int17 == 48);
    org.junit.Assert.assertNotNull(recordFormats19);
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    org.junit.Assert.assertNotNull(propertyRecord24);
    org.junit.Assert.assertTrue("'" + int26 + "' != '" + 48 + "'", int26 == 48);
    org.junit.Assert.assertNotNull(propertyRecord29);
    org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord33);
    org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
  }

  @Test
  public void test1189() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1189");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = propertyRecordFormat0.getRecordSize(storeHeader1);
    long long3 = propertyRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum highLimitEncEnum4 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8;
    boolean boolean5 = propertyRecordFormat0.equals((java.lang.Object) highLimitEncEnum4);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat6 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord7 = null;
    org.neo4j.internal.id.IdSequence idSequence9 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext10 = null;
    propertyRecordFormat6.prepare(propertyRecord7, (int) (short) -1, idSequence9, cursorContext10);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord12 = propertyRecordFormat6.newRecord();
    long long13 = propertyRecordFormat0.getNextRecordReference(propertyRecord12);
    int int16 = propertyRecordFormat0.getPageSize(32, (int) (short) 100);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat17 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader18 = null;
    int int19 = propertyRecordFormat17.getRecordSize(storeHeader18);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl20 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats21 = highLimitFactoryDefaultImpl20.newInstance();
    boolean boolean22 = propertyRecordFormat17.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl20);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat24 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean25 = propertyRecordFormat17.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord26 = propertyRecordFormat17.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat27 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader28 = null;
    int int29 = propertyRecordFormat27.getRecordSize(storeHeader28);
    long long30 = propertyRecordFormat27.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat31 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat32 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord33 = propertyRecordFormat32.newRecord();
    long long34 = propertyOneByteHeaderRecordFormat31.getNextRecordReference(propertyRecord33);
    org.neo4j.internal.id.IdSequence idSequence36 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext37 = null;
    propertyRecordFormat27.prepare(propertyRecord33, 0, idSequence36, cursorContext37);
    org.neo4j.internal.id.IdSequence idSequence40 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext41 = null;
    propertyRecordFormat17.prepare(propertyRecord33, 0, idSequence40, cursorContext41);
    org.neo4j.io.pagecache.PageCursor pageCursor43 = null;
    try {
      propertyRecordFormat0.write(propertyRecord33, pageCursor43, (int) (short) 1, 34);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1125899906842623L + "'",
        long3 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + highLimitEncEnum4 + "' != '"
            + io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8 + "'",
        highLimitEncEnum4.equals(
            io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8));
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    org.junit.Assert.assertNotNull(propertyRecord12);
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
    org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    org.junit.Assert.assertTrue("'" + int19 + "' != '" + 48 + "'", int19 == 48);
    org.junit.Assert.assertNotNull(recordFormats21);
    org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    org.junit.Assert.assertNotNull(propertyRecord26);
    org.junit.Assert.assertTrue("'" + int29 + "' != '" + 48 + "'", int29 == 48);
    org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1125899906842623L + "'",
        long30 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord33);
    org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
  }

  @Test
  public void test1190() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1190");
    }
    io.github.onograph.internal.batchimport.EnterpriseBatchImporterFactory enterpriseBatchImporterFactory0 = new io.github.onograph.internal.batchimport.EnterpriseBatchImporterFactory();
    java.lang.String str1 = enterpriseBatchImporterFactory0.getName();
    java.lang.String str2 = enterpriseBatchImporterFactory0.getName();
    java.lang.String str3 = enterpriseBatchImporterFactory0.getName();
    java.lang.String str4 = enterpriseBatchImporterFactory0.getName();
    java.lang.String str5 = enterpriseBatchImporterFactory0.getName();
    org.neo4j.io.layout.DatabaseLayout databaseLayout6 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction7 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer8 = null;
    org.neo4j.internal.batchimport.Configuration configuration9 = null;
    org.neo4j.logging.internal.LogService logService10 = null;
    org.neo4j.internal.batchimport.staging.ExecutionMonitor executionMonitor11 = null;
    org.neo4j.internal.batchimport.AdditionalInitialIds additionalInitialIds12 = null;
    org.neo4j.configuration.Config config13 = null;
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat14 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord15 = null;
    long long16 = nodeRecordFormat14.getNextRecordReference(nodeRecord15);
    int int17 = nodeRecordFormat14.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader18 = null;
    int int19 = nodeRecordFormat14.getRecordSize(storeHeader18);
    int int22 = nodeRecordFormat14.getPageSize((int) '4', (int) (short) 1);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord23 = nodeRecordFormat14.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_24 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat25 = v306_24.relationship();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray26 = v306_24.capabilities();
    java.lang.String str27 = v306_24.introductionVersion();
    boolean boolean28 = nodeRecordFormat14.equals((java.lang.Object) v306_24);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_29 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily30 = v300_29.getFormatFamily();
    boolean boolean31 = v306_24.equals((java.lang.Object) formatFamily30);
    java.lang.String str32 = v306_24.toString();
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_33 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat34 = v310_33.labelToken();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType35 = null;
    boolean boolean36 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_24,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v310_33, capabilityType35);
    org.neo4j.internal.batchimport.ImportLogic.Monitor monitor37 = null;
    org.neo4j.scheduler.JobScheduler jobScheduler38 = null;
    org.neo4j.internal.batchimport.input.Collector collector39 = null;
    org.neo4j.storageengine.api.LogFilesInitializer logFilesInitializer40 = null;
    org.neo4j.internal.batchimport.IndexImporterFactory indexImporterFactory41 = null;
    org.neo4j.memory.MemoryTracker memoryTracker42 = null;
    try {
      org.neo4j.internal.batchimport.BatchImporter batchImporter43 = enterpriseBatchImporterFactory0.instantiate(
          databaseLayout6, fileSystemAbstraction7, pageCacheTracer8, configuration9, logService10,
          executionMonitor11, additionalInitialIds12, config13,
          (org.neo4j.kernel.impl.store.format.RecordFormats) v310_33, monitor37, jobScheduler38,
          collector39, logFilesInitializer40, indexImporterFactory41, memoryTracker42);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "restartable" + "'", str1, "restartable");
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "restartable" + "'", str2, "restartable");
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "restartable" + "'", str3, "restartable");
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "restartable" + "'", str4, "restartable");
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "restartable" + "'", str5, "restartable");
    org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    org.junit.Assert.assertTrue("'" + int19 + "' != '" + 16 + "'", int19 == 16);
    org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
    org.junit.Assert.assertNotNull(nodeRecord23);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat25);
    org.junit.Assert.assertNotNull(capabilityArray26);
    org.junit.Assert.assertEquals("'" + str27 + "' != '" + "3.0.6" + "'", str27, "3.0.6");
    org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    org.junit.Assert.assertTrue(
        "'" + formatFamily30 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily30.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    org.junit.Assert.assertEquals("'" + str32 + "' != '" + "RecordFormat:V306[vE.H.0b]" + "'",
        str32, "RecordFormat:V306[vE.H.0b]");
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat34);
    org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
  }

  @Test
  public void test1191() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1191");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = propertyRecordFormat0.getRecordSize(storeHeader1);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader3 = null;
    int int4 = propertyRecordFormat0.getRecordSize(storeHeader3);
    int int5 = propertyRecordFormat0.getRecordHeaderSize();
    long long6 = propertyRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord8 = null;
    org.neo4j.internal.id.IdSequence idSequence10 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext11 = null;
    propertyRecordFormat7.prepare(propertyRecord8, (int) (short) -1, idSequence10, cursorContext11);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord13 = propertyRecordFormat7.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat14 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord16 = propertyRecordFormat15.newRecord();
    long long17 = propertyOneByteHeaderRecordFormat14.getNextRecordReference(propertyRecord16);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader18 = null;
    int int19 = propertyOneByteHeaderRecordFormat14.getRecordSize(storeHeader18);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat20 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long21 = propertyOneByteHeaderRecordFormat20.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat22 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat23 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord24 = propertyRecordFormat23.newRecord();
    long long25 = propertyOneByteHeaderRecordFormat22.getNextRecordReference(propertyRecord24);
    long long26 = propertyOneByteHeaderRecordFormat20.getNextRecordReference(propertyRecord24);
    org.neo4j.internal.id.IdSequence idSequence28 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext29 = null;
    propertyOneByteHeaderRecordFormat14.prepare(propertyRecord24, 64, idSequence28,
        cursorContext29);
    long long31 = propertyRecordFormat7.getNextRecordReference(propertyRecord24);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord32 = propertyRecordFormat7.newRecord();
    org.neo4j.io.pagecache.PageCursor pageCursor33 = null;
    try {
      propertyRecordFormat0.write(propertyRecord32, pageCursor33, (int) (byte) 1, (int) '#');
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 48 + "'", int4 == 48);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1125899906842623L + "'",
        long6 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord13);
    org.junit.Assert.assertNotNull(propertyRecord16);
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    org.junit.Assert.assertTrue("'" + int19 + "' != '" + 48 + "'", int19 == 48);
    org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1125899906842623L + "'",
        long21 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord24);
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord32);
  }

  @Test
  public void test1192() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1192");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord1 = null;
    long long2 = nodeRecordFormat0.getNextRecordReference(nodeRecord1);
    int int3 = nodeRecordFormat0.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_4 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_5 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat6 = v300_5.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat7 = v300_5.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType8 = null;
    boolean boolean9 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_4,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_5, capabilityType8);
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_10 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat11 = v306_10.node();
    org.neo4j.storageengine.api.format.Capability capability12 = null;
    boolean boolean13 = v306_10.hasCapability(capability12);
    org.neo4j.storageengine.api.format.CapabilityType capabilityType14 = null;
    boolean boolean15 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_5,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_10, capabilityType14);
    boolean boolean16 = nodeRecordFormat0.equals((java.lang.Object) v306_10);
    long long17 = nodeRecordFormat0.getMaxId();
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat6);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat7);
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat11);
    org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1125899906842623L + "'",
        long17 == 1125899906842623L);
  }

  @Test
  public void test1193() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1193");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v310_0.relationship();
    java.lang.String str2 = v310_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat3 = v310_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat4 = v310_0.node();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray5 = v310_0.capabilities();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat6 = v310_0.labelToken();
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_7 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_8 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat9 = v300_8.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat10 = v300_8.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType11 = null;
    boolean boolean12 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_7,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_8, capabilityType11);
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_13 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat14 = v306_13.node();
    org.neo4j.storageengine.api.format.Capability capability15 = null;
    boolean boolean16 = v306_13.hasCapability(capability15);
    org.neo4j.storageengine.api.format.CapabilityType capabilityType17 = null;
    boolean boolean18 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_8,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_13, capabilityType17);
    org.neo4j.storageengine.api.format.Capability capability19 = null;
    boolean boolean20 = v306_13.hasCapability(capability19);
    org.neo4j.storageengine.api.format.Capability[] capabilityArray21 = v306_13.capabilities();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType22 = null;
    boolean boolean23 = v310_0.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_13, capabilityType22);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat24 = v306_13.relationshipGroup();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats25 = null;
    org.neo4j.storageengine.api.format.CapabilityType capabilityType26 = null;
    try {
      boolean boolean27 = v306_13.hasCompatibleCapabilities(recordFormats25, capabilityType26);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_1_0" + "'", str2,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat3);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat4);
    org.junit.Assert.assertNotNull(capabilityArray5);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat6);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat9);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat10);
    org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat14);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    org.junit.Assert.assertNotNull(capabilityArray21);
    org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat24);
  }

  @Test
  public void test1194() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1194");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    int int1 = v300_0.generation();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat2 = v300_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat3 = v300_0.property();
    java.lang.String str4 = v300_0.name();
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat2);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "high_limitV3_0_0" + "'", str4,
        "high_limitV3_0_0");
  }

  @Test
  public void test1195() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1195");
    }
    long long2 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.torete(
        (long) (short) -1, (-31L));
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-30L) + "'", long2 == (-30L));
  }

  @Test
  public void test1196() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1196");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v306_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat2 = v306_0.schema();
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_3 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat4 = v310_3.relationship();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType5 = null;
    boolean boolean6 = v306_0.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v310_3, capabilityType5);
    java.lang.String str7 = v310_3.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat8 = v310_3.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat9 = v310_3.node();
    java.lang.Class<?> wildcardClass10 = nodeRecordRecordFormat9.getClass();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat2);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat4);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "high_limitV3_1_0" + "'", str7,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat8);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat9);
    org.junit.Assert.assertNotNull(wildcardClass10);
  }

  @Test
  public void test1197() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1197");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v300_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat2 = v300_0.relationshipTypeToken();
    java.lang.String str3 = v300_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat4 = v300_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat5 = v300_0.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat6 = v300_0.relationshipTypeToken();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat2);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "high_limitV3_0_0" + "'", str3,
        "high_limitV3_0_0");
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat4);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat5);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat6);
  }

  @Test
  public void test1198() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1198");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat1 = v310_0.labelToken();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily2 = v310_0.getFormatFamily();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat3 = v310_0.relationshipTypeToken();
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_4 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat5 = v306_4.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat6 = v306_4.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat7 = v306_4.dynamic();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType8 = null;
    boolean boolean9 = v310_0.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_4, capabilityType8);
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_10 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat11 = v306_10.relationship();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray12 = v306_10.capabilities();
    java.lang.String str13 = v306_10.introductionVersion();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat14 = v306_10.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat15 = v306_10.dynamic();
    boolean boolean16 = v310_0.equals((java.lang.Object) dynamicRecordRecordFormat15);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat1);
    org.junit.Assert.assertTrue(
        "'" + formatFamily2 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily2.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat3);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat5);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat6);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat7);
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat11);
    org.junit.Assert.assertNotNull(capabilityArray12);
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "3.0.6" + "'", str13, "3.0.6");
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat14);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat15);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
  }

  @Test
  public void test1199() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1199");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = recordFormatDynamicRecordImpl0.newRecord();
    int int9 = recordFormatDynamicRecordImpl0.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord10 = recordFormatDynamicRecordImpl0.newRecord();
    long long11 = recordFormatDynamicRecordImpl0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl12 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean14 = recordFormatDynamicRecordImpl12.equals((java.lang.Object) 100.0f);
    int int17 = recordFormatDynamicRecordImpl12.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord18 = recordFormatDynamicRecordImpl12.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl19 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean21 = recordFormatDynamicRecordImpl19.equals((java.lang.Object) 100.0f);
    int int24 = recordFormatDynamicRecordImpl19.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord25 = recordFormatDynamicRecordImpl19.newRecord();
    long long26 = recordFormatDynamicRecordImpl12.getNextRecordReference(dynamicRecord25);
    org.neo4j.internal.id.IdSequence idSequence28 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext29 = null;
    recordFormatDynamicRecordImpl0.prepare(dynamicRecord25, 128, idSequence28, cursorContext29);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl31 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean33 = recordFormatDynamicRecordImpl31.equals((java.lang.Object) 100.0f);
    int int36 = recordFormatDynamicRecordImpl31.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord37 = recordFormatDynamicRecordImpl31.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl38 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean40 = recordFormatDynamicRecordImpl38.equals((java.lang.Object) 100.0f);
    int int43 = recordFormatDynamicRecordImpl38.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord44 = recordFormatDynamicRecordImpl38.newRecord();
    long long45 = recordFormatDynamicRecordImpl31.getNextRecordReference(dynamicRecord44);
    long long46 = recordFormatDynamicRecordImpl0.getNextRecordReference(dynamicRecord44);
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord6);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord10);
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1125899906842623L + "'",
        long11 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    org.junit.Assert.assertTrue("'" + int17 + "' != '" + 16 + "'", int17 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord18);
    org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    org.junit.Assert.assertTrue("'" + int24 + "' != '" + 16 + "'", int24 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord25);
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    org.junit.Assert.assertTrue("'" + int36 + "' != '" + 16 + "'", int36 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord37);
    org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    org.junit.Assert.assertTrue("'" + int43 + "' != '" + 16 + "'", int43 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord44);
    org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
    org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
  }

  @Test
  public void test1200() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1200");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = recordFormatDynamicRecordImpl0.newRecord();
    int int9 = recordFormatDynamicRecordImpl0.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord10 = recordFormatDynamicRecordImpl0.newRecord();
    int int13 = recordFormatDynamicRecordImpl0.getPageSize((int) '4', (int) (short) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_14 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat15 = v320_14.relationship();
    boolean boolean16 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) v320_14);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.MetaDataRecord> metaDataRecordRecordFormat17 = v320_14.metaData();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat18 = v320_14.propertyKeyToken();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord6);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord10);
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat15);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    org.junit.Assert.assertNotNull(metaDataRecordRecordFormat17);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat18);
  }

  @Test
  public void test1201() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1201");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long1 = propertyOneByteHeaderRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord2 = propertyOneByteHeaderRecordFormat0.newRecord();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord3 = propertyOneByteHeaderRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader5 = null;
    int int6 = propertyRecordFormat4.getRecordSize(storeHeader5);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl7 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats8 = highLimitFactoryDefaultImpl7.newInstance();
    boolean boolean9 = propertyRecordFormat4.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl7);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat11 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean12 = propertyRecordFormat4.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord13 = null;
    org.neo4j.internal.id.IdSequence idSequence15 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext16 = null;
    propertyRecordFormat4.prepare(propertyRecord13, (int) (short) 0, idSequence15, cursorContext16);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat18 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord19 = propertyRecordFormat18.newRecord();
    org.neo4j.internal.id.IdSequence idSequence21 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext22 = null;
    propertyRecordFormat4.prepare(propertyRecord19, 52, idSequence21, cursorContext22);
    long long24 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord19);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord25 = propertyOneByteHeaderRecordFormat0.newRecord();
    org.neo4j.io.pagecache.PageCursor pageCursor26 = null;
    try {
      boolean boolean27 = propertyOneByteHeaderRecordFormat0.isInUse(pageCursor26);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord2);
    org.junit.Assert.assertNotNull(propertyRecord3);
    org.junit.Assert.assertTrue("'" + int6 + "' != '" + 48 + "'", int6 == 48);
    org.junit.Assert.assertNotNull(recordFormats8);
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    org.junit.Assert.assertNotNull(propertyRecord19);
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord25);
  }

  @Test
  public void test1202() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1202");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord1 = null;
    long long2 = nodeRecordFormat0.getNextRecordReference(nodeRecord1);
    int int3 = nodeRecordFormat0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader4 = null;
    int int5 = nodeRecordFormat0.getRecordSize(storeHeader4);
    int int8 = nodeRecordFormat0.getPageSize((int) '4', (int) (short) 1);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord9 = nodeRecordFormat0.newRecord();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader10 = null;
    int int11 = nodeRecordFormat0.getRecordSize(storeHeader10);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader13 = null;
    int int14 = propertyRecordFormat12.getRecordSize(storeHeader13);
    int int17 = propertyRecordFormat12.getPageSize((int) (byte) -1, 128);
    long long18 = propertyRecordFormat12.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat19 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord20 = propertyOneByteHeaderRecordFormat19.newRecord();
    long long21 = propertyRecordFormat12.getNextRecordReference(propertyRecord20);
    boolean boolean22 = nodeRecordFormat0.equals((java.lang.Object) propertyRecord20);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat23 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long24 = relationshipGroupHighLimitRecordFormat23.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat25 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord26 = null;
    long long27 = relationshipGroupHighLimitRecordFormat25.getNextRecordReference(
        relationshipGroupRecord26);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord28 = relationshipGroupHighLimitRecordFormat25.newRecord();
    org.neo4j.internal.id.IdSequence idSequence30 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext31 = null;
    relationshipGroupHighLimitRecordFormat23.prepare(relationshipGroupRecord28, (int) (byte) 1,
        idSequence30, cursorContext31);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat33 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord34 = null;
    long long35 = relationshipGroupHighLimitRecordFormat33.getNextRecordReference(
        relationshipGroupRecord34);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord36 = relationshipGroupHighLimitRecordFormat33.newRecord();
    org.neo4j.internal.id.IdSequence idSequence38 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext39 = null;
    relationshipGroupHighLimitRecordFormat23.prepare(relationshipGroupRecord36, 0, idSequence38,
        cursorContext39);
    long long41 = relationshipGroupHighLimitRecordFormat23.getMaxId();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord42 = relationshipGroupHighLimitRecordFormat23.newRecord();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader43 = null;
    int int44 = relationshipGroupHighLimitRecordFormat23.getRecordSize(storeHeader43);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat45 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord46 = null;
    long long47 = relationshipGroupHighLimitRecordFormat45.getNextRecordReference(
        relationshipGroupRecord46);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord48 = relationshipGroupHighLimitRecordFormat45.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat49 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader50 = null;
    int int51 = relationshipGroupRecordFormat49.getRecordSize(storeHeader50);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat52 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long53 = relationshipGroupHighLimitRecordFormat52.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat54 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord55 = null;
    long long56 = relationshipGroupHighLimitRecordFormat54.getNextRecordReference(
        relationshipGroupRecord55);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord57 = relationshipGroupHighLimitRecordFormat54.newRecord();
    org.neo4j.internal.id.IdSequence idSequence59 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext60 = null;
    relationshipGroupHighLimitRecordFormat52.prepare(relationshipGroupRecord57, (int) (byte) 1,
        idSequence59, cursorContext60);
    org.neo4j.internal.id.IdSequence idSequence63 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext64 = null;
    relationshipGroupRecordFormat49.prepare(relationshipGroupRecord57, 0, idSequence63,
        cursorContext64);
    org.neo4j.internal.id.IdSequence idSequence67 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext68 = null;
    relationshipGroupHighLimitRecordFormat45.prepare(relationshipGroupRecord57, (int) '4',
        idSequence67, cursorContext68);
    org.neo4j.internal.id.IdSequence idSequence71 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext72 = null;
    relationshipGroupHighLimitRecordFormat23.prepare(relationshipGroupRecord57, (int) 'a',
        idSequence71, cursorContext72);
    boolean boolean74 = nodeRecordFormat0.equals((java.lang.Object) cursorContext72);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
    org.junit.Assert.assertNotNull(nodeRecord9);
    org.junit.Assert.assertTrue("'" + int11 + "' != '" + 16 + "'", int11 == 16);
    org.junit.Assert.assertTrue("'" + int14 + "' != '" + 48 + "'", int14 == 48);
    org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1125899906842623L + "'",
        long18 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord20);
    org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1125899906842623L + "'",
        long24 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord28);
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord36);
    org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1125899906842623L + "'",
        long41 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipGroupRecord42);
    org.junit.Assert.assertTrue("'" + int44 + "' != '" + 32 + "'", int44 == 32);
    org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord48);
    org.junit.Assert.assertTrue("'" + int51 + "' != '" + 32 + "'", int51 == 32);
    org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1125899906842623L + "'",
        long53 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-1L) + "'", long56 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord57);
    org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
  }

  @Test
  public void test1203() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1203");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    long long3 = recordFormatDynamicRecordImpl0.getMaxId();
    int int6 = recordFormatDynamicRecordImpl0.getPageSize(64, 48);
    int int7 = recordFormatDynamicRecordImpl0.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl8 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean10 = recordFormatDynamicRecordImpl8.equals((java.lang.Object) 100.0f);
    int int13 = recordFormatDynamicRecordImpl8.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord14 = recordFormatDynamicRecordImpl8.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl15 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean17 = recordFormatDynamicRecordImpl15.equals((java.lang.Object) 100.0f);
    int int20 = recordFormatDynamicRecordImpl15.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord21 = recordFormatDynamicRecordImpl15.newRecord();
    long long22 = recordFormatDynamicRecordImpl8.getNextRecordReference(dynamicRecord21);
    int int23 = recordFormatDynamicRecordImpl8.getRecordHeaderSize();
    int int24 = recordFormatDynamicRecordImpl8.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord25 = recordFormatDynamicRecordImpl8.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl26 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean28 = recordFormatDynamicRecordImpl26.equals((java.lang.Object) 100.0f);
    int int31 = recordFormatDynamicRecordImpl26.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord32 = recordFormatDynamicRecordImpl26.newRecord();
    int int35 = recordFormatDynamicRecordImpl26.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord36 = recordFormatDynamicRecordImpl26.newRecord();
    long long37 = recordFormatDynamicRecordImpl26.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl38 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean40 = recordFormatDynamicRecordImpl38.equals((java.lang.Object) 100.0f);
    int int43 = recordFormatDynamicRecordImpl38.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord44 = recordFormatDynamicRecordImpl38.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl45 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean47 = recordFormatDynamicRecordImpl45.equals((java.lang.Object) 100.0f);
    int int50 = recordFormatDynamicRecordImpl45.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord51 = recordFormatDynamicRecordImpl45.newRecord();
    long long52 = recordFormatDynamicRecordImpl38.getNextRecordReference(dynamicRecord51);
    org.neo4j.internal.id.IdSequence idSequence54 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext55 = null;
    recordFormatDynamicRecordImpl26.prepare(dynamicRecord51, 128, idSequence54, cursorContext55);
    org.neo4j.internal.id.IdSequence idSequence58 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext59 = null;
    recordFormatDynamicRecordImpl8.prepare(dynamicRecord51, 48, idSequence58, cursorContext59);
    boolean boolean61 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 48);
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1125899906842623L + "'",
        long3 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int6 + "' != '" + 48 + "'", int6 == 48);
    org.junit.Assert.assertTrue("'" + int7 + "' != '" + 12 + "'", int7 == 12);
    org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord14);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord21);
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
    org.junit.Assert.assertTrue("'" + int23 + "' != '" + 12 + "'", int23 == 12);
    org.junit.Assert.assertTrue("'" + int24 + "' != '" + 12 + "'", int24 == 12);
    org.junit.Assert.assertNotNull(dynamicRecord25);
    org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    org.junit.Assert.assertTrue("'" + int31 + "' != '" + 16 + "'", int31 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord32);
    org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord36);
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1125899906842623L + "'",
        long37 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    org.junit.Assert.assertTrue("'" + int43 + "' != '" + 16 + "'", int43 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord44);
    org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    org.junit.Assert.assertTrue("'" + int50 + "' != '" + 16 + "'", int50 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord51);
    org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
  }

  @Test
  public void test1204() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1204");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat1 = v320_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat2 = v320_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat3 = v320_0.relationship();
    java.lang.String str4 = v320_0.name();
    java.lang.String str5 = v320_0.name();
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat1);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat2);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "high_limitV3_2_0" + "'", str4,
        "high_limitV3_2_0");
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "high_limitV3_2_0" + "'", str5,
        "high_limitV3_2_0");
  }

  @Test
  public void test1205() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1205");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long1 = relationshipGroupHighLimitRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord3 = null;
    long long4 = relationshipGroupHighLimitRecordFormat2.getNextRecordReference(
        relationshipGroupRecord3);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord5 = relationshipGroupHighLimitRecordFormat2.newRecord();
    org.neo4j.internal.id.IdSequence idSequence7 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext8 = null;
    relationshipGroupHighLimitRecordFormat0.prepare(relationshipGroupRecord5, (int) (byte) 1,
        idSequence7, cursorContext8);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat10 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord11 = null;
    long long12 = relationshipGroupHighLimitRecordFormat10.getNextRecordReference(
        relationshipGroupRecord11);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord13 = relationshipGroupHighLimitRecordFormat10.newRecord();
    org.neo4j.internal.id.IdSequence idSequence15 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext16 = null;
    relationshipGroupHighLimitRecordFormat0.prepare(relationshipGroupRecord13, 0, idSequence15,
        cursorContext16);
    long long18 = relationshipGroupHighLimitRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord19 = relationshipGroupHighLimitRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat20 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader21 = null;
    int int22 = relationshipGroupRecordFormat20.getRecordSize(storeHeader21);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord23 = relationshipGroupRecordFormat20.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat24 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader25 = null;
    int int26 = relationshipGroupRecordFormat24.getRecordSize(storeHeader25);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat27 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long28 = relationshipGroupHighLimitRecordFormat27.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat29 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord30 = null;
    long long31 = relationshipGroupHighLimitRecordFormat29.getNextRecordReference(
        relationshipGroupRecord30);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord32 = relationshipGroupHighLimitRecordFormat29.newRecord();
    org.neo4j.internal.id.IdSequence idSequence34 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext35 = null;
    relationshipGroupHighLimitRecordFormat27.prepare(relationshipGroupRecord32, (int) (byte) 1,
        idSequence34, cursorContext35);
    org.neo4j.internal.id.IdSequence idSequence38 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext39 = null;
    relationshipGroupRecordFormat24.prepare(relationshipGroupRecord32, 0, idSequence38,
        cursorContext39);
    long long41 = relationshipGroupRecordFormat20.getNextRecordReference(relationshipGroupRecord32);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat42 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader43 = null;
    int int44 = relationshipGroupRecordFormat42.getRecordSize(storeHeader43);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord45 = relationshipGroupRecordFormat42.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat46 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader47 = null;
    int int48 = relationshipGroupRecordFormat46.getRecordSize(storeHeader47);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat49 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long50 = relationshipGroupHighLimitRecordFormat49.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat51 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord52 = null;
    long long53 = relationshipGroupHighLimitRecordFormat51.getNextRecordReference(
        relationshipGroupRecord52);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord54 = relationshipGroupHighLimitRecordFormat51.newRecord();
    org.neo4j.internal.id.IdSequence idSequence56 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext57 = null;
    relationshipGroupHighLimitRecordFormat49.prepare(relationshipGroupRecord54, (int) (byte) 1,
        idSequence56, cursorContext57);
    org.neo4j.internal.id.IdSequence idSequence60 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext61 = null;
    relationshipGroupRecordFormat46.prepare(relationshipGroupRecord54, 0, idSequence60,
        cursorContext61);
    long long63 = relationshipGroupRecordFormat42.getNextRecordReference(relationshipGroupRecord54);
    org.neo4j.internal.id.IdSequence idSequence65 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext66 = null;
    relationshipGroupRecordFormat20.prepare(relationshipGroupRecord54, 4, idSequence65,
        cursorContext66);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader68 = null;
    int int69 = relationshipGroupRecordFormat20.getRecordSize(storeHeader68);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord70 = relationshipGroupRecordFormat20.newRecord();
    org.neo4j.internal.id.IdSequence idSequence72 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext73 = null;
    relationshipGroupHighLimitRecordFormat0.prepare(relationshipGroupRecord70, 34, idSequence72,
        cursorContext73);
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord5);
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord13);
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1125899906842623L + "'",
        long18 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipGroupRecord19);
    org.junit.Assert.assertTrue("'" + int22 + "' != '" + 32 + "'", int22 == 32);
    org.junit.Assert.assertNotNull(relationshipGroupRecord23);
    org.junit.Assert.assertTrue("'" + int26 + "' != '" + 32 + "'", int26 == 32);
    org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1125899906842623L + "'",
        long28 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord32);
    org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
    org.junit.Assert.assertTrue("'" + int44 + "' != '" + 32 + "'", int44 == 32);
    org.junit.Assert.assertNotNull(relationshipGroupRecord45);
    org.junit.Assert.assertTrue("'" + int48 + "' != '" + 32 + "'", int48 == 32);
    org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1125899906842623L + "'",
        long50 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-1L) + "'", long53 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord54);
    org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
    org.junit.Assert.assertTrue("'" + int69 + "' != '" + 32 + "'", int69 == 32);
    org.junit.Assert.assertNotNull(relationshipGroupRecord70);
  }

  @Test
  public void test1206() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1206");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord5 = relationshipRecordFormat4.newRecord();
    long long6 = relationshipHighLimitRecordFormat3.getNextRecordReference(relationshipRecord5);
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord5, (int) (byte) 10, idSequence8,
        cursorContext9);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord13 = relationshipHighLimitRecordFormat12.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord16 = relationshipHighLimitRecordFormat15.newRecord();
    org.neo4j.internal.id.IdSequence idSequence18 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext19 = null;
    relationshipHighLimitRecordFormat12.prepare(relationshipRecord16, (int) (short) 1, idSequence18,
        cursorContext19);
    long long21 = relationshipHighLimitRecordFormat1.getNextRecordReference(relationshipRecord16);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord22 = relationshipHighLimitRecordFormat1.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord23 = null;
    org.neo4j.io.pagecache.PageCursor pageCursor24 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad25 = null;
    try {
      relationshipHighLimitRecordFormat1.read(relationshipRecord23, pageCursor24, recordLoad25, 128,
          (int) (short) 0);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(relationshipRecord5);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord13);
    org.junit.Assert.assertNotNull(relationshipRecord16);
    org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord22);
  }

  @Test
  public void test1207() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1207");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.FactoryHighLimitDefaultImpl factoryHighLimitDefaultImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.FactoryHighLimitDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats1 = factoryHighLimitDefaultImpl0.newInstance();
    java.lang.String str2 = factoryHighLimitDefaultImpl0.getName();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats3 = factoryHighLimitDefaultImpl0.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats4 = factoryHighLimitDefaultImpl0.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats5 = factoryHighLimitDefaultImpl0.newInstance();
    org.junit.Assert.assertNotNull(recordFormats1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_0_6" + "'", str2,
        "high_limitV3_0_6");
    org.junit.Assert.assertNotNull(recordFormats3);
    org.junit.Assert.assertNotNull(recordFormats4);
    org.junit.Assert.assertNotNull(recordFormats5);
  }

  @Test
  public void test1208() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1208");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        96);
    org.neo4j.io.pagecache.PageCursor pageCursor2 = null;
    try {
      boolean boolean3 = nodeHighLimitRecordFormat1.isInUse(pageCursor2);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test1209() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1209");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = propertyRecordFormat0.getRecordSize(storeHeader1);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl3 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats4 = highLimitFactoryDefaultImpl3.newInstance();
    boolean boolean5 = propertyRecordFormat0.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl3);
    java.lang.String str6 = highLimitFactoryDefaultImpl3.getName();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats7 = highLimitFactoryDefaultImpl3.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats8 = highLimitFactoryDefaultImpl3.newInstance();
    java.lang.String str9 = highLimitFactoryDefaultImpl3.getName();
    java.lang.String str10 = highLimitFactoryDefaultImpl3.getName();
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    org.junit.Assert.assertNotNull(recordFormats4);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "high_limitV4_0_0" + "'", str6,
        "high_limitV4_0_0");
    org.junit.Assert.assertNotNull(recordFormats7);
    org.junit.Assert.assertNotNull(recordFormats8);
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "high_limitV4_0_0" + "'", str9,
        "high_limitV4_0_0");
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "high_limitV4_0_0" + "'", str10,
        "high_limitV4_0_0");
  }

  @Test
  public void test1210() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1210");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_6 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat7 = v310_6.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat8 = v310_6.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat9 = v310_6.labelToken();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType10 = null;
    boolean boolean11 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v310_6, capabilityType10);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat12 = v300_1.labelToken();
    java.lang.String str13 = v300_1.storeVersion();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat7);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat8);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat9);
    org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat12);
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "vE.H.0" + "'", str13, "vE.H.0");
  }

  @Test
  public void test1211() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1211");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long2 = relationshipGroupHighLimitRecordFormat1.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord4 = null;
    long long5 = relationshipGroupHighLimitRecordFormat3.getNextRecordReference(
        relationshipGroupRecord4);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord6 = relationshipGroupHighLimitRecordFormat3.newRecord();
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    relationshipGroupHighLimitRecordFormat1.prepare(relationshipGroupRecord6, (int) (byte) 1,
        idSequence8, cursorContext9);
    long long11 = relationshipGroupHighLimitRecordFormat0.getNextRecordReference(
        relationshipGroupRecord6);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader12 = null;
    int int13 = relationshipGroupHighLimitRecordFormat0.getRecordSize(storeHeader12);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl14 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean16 = recordFormatDynamicRecordImpl14.equals((java.lang.Object) 100.0f);
    int int19 = recordFormatDynamicRecordImpl14.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord20 = null;
    org.neo4j.internal.id.IdSequence idSequence22 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext23 = null;
    recordFormatDynamicRecordImpl14.prepare(dynamicRecord20, (int) (byte) -1, idSequence22,
        cursorContext23);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl25 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean27 = recordFormatDynamicRecordImpl25.equals((java.lang.Object) 100.0f);
    int int30 = recordFormatDynamicRecordImpl25.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord31 = recordFormatDynamicRecordImpl25.newRecord();
    long long32 = recordFormatDynamicRecordImpl14.getNextRecordReference(dynamicRecord31);
    boolean boolean33 = relationshipGroupHighLimitRecordFormat0.equals(
        (java.lang.Object) recordFormatDynamicRecordImpl14);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1125899906842623L + "'",
        long2 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord6);
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 32 + "'", int13 == 32);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    org.junit.Assert.assertTrue("'" + int19 + "' != '" + 16 + "'", int19 == 16);
    org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    org.junit.Assert.assertTrue("'" + int30 + "' != '" + 16 + "'", int30 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord31);
    org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
  }

  @Test
  public void test1212() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1212");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = recordFormatDynamicRecordImpl0.newRecord();
    int int9 = recordFormatDynamicRecordImpl0.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord10 = recordFormatDynamicRecordImpl0.newRecord();
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord11 = recordFormatDynamicRecordImpl0.newRecord();
    int int14 = recordFormatDynamicRecordImpl0.getPageSize(24, (int) (byte) 100);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord15 = recordFormatDynamicRecordImpl0.newRecord();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord6);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord10);
    org.junit.Assert.assertNotNull(dynamicRecord11);
    org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    org.junit.Assert.assertNotNull(dynamicRecord15);
  }

  @Test
  public void test1213() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1213");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long2 = relationshipGroupHighLimitRecordFormat1.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord4 = null;
    long long5 = relationshipGroupHighLimitRecordFormat3.getNextRecordReference(
        relationshipGroupRecord4);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord6 = relationshipGroupHighLimitRecordFormat3.newRecord();
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    relationshipGroupHighLimitRecordFormat1.prepare(relationshipGroupRecord6, (int) (byte) 1,
        idSequence8, cursorContext9);
    long long11 = relationshipGroupHighLimitRecordFormat0.getNextRecordReference(
        relationshipGroupRecord6);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long13 = relationshipGroupHighLimitRecordFormat12.getMaxId();
    long long14 = relationshipGroupHighLimitRecordFormat12.getMaxId();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord15 = relationshipGroupHighLimitRecordFormat12.newRecord();
    org.neo4j.internal.id.IdSequence idSequence17 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext18 = null;
    relationshipGroupHighLimitRecordFormat0.prepare(relationshipGroupRecord15, 3, idSequence17,
        cursorContext18);
    int int22 = relationshipGroupHighLimitRecordFormat0.getPageSize((int) (byte) 0,
        (int) (byte) 100);
    long long23 = relationshipGroupHighLimitRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat24 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    int int27 = relationshipGroupRecordFormat24.getPageSize((int) 'a', (int) (short) 100);
    long long28 = relationshipGroupRecordFormat24.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat29 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat30 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord31 = null;
    long long32 = relationshipGroupHighLimitRecordFormat30.getNextRecordReference(
        relationshipGroupRecord31);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord33 = relationshipGroupHighLimitRecordFormat30.newRecord();
    org.neo4j.internal.id.IdSequence idSequence35 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext36 = null;
    relationshipGroupRecordFormat29.prepare(relationshipGroupRecord33, (-1), idSequence35,
        cursorContext36);
    org.neo4j.internal.id.IdSequence idSequence39 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext40 = null;
    relationshipGroupRecordFormat24.prepare(relationshipGroupRecord33, 128, idSequence39,
        cursorContext40);
    long long42 = relationshipGroupHighLimitRecordFormat0.getNextRecordReference(
        relationshipGroupRecord33);
    org.neo4j.io.pagecache.PageCursor pageCursor43 = null;
    try {
      boolean boolean44 = relationshipGroupHighLimitRecordFormat0.isInUse(pageCursor43);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1125899906842623L + "'",
        long2 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord6);
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1125899906842623L + "'",
        long13 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1125899906842623L + "'",
        long14 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipGroupRecord15);
    org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1125899906842623L + "'",
        long23 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1125899906842623L + "'",
        long28 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord33);
    org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
  }

  @Test
  public void test1214() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1214");
    }
    long long2 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.torete(0L,
        31L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 31L + "'", long2 == 31L);
  }

  @Test
  public void test1215() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1215");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord1 = null;
    long long2 = nodeRecordFormat0.getNextRecordReference(nodeRecord1);
    int int3 = nodeRecordFormat0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader4 = null;
    int int5 = nodeRecordFormat0.getRecordSize(storeHeader4);
    int int8 = nodeRecordFormat0.getPageSize((int) '4', (int) (short) 1);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord9 = nodeRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_10 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat11 = v306_10.relationship();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray12 = v306_10.capabilities();
    java.lang.String str13 = v306_10.introductionVersion();
    boolean boolean14 = nodeRecordFormat0.equals((java.lang.Object) v306_10);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_15 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily16 = v300_15.getFormatFamily();
    boolean boolean17 = v306_10.equals((java.lang.Object) formatFamily16);
    java.lang.String str18 = v306_10.toString();
    org.neo4j.kernel.impl.store.format.RecordFormats[] recordFormatsArray19 = v306_10.compatibleVersionsForRollingUpgrade();
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
    org.junit.Assert.assertNotNull(nodeRecord9);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat11);
    org.junit.Assert.assertNotNull(capabilityArray12);
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "3.0.6" + "'", str13, "3.0.6");
    org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    org.junit.Assert.assertTrue(
        "'" + formatFamily16 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily16.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "RecordFormat:V306[vE.H.0b]" + "'",
        str18, "RecordFormat:V306[vE.H.0b]");
    org.junit.Assert.assertNotNull(recordFormatsArray19);
  }

  @Test
  public void test1216() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1216");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord1 = propertyRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader3 = null;
    int int4 = propertyRecordFormat2.getRecordSize(storeHeader3);
    long long5 = propertyRecordFormat2.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat6 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord8 = propertyRecordFormat7.newRecord();
    long long9 = propertyOneByteHeaderRecordFormat6.getNextRecordReference(propertyRecord8);
    org.neo4j.internal.id.IdSequence idSequence11 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext12 = null;
    propertyRecordFormat2.prepare(propertyRecord8, 0, idSequence11, cursorContext12);
    long long14 = propertyRecordFormat0.getNextRecordReference(propertyRecord8);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader16 = null;
    int int17 = propertyRecordFormat15.getRecordSize(storeHeader16);
    int int20 = propertyRecordFormat15.getPageSize((int) (byte) -1, 128);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat21 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long22 = propertyOneByteHeaderRecordFormat21.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord23 = propertyOneByteHeaderRecordFormat21.newRecord();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord24 = propertyOneByteHeaderRecordFormat21.newRecord();
    long long25 = propertyRecordFormat15.getNextRecordReference(propertyRecord24);
    long long26 = propertyRecordFormat0.getNextRecordReference(propertyRecord24);
    long long27 = propertyRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord28 = propertyRecordFormat0.newRecord();
    org.junit.Assert.assertNotNull(propertyRecord1);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 48 + "'", int4 == 48);
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1125899906842623L + "'",
        long5 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord8);
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    org.junit.Assert.assertTrue("'" + int17 + "' != '" + 48 + "'", int17 == 48);
    org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1125899906842623L + "'",
        long22 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord23);
    org.junit.Assert.assertNotNull(propertyRecord24);
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
    org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1125899906842623L + "'",
        long27 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord28);
  }

  @Test
  public void test1217() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1217");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    org.neo4j.storageengine.api.format.Capability[] capabilityArray6 = v306_0.capabilities();
    org.neo4j.kernel.impl.store.format.RecordFormats[] recordFormatsArray7 = v306_0.compatibleVersionsForRollingUpgrade();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat8 = v306_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat9 = v306_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat10 = v306_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat11 = v306_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat12 = v306_0.relationshipTypeToken();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(capabilityArray6);
    org.junit.Assert.assertNotNull(recordFormatsArray7);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat8);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat9);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat10);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat11);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat12);
  }

  @Test
  public void test1218() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1218");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = recordFormatDynamicRecordImpl0.newRecord();
    int int9 = recordFormatDynamicRecordImpl0.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord10 = recordFormatDynamicRecordImpl0.newRecord();
    int int13 = recordFormatDynamicRecordImpl0.getPageSize((int) '4', (int) (short) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_14 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat15 = v320_14.relationship();
    boolean boolean16 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) v320_14);
    long long17 = recordFormatDynamicRecordImpl0.getMaxId();
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord18 = recordFormatDynamicRecordImpl0.newRecord();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord6);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord10);
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat15);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1125899906842623L + "'",
        long17 == 1125899906842623L);
    org.junit.Assert.assertNotNull(dynamicRecord18);
  }

  @Test
  public void test1219() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1219");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    java.util.function.Function<org.neo4j.kernel.impl.store.StoreHeader, java.lang.Integer> storeHeaderFunction7 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.fixedRecordSize(
        100);
    boolean boolean8 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100);
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_9 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat10 = v310_9.relationship();
    java.lang.String str11 = v310_9.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat12 = v310_9.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily13 = v310_9.getFormatFamily();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat14 = v310_9.relationshipGroup();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat15 = v310_9.relationshipGroup();
    boolean boolean16 = recordFormatDynamicRecordImpl0.equals(
        (java.lang.Object) relationshipGroupRecordRecordFormat15);
    java.lang.Class<?> wildcardClass17 = relationshipGroupRecordRecordFormat15.getClass();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(storeHeaderFunction7);
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat10);
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "high_limitV3_1_0" + "'", str11,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat12);
    org.junit.Assert.assertTrue(
        "'" + formatFamily13 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily13.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat14);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat15);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    org.junit.Assert.assertNotNull(wildcardClass17);
  }

  @Test
  public void test1220() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1220");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = propertyRecordFormat0.getRecordSize(storeHeader1);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl3 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats4 = highLimitFactoryDefaultImpl3.newInstance();
    boolean boolean5 = propertyRecordFormat0.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl3);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean8 = propertyRecordFormat0.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord9 = null;
    org.neo4j.internal.id.IdSequence idSequence11 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext12 = null;
    propertyRecordFormat0.prepare(propertyRecord9, (int) (short) 0, idSequence11, cursorContext12);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat14 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord15 = propertyRecordFormat14.newRecord();
    org.neo4j.internal.id.IdSequence idSequence17 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext18 = null;
    propertyRecordFormat0.prepare(propertyRecord15, 52, idSequence17, cursorContext18);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader20 = null;
    int int21 = propertyRecordFormat0.getRecordSize(storeHeader20);
    int int24 = propertyRecordFormat0.getPageSize((-1), (int) (short) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat25 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord26 = propertyRecordFormat25.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat27 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader28 = null;
    int int29 = propertyRecordFormat27.getRecordSize(storeHeader28);
    long long30 = propertyRecordFormat27.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat31 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat32 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord33 = propertyRecordFormat32.newRecord();
    long long34 = propertyOneByteHeaderRecordFormat31.getNextRecordReference(propertyRecord33);
    org.neo4j.internal.id.IdSequence idSequence36 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext37 = null;
    propertyRecordFormat27.prepare(propertyRecord33, 0, idSequence36, cursorContext37);
    long long39 = propertyRecordFormat25.getNextRecordReference(propertyRecord33);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat40 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader41 = null;
    int int42 = propertyRecordFormat40.getRecordSize(storeHeader41);
    int int45 = propertyRecordFormat40.getPageSize((int) (byte) -1, 128);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat46 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long47 = propertyOneByteHeaderRecordFormat46.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord48 = propertyOneByteHeaderRecordFormat46.newRecord();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord49 = propertyOneByteHeaderRecordFormat46.newRecord();
    long long50 = propertyRecordFormat40.getNextRecordReference(propertyRecord49);
    long long51 = propertyRecordFormat25.getNextRecordReference(propertyRecord49);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader52 = null;
    int int53 = propertyRecordFormat25.getRecordSize(storeHeader52);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord54 = propertyRecordFormat25.newRecord();
    long long55 = propertyRecordFormat0.getNextRecordReference(propertyRecord54);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    org.junit.Assert.assertNotNull(recordFormats4);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    org.junit.Assert.assertNotNull(propertyRecord15);
    org.junit.Assert.assertTrue("'" + int21 + "' != '" + 48 + "'", int21 == 48);
    org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    org.junit.Assert.assertNotNull(propertyRecord26);
    org.junit.Assert.assertTrue("'" + int29 + "' != '" + 48 + "'", int29 == 48);
    org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1125899906842623L + "'",
        long30 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord33);
    org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
    org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
    org.junit.Assert.assertTrue("'" + int42 + "' != '" + 48 + "'", int42 == 48);
    org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1125899906842623L + "'",
        long47 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord48);
    org.junit.Assert.assertNotNull(propertyRecord49);
    org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
    org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
    org.junit.Assert.assertTrue("'" + int53 + "' != '" + 48 + "'", int53 == 48);
    org.junit.Assert.assertNotNull(propertyRecord54);
    org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
  }

  @Test
  public void test1221() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1221");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat1 = v300_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat2 = v300_0.relationship();
    int int3 = v300_0.generation();
    java.lang.String str4 = v300_0.toString();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat5 = v300_0.relationshipGroup();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily6 = v300_0.getFormatFamily();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat1);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat2);
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RecordFormat:V300[vE.H.0]" + "'", str4,
        "RecordFormat:V300[vE.H.0]");
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat5);
    org.junit.Assert.assertTrue(
        "'" + formatFamily6 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily6.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
  }

  @Test
  public void test1222() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1222");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    int int3 = relationshipGroupRecordFormat0.getPageSize((int) 'a', (int) (short) 100);
    long long4 = relationshipGroupRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord5 = relationshipGroupRecordFormat0.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord6 = relationshipGroupRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long8 = relationshipGroupHighLimitRecordFormat7.getMaxId();
    long long9 = relationshipGroupHighLimitRecordFormat7.getMaxId();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord10 = relationshipGroupHighLimitRecordFormat7.newRecord();
    org.neo4j.internal.id.IdSequence idSequence12 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext13 = null;
    relationshipGroupRecordFormat0.prepare(relationshipGroupRecord10, 24, idSequence12,
        cursorContext13);
    org.neo4j.io.pagecache.PageCursor pageCursor15 = null;
    try {
      boolean boolean16 = relationshipGroupRecordFormat0.isInUse(pageCursor15);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1125899906842623L + "'",
        long4 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipGroupRecord5);
    org.junit.Assert.assertNotNull(relationshipGroupRecord6);
    org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1125899906842623L + "'",
        long8 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1125899906842623L + "'",
        long9 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipGroupRecord10);
  }

  @Test
  public void test1223() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1223");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat1 = v306_0.node();
    org.neo4j.storageengine.api.format.Capability capability2 = null;
    boolean boolean3 = v306_0.hasCapability(capability2);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat4 = v306_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat5 = v306_0.relationshipGroup();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily6 = v306_0.getFormatFamily();
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat1);
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat4);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat5);
    org.junit.Assert.assertTrue(
        "'" + formatFamily6 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily6.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
  }

  @Test
  public void test1224() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1224");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) '4');
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord2 = relationshipHighLimitRecordFormat1.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_3 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.storageengine.api.format.Capability capability4 = null;
    boolean boolean5 = v310_3.hasCapability(capability4);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat6 = v310_3.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats7 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitRecordFormats.RCD_FMXS;
    org.neo4j.storageengine.api.format.CapabilityType capabilityType8 = null;
    boolean boolean9 = v310_3.hasCompatibleCapabilities(recordFormats7, capabilityType8);
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_10 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat11 = v306_10.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat12 = v306_10.labelToken();
    boolean boolean14 = v306_10.equals((java.lang.Object) 64);
    org.neo4j.storageengine.api.format.CapabilityType capabilityType15 = null;
    boolean boolean16 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        recordFormats7, (org.neo4j.kernel.impl.store.format.RecordFormats) v306_10,
        capabilityType15);
    boolean boolean17 = relationshipHighLimitRecordFormat1.equals(
        (java.lang.Object) capabilityType15);
    org.junit.Assert.assertNotNull(relationshipRecord2);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat6);
    org.junit.Assert.assertNotNull(recordFormats7);
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat11);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat12);
    org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
  }

  @Test
  public void test1225() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1225");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long1 = propertyOneByteHeaderRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord2 = propertyOneByteHeaderRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long4 = propertyOneByteHeaderRecordFormat3.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord5 = propertyOneByteHeaderRecordFormat3.newRecord();
    long long6 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord5);
    int int7 = propertyOneByteHeaderRecordFormat0.getRecordHeaderSize();
    int int8 = propertyOneByteHeaderRecordFormat0.getRecordHeaderSize();
    int int9 = propertyOneByteHeaderRecordFormat0.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat10 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader11 = null;
    int int12 = propertyRecordFormat10.getRecordSize(storeHeader11);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl13 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats14 = highLimitFactoryDefaultImpl13.newInstance();
    boolean boolean15 = propertyRecordFormat10.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl13);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat17 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean18 = propertyRecordFormat10.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord19 = null;
    org.neo4j.internal.id.IdSequence idSequence21 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext22 = null;
    propertyRecordFormat10.prepare(propertyRecord19, (int) (short) 0, idSequence21,
        cursorContext22);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat24 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord25 = propertyRecordFormat24.newRecord();
    org.neo4j.internal.id.IdSequence idSequence27 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext28 = null;
    propertyRecordFormat10.prepare(propertyRecord25, 52, idSequence27, cursorContext28);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader30 = null;
    int int31 = propertyRecordFormat10.getRecordSize(storeHeader30);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat32 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader33 = null;
    int int34 = propertyRecordFormat32.getRecordSize(storeHeader33);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl35 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats36 = highLimitFactoryDefaultImpl35.newInstance();
    boolean boolean37 = propertyRecordFormat32.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl35);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat39 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean40 = propertyRecordFormat32.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord41 = null;
    org.neo4j.internal.id.IdSequence idSequence43 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext44 = null;
    propertyRecordFormat32.prepare(propertyRecord41, (int) (short) 0, idSequence43,
        cursorContext44);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat46 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord47 = propertyRecordFormat46.newRecord();
    org.neo4j.internal.id.IdSequence idSequence49 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext50 = null;
    propertyRecordFormat32.prepare(propertyRecord47, 52, idSequence49, cursorContext50);
    long long52 = propertyRecordFormat10.getNextRecordReference(propertyRecord47);
    long long53 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord47);
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_54 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat55 = v306_54.node();
    org.neo4j.storageengine.api.format.Capability capability56 = null;
    boolean boolean57 = v306_54.hasCapability(capability56);
    org.neo4j.storageengine.api.format.Capability capability58 = null;
    boolean boolean59 = v306_54.hasCapability(capability58);
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats60 = io.github.onograph.kernel.srv.store.format.highlimit.v340.V340.RCD_FMXS;
    org.neo4j.kernel.impl.store.format.RecordFormats[] recordFormatsArray61 = recordFormats60.compatibleVersionsForRollingUpgrade();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType62 = null;
    boolean boolean63 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_54, recordFormats60,
        capabilityType62);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat64 = v306_54.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat65 = v306_54.propertyKeyToken();
    boolean boolean66 = propertyOneByteHeaderRecordFormat0.equals((java.lang.Object) v306_54);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat67 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader68 = null;
    int int69 = propertyRecordFormat67.getRecordSize(storeHeader68);
    long long70 = propertyRecordFormat67.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum highLimitEncEnum71 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8;
    boolean boolean72 = propertyRecordFormat67.equals((java.lang.Object) highLimitEncEnum71);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord73 = null;
    org.neo4j.internal.id.IdSequence idSequence75 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext76 = null;
    propertyRecordFormat67.prepare(propertyRecord73, 128, idSequence75, cursorContext76);
    long long78 = propertyRecordFormat67.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_79 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat80 = v320_79.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat81 = v320_79.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat82 = v320_79.property();
    boolean boolean83 = propertyRecordFormat67.equals((java.lang.Object) v320_79);
    org.neo4j.storageengine.api.format.Capability[] capabilityArray84 = v320_79.capabilities();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat85 = v320_79.relationship();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType86 = null;
    boolean boolean87 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_54,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v320_79, capabilityType86);
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord2);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1125899906842623L + "'",
        long4 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord5);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 48 + "'", int12 == 48);
    org.junit.Assert.assertNotNull(recordFormats14);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    org.junit.Assert.assertNotNull(propertyRecord25);
    org.junit.Assert.assertTrue("'" + int31 + "' != '" + 48 + "'", int31 == 48);
    org.junit.Assert.assertTrue("'" + int34 + "' != '" + 48 + "'", int34 == 48);
    org.junit.Assert.assertNotNull(recordFormats36);
    org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    org.junit.Assert.assertNotNull(propertyRecord47);
    org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
    org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-1L) + "'", long53 == (-1L));
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat55);
    org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    org.junit.Assert.assertNotNull(recordFormats60);
    org.junit.Assert.assertNotNull(recordFormatsArray61);
    org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat64);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat65);
    org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    org.junit.Assert.assertTrue("'" + int69 + "' != '" + 48 + "'", int69 == 48);
    org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1125899906842623L + "'",
        long70 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + highLimitEncEnum71 + "' != '"
            + io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8 + "'",
        highLimitEncEnum71.equals(
            io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8));
    org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1125899906842623L + "'",
        long78 == 1125899906842623L);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat80);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat81);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat82);
    org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    org.junit.Assert.assertNotNull(capabilityArray84);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat85);
    org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
  }

  @Test
  public void test1226() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1226");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    org.neo4j.storageengine.api.format.Capability[] capabilityArray6 = v306_0.capabilities();
    org.neo4j.kernel.impl.store.format.RecordFormats[] recordFormatsArray7 = v306_0.compatibleVersionsForRollingUpgrade();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat8 = v306_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat9 = v306_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat10 = v306_0.schema();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.MetaDataRecord> metaDataRecordRecordFormat11 = v306_0.metaData();
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_12 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat13 = v320_12.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat14 = v320_12.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType15 = null;
    boolean boolean16 = v306_0.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v320_12, capabilityType15);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat17 = v320_12.node();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(capabilityArray6);
    org.junit.Assert.assertNotNull(recordFormatsArray7);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat8);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat9);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat10);
    org.junit.Assert.assertNotNull(metaDataRecordRecordFormat11);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat13);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat14);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat17);
  }

  @Test
  public void test1227() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1227");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = propertyRecordFormat0.getRecordSize(storeHeader1);
    long long3 = propertyRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum highLimitEncEnum4 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8;
    boolean boolean5 = propertyRecordFormat0.equals((java.lang.Object) highLimitEncEnum4);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord6 = null;
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    propertyRecordFormat0.prepare(propertyRecord6, 128, idSequence8, cursorContext9);
    long long11 = propertyRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_12 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat13 = v320_12.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat14 = v320_12.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat15 = v320_12.property();
    boolean boolean16 = propertyRecordFormat0.equals((java.lang.Object) v320_12);
    org.neo4j.storageengine.api.format.Capability[] capabilityArray17 = v320_12.capabilities();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily18 = v320_12.getFormatFamily();
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1125899906842623L + "'",
        long3 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + highLimitEncEnum4 + "' != '"
            + io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8 + "'",
        highLimitEncEnum4.equals(
            io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8));
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1125899906842623L + "'",
        long11 == 1125899906842623L);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat13);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat14);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat15);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    org.junit.Assert.assertNotNull(capabilityArray17);
    org.junit.Assert.assertTrue(
        "'" + formatFamily18 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily18.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
  }

  @Test
  public void test1228() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1228");
    }
    java.util.function.Function<org.neo4j.kernel.impl.store.StoreHeader, java.lang.Integer> storeHeaderFunction1 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.fixedRecordSize(
        (int) '4');
    org.junit.Assert.assertNotNull(storeHeaderFunction1);
  }

  @Test
  public void test1229() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1229");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    try {
      int int4 = relationshipHighLimitRecordFormat1.getPageSize((int) (short) 10, (int) (short) 0);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.ArithmeticException; message: / by zero");
    } catch (java.lang.ArithmeticException e) {
    }
  }

  @Test
  public void test1230() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1230");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl6 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean8 = recordFormatDynamicRecordImpl6.equals((java.lang.Object) 100.0f);
    int int11 = recordFormatDynamicRecordImpl6.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord12 = recordFormatDynamicRecordImpl6.newRecord();
    int int15 = recordFormatDynamicRecordImpl6.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord16 = recordFormatDynamicRecordImpl6.newRecord();
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord17 = recordFormatDynamicRecordImpl6.newRecord();
    org.neo4j.internal.id.IdSequence idSequence19 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext20 = null;
    recordFormatDynamicRecordImpl0.prepare(dynamicRecord17, 10, idSequence19, cursorContext20);
    int int24 = recordFormatDynamicRecordImpl0.getPageSize(52, (-1));
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    org.junit.Assert.assertTrue("'" + int11 + "' != '" + 16 + "'", int11 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord12);
    org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord16);
    org.junit.Assert.assertNotNull(dynamicRecord17);
    org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
  }

  @Test
  public void test1231() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1231");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    java.lang.String str1 = v310_0.name();
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "high_limitV3_1_0" + "'", str1,
        "high_limitV3_1_0");
  }

  @Test
  public void test1232() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1232");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    int int3 = relationshipGroupRecordFormat0.getPageSize((int) 'a', (int) (short) 100);
    long long4 = relationshipGroupRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord5 = relationshipGroupRecordFormat0.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord6 = relationshipGroupRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat8 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        0);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat9 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long10 = relationshipGroupHighLimitRecordFormat9.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat11 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord12 = null;
    long long13 = relationshipGroupHighLimitRecordFormat11.getNextRecordReference(
        relationshipGroupRecord12);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord14 = relationshipGroupHighLimitRecordFormat11.newRecord();
    org.neo4j.internal.id.IdSequence idSequence16 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext17 = null;
    relationshipGroupHighLimitRecordFormat9.prepare(relationshipGroupRecord14, (int) (byte) 1,
        idSequence16, cursorContext17);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat19 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long20 = relationshipGroupHighLimitRecordFormat19.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat21 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord22 = null;
    long long23 = relationshipGroupHighLimitRecordFormat21.getNextRecordReference(
        relationshipGroupRecord22);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord24 = relationshipGroupHighLimitRecordFormat21.newRecord();
    org.neo4j.internal.id.IdSequence idSequence26 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext27 = null;
    relationshipGroupHighLimitRecordFormat19.prepare(relationshipGroupRecord24, (int) (byte) 1,
        idSequence26, cursorContext27);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat29 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord30 = null;
    long long31 = relationshipGroupHighLimitRecordFormat29.getNextRecordReference(
        relationshipGroupRecord30);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord32 = relationshipGroupHighLimitRecordFormat29.newRecord();
    org.neo4j.internal.id.IdSequence idSequence34 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext35 = null;
    relationshipGroupHighLimitRecordFormat19.prepare(relationshipGroupRecord32, 0, idSequence34,
        cursorContext35);
    org.neo4j.internal.id.IdSequence idSequence38 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext39 = null;
    relationshipGroupHighLimitRecordFormat9.prepare(relationshipGroupRecord32, 128, idSequence38,
        cursorContext39);
    org.neo4j.internal.id.IdSequence idSequence42 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext43 = null;
    relationshipGroupHighLimitRecordFormat8.prepare(relationshipGroupRecord32, 16, idSequence42,
        cursorContext43);
    org.neo4j.internal.id.IdSequence idSequence46 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext47 = null;
    relationshipGroupRecordFormat0.prepare(relationshipGroupRecord32, 52, idSequence46,
        cursorContext47);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord49 = relationshipGroupRecordFormat0.newRecord();
    long long50 = relationshipGroupRecordFormat0.getMaxId();
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1125899906842623L + "'",
        long4 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipGroupRecord5);
    org.junit.Assert.assertNotNull(relationshipGroupRecord6);
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1125899906842623L + "'",
        long10 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord14);
    org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1125899906842623L + "'",
        long20 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord24);
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord32);
    org.junit.Assert.assertNotNull(relationshipGroupRecord49);
    org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1125899906842623L + "'",
        long50 == 1125899906842623L);
  }

  @Test
  public void test1233() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1233");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod(65L, 47L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 111L + "'", long2 == 111L);
  }

  @Test
  public void test1234() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1234");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    org.neo4j.storageengine.api.format.Capability[] capabilityArray6 = v306_0.capabilities();
    org.neo4j.kernel.impl.store.format.RecordFormats[] recordFormatsArray7 = v306_0.compatibleVersionsForRollingUpgrade();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat8 = v306_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat9 = v306_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat10 = v306_0.schema();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat11 = v306_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat12 = v306_0.relationshipGroup();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily13 = v306_0.getFormatFamily();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(capabilityArray6);
    org.junit.Assert.assertNotNull(recordFormatsArray7);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat8);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat9);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat10);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat11);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat12);
    org.junit.Assert.assertTrue(
        "'" + formatFamily13 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily13.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
  }

  @Test
  public void test1235() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1235");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat1 = v306_0.node();
    org.neo4j.storageengine.api.format.Capability capability2 = null;
    boolean boolean3 = v306_0.hasCapability(capability2);
    java.lang.String str4 = v306_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat5 = v306_0.relationshipGroup();
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat1);
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "high_limitV3_0_6" + "'", str4,
        "high_limitV3_0_6");
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat5);
  }

  @Test
  public void test1236() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1236");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.FactoryHighLimitDefaultImpl factoryHighLimitDefaultImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.FactoryHighLimitDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats1 = factoryHighLimitDefaultImpl0.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats2 = factoryHighLimitDefaultImpl0.newInstance();
    java.lang.String str3 = factoryHighLimitDefaultImpl0.getName();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats4 = factoryHighLimitDefaultImpl0.newInstance();
    org.junit.Assert.assertNotNull(recordFormats1);
    org.junit.Assert.assertNotNull(recordFormats2);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "high_limitV3_1_0" + "'", str3,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(recordFormats4);
  }

  @Test
  public void test1237() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1237");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat1 = v300_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat2 = v300_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat3 = v300_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat4 = v300_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormats[] recordFormatsArray5 = v300_0.compatibleVersionsForRollingUpgrade();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat6 = v300_0.labelToken();
    java.lang.String str7 = v300_0.introductionVersion();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat1);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat2);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat3);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat4);
    org.junit.Assert.assertNotNull(recordFormatsArray5);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat6);
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "3.0.0" + "'", str7, "3.0.0");
  }

  @Test
  public void test1238() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1238");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = null;
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    recordFormatDynamicRecordImpl0.prepare(dynamicRecord6, (int) (byte) -1, idSequence8,
        cursorContext9);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl11 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean13 = recordFormatDynamicRecordImpl11.equals((java.lang.Object) 100.0f);
    int int16 = recordFormatDynamicRecordImpl11.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord17 = recordFormatDynamicRecordImpl11.newRecord();
    long long18 = recordFormatDynamicRecordImpl0.getNextRecordReference(dynamicRecord17);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_19 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat20 = v300_19.labelToken();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily21 = v300_19.getFormatFamily();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat22 = v300_19.propertyKeyToken();
    boolean boolean23 = recordFormatDynamicRecordImpl0.equals(
        (java.lang.Object) propertyKeyTokenRecordRecordFormat22);
    int int26 = recordFormatDynamicRecordImpl0.getPageSize((int) (short) 0, 99);
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16 + "'", int16 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord17);
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat20);
    org.junit.Assert.assertTrue(
        "'" + formatFamily21 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily21.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat22);
    org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
  }

  @Test
  public void test1239() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1239");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    int int1 = relationshipRecordFormat0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord2 = relationshipRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    int int4 = relationshipRecordFormat3.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord5 = relationshipRecordFormat3.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat9 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat10 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord11 = relationshipRecordFormat10.newRecord();
    long long12 = relationshipHighLimitRecordFormat9.getNextRecordReference(relationshipRecord11);
    org.neo4j.internal.id.IdSequence idSequence14 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext15 = null;
    relationshipHighLimitRecordFormat7.prepare(relationshipRecord11, (int) (byte) 10, idSequence14,
        cursorContext15);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat18 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat20 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat21 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord22 = relationshipRecordFormat21.newRecord();
    long long23 = relationshipHighLimitRecordFormat20.getNextRecordReference(relationshipRecord22);
    org.neo4j.internal.id.IdSequence idSequence25 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext26 = null;
    relationshipHighLimitRecordFormat18.prepare(relationshipRecord22, (int) (byte) 10, idSequence25,
        cursorContext26);
    long long28 = relationshipHighLimitRecordFormat7.getNextRecordReference(relationshipRecord22);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord29 = relationshipHighLimitRecordFormat7.newRecord();
    org.neo4j.internal.id.IdSequence idSequence31 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext32 = null;
    relationshipRecordFormat3.prepare(relationshipRecord29, 64, idSequence31, cursorContext32);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat34 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord35 = relationshipRecordFormat34.newRecord();
    int int36 = relationshipRecordFormat34.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat37 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat38 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord39 = relationshipRecordFormat38.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord40 = relationshipRecordFormat38.newRecord();
    org.neo4j.internal.id.IdSequence idSequence42 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext43 = null;
    relationshipRecordFormat37.prepare(relationshipRecord40, 100, idSequence42, cursorContext43);
    long long45 = relationshipRecordFormat34.getNextRecordReference(relationshipRecord40);
    long long46 = relationshipRecordFormat3.getNextRecordReference(relationshipRecord40);
    org.neo4j.internal.id.IdSequence idSequence48 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext49 = null;
    relationshipRecordFormat0.prepare(relationshipRecord40, (int) (byte) 10, idSequence48,
        cursorContext49);
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord2);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord5);
    org.junit.Assert.assertNotNull(relationshipRecord11);
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord22);
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
    org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord29);
    org.junit.Assert.assertNotNull(relationshipRecord35);
    org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord39);
    org.junit.Assert.assertNotNull(relationshipRecord40);
    org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
    org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
  }

  @Test
  public void test1240() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1240");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord2 = relationshipHighLimitRecordFormat1.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader4 = null;
    int int5 = relationshipRecordFormat3.getRecordSize(storeHeader4);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat8 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord9 = relationshipRecordFormat8.newRecord();
    long long10 = relationshipHighLimitRecordFormat7.getNextRecordReference(relationshipRecord9);
    org.neo4j.internal.id.IdSequence idSequence12 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext13 = null;
    relationshipRecordFormat3.prepare(relationshipRecord9, 3, idSequence12, cursorContext13);
    org.neo4j.internal.id.IdSequence idSequence16 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext17 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord9, 0, idSequence16,
        cursorContext17);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader19 = null;
    int int20 = relationshipHighLimitRecordFormat1.getRecordSize(storeHeader19);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_21 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat22 = v300_21.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat23 = v300_21.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat24 = v300_21.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat25 = v300_21.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat26 = v300_21.labelToken();
    java.lang.String str27 = v300_21.name();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray28 = v300_21.capabilities();
    boolean boolean29 = relationshipHighLimitRecordFormat1.equals(
        (java.lang.Object) capabilityArray28);
    org.neo4j.io.pagecache.PageCursor pageCursor30 = null;
    try {
      boolean boolean31 = relationshipHighLimitRecordFormat1.isInUse(pageCursor30);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(relationshipRecord2);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
    org.junit.Assert.assertNotNull(relationshipRecord9);
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat22);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat23);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat24);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat25);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat26);
    org.junit.Assert.assertEquals("'" + str27 + "' != '" + "high_limitV3_0_0" + "'", str27,
        "high_limitV3_0_0");
    org.junit.Assert.assertNotNull(capabilityArray28);
    org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
  }

  @Test
  public void test1241() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1241");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat1 = v300_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat2 = v300_0.schema();
    java.lang.String str3 = v300_0.storeVersion();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat4 = v300_0.propertyKeyToken();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat1);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat2);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "vE.H.0" + "'", str3, "vE.H.0");
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat4);
  }

  @Test
  public void test1242() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1242");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v306_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v306_0.labelToken();
    boolean boolean4 = v306_0.equals((java.lang.Object) 64);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat5 = v306_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat6 = v306_0.property();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat5);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat6);
  }

  @Test
  public void test1243() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1243");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord2 = relationshipHighLimitRecordFormat1.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord5 = relationshipHighLimitRecordFormat4.newRecord();
    org.neo4j.internal.id.IdSequence idSequence7 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext8 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord5, (int) (short) 1, idSequence7,
        cursorContext8);
    int int10 = relationshipHighLimitRecordFormat1.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord11 = relationshipHighLimitRecordFormat1.newRecord();
    long long12 = relationshipHighLimitRecordFormat1.getMaxId();
    org.junit.Assert.assertNotNull(relationshipRecord2);
    org.junit.Assert.assertNotNull(relationshipRecord5);
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord11);
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1125899906842623L + "'",
        long12 == 1125899906842623L);
  }

  @Test
  public void test1244() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1244");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        35);
  }

  @Test
  public void test1245() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1245");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    org.neo4j.storageengine.api.format.Capability[] capabilityArray6 = v306_0.capabilities();
    org.neo4j.kernel.impl.store.format.RecordFormats[] recordFormatsArray7 = v306_0.compatibleVersionsForRollingUpgrade();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat8 = v306_0.dynamic();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray9 = v306_0.capabilities();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(capabilityArray6);
    org.junit.Assert.assertNotNull(recordFormatsArray7);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat8);
    org.junit.Assert.assertNotNull(capabilityArray9);
  }

  @Test
  public void test1246() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1246");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat1 = v320_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat2 = v320_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat3 = v320_0.property();
    java.lang.String str4 = v320_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat5 = v320_0.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat6 = v320_0.node();
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat1);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat2);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "high_limitV3_2_0" + "'", str4,
        "high_limitV3_2_0");
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat5);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat6);
  }

  @Test
  public void test1247() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1247");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord1 = null;
    long long2 = nodeRecordFormat0.getNextRecordReference(nodeRecord1);
    int int3 = nodeRecordFormat0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader4 = null;
    int int5 = nodeRecordFormat0.getRecordSize(storeHeader4);
    int int8 = nodeRecordFormat0.getPageSize((int) '4', (int) (short) 1);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader9 = null;
    int int10 = nodeRecordFormat0.getRecordSize(storeHeader9);
    long long11 = nodeRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord12 = nodeRecordFormat0.newRecord();
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1125899906842623L + "'",
        long11 == 1125899906842623L);
    org.junit.Assert.assertNotNull(nodeRecord12);
  }

  @Test
  public void test1248() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1248");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = propertyRecordFormat0.getRecordSize(storeHeader1);
    long long3 = propertyRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum highLimitEncEnum4 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8;
    boolean boolean5 = propertyRecordFormat0.equals((java.lang.Object) highLimitEncEnum4);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat6 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord7 = null;
    org.neo4j.internal.id.IdSequence idSequence9 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext10 = null;
    propertyRecordFormat6.prepare(propertyRecord7, (int) (short) -1, idSequence9, cursorContext10);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord12 = propertyRecordFormat6.newRecord();
    long long13 = propertyRecordFormat0.getNextRecordReference(propertyRecord12);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat14 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long15 = propertyOneByteHeaderRecordFormat14.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord16 = propertyOneByteHeaderRecordFormat14.newRecord();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord17 = propertyOneByteHeaderRecordFormat14.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat18 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader19 = null;
    int int20 = propertyRecordFormat18.getRecordSize(storeHeader19);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl21 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats22 = highLimitFactoryDefaultImpl21.newInstance();
    boolean boolean23 = propertyRecordFormat18.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl21);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat25 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean26 = propertyRecordFormat18.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord27 = null;
    org.neo4j.internal.id.IdSequence idSequence29 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext30 = null;
    propertyRecordFormat18.prepare(propertyRecord27, (int) (short) 0, idSequence29,
        cursorContext30);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat32 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord33 = propertyRecordFormat32.newRecord();
    org.neo4j.internal.id.IdSequence idSequence35 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext36 = null;
    propertyRecordFormat18.prepare(propertyRecord33, 52, idSequence35, cursorContext36);
    long long38 = propertyOneByteHeaderRecordFormat14.getNextRecordReference(propertyRecord33);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord39 = propertyOneByteHeaderRecordFormat14.newRecord();
    org.neo4j.io.pagecache.PageCursor pageCursor40 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad41 = null;
    try {
      propertyRecordFormat0.read(propertyRecord39, pageCursor40, recordLoad41, 48, 64);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1125899906842623L + "'",
        long3 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + highLimitEncEnum4 + "' != '"
            + io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8 + "'",
        highLimitEncEnum4.equals(
            io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8));
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    org.junit.Assert.assertNotNull(propertyRecord12);
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1125899906842623L + "'",
        long15 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord16);
    org.junit.Assert.assertNotNull(propertyRecord17);
    org.junit.Assert.assertTrue("'" + int20 + "' != '" + 48 + "'", int20 == 48);
    org.junit.Assert.assertNotNull(recordFormats22);
    org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    org.junit.Assert.assertNotNull(propertyRecord33);
    org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord39);
  }

  @Test
  public void test1249() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1249");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat1 = v320_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat2 = v320_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat3 = v320_0.property();
    java.lang.String str4 = v320_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat5 = v320_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat6 = v320_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat7 = v320_0.relationshipTypeToken();
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat1);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat2);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "high_limitV3_2_0" + "'", str4,
        "high_limitV3_2_0");
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat5);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat6);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat7);
  }

  @Test
  public void test1250() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1250");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        (-1));
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord2 = relationshipGroupHighLimitRecordFormat1.newRecord();
    org.junit.Assert.assertNotNull(relationshipGroupRecord2);
  }

  @Test
  public void test1251() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1251");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat1 = v300_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat2 = v300_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat3 = v300_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat4 = v300_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat5 = v300_0.property();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat1);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat2);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat3);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat4);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat5);
  }

  @Test
  public void test1252() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1252");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord1 = null;
    long long2 = nodeRecordFormat0.getNextRecordReference(nodeRecord1);
    int int3 = nodeRecordFormat0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader4 = null;
    int int5 = nodeRecordFormat0.getRecordSize(storeHeader4);
    org.neo4j.io.pagecache.PageCursor pageCursor6 = null;
    try {
      boolean boolean7 = nodeRecordFormat0.isInUse(pageCursor6);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
  }

  @Test
  public void test1253() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1253");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = relationshipGroupRecordFormat0.getRecordSize(storeHeader1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long4 = relationshipGroupHighLimitRecordFormat3.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord6 = null;
    long long7 = relationshipGroupHighLimitRecordFormat5.getNextRecordReference(
        relationshipGroupRecord6);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord8 = relationshipGroupHighLimitRecordFormat5.newRecord();
    org.neo4j.internal.id.IdSequence idSequence10 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext11 = null;
    relationshipGroupHighLimitRecordFormat3.prepare(relationshipGroupRecord8, (int) (byte) 1,
        idSequence10, cursorContext11);
    org.neo4j.internal.id.IdSequence idSequence14 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext15 = null;
    relationshipGroupRecordFormat0.prepare(relationshipGroupRecord8, 0, idSequence14,
        cursorContext15);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader17 = null;
    int int18 = relationshipGroupRecordFormat0.getRecordSize(storeHeader17);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord19 = relationshipGroupRecordFormat0.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord20 = relationshipGroupRecordFormat0.newRecord();
    int int23 = relationshipGroupRecordFormat0.getPageSize(96, 4);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat24 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long25 = relationshipGroupHighLimitRecordFormat24.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat26 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord27 = null;
    long long28 = relationshipGroupHighLimitRecordFormat26.getNextRecordReference(
        relationshipGroupRecord27);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord29 = relationshipGroupHighLimitRecordFormat26.newRecord();
    org.neo4j.internal.id.IdSequence idSequence31 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext32 = null;
    relationshipGroupHighLimitRecordFormat24.prepare(relationshipGroupRecord29, (int) (byte) 1,
        idSequence31, cursorContext32);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat34 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord35 = null;
    long long36 = relationshipGroupHighLimitRecordFormat34.getNextRecordReference(
        relationshipGroupRecord35);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord37 = relationshipGroupHighLimitRecordFormat34.newRecord();
    org.neo4j.internal.id.IdSequence idSequence39 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext40 = null;
    relationshipGroupHighLimitRecordFormat24.prepare(relationshipGroupRecord37, 0, idSequence39,
        cursorContext40);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord42 = relationshipGroupHighLimitRecordFormat24.newRecord();
    org.neo4j.internal.id.IdSequence idSequence44 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext45 = null;
    relationshipGroupRecordFormat0.prepare(relationshipGroupRecord42, (int) (byte) -1, idSequence44,
        cursorContext45);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 32 + "'", int2 == 32);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1125899906842623L + "'",
        long4 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord8);
    org.junit.Assert.assertTrue("'" + int18 + "' != '" + 32 + "'", int18 == 32);
    org.junit.Assert.assertNotNull(relationshipGroupRecord19);
    org.junit.Assert.assertNotNull(relationshipGroupRecord20);
    org.junit.Assert.assertTrue("'" + int23 + "' != '" + 96 + "'", int23 == 96);
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1125899906842623L + "'",
        long25 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord29);
    org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord37);
    org.junit.Assert.assertNotNull(relationshipGroupRecord42);
  }

  @Test
  public void test1254() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1254");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod((-40L),
        239L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
  }

  @Test
  public void test1255() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1255");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat();
    long long1 = nodeHighLimitRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader2 = null;
    int int3 = nodeHighLimitRecordFormat0.getRecordSize(storeHeader2);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord5 = null;
    long long6 = nodeRecordFormat4.getNextRecordReference(nodeRecord5);
    int int7 = nodeRecordFormat4.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader8 = null;
    int int9 = nodeRecordFormat4.getRecordSize(storeHeader8);
    int int12 = nodeRecordFormat4.getPageSize((int) '4', (int) (short) 1);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord13 = nodeRecordFormat4.newRecord();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader14 = null;
    int int15 = nodeRecordFormat4.getRecordSize(storeHeader14);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.NodeRecordFormat nodeRecordFormat16 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord17 = nodeRecordFormat16.newRecord();
    long long18 = nodeRecordFormat4.getNextRecordReference(nodeRecord17);
    org.neo4j.io.pagecache.PageCursor pageCursor19 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad20 = null;
    try {
      nodeHighLimitRecordFormat0.read(nodeRecord17, pageCursor19, recordLoad20, 32, 0);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16 + "'", int9 == 16);
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
    org.junit.Assert.assertNotNull(nodeRecord13);
    org.junit.Assert.assertTrue("'" + int15 + "' != '" + 16 + "'", int15 == 16);
    org.junit.Assert.assertNotNull(nodeRecord17);
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
  }

  @Test
  public void test1256() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1256");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord2 = propertyRecordFormat1.newRecord();
    long long3 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord2);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long5 = propertyOneByteHeaderRecordFormat4.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat6 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord8 = propertyRecordFormat7.newRecord();
    long long9 = propertyOneByteHeaderRecordFormat6.getNextRecordReference(propertyRecord8);
    long long10 = propertyOneByteHeaderRecordFormat4.getNextRecordReference(propertyRecord8);
    long long11 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord8);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader13 = null;
    int int14 = propertyRecordFormat12.getRecordSize(storeHeader13);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl15 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats16 = highLimitFactoryDefaultImpl15.newInstance();
    boolean boolean17 = propertyRecordFormat12.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl15);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat19 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean20 = propertyRecordFormat12.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord21 = propertyRecordFormat12.newRecord();
    long long22 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord21);
    int int23 = propertyOneByteHeaderRecordFormat0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord24 = propertyOneByteHeaderRecordFormat0.newRecord();
    int int27 = propertyOneByteHeaderRecordFormat0.getPageSize(100, (int) (short) 10);
    org.junit.Assert.assertNotNull(propertyRecord2);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1125899906842623L + "'",
        long5 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord8);
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    org.junit.Assert.assertTrue("'" + int14 + "' != '" + 48 + "'", int14 == 48);
    org.junit.Assert.assertNotNull(recordFormats16);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    org.junit.Assert.assertNotNull(propertyRecord21);
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
    org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    org.junit.Assert.assertNotNull(propertyRecord24);
    org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
  }

  @Test
  public void test1257() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1257");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long1 = relationshipGroupHighLimitRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord3 = null;
    long long4 = relationshipGroupHighLimitRecordFormat2.getNextRecordReference(
        relationshipGroupRecord3);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord5 = relationshipGroupHighLimitRecordFormat2.newRecord();
    org.neo4j.internal.id.IdSequence idSequence7 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext8 = null;
    relationshipGroupHighLimitRecordFormat0.prepare(relationshipGroupRecord5, (int) (byte) 1,
        idSequence7, cursorContext8);
    int int10 = relationshipGroupHighLimitRecordFormat0.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat11 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_12 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_13 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat14 = v300_13.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat15 = v300_13.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType16 = null;
    boolean boolean17 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_12,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_13, capabilityType16);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat18 = v300_13.relationship();
    boolean boolean19 = relationshipGroupRecordFormat11.equals(
        (java.lang.Object) relationshipRecordRecordFormat18);
    boolean boolean20 = relationshipGroupHighLimitRecordFormat0.equals(
        (java.lang.Object) boolean19);
    int int21 = relationshipGroupHighLimitRecordFormat0.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat22 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    int int25 = relationshipGroupRecordFormat22.getPageSize((int) 'a', (int) (short) 100);
    long long26 = relationshipGroupRecordFormat22.getMaxId();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord27 = relationshipGroupRecordFormat22.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord28 = relationshipGroupRecordFormat22.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat30 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        0);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat31 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long32 = relationshipGroupHighLimitRecordFormat31.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat33 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord34 = null;
    long long35 = relationshipGroupHighLimitRecordFormat33.getNextRecordReference(
        relationshipGroupRecord34);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord36 = relationshipGroupHighLimitRecordFormat33.newRecord();
    org.neo4j.internal.id.IdSequence idSequence38 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext39 = null;
    relationshipGroupHighLimitRecordFormat31.prepare(relationshipGroupRecord36, (int) (byte) 1,
        idSequence38, cursorContext39);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat41 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long42 = relationshipGroupHighLimitRecordFormat41.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat43 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord44 = null;
    long long45 = relationshipGroupHighLimitRecordFormat43.getNextRecordReference(
        relationshipGroupRecord44);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord46 = relationshipGroupHighLimitRecordFormat43.newRecord();
    org.neo4j.internal.id.IdSequence idSequence48 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext49 = null;
    relationshipGroupHighLimitRecordFormat41.prepare(relationshipGroupRecord46, (int) (byte) 1,
        idSequence48, cursorContext49);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat51 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord52 = null;
    long long53 = relationshipGroupHighLimitRecordFormat51.getNextRecordReference(
        relationshipGroupRecord52);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord54 = relationshipGroupHighLimitRecordFormat51.newRecord();
    org.neo4j.internal.id.IdSequence idSequence56 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext57 = null;
    relationshipGroupHighLimitRecordFormat41.prepare(relationshipGroupRecord54, 0, idSequence56,
        cursorContext57);
    org.neo4j.internal.id.IdSequence idSequence60 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext61 = null;
    relationshipGroupHighLimitRecordFormat31.prepare(relationshipGroupRecord54, 128, idSequence60,
        cursorContext61);
    org.neo4j.internal.id.IdSequence idSequence64 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext65 = null;
    relationshipGroupHighLimitRecordFormat30.prepare(relationshipGroupRecord54, 16, idSequence64,
        cursorContext65);
    org.neo4j.internal.id.IdSequence idSequence68 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext69 = null;
    relationshipGroupRecordFormat22.prepare(relationshipGroupRecord54, 52, idSequence68,
        cursorContext69);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord71 = relationshipGroupRecordFormat22.newRecord();
    org.neo4j.io.pagecache.PageCursor pageCursor72 = null;
    try {
      relationshipGroupHighLimitRecordFormat0.write(relationshipGroupRecord71, pageCursor72,
          (int) (short) -1, (int) (short) 100);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord5);
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat14);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat15);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat18);
    org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1125899906842623L + "'",
        long26 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipGroupRecord27);
    org.junit.Assert.assertNotNull(relationshipGroupRecord28);
    org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1125899906842623L + "'",
        long32 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord36);
    org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1125899906842623L + "'",
        long42 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord46);
    org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-1L) + "'", long53 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord54);
    org.junit.Assert.assertNotNull(relationshipGroupRecord71);
  }

  @Test
  public void test1258() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1258");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.storageengine.api.format.Capability capability1 = null;
    boolean boolean2 = v310_0.hasCapability(capability1);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat3 = v310_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats4 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitRecordFormats.RCD_FMXS;
    org.neo4j.storageengine.api.format.CapabilityType capabilityType5 = null;
    boolean boolean6 = v310_0.hasCompatibleCapabilities(recordFormats4, capabilityType5);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat7 = v310_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat8 = v310_0.labelToken();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat3);
    org.junit.Assert.assertNotNull(recordFormats4);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat7);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat8);
  }

  @Test
  public void test1259() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1259");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod((long) 2,
        119L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 119L + "'", long2 == 119L);
  }

  @Test
  public void test1260() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1260");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord2 = relationshipRecordFormat1.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord3 = relationshipRecordFormat1.newRecord();
    org.neo4j.internal.id.IdSequence idSequence5 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext6 = null;
    relationshipRecordFormat0.prepare(relationshipRecord3, 100, idSequence5, cursorContext6);
    int int10 = relationshipRecordFormat0.getPageSize(0, 3);
    int int11 = relationshipRecordFormat0.getRecordHeaderSize();
    int int14 = relationshipRecordFormat0.getPageSize(0, 128);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader15 = null;
    int int16 = relationshipRecordFormat0.getRecordSize(storeHeader15);
    org.junit.Assert.assertNotNull(relationshipRecord2);
    org.junit.Assert.assertNotNull(relationshipRecord3);
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    org.junit.Assert.assertTrue("'" + int16 + "' != '" + 32 + "'", int16 == 32);
  }

  @Test
  public void test1261() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1261");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat1 = v300_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat2 = v300_0.schema();
    java.lang.String str3 = v300_0.storeVersion();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat4 = v300_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat5 = v300_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat6 = v300_0.property();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat1);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat2);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "vE.H.0" + "'", str3, "vE.H.0");
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat4);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat5);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat6);
  }

  @Test
  public void test1262() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1262");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        3);
  }

  @Test
  public void test1263() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1263");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat();
    long long1 = nodeHighLimitRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord2 = nodeHighLimitRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 1);
    int int7 = nodeHighLimitRecordFormat4.getPageSize(48, (int) '#');
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord8 = nodeHighLimitRecordFormat4.newRecord();
    int int9 = nodeHighLimitRecordFormat0.rerdtlgForRE(nodeRecord8);
    io.github.onograph.kernel.srv.store.format.highlimit.v320.FactoryHighLimitDefaultImpl factoryHighLimitDefaultImpl10 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.FactoryHighLimitDefaultImpl();
    java.lang.String str11 = factoryHighLimitDefaultImpl10.getName();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats12 = factoryHighLimitDefaultImpl10.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats13 = factoryHighLimitDefaultImpl10.newInstance();
    java.lang.String str14 = factoryHighLimitDefaultImpl10.getName();
    boolean boolean15 = nodeHighLimitRecordFormat0.equals((java.lang.Object) str14);
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertNotNull(nodeRecord2);
    org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
    org.junit.Assert.assertNotNull(nodeRecord8);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "high_limitV3_2_0" + "'", str11,
        "high_limitV3_2_0");
    org.junit.Assert.assertNotNull(recordFormats12);
    org.junit.Assert.assertNotNull(recordFormats13);
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "high_limitV3_2_0" + "'", str14,
        "high_limitV3_2_0");
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
  }

  @Test
  public void test1264() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1264");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord1 = relationshipRecordFormat0.newRecord();
    int int2 = relationshipRecordFormat0.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord5 = relationshipRecordFormat4.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord6 = relationshipRecordFormat4.newRecord();
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    relationshipRecordFormat3.prepare(relationshipRecord6, 100, idSequence8, cursorContext9);
    long long11 = relationshipRecordFormat0.getNextRecordReference(relationshipRecord6);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat13 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord14 = relationshipRecordFormat13.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord15 = relationshipRecordFormat13.newRecord();
    org.neo4j.internal.id.IdSequence idSequence17 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext18 = null;
    relationshipRecordFormat12.prepare(relationshipRecord15, 100, idSequence17, cursorContext18);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat21 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord22 = relationshipHighLimitRecordFormat21.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat24 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord25 = relationshipHighLimitRecordFormat24.newRecord();
    org.neo4j.internal.id.IdSequence idSequence27 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext28 = null;
    relationshipHighLimitRecordFormat21.prepare(relationshipRecord25, (int) (short) 1, idSequence27,
        cursorContext28);
    org.neo4j.internal.id.IdSequence idSequence31 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext32 = null;
    relationshipRecordFormat12.prepare(relationshipRecord25, 24, idSequence31, cursorContext32);
    long long34 = relationshipRecordFormat0.getNextRecordReference(relationshipRecord25);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat36 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord37 = relationshipHighLimitRecordFormat36.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat39 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord40 = relationshipHighLimitRecordFormat39.newRecord();
    org.neo4j.internal.id.IdSequence idSequence42 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext43 = null;
    relationshipHighLimitRecordFormat36.prepare(relationshipRecord40, (int) (short) 1, idSequence42,
        cursorContext43);
    org.neo4j.internal.id.IdSequence idSequence46 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext47 = null;
    relationshipRecordFormat0.prepare(relationshipRecord40, 12, idSequence46, cursorContext47);
    long long49 = relationshipRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord50 = relationshipRecordFormat0.newRecord();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader51 = null;
    int int52 = relationshipRecordFormat0.getRecordSize(storeHeader51);
    org.junit.Assert.assertNotNull(relationshipRecord1);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord5);
    org.junit.Assert.assertNotNull(relationshipRecord6);
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord14);
    org.junit.Assert.assertNotNull(relationshipRecord15);
    org.junit.Assert.assertNotNull(relationshipRecord22);
    org.junit.Assert.assertNotNull(relationshipRecord25);
    org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord37);
    org.junit.Assert.assertNotNull(relationshipRecord40);
    org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1125899906842623L + "'",
        long49 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipRecord50);
    org.junit.Assert.assertTrue("'" + int52 + "' != '" + 32 + "'", int52 == 32);
  }

  @Test
  public void test1265() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1265");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord4 = relationshipHighLimitRecordFormat3.newRecord();
    org.neo4j.internal.id.IdSequence idSequence6 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext7 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord4, (int) 'a', idSequence6,
        cursorContext7);
    int int9 = relationshipHighLimitRecordFormat1.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat10 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    int int11 = relationshipRecordFormat10.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord12 = relationshipRecordFormat10.newRecord();
    long long13 = relationshipRecordFormat10.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) '4');
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord16 = relationshipHighLimitRecordFormat15.newRecord();
    org.neo4j.internal.id.IdSequence idSequence18 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext19 = null;
    relationshipRecordFormat10.prepare(relationshipRecord16, (int) (byte) -1, idSequence18,
        cursorContext19);
    org.neo4j.internal.id.IdSequence idSequence22 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext23 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord16, (int) (short) 1, idSequence22,
        cursorContext23);
    org.junit.Assert.assertNotNull(relationshipRecord4);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord12);
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1125899906842623L + "'",
        long13 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipRecord16);
  }

  @Test
  public void test1266() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1266");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord3 = propertyRecordFormat2.newRecord();
    long long4 = propertyOneByteHeaderRecordFormat1.getNextRecordReference(propertyRecord3);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long6 = propertyOneByteHeaderRecordFormat5.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat8 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord9 = propertyRecordFormat8.newRecord();
    long long10 = propertyOneByteHeaderRecordFormat7.getNextRecordReference(propertyRecord9);
    long long11 = propertyOneByteHeaderRecordFormat5.getNextRecordReference(propertyRecord9);
    long long12 = propertyOneByteHeaderRecordFormat1.getNextRecordReference(propertyRecord9);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat13 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader14 = null;
    int int15 = propertyRecordFormat13.getRecordSize(storeHeader14);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl16 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats17 = highLimitFactoryDefaultImpl16.newInstance();
    boolean boolean18 = propertyRecordFormat13.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl16);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat20 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean21 = propertyRecordFormat13.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord22 = propertyRecordFormat13.newRecord();
    long long23 = propertyOneByteHeaderRecordFormat1.getNextRecordReference(propertyRecord22);
    org.neo4j.io.pagecache.PageCursor pageCursor24 = null;
    try {
      propertyOneByteHeaderRecordFormat0.write(propertyRecord22, pageCursor24, 64, (-1));
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(propertyRecord3);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1125899906842623L + "'",
        long6 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord9);
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
    org.junit.Assert.assertTrue("'" + int15 + "' != '" + 48 + "'", int15 == 48);
    org.junit.Assert.assertNotNull(recordFormats17);
    org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    org.junit.Assert.assertNotNull(propertyRecord22);
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
  }

  @Test
  public void test1267() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1267");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod((long) 52,
        139L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 191L + "'", long2 == 191L);
  }

  @Test
  public void test1268() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1268");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat6 = v300_1.schema();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat7 = v300_1.propertyKeyToken();
    org.neo4j.storageengine.api.format.Capability capability8 = null;
    boolean boolean9 = v300_1.hasCapability(capability8);
    java.lang.String str10 = v300_1.name();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat6);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat7);
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "high_limitV3_0_0" + "'", str10,
        "high_limitV3_0_0");
  }

  @Test
  public void test1269() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1269");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat1 = v306_0.node();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily2 = v306_0.getFormatFamily();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily3 = v306_0.getFormatFamily();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat4 = v306_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat5 = v306_0.labelToken();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_6 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat7 = v300_6.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat8 = v300_6.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat9 = v300_6.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat10 = v300_6.node();
    org.neo4j.kernel.impl.store.format.RecordFormats[] recordFormatsArray11 = v300_6.compatibleVersionsForRollingUpgrade();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType12 = null;
    boolean boolean13 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_6, capabilityType12);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat14 = v300_6.relationshipGroup();
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat1);
    org.junit.Assert.assertTrue(
        "'" + formatFamily2 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily2.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertTrue(
        "'" + formatFamily3 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily3.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat4);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat5);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat7);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat8);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat9);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat10);
    org.junit.Assert.assertNotNull(recordFormatsArray11);
    org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat14);
  }

  @Test
  public void test1270() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1270");
    }
    long long2 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.torete(2L,
        (long) 8);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 6L + "'", long2 == 6L);
  }

  @Test
  public void test1271() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1271");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord2 = relationshipHighLimitRecordFormat1.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader4 = null;
    int int5 = relationshipRecordFormat3.getRecordSize(storeHeader4);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat8 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord9 = relationshipRecordFormat8.newRecord();
    long long10 = relationshipHighLimitRecordFormat7.getNextRecordReference(relationshipRecord9);
    org.neo4j.internal.id.IdSequence idSequence12 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext13 = null;
    relationshipRecordFormat3.prepare(relationshipRecord9, 3, idSequence12, cursorContext13);
    org.neo4j.internal.id.IdSequence idSequence16 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext17 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord9, 0, idSequence16,
        cursorContext17);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader19 = null;
    int int20 = relationshipHighLimitRecordFormat1.getRecordSize(storeHeader19);
    int int21 = relationshipHighLimitRecordFormat1.getRecordHeaderSize();
    org.junit.Assert.assertNotNull(relationshipRecord2);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
    org.junit.Assert.assertNotNull(relationshipRecord9);
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
  }

  @Test
  public void test1272() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1272");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat1 = v306_0.node();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily2 = v306_0.getFormatFamily();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily3 = v306_0.getFormatFamily();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat4 = v306_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat5 = v306_0.labelToken();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_6 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat7 = v300_6.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat8 = v300_6.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat9 = v300_6.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat10 = v300_6.node();
    org.neo4j.kernel.impl.store.format.RecordFormats[] recordFormatsArray11 = v300_6.compatibleVersionsForRollingUpgrade();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType12 = null;
    boolean boolean13 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_6, capabilityType12);
    java.lang.String str14 = v300_6.toString();
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat1);
    org.junit.Assert.assertTrue(
        "'" + formatFamily2 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily2.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertTrue(
        "'" + formatFamily3 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily3.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat4);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat5);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat7);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat8);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat9);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat10);
    org.junit.Assert.assertNotNull(recordFormatsArray11);
    org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "RecordFormat:V300[vE.H.0]" + "'", str14,
        "RecordFormat:V300[vE.H.0]");
  }

  @Test
  public void test1273() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1273");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord2 = relationshipRecordFormat1.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord3 = relationshipRecordFormat1.newRecord();
    org.neo4j.internal.id.IdSequence idSequence5 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext6 = null;
    relationshipRecordFormat0.prepare(relationshipRecord3, 100, idSequence5, cursorContext6);
    int int10 = relationshipRecordFormat0.getPageSize(0, 3);
    int int11 = relationshipRecordFormat0.getRecordHeaderSize();
    long long12 = relationshipRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord13 = relationshipRecordFormat0.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord14 = relationshipRecordFormat0.newRecord();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader15 = null;
    int int16 = relationshipRecordFormat0.getRecordSize(storeHeader15);
    org.junit.Assert.assertNotNull(relationshipRecord2);
    org.junit.Assert.assertNotNull(relationshipRecord3);
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1125899906842623L + "'",
        long12 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipRecord13);
    org.junit.Assert.assertNotNull(relationshipRecord14);
    org.junit.Assert.assertTrue("'" + int16 + "' != '" + 32 + "'", int16 == 32);
  }

  @Test
  public void test1274() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1274");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord1 = null;
    long long2 = nodeRecordFormat0.getNextRecordReference(nodeRecord1);
    int int3 = nodeRecordFormat0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader4 = null;
    int int5 = nodeRecordFormat0.getRecordSize(storeHeader4);
    int int8 = nodeRecordFormat0.getPageSize((int) '4', (int) (short) 1);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord9 = nodeRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_10 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat11 = v306_10.relationship();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray12 = v306_10.capabilities();
    java.lang.String str13 = v306_10.introductionVersion();
    boolean boolean14 = nodeRecordFormat0.equals((java.lang.Object) v306_10);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_15 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily16 = v300_15.getFormatFamily();
    boolean boolean17 = v306_10.equals((java.lang.Object) formatFamily16);
    java.lang.String str18 = v306_10.toString();
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_19 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat20 = v310_19.labelToken();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType21 = null;
    boolean boolean22 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_10,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v310_19, capabilityType21);
    java.lang.String str23 = v310_19.name();
    java.lang.String str24 = v310_19.storeVersion();
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
    org.junit.Assert.assertNotNull(nodeRecord9);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat11);
    org.junit.Assert.assertNotNull(capabilityArray12);
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "3.0.6" + "'", str13, "3.0.6");
    org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    org.junit.Assert.assertTrue(
        "'" + formatFamily16 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily16.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "RecordFormat:V306[vE.H.0b]" + "'",
        str18, "RecordFormat:V306[vE.H.0b]");
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat20);
    org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    org.junit.Assert.assertEquals("'" + str23 + "' != '" + "high_limitV3_1_0" + "'", str23,
        "high_limitV3_1_0");
    org.junit.Assert.assertEquals("'" + str24 + "' != '" + "vE.H.2" + "'", str24, "vE.H.2");
  }

  @Test
  public void test1275() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1275");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v300_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat2 = v300_0.relationshipTypeToken();
    java.lang.String str3 = v300_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat4 = v300_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat5 = v300_0.property();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat2);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "high_limitV3_0_0" + "'", str3,
        "high_limitV3_0_0");
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat4);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat5);
  }

  @Test
  public void test1276() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1276");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v310_0.relationship();
    java.lang.String str2 = v310_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat3 = v310_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat4 = v310_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat5 = v310_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat6 = v310_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat7 = v310_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat8 = v310_0.property();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_1_0" + "'", str2,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat3);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat4);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat5);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat6);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat7);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat8);
  }

  @Test
  public void test1277() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1277");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        0);
    long long2 = relationshipGroupHighLimitRecordFormat1.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        0);
    long long5 = relationshipGroupHighLimitRecordFormat4.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat6 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long8 = relationshipGroupHighLimitRecordFormat7.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat9 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord10 = null;
    long long11 = relationshipGroupHighLimitRecordFormat9.getNextRecordReference(
        relationshipGroupRecord10);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord12 = relationshipGroupHighLimitRecordFormat9.newRecord();
    org.neo4j.internal.id.IdSequence idSequence14 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext15 = null;
    relationshipGroupHighLimitRecordFormat7.prepare(relationshipGroupRecord12, (int) (byte) 1,
        idSequence14, cursorContext15);
    long long17 = relationshipGroupHighLimitRecordFormat6.getNextRecordReference(
        relationshipGroupRecord12);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat18 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long19 = relationshipGroupHighLimitRecordFormat18.getMaxId();
    long long20 = relationshipGroupHighLimitRecordFormat18.getMaxId();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord21 = relationshipGroupHighLimitRecordFormat18.newRecord();
    org.neo4j.internal.id.IdSequence idSequence23 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext24 = null;
    relationshipGroupHighLimitRecordFormat6.prepare(relationshipGroupRecord21, 3, idSequence23,
        cursorContext24);
    long long26 = relationshipGroupHighLimitRecordFormat4.getNextRecordReference(
        relationshipGroupRecord21);
    org.neo4j.io.pagecache.PageCursor pageCursor27 = null;
    try {
      relationshipGroupHighLimitRecordFormat1.write(relationshipGroupRecord21, pageCursor27,
          (int) '#', 64);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1125899906842623L + "'",
        long2 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1125899906842623L + "'",
        long5 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1125899906842623L + "'",
        long8 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord12);
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1125899906842623L + "'",
        long19 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1125899906842623L + "'",
        long20 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipGroupRecord21);
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
  }

  @Test
  public void test1278() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1278");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord2 = relationshipRecordFormat1.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord3 = relationshipRecordFormat1.newRecord();
    org.neo4j.internal.id.IdSequence idSequence5 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext6 = null;
    relationshipRecordFormat0.prepare(relationshipRecord3, 100, idSequence5, cursorContext6);
    long long8 = relationshipRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.FactoryHighLimitDefaultImpl factoryHighLimitDefaultImpl9 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.FactoryHighLimitDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats10 = factoryHighLimitDefaultImpl9.newInstance();
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_11 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_12 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat13 = v300_12.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat14 = v300_12.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType15 = null;
    boolean boolean16 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_11,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_12, capabilityType15);
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_17 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat18 = v310_17.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat19 = v310_17.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat20 = v310_17.labelToken();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType21 = null;
    boolean boolean22 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_12,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v310_17, capabilityType21);
    org.neo4j.storageengine.api.format.CapabilityType capabilityType23 = null;
    boolean boolean24 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        recordFormats10, (org.neo4j.kernel.impl.store.format.RecordFormats) v300_12,
        capabilityType23);
    boolean boolean25 = relationshipRecordFormat0.equals((java.lang.Object) capabilityType23);
    org.junit.Assert.assertNotNull(relationshipRecord2);
    org.junit.Assert.assertNotNull(relationshipRecord3);
    org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1125899906842623L + "'",
        long8 == 1125899906842623L);
    org.junit.Assert.assertNotNull(recordFormats10);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat13);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat14);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat18);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat19);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat20);
    org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
  }

  @Test
  public void test1279() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1279");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat1 = v310_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat2 = v310_0.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat3 = v310_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat4 = v310_0.node();
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat1);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat3);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat4);
  }

  @Test
  public void test1280() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1280");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        16);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader2 = null;
    int int3 = relationshipHighLimitRecordFormat1.getRecordSize(storeHeader2);
    long long4 = relationshipHighLimitRecordFormat1.getMaxId();
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1125899906842623L + "'",
        long4 == 1125899906842623L);
  }

  @Test
  public void test1281() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1281");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_2 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat3 = v300_2.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat4 = v300_2.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType5 = null;
    boolean boolean6 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_1,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_2, capabilityType5);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat7 = v300_2.relationship();
    boolean boolean8 = relationshipGroupRecordFormat0.equals(
        (java.lang.Object) relationshipRecordRecordFormat7);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord9 = relationshipGroupRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat10 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long11 = relationshipGroupHighLimitRecordFormat10.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader13 = null;
    int int14 = relationshipGroupRecordFormat12.getRecordSize(storeHeader13);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long16 = relationshipGroupHighLimitRecordFormat15.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat17 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord18 = null;
    long long19 = relationshipGroupHighLimitRecordFormat17.getNextRecordReference(
        relationshipGroupRecord18);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord20 = relationshipGroupHighLimitRecordFormat17.newRecord();
    org.neo4j.internal.id.IdSequence idSequence22 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext23 = null;
    relationshipGroupHighLimitRecordFormat15.prepare(relationshipGroupRecord20, (int) (byte) 1,
        idSequence22, cursorContext23);
    org.neo4j.internal.id.IdSequence idSequence26 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext27 = null;
    relationshipGroupRecordFormat12.prepare(relationshipGroupRecord20, 0, idSequence26,
        cursorContext27);
    org.neo4j.internal.id.IdSequence idSequence30 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext31 = null;
    relationshipGroupHighLimitRecordFormat10.prepare(relationshipGroupRecord20, 64, idSequence30,
        cursorContext31);
    long long33 = relationshipGroupRecordFormat0.getNextRecordReference(relationshipGroupRecord20);
    int int34 = relationshipGroupRecordFormat0.getRecordHeaderSize();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat3);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat4);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat7);
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    org.junit.Assert.assertNotNull(relationshipGroupRecord9);
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1125899906842623L + "'",
        long11 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int14 + "' != '" + 32 + "'", int14 == 32);
    org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1125899906842623L + "'",
        long16 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord20);
    org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
    org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
  }

  @Test
  public void test1282() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1282");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat1 = v300_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat2 = v300_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat3 = v300_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat4 = v300_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormats[] recordFormatsArray5 = v300_0.compatibleVersionsForRollingUpgrade();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat6 = v300_0.dynamic();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat1);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat2);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat3);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat4);
    org.junit.Assert.assertNotNull(recordFormatsArray5);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat6);
  }

  @Test
  public void test1283() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1283");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) '4');
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord6 = relationshipHighLimitRecordFormat5.newRecord();
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    relationshipHighLimitRecordFormat3.prepare(relationshipRecord6, (int) 'a', idSequence8,
        cursorContext9);
    org.neo4j.internal.id.IdSequence idSequence12 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext13 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord6, 10, idSequence12,
        cursorContext13);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord15 = relationshipHighLimitRecordFormat1.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat17 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) '4');
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord18 = relationshipHighLimitRecordFormat17.newRecord();
    org.neo4j.internal.id.IdSequence idSequence20 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext21 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord18, (int) (short) 100,
        idSequence20, cursorContext21);
    int int23 = relationshipHighLimitRecordFormat1.getRecordHeaderSize();
    org.junit.Assert.assertNotNull(relationshipRecord6);
    org.junit.Assert.assertNotNull(relationshipRecord15);
    org.junit.Assert.assertNotNull(relationshipRecord18);
    org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
  }

  @Test
  public void test1284() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1284");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat1 = v320_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat2 = v320_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat3 = v320_0.property();
    java.lang.String str4 = v320_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat5 = v320_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat6 = v320_0.relationshipGroup();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat7 = v320_0.relationshipGroup();
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat1);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat2);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "high_limitV3_2_0" + "'", str4,
        "high_limitV3_2_0");
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat5);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat6);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat7);
  }

  @Test
  public void test1285() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1285");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord1 = null;
    org.neo4j.internal.id.IdSequence idSequence3 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext4 = null;
    propertyRecordFormat0.prepare(propertyRecord1, (int) (short) -1, idSequence3, cursorContext4);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord6 = propertyRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat8 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord9 = propertyRecordFormat8.newRecord();
    long long10 = propertyOneByteHeaderRecordFormat7.getNextRecordReference(propertyRecord9);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader11 = null;
    int int12 = propertyOneByteHeaderRecordFormat7.getRecordSize(storeHeader11);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat13 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long14 = propertyOneByteHeaderRecordFormat13.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat16 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord17 = propertyRecordFormat16.newRecord();
    long long18 = propertyOneByteHeaderRecordFormat15.getNextRecordReference(propertyRecord17);
    long long19 = propertyOneByteHeaderRecordFormat13.getNextRecordReference(propertyRecord17);
    org.neo4j.internal.id.IdSequence idSequence21 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext22 = null;
    propertyOneByteHeaderRecordFormat7.prepare(propertyRecord17, 64, idSequence21, cursorContext22);
    long long24 = propertyRecordFormat0.getNextRecordReference(propertyRecord17);
    boolean boolean26 = propertyRecordFormat0.equals((java.lang.Object) 100);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat27 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader28 = null;
    int int29 = propertyRecordFormat27.getRecordSize(storeHeader28);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl30 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats31 = highLimitFactoryDefaultImpl30.newInstance();
    boolean boolean32 = propertyRecordFormat27.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl30);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat34 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean35 = propertyRecordFormat27.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord36 = propertyRecordFormat27.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat37 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader38 = null;
    int int39 = propertyRecordFormat37.getRecordSize(storeHeader38);
    long long40 = propertyRecordFormat37.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat41 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat42 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord43 = propertyRecordFormat42.newRecord();
    long long44 = propertyOneByteHeaderRecordFormat41.getNextRecordReference(propertyRecord43);
    org.neo4j.internal.id.IdSequence idSequence46 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext47 = null;
    propertyRecordFormat37.prepare(propertyRecord43, 0, idSequence46, cursorContext47);
    org.neo4j.internal.id.IdSequence idSequence50 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext51 = null;
    propertyRecordFormat27.prepare(propertyRecord43, 0, idSequence50, cursorContext51);
    long long53 = propertyRecordFormat0.getNextRecordReference(propertyRecord43);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord54 = propertyRecordFormat0.newRecord();
    long long55 = propertyRecordFormat0.getMaxId();
    org.junit.Assert.assertNotNull(propertyRecord6);
    org.junit.Assert.assertNotNull(propertyRecord9);
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 48 + "'", int12 == 48);
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1125899906842623L + "'",
        long14 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord17);
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    org.junit.Assert.assertTrue("'" + int29 + "' != '" + 48 + "'", int29 == 48);
    org.junit.Assert.assertNotNull(recordFormats31);
    org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    org.junit.Assert.assertNotNull(propertyRecord36);
    org.junit.Assert.assertTrue("'" + int39 + "' != '" + 48 + "'", int39 == 48);
    org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1125899906842623L + "'",
        long40 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord43);
    org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
    org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-1L) + "'", long53 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord54);
    org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1125899906842623L + "'",
        long55 == 1125899906842623L);
  }

  @Test
  public void test1286() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1286");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        35);
  }

  @Test
  public void test1287() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1287");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = null;
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    recordFormatDynamicRecordImpl0.prepare(dynamicRecord6, (int) (byte) -1, idSequence8,
        cursorContext9);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord11 = recordFormatDynamicRecordImpl0.newRecord();
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord12 = recordFormatDynamicRecordImpl0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl13 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean15 = recordFormatDynamicRecordImpl13.equals((java.lang.Object) 100.0f);
    long long16 = recordFormatDynamicRecordImpl13.getMaxId();
    int int19 = recordFormatDynamicRecordImpl13.getPageSize(64, 48);
    int int20 = recordFormatDynamicRecordImpl13.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord21 = recordFormatDynamicRecordImpl13.newRecord();
    org.neo4j.io.pagecache.PageCursor pageCursor22 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad23 = null;
    try {
      recordFormatDynamicRecordImpl0.read(dynamicRecord21, pageCursor22, recordLoad23, 1, 24);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord11);
    org.junit.Assert.assertNotNull(dynamicRecord12);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1125899906842623L + "'",
        long16 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int19 + "' != '" + 48 + "'", int19 == 48);
    org.junit.Assert.assertTrue("'" + int20 + "' != '" + 12 + "'", int20 == 12);
    org.junit.Assert.assertNotNull(dynamicRecord21);
  }

  @Test
  public void test1288() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1288");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat1 = v310_0.labelToken();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily2 = v310_0.getFormatFamily();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat3 = v310_0.node();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat1);
    org.junit.Assert.assertTrue(
        "'" + formatFamily2 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily2.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat3);
  }

  @Test
  public void test1289() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1289");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        16);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord2 = relationshipGroupHighLimitRecordFormat1.newRecord();
    org.junit.Assert.assertNotNull(relationshipGroupRecord2);
  }

  @Test
  public void test1290() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1290");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord1 = relationshipRecordFormat0.newRecord();
    int int2 = relationshipRecordFormat0.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord5 = relationshipRecordFormat4.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord6 = relationshipRecordFormat4.newRecord();
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    relationshipRecordFormat3.prepare(relationshipRecord6, 100, idSequence8, cursorContext9);
    long long11 = relationshipRecordFormat0.getNextRecordReference(relationshipRecord6);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader12 = null;
    int int13 = relationshipRecordFormat0.getRecordSize(storeHeader12);
    org.neo4j.io.pagecache.PageCursor pageCursor14 = null;
    try {
      boolean boolean15 = relationshipRecordFormat0.isInUse(pageCursor14);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(relationshipRecord1);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord5);
    org.junit.Assert.assertNotNull(relationshipRecord6);
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 32 + "'", int13 == 32);
  }

  @Test
  public void test1291() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1291");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat1 = v320_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat2 = v320_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat3 = v320_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat4 = v320_0.property();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily5 = v320_0.getFormatFamily();
    org.neo4j.storageengine.api.format.Capability capability6 = null;
    boolean boolean7 = v320_0.hasCapability(capability6);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.MetaDataRecord> metaDataRecordRecordFormat8 = v320_0.metaData();
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat1);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat2);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat3);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat4);
    org.junit.Assert.assertTrue(
        "'" + formatFamily5 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily5.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    org.junit.Assert.assertNotNull(metaDataRecordRecordFormat8);
  }

  @Test
  public void test1292() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1292");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v320_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat2 = v320_0.relationshipGroup();
    org.neo4j.storageengine.api.format.Capability capability3 = null;
    boolean boolean4 = v320_0.hasCapability(capability3);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat5 = v320_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat6 = v320_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat7 = v320_0.propertyKeyToken();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat2);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat5);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat6);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat7);
  }

  @Test
  public void test1293() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1293");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat6 = v300_1.relationship();
    boolean boolean8 = v300_1.equals((java.lang.Object) 24);
    org.neo4j.storageengine.api.format.Capability capability9 = null;
    boolean boolean10 = v300_1.hasCapability(capability9);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat11 = v300_1.dynamic();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat6);
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat11);
  }

  @Test
  public void test1294() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1294");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod(125L,
        (-40L));
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-3L) + "'", long2 == (-3L));
  }

  @Test
  public void test1295() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1295");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat1 = v320_0.labelToken();
    java.lang.String str2 = v320_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat3 = v320_0.labelToken();
    java.lang.String str4 = v320_0.name();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_2_0" + "'", str2,
        "high_limitV3_2_0");
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "high_limitV3_2_0" + "'", str4,
        "high_limitV3_2_0");
  }

  @Test
  public void test1296() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1296");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v300_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat2 = v300_0.relationship();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray3 = v300_0.capabilities();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat2);
    org.junit.Assert.assertNotNull(capabilityArray3);
  }

  @Test
  public void test1297() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1297");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord1 = null;
    long long2 = nodeRecordFormat0.getNextRecordReference(nodeRecord1);
    int int3 = nodeRecordFormat0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader4 = null;
    int int5 = nodeRecordFormat0.getRecordSize(storeHeader4);
    int int8 = nodeRecordFormat0.getPageSize((int) '4', (int) (short) 1);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord9 = nodeRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_10 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat11 = v306_10.relationship();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray12 = v306_10.capabilities();
    java.lang.String str13 = v306_10.introductionVersion();
    boolean boolean14 = nodeRecordFormat0.equals((java.lang.Object) v306_10);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_15 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily16 = v300_15.getFormatFamily();
    boolean boolean17 = v306_10.equals((java.lang.Object) formatFamily16);
    java.lang.String str18 = v306_10.toString();
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_19 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat20 = v310_19.labelToken();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType21 = null;
    boolean boolean22 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_10,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v310_19, capabilityType21);
    java.lang.String str23 = v310_19.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.MetaDataRecord> metaDataRecordRecordFormat24 = v310_19.metaData();
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
    org.junit.Assert.assertNotNull(nodeRecord9);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat11);
    org.junit.Assert.assertNotNull(capabilityArray12);
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "3.0.6" + "'", str13, "3.0.6");
    org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    org.junit.Assert.assertTrue(
        "'" + formatFamily16 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily16.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "RecordFormat:V306[vE.H.0b]" + "'",
        str18, "RecordFormat:V306[vE.H.0b]");
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat20);
    org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    org.junit.Assert.assertEquals("'" + str23 + "' != '" + "high_limitV3_1_0" + "'", str23,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(metaDataRecordRecordFormat24);
  }

  @Test
  public void test1298() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1298");
    }
    long long2 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.toable(
        (long) 8, (long) (short) 1);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 9L + "'", long2 == 9L);
  }

  @Test
  public void test1299() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1299");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat1 = v320_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat2 = v320_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat3 = v320_0.property();
    java.lang.String str4 = v320_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat5 = v320_0.dynamic();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily6 = v320_0.getFormatFamily();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat7 = v320_0.propertyKeyToken();
    org.neo4j.storageengine.api.format.Capability capability8 = null;
    boolean boolean9 = v320_0.hasCapability(capability8);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat1);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat2);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "high_limitV3_2_0" + "'", str4,
        "high_limitV3_2_0");
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat5);
    org.junit.Assert.assertTrue(
        "'" + formatFamily6 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily6.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat7);
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
  }

  @Test
  public void test1300() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1300");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 10);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord2 = nodeHighLimitRecordFormat1.newRecord();
    org.junit.Assert.assertNotNull(nodeRecord2);
  }

  @Test
  public void test1301() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1301");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord2 = propertyRecordFormat1.newRecord();
    long long3 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord2);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord6 = propertyRecordFormat5.newRecord();
    long long7 = propertyOneByteHeaderRecordFormat4.getNextRecordReference(propertyRecord6);
    long long8 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord6);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader9 = null;
    int int10 = propertyOneByteHeaderRecordFormat0.getRecordSize(storeHeader9);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat11 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader12 = null;
    int int13 = propertyRecordFormat11.getRecordSize(storeHeader12);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader14 = null;
    int int15 = propertyRecordFormat11.getRecordSize(storeHeader14);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat16 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader17 = null;
    int int18 = propertyRecordFormat16.getRecordSize(storeHeader17);
    long long19 = propertyRecordFormat16.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat20 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat21 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord22 = propertyRecordFormat21.newRecord();
    long long23 = propertyOneByteHeaderRecordFormat20.getNextRecordReference(propertyRecord22);
    org.neo4j.internal.id.IdSequence idSequence25 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext26 = null;
    propertyRecordFormat16.prepare(propertyRecord22, 0, idSequence25, cursorContext26);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord28 = propertyRecordFormat16.newRecord();
    org.neo4j.internal.id.IdSequence idSequence30 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext31 = null;
    propertyRecordFormat11.prepare(propertyRecord28, (int) (short) -1, idSequence30,
        cursorContext31);
    org.neo4j.io.pagecache.PageCursor pageCursor33 = null;
    try {
      propertyOneByteHeaderRecordFormat0.write(propertyRecord28, pageCursor33, (-1),
          (int) (short) 10);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(propertyRecord2);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord6);
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
    org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 48 + "'", int10 == 48);
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 48 + "'", int13 == 48);
    org.junit.Assert.assertTrue("'" + int15 + "' != '" + 48 + "'", int15 == 48);
    org.junit.Assert.assertTrue("'" + int18 + "' != '" + 48 + "'", int18 == 48);
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1125899906842623L + "'",
        long19 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord22);
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord28);
  }

  @Test
  public void test1302() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1302");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v306_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v306_0.labelToken();
    boolean boolean4 = v306_0.equals((java.lang.Object) 64);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat5 = v306_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormats[] recordFormatsArray6 = v306_0.compatibleVersionsForRollingUpgrade();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat7 = v306_0.relationshipTypeToken();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat5);
    org.junit.Assert.assertNotNull(recordFormatsArray6);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat7);
  }

  @Test
  public void test1303() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1303");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v310_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat2 = v310_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat3 = v310_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat4 = v310_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat5 = v310_0.relationshipGroup();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat6 = v310_0.schema();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat3);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat4);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat5);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat6);
  }

  @Test
  public void test1304() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1304");
    }
    java.util.function.Function<org.neo4j.kernel.impl.store.StoreHeader, java.lang.Integer> storeHeaderFunction1 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.fixedRecordSize(
        (int) (short) -1);
    org.junit.Assert.assertNotNull(storeHeaderFunction1);
  }

  @Test
  public void test1305() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1305");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat1 = v320_0.dynamic();
    java.lang.String str2 = v320_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat3 = v320_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat4 = v320_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat5 = v320_0.labelToken();
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_2_0" + "'", str2,
        "high_limitV3_2_0");
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat3);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat4);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat5);
  }

  @Test
  public void test1306() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1306");
    }
    org.neo4j.internal.batchimport.AdditionalInitialIds additionalInitialIds0 = null;
    org.neo4j.internal.batchimport.input.Collector collector1 = null;
    org.neo4j.internal.batchimport.Configuration configuration2 = null;
    org.neo4j.configuration.Config config3 = null;
    org.neo4j.io.layout.DatabaseLayout databaseLayout4 = null;
    org.neo4j.internal.batchimport.staging.ExecutionMonitor executionMonitor5 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.internal.batchimport.IndexImporterFactory indexImporterFactory7 = null;
    org.neo4j.scheduler.JobScheduler jobScheduler8 = null;
    org.neo4j.storageengine.api.LogFilesInitializer logFilesInitializer9 = null;
    org.neo4j.logging.internal.LogService logService10 = null;
    org.neo4j.memory.MemoryTracker memoryTracker11 = null;
    org.neo4j.internal.batchimport.ImportLogic.Monitor monitor12 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer13 = null;
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_14 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_15 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat16 = v300_15.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat17 = v300_15.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType18 = null;
    boolean boolean19 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_14,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_15, capabilityType18);
    org.neo4j.storageengine.api.format.Capability[] capabilityArray20 = v306_14.capabilities();
    org.neo4j.kernel.impl.store.format.RecordFormats[] recordFormatsArray21 = v306_14.compatibleVersionsForRollingUpgrade();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat22 = v306_14.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat23 = v306_14.relationshipTypeToken();
    try {
      io.github.onograph.internal.batchimport.EnterpriseBatchImporter enterpriseBatchImporter24 = new io.github.onograph.internal.batchimport.EnterpriseBatchImporter(
          additionalInitialIds0, collector1, configuration2, config3, databaseLayout4,
          executionMonitor5, fileSystemAbstraction6, indexImporterFactory7, jobScheduler8,
          logFilesInitializer9, logService10, memoryTracker11, monitor12, pageCacheTracer13,
          (org.neo4j.kernel.impl.store.format.RecordFormats) v306_14);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat16);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat17);
    org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    org.junit.Assert.assertNotNull(capabilityArray20);
    org.junit.Assert.assertNotNull(recordFormatsArray21);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat22);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat23);
  }

  @Test
  public void test1307() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1307");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 1);
    int int4 = nodeHighLimitRecordFormat1.getPageSize(48, (int) '#');
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord5 = nodeHighLimitRecordFormat1.newRecord();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord6 = nodeHighLimitRecordFormat1.newRecord();
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
    org.junit.Assert.assertNotNull(nodeRecord5);
    org.junit.Assert.assertNotNull(nodeRecord6);
  }

  @Test
  public void test1308() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1308");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord1 = propertyRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader3 = null;
    int int4 = propertyRecordFormat2.getRecordSize(storeHeader3);
    long long5 = propertyRecordFormat2.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat6 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord8 = propertyRecordFormat7.newRecord();
    long long9 = propertyOneByteHeaderRecordFormat6.getNextRecordReference(propertyRecord8);
    org.neo4j.internal.id.IdSequence idSequence11 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext12 = null;
    propertyRecordFormat2.prepare(propertyRecord8, 0, idSequence11, cursorContext12);
    long long14 = propertyRecordFormat0.getNextRecordReference(propertyRecord8);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader16 = null;
    int int17 = propertyRecordFormat15.getRecordSize(storeHeader16);
    int int20 = propertyRecordFormat15.getPageSize((int) (byte) -1, 128);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat21 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long22 = propertyOneByteHeaderRecordFormat21.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord23 = propertyOneByteHeaderRecordFormat21.newRecord();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord24 = propertyOneByteHeaderRecordFormat21.newRecord();
    long long25 = propertyRecordFormat15.getNextRecordReference(propertyRecord24);
    long long26 = propertyRecordFormat0.getNextRecordReference(propertyRecord24);
    long long27 = propertyRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat28 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat29 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord30 = propertyRecordFormat29.newRecord();
    long long31 = propertyOneByteHeaderRecordFormat28.getNextRecordReference(propertyRecord30);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat32 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat33 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord34 = propertyRecordFormat33.newRecord();
    long long35 = propertyOneByteHeaderRecordFormat32.getNextRecordReference(propertyRecord34);
    long long36 = propertyOneByteHeaderRecordFormat28.getNextRecordReference(propertyRecord34);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat37 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long38 = propertyOneByteHeaderRecordFormat37.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord39 = propertyOneByteHeaderRecordFormat37.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat40 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long41 = propertyOneByteHeaderRecordFormat40.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord42 = propertyOneByteHeaderRecordFormat40.newRecord();
    long long43 = propertyOneByteHeaderRecordFormat37.getNextRecordReference(propertyRecord42);
    org.neo4j.internal.id.IdSequence idSequence45 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext46 = null;
    propertyOneByteHeaderRecordFormat28.prepare(propertyRecord42, (int) (byte) -1, idSequence45,
        cursorContext46);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat48 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord49 = propertyOneByteHeaderRecordFormat48.newRecord();
    long long50 = propertyOneByteHeaderRecordFormat28.getNextRecordReference(propertyRecord49);
    long long51 = propertyRecordFormat0.getNextRecordReference(propertyRecord49);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat52 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord53 = propertyRecordFormat52.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat54 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader55 = null;
    int int56 = propertyRecordFormat54.getRecordSize(storeHeader55);
    long long57 = propertyRecordFormat54.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat58 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat59 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord60 = propertyRecordFormat59.newRecord();
    long long61 = propertyOneByteHeaderRecordFormat58.getNextRecordReference(propertyRecord60);
    org.neo4j.internal.id.IdSequence idSequence63 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext64 = null;
    propertyRecordFormat54.prepare(propertyRecord60, 0, idSequence63, cursorContext64);
    long long66 = propertyRecordFormat52.getNextRecordReference(propertyRecord60);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat67 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader68 = null;
    int int69 = propertyRecordFormat67.getRecordSize(storeHeader68);
    int int72 = propertyRecordFormat67.getPageSize((int) (byte) -1, 128);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat73 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long74 = propertyOneByteHeaderRecordFormat73.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord75 = propertyOneByteHeaderRecordFormat73.newRecord();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord76 = propertyOneByteHeaderRecordFormat73.newRecord();
    long long77 = propertyRecordFormat67.getNextRecordReference(propertyRecord76);
    long long78 = propertyRecordFormat52.getNextRecordReference(propertyRecord76);
    org.neo4j.io.pagecache.PageCursor pageCursor79 = null;
    try {
      propertyRecordFormat0.write(propertyRecord76, pageCursor79, (int) (short) 1, 2);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(propertyRecord1);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 48 + "'", int4 == 48);
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1125899906842623L + "'",
        long5 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord8);
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    org.junit.Assert.assertTrue("'" + int17 + "' != '" + 48 + "'", int17 == 48);
    org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1125899906842623L + "'",
        long22 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord23);
    org.junit.Assert.assertNotNull(propertyRecord24);
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
    org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1125899906842623L + "'",
        long27 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord30);
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord34);
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
    org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
    org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1125899906842623L + "'",
        long38 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord39);
    org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1125899906842623L + "'",
        long41 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord42);
    org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord49);
    org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
    org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord53);
    org.junit.Assert.assertTrue("'" + int56 + "' != '" + 48 + "'", int56 == 48);
    org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1125899906842623L + "'",
        long57 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord60);
    org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
    org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
    org.junit.Assert.assertTrue("'" + int69 + "' != '" + 48 + "'", int69 == 48);
    org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1125899906842623L + "'",
        long74 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord75);
    org.junit.Assert.assertNotNull(propertyRecord76);
    org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-1L) + "'", long77 == (-1L));
    org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-1L) + "'", long78 == (-1L));
  }

  @Test
  public void test1309() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1309");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = propertyRecordFormat0.getRecordSize(storeHeader1);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl3 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats4 = highLimitFactoryDefaultImpl3.newInstance();
    boolean boolean5 = propertyRecordFormat0.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl3);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean8 = propertyRecordFormat0.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord9 = null;
    org.neo4j.internal.id.IdSequence idSequence11 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext12 = null;
    propertyRecordFormat0.prepare(propertyRecord9, (int) (short) 0, idSequence11, cursorContext12);
    boolean boolean15 = propertyRecordFormat0.equals((java.lang.Object) "3.0.6");
    long long16 = propertyRecordFormat0.getMaxId();
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    org.junit.Assert.assertNotNull(recordFormats4);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1125899906842623L + "'",
        long16 == 1125899906842623L);
  }

  @Test
  public void test1310() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1310");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long1 = relationshipGroupHighLimitRecordFormat0.getMaxId();
    long long2 = relationshipGroupHighLimitRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord3 = relationshipGroupHighLimitRecordFormat0.newRecord();
    org.neo4j.io.pagecache.PageCursor pageCursor4 = null;
    try {
      boolean boolean5 = relationshipGroupHighLimitRecordFormat0.isInUse(pageCursor4);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1125899906842623L + "'",
        long2 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipGroupRecord3);
  }

  @Test
  public void test1311() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1311");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat1 = v320_0.dynamic();
    java.lang.String str2 = v320_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat3 = v320_0.relationshipTypeToken();
    java.lang.String str4 = v320_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat5 = v320_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat6 = v320_0.node();
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_2_0" + "'", str2,
        "high_limitV3_2_0");
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "high_limitV3_2_0" + "'", str4,
        "high_limitV3_2_0");
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat5);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat6);
  }

  @Test
  public void test1312() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1312");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long1 = relationshipGroupHighLimitRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord3 = null;
    long long4 = relationshipGroupHighLimitRecordFormat2.getNextRecordReference(
        relationshipGroupRecord3);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord5 = relationshipGroupHighLimitRecordFormat2.newRecord();
    org.neo4j.internal.id.IdSequence idSequence7 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext8 = null;
    relationshipGroupHighLimitRecordFormat0.prepare(relationshipGroupRecord5, (int) (byte) 1,
        idSequence7, cursorContext8);
    int int10 = relationshipGroupHighLimitRecordFormat0.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat11 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_12 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_13 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat14 = v300_13.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat15 = v300_13.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType16 = null;
    boolean boolean17 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_12,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_13, capabilityType16);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat18 = v300_13.relationship();
    boolean boolean19 = relationshipGroupRecordFormat11.equals(
        (java.lang.Object) relationshipRecordRecordFormat18);
    boolean boolean20 = relationshipGroupHighLimitRecordFormat0.equals(
        (java.lang.Object) boolean19);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord21 = relationshipGroupHighLimitRecordFormat0.newRecord();
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord5);
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat14);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat15);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat18);
    org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    org.junit.Assert.assertNotNull(relationshipGroupRecord21);
  }

  @Test
  public void test1313() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1313");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat1 = v320_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat2 = v320_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat3 = v320_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat4 = v320_0.schema();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.FactoryHighLimitDefaultImpl factoryHighLimitDefaultImpl5 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.FactoryHighLimitDefaultImpl();
    java.lang.String str6 = factoryHighLimitDefaultImpl5.getName();
    java.lang.String str7 = factoryHighLimitDefaultImpl5.getName();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats8 = factoryHighLimitDefaultImpl5.newInstance();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType9 = null;
    boolean boolean10 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v320_0, recordFormats8, capabilityType9);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat1);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat2);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat3);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat4);
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "high_limitV3_4_0" + "'", str6,
        "high_limitV3_4_0");
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "high_limitV3_4_0" + "'", str7,
        "high_limitV3_4_0");
    org.junit.Assert.assertNotNull(recordFormats8);
    org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
  }

  @Test
  public void test1314() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1314");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod(235L, (-2L));
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
  }

  @Test
  public void test1315() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1315");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = relationshipRecordFormat0.getRecordSize(storeHeader1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord6 = relationshipRecordFormat5.newRecord();
    long long7 = relationshipHighLimitRecordFormat4.getNextRecordReference(relationshipRecord6);
    org.neo4j.internal.id.IdSequence idSequence9 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext10 = null;
    relationshipRecordFormat0.prepare(relationshipRecord6, 3, idSequence9, cursorContext10);
    int int14 = relationshipRecordFormat0.getPageSize(4, (int) (short) -1);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 32 + "'", int2 == 32);
    org.junit.Assert.assertNotNull(relationshipRecord6);
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
    org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
  }

  @Test
  public void test1316() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1316");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v310_0.relationship();
    java.lang.String str2 = v310_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormats[] recordFormatsArray3 = v310_0.compatibleVersionsForRollingUpgrade();
    java.lang.String str4 = v310_0.toString();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat5 = v310_0.relationship();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_1_0" + "'", str2,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(recordFormatsArray3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RecordFormat:V310[vE.H.2]" + "'", str4,
        "RecordFormat:V310[vE.H.2]");
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat5);
  }

  @Test
  public void test1317() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1317");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        100);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord2 = relationshipHighLimitRecordFormat1.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) '4');
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord5 = relationshipHighLimitRecordFormat4.newRecord();
    org.neo4j.internal.id.IdSequence idSequence7 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext8 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord5, 96, idSequence7,
        cursorContext8);
    org.junit.Assert.assertNotNull(relationshipRecord2);
    org.junit.Assert.assertNotNull(relationshipRecord5);
  }

  @Test
  public void test1318() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1318");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        0);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long3 = relationshipGroupHighLimitRecordFormat2.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord5 = null;
    long long6 = relationshipGroupHighLimitRecordFormat4.getNextRecordReference(
        relationshipGroupRecord5);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord7 = relationshipGroupHighLimitRecordFormat4.newRecord();
    org.neo4j.internal.id.IdSequence idSequence9 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext10 = null;
    relationshipGroupHighLimitRecordFormat2.prepare(relationshipGroupRecord7, (int) (byte) 1,
        idSequence9, cursorContext10);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long13 = relationshipGroupHighLimitRecordFormat12.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat14 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord15 = null;
    long long16 = relationshipGroupHighLimitRecordFormat14.getNextRecordReference(
        relationshipGroupRecord15);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord17 = relationshipGroupHighLimitRecordFormat14.newRecord();
    org.neo4j.internal.id.IdSequence idSequence19 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext20 = null;
    relationshipGroupHighLimitRecordFormat12.prepare(relationshipGroupRecord17, (int) (byte) 1,
        idSequence19, cursorContext20);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat22 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord23 = null;
    long long24 = relationshipGroupHighLimitRecordFormat22.getNextRecordReference(
        relationshipGroupRecord23);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord25 = relationshipGroupHighLimitRecordFormat22.newRecord();
    org.neo4j.internal.id.IdSequence idSequence27 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext28 = null;
    relationshipGroupHighLimitRecordFormat12.prepare(relationshipGroupRecord25, 0, idSequence27,
        cursorContext28);
    org.neo4j.internal.id.IdSequence idSequence31 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext32 = null;
    relationshipGroupHighLimitRecordFormat2.prepare(relationshipGroupRecord25, 128, idSequence31,
        cursorContext32);
    org.neo4j.internal.id.IdSequence idSequence35 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext36 = null;
    relationshipGroupHighLimitRecordFormat1.prepare(relationshipGroupRecord25, 16, idSequence35,
        cursorContext36);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat38 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader39 = null;
    int int40 = relationshipGroupRecordFormat38.getRecordSize(storeHeader39);
    long long41 = relationshipGroupRecordFormat38.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat42 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord43 = null;
    long long44 = relationshipGroupHighLimitRecordFormat42.getNextRecordReference(
        relationshipGroupRecord43);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord45 = relationshipGroupHighLimitRecordFormat42.newRecord();
    org.neo4j.internal.id.IdSequence idSequence47 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext48 = null;
    relationshipGroupRecordFormat38.prepare(relationshipGroupRecord45, 128, idSequence47,
        cursorContext48);
    long long50 = relationshipGroupHighLimitRecordFormat1.getNextRecordReference(
        relationshipGroupRecord45);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord51 = relationshipGroupHighLimitRecordFormat1.newRecord();
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1125899906842623L + "'",
        long3 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord7);
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1125899906842623L + "'",
        long13 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord17);
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord25);
    org.junit.Assert.assertTrue("'" + int40 + "' != '" + 32 + "'", int40 == 32);
    org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1125899906842623L + "'",
        long41 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord45);
    org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord51);
  }

  @Test
  public void test1319() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1319");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long1 = propertyOneByteHeaderRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord2 = propertyOneByteHeaderRecordFormat0.newRecord();
    org.neo4j.io.pagecache.PageCursor pageCursor3 = null;
    try {
      boolean boolean4 = propertyOneByteHeaderRecordFormat0.isInUse(pageCursor3);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord2);
  }

  @Test
  public void test1320() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1320");
    }
    org.neo4j.io.pagecache.PageCursor pageCursor1 = null;
    try {
      io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.enoForPa(22L,
          pageCursor1);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test1321() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1321");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord5 = relationshipRecordFormat4.newRecord();
    long long6 = relationshipHighLimitRecordFormat3.getNextRecordReference(relationshipRecord5);
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord5, (int) (byte) 10, idSequence8,
        cursorContext9);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat14 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord16 = relationshipRecordFormat15.newRecord();
    long long17 = relationshipHighLimitRecordFormat14.getNextRecordReference(relationshipRecord16);
    org.neo4j.internal.id.IdSequence idSequence19 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext20 = null;
    relationshipHighLimitRecordFormat12.prepare(relationshipRecord16, (int) (byte) 10, idSequence19,
        cursorContext20);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat23 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord24 = relationshipHighLimitRecordFormat23.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat26 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord27 = relationshipHighLimitRecordFormat26.newRecord();
    org.neo4j.internal.id.IdSequence idSequence29 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext30 = null;
    relationshipHighLimitRecordFormat23.prepare(relationshipRecord27, (int) (short) 1, idSequence29,
        cursorContext30);
    long long32 = relationshipHighLimitRecordFormat12.getNextRecordReference(relationshipRecord27);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord33 = relationshipHighLimitRecordFormat12.newRecord();
    org.neo4j.internal.id.IdSequence idSequence35 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext36 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord33, (int) ' ', idSequence35,
        cursorContext36);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat39 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord40 = relationshipHighLimitRecordFormat39.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat41 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord42 = relationshipRecordFormat41.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord43 = relationshipRecordFormat41.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat45 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord46 = relationshipHighLimitRecordFormat45.newRecord();
    org.neo4j.internal.id.IdSequence idSequence48 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext49 = null;
    relationshipRecordFormat41.prepare(relationshipRecord46, (int) (byte) 100, idSequence48,
        cursorContext49);
    org.neo4j.internal.id.IdSequence idSequence52 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext53 = null;
    relationshipHighLimitRecordFormat39.prepare(relationshipRecord46, 100, idSequence52,
        cursorContext53);
    org.neo4j.io.pagecache.PageCursor pageCursor55 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad56 = null;
    try {
      relationshipHighLimitRecordFormat1.read(relationshipRecord46, pageCursor55, recordLoad56, 10,
          64);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(relationshipRecord5);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord16);
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord24);
    org.junit.Assert.assertNotNull(relationshipRecord27);
    org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord33);
    org.junit.Assert.assertNotNull(relationshipRecord40);
    org.junit.Assert.assertNotNull(relationshipRecord42);
    org.junit.Assert.assertNotNull(relationshipRecord43);
    org.junit.Assert.assertNotNull(relationshipRecord46);
  }

  @Test
  public void test1322() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1322");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat1 = v310_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat2 = v310_0.relationship();
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat1);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat2);
  }

  @Test
  public void test1323() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1323");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) '4');
    int int4 = relationshipHighLimitRecordFormat1.getPageSize((int) (short) -1, 30);
    long long5 = relationshipHighLimitRecordFormat1.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat8 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord9 = relationshipRecordFormat8.newRecord();
    long long10 = relationshipHighLimitRecordFormat7.getNextRecordReference(relationshipRecord9);
    org.neo4j.io.pagecache.PageCursor pageCursor11 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad12 = null;
    try {
      relationshipHighLimitRecordFormat1.read(relationshipRecord9, pageCursor11, recordLoad12,
          (int) '4', 32);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1125899906842623L + "'",
        long5 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipRecord9);
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
  }

  @Test
  public void test1324() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1324");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = recordFormatDynamicRecordImpl0.newRecord();
    int int9 = recordFormatDynamicRecordImpl0.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord10 = recordFormatDynamicRecordImpl0.newRecord();
    int int13 = recordFormatDynamicRecordImpl0.getPageSize((int) '4', (int) (short) 1);
    int int16 = recordFormatDynamicRecordImpl0.getPageSize((int) (short) 10, 2);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl17 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean19 = recordFormatDynamicRecordImpl17.equals((java.lang.Object) 100.0f);
    int int22 = recordFormatDynamicRecordImpl17.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord23 = null;
    org.neo4j.internal.id.IdSequence idSequence25 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext26 = null;
    recordFormatDynamicRecordImpl17.prepare(dynamicRecord23, (int) (byte) -1, idSequence25,
        cursorContext26);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord28 = recordFormatDynamicRecordImpl17.newRecord();
    long long29 = recordFormatDynamicRecordImpl0.getNextRecordReference(dynamicRecord28);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord30 = null;
    org.neo4j.internal.id.IdSequence idSequence32 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext33 = null;
    recordFormatDynamicRecordImpl0.prepare(dynamicRecord30, (int) (short) 0, idSequence32,
        cursorContext33);
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord6);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord10);
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
    org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
    org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    org.junit.Assert.assertTrue("'" + int22 + "' != '" + 16 + "'", int22 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord28);
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
  }

  @Test
  public void test1325() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1325");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat6 = v300_1.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat7 = v300_1.relationship();
    java.lang.String str8 = v300_1.name();
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_9 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.storageengine.api.format.Capability capability10 = null;
    boolean boolean11 = v310_9.hasCapability(capability10);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat12 = v310_9.labelToken();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType13 = null;
    boolean boolean14 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v310_9, capabilityType13);
    org.neo4j.storageengine.api.format.Capability capability15 = null;
    boolean boolean16 = v310_9.hasCapability(capability15);
    int int17 = v310_9.generation();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat6);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat7);
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "high_limitV3_0_0" + "'", str8,
        "high_limitV3_0_0");
    org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat12);
    org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
  }

  @Test
  public void test1326() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1326");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.FactoryHighLimitDefaultImpl factoryHighLimitDefaultImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.FactoryHighLimitDefaultImpl();
    java.lang.String str1 = factoryHighLimitDefaultImpl0.getName();
    java.lang.String str2 = factoryHighLimitDefaultImpl0.getName();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats3 = factoryHighLimitDefaultImpl0.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats4 = factoryHighLimitDefaultImpl0.newInstance();
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "high_limitV3_0_0" + "'", str1,
        "high_limitV3_0_0");
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_0_0" + "'", str2,
        "high_limitV3_0_0");
    org.junit.Assert.assertNotNull(recordFormats3);
    org.junit.Assert.assertNotNull(recordFormats4);
  }

  @Test
  public void test1327() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1327");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) '4');
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord6 = relationshipHighLimitRecordFormat5.newRecord();
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    relationshipHighLimitRecordFormat3.prepare(relationshipRecord6, (int) 'a', idSequence8,
        cursorContext9);
    org.neo4j.internal.id.IdSequence idSequence12 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext13 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord6, 10, idSequence12,
        cursorContext13);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat16 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat17 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord18 = relationshipRecordFormat17.newRecord();
    long long19 = relationshipHighLimitRecordFormat16.getNextRecordReference(relationshipRecord18);
    org.neo4j.internal.id.IdSequence idSequence21 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext22 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord18, 96, idSequence21,
        cursorContext22);
    int int26 = relationshipHighLimitRecordFormat1.getPageSize((int) (byte) 10, (-1));
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord27 = relationshipHighLimitRecordFormat1.newRecord();
    org.junit.Assert.assertNotNull(relationshipRecord6);
    org.junit.Assert.assertNotNull(relationshipRecord18);
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
    org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
    org.junit.Assert.assertNotNull(relationshipRecord27);
  }

  @Test
  public void test1328() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1328");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v310_0.relationship();
    java.lang.String str2 = v310_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat3 = v310_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat4 = v310_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat5 = v310_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat6 = v310_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat7 = v310_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat8 = v310_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat9 = v310_0.labelToken();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_1_0" + "'", str2,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat3);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat4);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat5);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat6);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat7);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat8);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat9);
  }

  @Test
  public void test1329() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1329");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_6 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat7 = v306_6.node();
    org.neo4j.storageengine.api.format.Capability capability8 = null;
    boolean boolean9 = v306_6.hasCapability(capability8);
    org.neo4j.storageengine.api.format.CapabilityType capabilityType10 = null;
    boolean boolean11 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_6, capabilityType10);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.MetaDataRecord> metaDataRecordRecordFormat12 = v300_1.metaData();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat13 = v300_1.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat14 = v300_1.dynamic();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat7);
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    org.junit.Assert.assertNotNull(metaDataRecordRecordFormat12);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat13);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat14);
  }

  @Test
  public void test1330() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1330");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord2 = propertyRecordFormat1.newRecord();
    long long3 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord2);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader4 = null;
    int int5 = propertyOneByteHeaderRecordFormat0.getRecordSize(storeHeader4);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord6 = propertyOneByteHeaderRecordFormat0.newRecord();
    org.junit.Assert.assertNotNull(propertyRecord2);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 48 + "'", int5 == 48);
    org.junit.Assert.assertNotNull(propertyRecord6);
  }

  @Test
  public void test1331() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1331");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat1 = v300_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat2 = v300_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat3 = v300_0.propertyKeyToken();
    java.lang.String str4 = v300_0.name();
    java.lang.String str5 = v300_0.name();
    java.lang.String str6 = v300_0.name();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat1);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat2);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "high_limitV3_0_0" + "'", str4,
        "high_limitV3_0_0");
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "high_limitV3_0_0" + "'", str5,
        "high_limitV3_0_0");
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "high_limitV3_0_0" + "'", str6,
        "high_limitV3_0_0");
  }

  @Test
  public void test1332() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1332");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v320_0.relationship();
    java.lang.String str2 = v320_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat3 = v320_0.relationshipGroup();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.MetaDataRecord> metaDataRecordRecordFormat4 = v320_0.metaData();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat5 = v320_0.relationshipGroup();
    java.lang.String str6 = v320_0.introductionVersion();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_2_0" + "'", str2,
        "high_limitV3_2_0");
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat3);
    org.junit.Assert.assertNotNull(metaDataRecordRecordFormat4);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat5);
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3.2.0" + "'", str6, "3.2.0");
  }

  @Test
  public void test1333() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1333");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) ' ');
    long long2 = relationshipHighLimitRecordFormat1.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord5 = relationshipHighLimitRecordFormat4.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord8 = relationshipHighLimitRecordFormat7.newRecord();
    org.neo4j.internal.id.IdSequence idSequence10 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext11 = null;
    relationshipHighLimitRecordFormat4.prepare(relationshipRecord8, (int) (short) 1, idSequence10,
        cursorContext11);
    int int13 = relationshipHighLimitRecordFormat4.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) '4');
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord16 = relationshipHighLimitRecordFormat15.newRecord();
    long long17 = relationshipHighLimitRecordFormat4.getNextRecordReference(relationshipRecord16);
    int int18 = relationshipHighLimitRecordFormat4.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat19 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat20 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord21 = relationshipRecordFormat20.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord22 = relationshipRecordFormat20.newRecord();
    org.neo4j.internal.id.IdSequence idSequence24 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext25 = null;
    relationshipRecordFormat19.prepare(relationshipRecord22, 100, idSequence24, cursorContext25);
    int int29 = relationshipRecordFormat19.getPageSize(0, 3);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord30 = relationshipRecordFormat19.newRecord();
    org.neo4j.internal.id.IdSequence idSequence32 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext33 = null;
    relationshipHighLimitRecordFormat4.prepare(relationshipRecord30, 0, idSequence32,
        cursorContext33);
    long long35 = relationshipHighLimitRecordFormat1.getNextRecordReference(relationshipRecord30);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1125899906842623L + "'",
        long2 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipRecord5);
    org.junit.Assert.assertNotNull(relationshipRecord8);
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord16);
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord21);
    org.junit.Assert.assertNotNull(relationshipRecord22);
    org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord30);
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
  }

  @Test
  public void test1334() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1334");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v306_0.relationship();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray2 = v306_0.capabilities();
    java.lang.String str3 = v306_0.introductionVersion();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat4 = v306_0.labelToken();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily5 = v306_0.getFormatFamily();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat6 = v306_0.relationshipGroup();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat7 = v306_0.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat8 = v306_0.labelToken();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(capabilityArray2);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "3.0.6" + "'", str3, "3.0.6");
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat4);
    org.junit.Assert.assertTrue(
        "'" + formatFamily5 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily5.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat6);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat7);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat8);
  }

  @Test
  public void test1335() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1335");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat1 = v300_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat2 = v300_0.relationship();
    int int3 = v300_0.generation();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat4 = v300_0.relationship();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat1);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat2);
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat4);
  }

  @Test
  public void test1336() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1336");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord1 = null;
    long long2 = nodeRecordFormat0.getNextRecordReference(nodeRecord1);
    int int3 = nodeRecordFormat0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader4 = null;
    int int5 = nodeRecordFormat0.getRecordSize(storeHeader4);
    int int8 = nodeRecordFormat0.getPageSize((int) '4', (int) (short) 1);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord9 = nodeRecordFormat0.newRecord();
    int int12 = nodeRecordFormat0.getPageSize(32, (int) 'a');
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord13 = nodeRecordFormat0.newRecord();
    int int14 = nodeRecordFormat0.getRecordHeaderSize();
    int int17 = nodeRecordFormat0.getPageSize(32, (int) '#');
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat18 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long19 = relationshipGroupHighLimitRecordFormat18.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat20 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord21 = null;
    long long22 = relationshipGroupHighLimitRecordFormat20.getNextRecordReference(
        relationshipGroupRecord21);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord23 = relationshipGroupHighLimitRecordFormat20.newRecord();
    org.neo4j.internal.id.IdSequence idSequence25 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext26 = null;
    relationshipGroupHighLimitRecordFormat18.prepare(relationshipGroupRecord23, (int) (byte) 1,
        idSequence25, cursorContext26);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat28 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long29 = relationshipGroupHighLimitRecordFormat28.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat30 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord31 = null;
    long long32 = relationshipGroupHighLimitRecordFormat30.getNextRecordReference(
        relationshipGroupRecord31);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord33 = relationshipGroupHighLimitRecordFormat30.newRecord();
    org.neo4j.internal.id.IdSequence idSequence35 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext36 = null;
    relationshipGroupHighLimitRecordFormat28.prepare(relationshipGroupRecord33, (int) (byte) 1,
        idSequence35, cursorContext36);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat38 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord39 = null;
    long long40 = relationshipGroupHighLimitRecordFormat38.getNextRecordReference(
        relationshipGroupRecord39);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord41 = relationshipGroupHighLimitRecordFormat38.newRecord();
    org.neo4j.internal.id.IdSequence idSequence43 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext44 = null;
    relationshipGroupHighLimitRecordFormat28.prepare(relationshipGroupRecord41, 0, idSequence43,
        cursorContext44);
    org.neo4j.internal.id.IdSequence idSequence47 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext48 = null;
    relationshipGroupHighLimitRecordFormat18.prepare(relationshipGroupRecord41, 128, idSequence47,
        cursorContext48);
    boolean boolean50 = nodeRecordFormat0.equals((java.lang.Object) cursorContext48);
    int int53 = nodeRecordFormat0.getPageSize((int) 'a', 4);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
    org.junit.Assert.assertNotNull(nodeRecord9);
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    org.junit.Assert.assertNotNull(nodeRecord13);
    org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1125899906842623L + "'",
        long19 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord23);
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1125899906842623L + "'",
        long29 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord33);
    org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord41);
    org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    org.junit.Assert.assertTrue("'" + int53 + "' != '" + 96 + "'", int53 == 96);
  }

  @Test
  public void test1337() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1337");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod(22L, 249L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 255L + "'", long2 == 255L);
  }

  @Test
  public void test1338() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1338");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.FactoryHighLimitDefaultImpl factoryHighLimitDefaultImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.FactoryHighLimitDefaultImpl();
    java.lang.String str1 = factoryHighLimitDefaultImpl0.getName();
    java.lang.String str2 = factoryHighLimitDefaultImpl0.getName();
    java.lang.String str3 = factoryHighLimitDefaultImpl0.getName();
    java.lang.String str4 = factoryHighLimitDefaultImpl0.getName();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats5 = factoryHighLimitDefaultImpl0.newInstance();
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "high_limitV3_2_0" + "'", str1,
        "high_limitV3_2_0");
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_2_0" + "'", str2,
        "high_limitV3_2_0");
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "high_limitV3_2_0" + "'", str3,
        "high_limitV3_2_0");
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "high_limitV3_2_0" + "'", str4,
        "high_limitV3_2_0");
    org.junit.Assert.assertNotNull(recordFormats5);
  }

  @Test
  public void test1339() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1339");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = propertyRecordFormat0.getRecordSize(storeHeader1);
    long long3 = propertyRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum highLimitEncEnum4 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8;
    boolean boolean5 = propertyRecordFormat0.equals((java.lang.Object) highLimitEncEnum4);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord6 = null;
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    propertyRecordFormat0.prepare(propertyRecord6, 128, idSequence8, cursorContext9);
    long long11 = propertyRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_12 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat13 = v320_12.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat14 = v320_12.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat15 = v320_12.property();
    boolean boolean16 = propertyRecordFormat0.equals((java.lang.Object) v320_12);
    java.lang.Object obj17 = null;
    boolean boolean18 = propertyRecordFormat0.equals(obj17);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1125899906842623L + "'",
        long3 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + highLimitEncEnum4 + "' != '"
            + io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8 + "'",
        highLimitEncEnum4.equals(
            io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8));
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1125899906842623L + "'",
        long11 == 1125899906842623L);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat13);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat14);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat15);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
  }

  @Test
  public void test1340() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1340");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord2 = relationshipHighLimitRecordFormat1.newRecord();
    int int3 = relationshipHighLimitRecordFormat1.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader4 = null;
    int int5 = relationshipHighLimitRecordFormat1.getRecordSize(storeHeader4);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord6 = relationshipHighLimitRecordFormat1.newRecord();
    org.junit.Assert.assertNotNull(relationshipRecord2);
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    org.junit.Assert.assertNotNull(relationshipRecord6);
  }

  @Test
  public void test1341() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1341");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    org.neo4j.storageengine.api.format.Capability[] capabilityArray6 = v306_0.capabilities();
    org.neo4j.kernel.impl.store.format.RecordFormats[] recordFormatsArray7 = v306_0.compatibleVersionsForRollingUpgrade();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat8 = v306_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat9 = v306_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat10 = v306_0.schema();
    java.lang.String str11 = v306_0.name();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(capabilityArray6);
    org.junit.Assert.assertNotNull(recordFormatsArray7);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat8);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat9);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat10);
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "high_limitV3_0_6" + "'", str11,
        "high_limitV3_0_6");
  }

  @Test
  public void test1342() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1342");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod(10L, (-5L));
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-5L) + "'", long2 == (-5L));
  }

  @Test
  public void test1343() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1343");
    }
    io.github.onograph.internal.batchimport.EnterpriseBatchImporterFactory enterpriseBatchImporterFactory0 = new io.github.onograph.internal.batchimport.EnterpriseBatchImporterFactory();
    java.lang.String str1 = enterpriseBatchImporterFactory0.getName();
    java.lang.String str2 = enterpriseBatchImporterFactory0.getName();
    java.lang.String str3 = enterpriseBatchImporterFactory0.getName();
    org.neo4j.io.layout.DatabaseLayout databaseLayout4 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction5 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer6 = null;
    org.neo4j.internal.batchimport.Configuration configuration7 = null;
    org.neo4j.logging.internal.LogService logService8 = null;
    org.neo4j.internal.batchimport.staging.ExecutionMonitor executionMonitor9 = null;
    org.neo4j.internal.batchimport.AdditionalInitialIds additionalInitialIds10 = null;
    org.neo4j.configuration.Config config11 = null;
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_12 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_13 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat14 = v300_13.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat15 = v300_13.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType16 = null;
    boolean boolean17 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_12,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_13, capabilityType16);
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_18 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat19 = v306_18.node();
    org.neo4j.storageengine.api.format.Capability capability20 = null;
    boolean boolean21 = v306_18.hasCapability(capability20);
    org.neo4j.storageengine.api.format.CapabilityType capabilityType22 = null;
    boolean boolean23 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_13,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_18, capabilityType22);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.MetaDataRecord> metaDataRecordRecordFormat24 = v300_13.metaData();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat25 = v300_13.node();
    org.neo4j.internal.batchimport.ImportLogic.Monitor monitor26 = null;
    org.neo4j.scheduler.JobScheduler jobScheduler27 = null;
    org.neo4j.internal.batchimport.input.Collector collector28 = null;
    org.neo4j.storageengine.api.LogFilesInitializer logFilesInitializer29 = null;
    org.neo4j.internal.batchimport.IndexImporterFactory indexImporterFactory30 = null;
    org.neo4j.memory.MemoryTracker memoryTracker31 = null;
    try {
      org.neo4j.internal.batchimport.BatchImporter batchImporter32 = enterpriseBatchImporterFactory0.instantiate(
          databaseLayout4, fileSystemAbstraction5, pageCacheTracer6, configuration7, logService8,
          executionMonitor9, additionalInitialIds10, config11,
          (org.neo4j.kernel.impl.store.format.RecordFormats) v300_13, monitor26, jobScheduler27,
          collector28, logFilesInitializer29, indexImporterFactory30, memoryTracker31);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "restartable" + "'", str1, "restartable");
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "restartable" + "'", str2, "restartable");
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "restartable" + "'", str3, "restartable");
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat14);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat15);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat19);
    org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    org.junit.Assert.assertNotNull(metaDataRecordRecordFormat24);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat25);
  }

  @Test
  public void test1344() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1344");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = recordFormatDynamicRecordImpl0.newRecord();
    int int9 = recordFormatDynamicRecordImpl0.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord10 = recordFormatDynamicRecordImpl0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl11 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean13 = recordFormatDynamicRecordImpl11.equals((java.lang.Object) 100.0f);
    int int16 = recordFormatDynamicRecordImpl11.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord17 = recordFormatDynamicRecordImpl11.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl18 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean20 = recordFormatDynamicRecordImpl18.equals((java.lang.Object) 100.0f);
    int int23 = recordFormatDynamicRecordImpl18.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord24 = recordFormatDynamicRecordImpl18.newRecord();
    long long25 = recordFormatDynamicRecordImpl11.getNextRecordReference(dynamicRecord24);
    int int26 = recordFormatDynamicRecordImpl11.getRecordHeaderSize();
    int int27 = recordFormatDynamicRecordImpl11.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord28 = null;
    org.neo4j.internal.id.IdSequence idSequence30 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext31 = null;
    recordFormatDynamicRecordImpl11.prepare(dynamicRecord28, (int) (byte) 100, idSequence30,
        cursorContext31);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord33 = recordFormatDynamicRecordImpl11.newRecord();
    long long34 = recordFormatDynamicRecordImpl0.getNextRecordReference(dynamicRecord33);
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord6);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord10);
    org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16 + "'", int16 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord17);
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    org.junit.Assert.assertTrue("'" + int23 + "' != '" + 16 + "'", int23 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord24);
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
    org.junit.Assert.assertTrue("'" + int26 + "' != '" + 12 + "'", int26 == 12);
    org.junit.Assert.assertTrue("'" + int27 + "' != '" + 12 + "'", int27 == 12);
    org.junit.Assert.assertNotNull(dynamicRecord33);
    org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
  }

  @Test
  public void test1345() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1345");
    }
    org.neo4j.internal.batchimport.AdditionalInitialIds additionalInitialIds0 = null;
    org.neo4j.internal.batchimport.input.Collector collector1 = null;
    org.neo4j.internal.batchimport.Configuration configuration2 = null;
    org.neo4j.configuration.Config config3 = null;
    org.neo4j.io.layout.DatabaseLayout databaseLayout4 = null;
    org.neo4j.internal.batchimport.staging.ExecutionMonitor executionMonitor5 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.internal.batchimport.IndexImporterFactory indexImporterFactory7 = null;
    org.neo4j.scheduler.JobScheduler jobScheduler8 = null;
    org.neo4j.storageengine.api.LogFilesInitializer logFilesInitializer9 = null;
    org.neo4j.logging.internal.LogService logService10 = null;
    org.neo4j.memory.MemoryTracker memoryTracker11 = null;
    org.neo4j.internal.batchimport.ImportLogic.Monitor monitor12 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer13 = null;
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_14 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.storageengine.api.format.Capability capability15 = null;
    boolean boolean16 = v310_14.hasCapability(capability15);
    int int17 = v310_14.generation();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat18 = v310_14.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat19 = v310_14.property();
    java.lang.String str20 = v310_14.name();
    try {
      io.github.onograph.internal.batchimport.EnterpriseBatchImporter enterpriseBatchImporter21 = new io.github.onograph.internal.batchimport.EnterpriseBatchImporter(
          additionalInitialIds0, collector1, configuration2, config3, databaseLayout4,
          executionMonitor5, fileSystemAbstraction6, indexImporterFactory7, jobScheduler8,
          logFilesInitializer9, logService10, memoryTracker11, monitor12, pageCacheTracer13,
          (org.neo4j.kernel.impl.store.format.RecordFormats) v310_14);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat18);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat19);
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "high_limitV3_1_0" + "'", str20,
        "high_limitV3_1_0");
  }

  @Test
  public void test1346() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1346");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat1 = v320_0.labelToken();
    java.lang.String str2 = v320_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat3 = v320_0.labelToken();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily4 = v320_0.getFormatFamily();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_2_0" + "'", str2,
        "high_limitV3_2_0");
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat3);
    org.junit.Assert.assertTrue(
        "'" + formatFamily4 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily4.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
  }

  @Test
  public void test1347() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1347");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = propertyRecordFormat0.getRecordSize(storeHeader1);
    long long3 = propertyRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader5 = null;
    int int6 = propertyRecordFormat4.getRecordSize(storeHeader5);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl7 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats8 = highLimitFactoryDefaultImpl7.newInstance();
    boolean boolean9 = propertyRecordFormat4.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl7);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat11 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean12 = propertyRecordFormat4.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord13 = null;
    org.neo4j.internal.id.IdSequence idSequence15 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext16 = null;
    propertyRecordFormat4.prepare(propertyRecord13, (int) (short) 0, idSequence15, cursorContext16);
    boolean boolean19 = propertyRecordFormat4.equals((java.lang.Object) "3.0.6");
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl20 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean22 = recordFormatDynamicRecordImpl20.equals((java.lang.Object) 100.0f);
    int int25 = recordFormatDynamicRecordImpl20.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord26 = recordFormatDynamicRecordImpl20.newRecord();
    int int29 = recordFormatDynamicRecordImpl20.getPageSize(48, 35);
    boolean boolean30 = propertyRecordFormat4.equals(
        (java.lang.Object) recordFormatDynamicRecordImpl20);
    boolean boolean31 = propertyRecordFormat0.equals((java.lang.Object) boolean30);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1125899906842623L + "'",
        long3 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int6 + "' != '" + 48 + "'", int6 == 48);
    org.junit.Assert.assertNotNull(recordFormats8);
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    org.junit.Assert.assertTrue("'" + int25 + "' != '" + 16 + "'", int25 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord26);
    org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
    org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
  }

  @Test
  public void test1348() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1348");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord2 = relationshipHighLimitRecordFormat1.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord5 = relationshipHighLimitRecordFormat4.newRecord();
    org.neo4j.internal.id.IdSequence idSequence7 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext8 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord5, (int) (short) 1, idSequence7,
        cursorContext8);
    int int10 = relationshipHighLimitRecordFormat1.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord11 = relationshipHighLimitRecordFormat1.newRecord();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader12 = null;
    int int13 = relationshipHighLimitRecordFormat1.getRecordSize(storeHeader12);
    org.junit.Assert.assertNotNull(relationshipRecord2);
    org.junit.Assert.assertNotNull(relationshipRecord5);
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord11);
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
  }

  @Test
  public void test1349() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1349");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl6 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean8 = recordFormatDynamicRecordImpl6.equals((java.lang.Object) 100.0f);
    int int11 = recordFormatDynamicRecordImpl6.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord12 = recordFormatDynamicRecordImpl6.newRecord();
    int int15 = recordFormatDynamicRecordImpl6.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord16 = recordFormatDynamicRecordImpl6.newRecord();
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord17 = recordFormatDynamicRecordImpl6.newRecord();
    org.neo4j.internal.id.IdSequence idSequence19 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext20 = null;
    recordFormatDynamicRecordImpl0.prepare(dynamicRecord17, 10, idSequence19, cursorContext20);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl22 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean24 = recordFormatDynamicRecordImpl22.equals((java.lang.Object) 100.0f);
    int int27 = recordFormatDynamicRecordImpl22.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord28 = recordFormatDynamicRecordImpl22.newRecord();
    int int31 = recordFormatDynamicRecordImpl22.getPageSize(48, 35);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl32 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean34 = recordFormatDynamicRecordImpl32.equals((java.lang.Object) 100.0f);
    int int37 = recordFormatDynamicRecordImpl32.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord38 = recordFormatDynamicRecordImpl32.newRecord();
    long long39 = recordFormatDynamicRecordImpl22.getNextRecordReference(dynamicRecord38);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl40 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean42 = recordFormatDynamicRecordImpl40.equals((java.lang.Object) 100.0f);
    int int45 = recordFormatDynamicRecordImpl40.getPageSize(16, (-1));
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl46 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    int int49 = recordFormatDynamicRecordImpl46.getPageSize(24, 8);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl50 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean52 = recordFormatDynamicRecordImpl50.equals((java.lang.Object) 100.0f);
    int int55 = recordFormatDynamicRecordImpl50.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord56 = recordFormatDynamicRecordImpl50.newRecord();
    long long57 = recordFormatDynamicRecordImpl46.getNextRecordReference(dynamicRecord56);
    org.neo4j.internal.id.IdSequence idSequence59 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext60 = null;
    recordFormatDynamicRecordImpl40.prepare(dynamicRecord56, 10, idSequence59, cursorContext60);
    org.neo4j.internal.id.IdSequence idSequence63 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext64 = null;
    recordFormatDynamicRecordImpl22.prepare(dynamicRecord56, 35, idSequence63, cursorContext64);
    org.neo4j.io.pagecache.PageCursor pageCursor66 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad67 = null;
    try {
      recordFormatDynamicRecordImpl0.read(dynamicRecord56, pageCursor66, recordLoad67, 99, 52);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    org.junit.Assert.assertTrue("'" + int11 + "' != '" + 16 + "'", int11 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord12);
    org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord16);
    org.junit.Assert.assertNotNull(dynamicRecord17);
    org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    org.junit.Assert.assertTrue("'" + int27 + "' != '" + 16 + "'", int27 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord28);
    org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
    org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    org.junit.Assert.assertTrue("'" + int37 + "' != '" + 16 + "'", int37 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord38);
    org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    org.junit.Assert.assertTrue("'" + int45 + "' != '" + 16 + "'", int45 == 16);
    org.junit.Assert.assertTrue("'" + int49 + "' != '" + 24 + "'", int49 == 24);
    org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    org.junit.Assert.assertTrue("'" + int55 + "' != '" + 16 + "'", int55 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord56);
    org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
  }

  @Test
  public void test1350() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1350");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.FactoryHighLimitDefaultImpl factoryHighLimitDefaultImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.FactoryHighLimitDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats1 = factoryHighLimitDefaultImpl0.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats2 = factoryHighLimitDefaultImpl0.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats3 = factoryHighLimitDefaultImpl0.newInstance();
    org.junit.Assert.assertNotNull(recordFormats1);
    org.junit.Assert.assertNotNull(recordFormats2);
    org.junit.Assert.assertNotNull(recordFormats3);
  }

  @Test
  public void test1351() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1351");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord2 = relationshipRecordFormat1.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord3 = relationshipRecordFormat1.newRecord();
    org.neo4j.internal.id.IdSequence idSequence5 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext6 = null;
    relationshipRecordFormat0.prepare(relationshipRecord3, 100, idSequence5, cursorContext6);
    int int10 = relationshipRecordFormat0.getPageSize(0, 3);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord11 = relationshipRecordFormat0.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord12 = relationshipRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_13 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat14 = v320_13.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat15 = v320_13.labelToken();
    boolean boolean16 = relationshipRecordFormat0.equals((java.lang.Object) v320_13);
    int int17 = v320_13.generation();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat18 = v320_13.relationship();
    org.junit.Assert.assertNotNull(relationshipRecord2);
    org.junit.Assert.assertNotNull(relationshipRecord3);
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord11);
    org.junit.Assert.assertNotNull(relationshipRecord12);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat14);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat15);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat18);
  }

  @Test
  public void test1352() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1352");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord1 = propertyRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader3 = null;
    int int4 = propertyRecordFormat2.getRecordSize(storeHeader3);
    long long5 = propertyRecordFormat2.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat6 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord8 = propertyRecordFormat7.newRecord();
    long long9 = propertyOneByteHeaderRecordFormat6.getNextRecordReference(propertyRecord8);
    org.neo4j.internal.id.IdSequence idSequence11 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext12 = null;
    propertyRecordFormat2.prepare(propertyRecord8, 0, idSequence11, cursorContext12);
    long long14 = propertyRecordFormat0.getNextRecordReference(propertyRecord8);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader16 = null;
    int int17 = propertyRecordFormat15.getRecordSize(storeHeader16);
    int int20 = propertyRecordFormat15.getPageSize((int) (byte) -1, 128);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat21 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long22 = propertyOneByteHeaderRecordFormat21.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord23 = propertyOneByteHeaderRecordFormat21.newRecord();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord24 = propertyOneByteHeaderRecordFormat21.newRecord();
    long long25 = propertyRecordFormat15.getNextRecordReference(propertyRecord24);
    long long26 = propertyRecordFormat0.getNextRecordReference(propertyRecord24);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader27 = null;
    int int28 = propertyRecordFormat0.getRecordSize(storeHeader27);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord29 = propertyRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat30 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long31 = propertyOneByteHeaderRecordFormat30.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat32 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat33 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord34 = propertyRecordFormat33.newRecord();
    long long35 = propertyOneByteHeaderRecordFormat32.getNextRecordReference(propertyRecord34);
    long long36 = propertyOneByteHeaderRecordFormat30.getNextRecordReference(propertyRecord34);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat37 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat38 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord39 = propertyRecordFormat38.newRecord();
    long long40 = propertyOneByteHeaderRecordFormat37.getNextRecordReference(propertyRecord39);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat41 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat42 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord43 = propertyRecordFormat42.newRecord();
    long long44 = propertyOneByteHeaderRecordFormat41.getNextRecordReference(propertyRecord43);
    long long45 = propertyOneByteHeaderRecordFormat37.getNextRecordReference(propertyRecord43);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat46 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long47 = propertyOneByteHeaderRecordFormat46.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord48 = propertyOneByteHeaderRecordFormat46.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat49 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long50 = propertyOneByteHeaderRecordFormat49.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord51 = propertyOneByteHeaderRecordFormat49.newRecord();
    long long52 = propertyOneByteHeaderRecordFormat46.getNextRecordReference(propertyRecord51);
    org.neo4j.internal.id.IdSequence idSequence54 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext55 = null;
    propertyOneByteHeaderRecordFormat37.prepare(propertyRecord51, (int) (byte) -1, idSequence54,
        cursorContext55);
    long long57 = propertyOneByteHeaderRecordFormat30.getNextRecordReference(propertyRecord51);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader58 = null;
    int int59 = propertyOneByteHeaderRecordFormat30.getRecordSize(storeHeader58);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat60 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long61 = propertyOneByteHeaderRecordFormat60.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord62 = propertyOneByteHeaderRecordFormat60.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat63 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long64 = propertyOneByteHeaderRecordFormat63.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord65 = propertyOneByteHeaderRecordFormat63.newRecord();
    long long66 = propertyOneByteHeaderRecordFormat60.getNextRecordReference(propertyRecord65);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader67 = null;
    int int68 = propertyOneByteHeaderRecordFormat60.getRecordSize(storeHeader67);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord69 = propertyOneByteHeaderRecordFormat60.newRecord();
    long long70 = propertyOneByteHeaderRecordFormat30.getNextRecordReference(propertyRecord69);
    long long71 = propertyRecordFormat0.getNextRecordReference(propertyRecord69);
    org.junit.Assert.assertNotNull(propertyRecord1);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 48 + "'", int4 == 48);
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1125899906842623L + "'",
        long5 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord8);
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    org.junit.Assert.assertTrue("'" + int17 + "' != '" + 48 + "'", int17 == 48);
    org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1125899906842623L + "'",
        long22 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord23);
    org.junit.Assert.assertNotNull(propertyRecord24);
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
    org.junit.Assert.assertTrue("'" + int28 + "' != '" + 48 + "'", int28 == 48);
    org.junit.Assert.assertNotNull(propertyRecord29);
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1125899906842623L + "'",
        long31 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord34);
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
    org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord39);
    org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord43);
    org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
    org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
    org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1125899906842623L + "'",
        long47 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord48);
    org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1125899906842623L + "'",
        long50 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord51);
    org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
    org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
    org.junit.Assert.assertTrue("'" + int59 + "' != '" + 48 + "'", int59 == 48);
    org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1125899906842623L + "'",
        long61 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord62);
    org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1125899906842623L + "'",
        long64 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord65);
    org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
    org.junit.Assert.assertTrue("'" + int68 + "' != '" + 48 + "'", int68 == 48);
    org.junit.Assert.assertNotNull(propertyRecord69);
    org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-1L) + "'", long70 == (-1L));
    org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-1L) + "'", long71 == (-1L));
  }

  @Test
  public void test1353() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1353");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v306_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v306_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat3 = v306_0.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat4 = v306_0.node();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat3);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat4);
  }

  @Test
  public void test1354() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1354");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long1 = propertyOneByteHeaderRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord4 = propertyRecordFormat3.newRecord();
    long long5 = propertyOneByteHeaderRecordFormat2.getNextRecordReference(propertyRecord4);
    long long6 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord4);
    int int9 = propertyOneByteHeaderRecordFormat0.getPageSize(64, (int) (short) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat10 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord11 = propertyRecordFormat10.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader13 = null;
    int int14 = propertyRecordFormat12.getRecordSize(storeHeader13);
    long long15 = propertyRecordFormat12.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat16 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat17 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord18 = propertyRecordFormat17.newRecord();
    long long19 = propertyOneByteHeaderRecordFormat16.getNextRecordReference(propertyRecord18);
    org.neo4j.internal.id.IdSequence idSequence21 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext22 = null;
    propertyRecordFormat12.prepare(propertyRecord18, 0, idSequence21, cursorContext22);
    long long24 = propertyRecordFormat10.getNextRecordReference(propertyRecord18);
    org.neo4j.internal.id.IdSequence idSequence26 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext27 = null;
    propertyOneByteHeaderRecordFormat0.prepare(propertyRecord18, (int) (short) 0, idSequence26,
        cursorContext27);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat29 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat30 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord31 = propertyRecordFormat30.newRecord();
    long long32 = propertyOneByteHeaderRecordFormat29.getNextRecordReference(propertyRecord31);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader33 = null;
    int int34 = propertyOneByteHeaderRecordFormat29.getRecordSize(storeHeader33);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat35 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long36 = propertyOneByteHeaderRecordFormat35.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat37 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat38 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord39 = propertyRecordFormat38.newRecord();
    long long40 = propertyOneByteHeaderRecordFormat37.getNextRecordReference(propertyRecord39);
    long long41 = propertyOneByteHeaderRecordFormat35.getNextRecordReference(propertyRecord39);
    org.neo4j.internal.id.IdSequence idSequence43 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext44 = null;
    propertyOneByteHeaderRecordFormat29.prepare(propertyRecord39, 64, idSequence43,
        cursorContext44);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat47 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat48 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord49 = relationshipRecordFormat48.newRecord();
    long long50 = relationshipHighLimitRecordFormat47.getNextRecordReference(relationshipRecord49);
    boolean boolean51 = propertyOneByteHeaderRecordFormat29.equals((java.lang.Object) long50);
    long long52 = propertyOneByteHeaderRecordFormat29.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat53 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader54 = null;
    int int55 = propertyRecordFormat53.getRecordSize(storeHeader54);
    int int58 = propertyRecordFormat53.getPageSize((int) (byte) -1, 128);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat59 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long60 = propertyOneByteHeaderRecordFormat59.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord61 = propertyOneByteHeaderRecordFormat59.newRecord();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord62 = propertyOneByteHeaderRecordFormat59.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat63 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader64 = null;
    int int65 = propertyRecordFormat63.getRecordSize(storeHeader64);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl66 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats67 = highLimitFactoryDefaultImpl66.newInstance();
    boolean boolean68 = propertyRecordFormat63.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl66);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat70 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean71 = propertyRecordFormat63.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord72 = null;
    org.neo4j.internal.id.IdSequence idSequence74 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext75 = null;
    propertyRecordFormat63.prepare(propertyRecord72, (int) (short) 0, idSequence74,
        cursorContext75);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat77 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord78 = propertyRecordFormat77.newRecord();
    org.neo4j.internal.id.IdSequence idSequence80 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext81 = null;
    propertyRecordFormat63.prepare(propertyRecord78, 52, idSequence80, cursorContext81);
    long long83 = propertyOneByteHeaderRecordFormat59.getNextRecordReference(propertyRecord78);
    long long84 = propertyRecordFormat53.getNextRecordReference(propertyRecord78);
    long long85 = propertyOneByteHeaderRecordFormat29.getNextRecordReference(propertyRecord78);
    org.neo4j.io.pagecache.PageCursor pageCursor86 = null;
    try {
      propertyOneByteHeaderRecordFormat0.write(propertyRecord78, pageCursor86, 34, 35);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord4);
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 64 + "'", int9 == 64);
    org.junit.Assert.assertNotNull(propertyRecord11);
    org.junit.Assert.assertTrue("'" + int14 + "' != '" + 48 + "'", int14 == 48);
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1125899906842623L + "'",
        long15 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord18);
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord31);
    org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
    org.junit.Assert.assertTrue("'" + int34 + "' != '" + 48 + "'", int34 == 48);
    org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1125899906842623L + "'",
        long36 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord39);
    org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
    org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord49);
    org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1125899906842623L + "'",
        long52 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int55 + "' != '" + 48 + "'", int55 == 48);
    org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1125899906842623L + "'",
        long60 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord61);
    org.junit.Assert.assertNotNull(propertyRecord62);
    org.junit.Assert.assertTrue("'" + int65 + "' != '" + 48 + "'", int65 == 48);
    org.junit.Assert.assertNotNull(recordFormats67);
    org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    org.junit.Assert.assertNotNull(propertyRecord78);
    org.junit.Assert.assertTrue("'" + long83 + "' != '" + (-1L) + "'", long83 == (-1L));
    org.junit.Assert.assertTrue("'" + long84 + "' != '" + (-1L) + "'", long84 == (-1L));
    org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-1L) + "'", long85 == (-1L));
  }

  @Test
  public void test1355() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1355");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord2 = propertyRecordFormat1.newRecord();
    long long3 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord2);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_4 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat5 = v300_4.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat6 = v300_4.relationshipTypeToken();
    java.lang.String str7 = v300_4.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat8 = v300_4.property();
    boolean boolean9 = propertyOneByteHeaderRecordFormat0.equals((java.lang.Object) v300_4);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat10 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader11 = null;
    int int12 = propertyRecordFormat10.getRecordSize(storeHeader11);
    long long13 = propertyRecordFormat10.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum highLimitEncEnum14 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8;
    boolean boolean15 = propertyRecordFormat10.equals((java.lang.Object) highLimitEncEnum14);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord16 = null;
    org.neo4j.internal.id.IdSequence idSequence18 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext19 = null;
    propertyRecordFormat10.prepare(propertyRecord16, 128, idSequence18, cursorContext19);
    long long21 = propertyRecordFormat10.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat22 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader23 = null;
    int int24 = propertyRecordFormat22.getRecordSize(storeHeader23);
    long long25 = propertyRecordFormat22.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum highLimitEncEnum26 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8;
    boolean boolean27 = propertyRecordFormat22.equals((java.lang.Object) highLimitEncEnum26);
    long long28 = propertyRecordFormat22.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord29 = propertyRecordFormat22.newRecord();
    long long30 = propertyRecordFormat10.getNextRecordReference(propertyRecord29);
    long long31 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord29);
    org.junit.Assert.assertNotNull(propertyRecord2);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat5);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat6);
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "high_limitV3_0_0" + "'", str7,
        "high_limitV3_0_0");
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat8);
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 48 + "'", int12 == 48);
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1125899906842623L + "'",
        long13 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + highLimitEncEnum14 + "' != '"
            + io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8 + "'",
        highLimitEncEnum14.equals(
            io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8));
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1125899906842623L + "'",
        long21 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int24 + "' != '" + 48 + "'", int24 == 48);
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1125899906842623L + "'",
        long25 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + highLimitEncEnum26 + "' != '"
            + io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8 + "'",
        highLimitEncEnum26.equals(
            io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8));
    org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1125899906842623L + "'",
        long28 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord29);
    org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
  }

  @Test
  public void test1356() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1356");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.FactoryHighLimitDefaultImpl factoryHighLimitDefaultImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.FactoryHighLimitDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats1 = factoryHighLimitDefaultImpl0.newInstance();
    java.lang.String str2 = factoryHighLimitDefaultImpl0.getName();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats3 = factoryHighLimitDefaultImpl0.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats4 = factoryHighLimitDefaultImpl0.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats5 = factoryHighLimitDefaultImpl0.newInstance();
    java.lang.String str6 = factoryHighLimitDefaultImpl0.getName();
    org.junit.Assert.assertNotNull(recordFormats1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_0_0" + "'", str2,
        "high_limitV3_0_0");
    org.junit.Assert.assertNotNull(recordFormats3);
    org.junit.Assert.assertNotNull(recordFormats4);
    org.junit.Assert.assertNotNull(recordFormats5);
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "high_limitV3_0_0" + "'", str6,
        "high_limitV3_0_0");
  }

  @Test
  public void test1357() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1357");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    int int3 = recordFormatDynamicRecordImpl0.getPageSize(24, 8);
    long long4 = recordFormatDynamicRecordImpl0.getMaxId();
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 24 + "'", int3 == 24);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1125899906842623L + "'",
        long4 == 1125899906842623L);
  }

  @Test
  public void test1358() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1358");
    }
    int int1 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.leg(35L);
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 3 + "'", int1 == 3);
  }

  @Test
  public void test1359() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1359");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod(14L,
        (long) (short) 100);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 110L + "'", long2 == 110L);
  }

  @Test
  public void test1360() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1360");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord2 = relationshipRecordFormat1.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord3 = relationshipRecordFormat1.newRecord();
    org.neo4j.internal.id.IdSequence idSequence5 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext6 = null;
    relationshipRecordFormat0.prepare(relationshipRecord3, 100, idSequence5, cursorContext6);
    int int10 = relationshipRecordFormat0.getPageSize(0, 3);
    int int11 = relationshipRecordFormat0.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_12 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat13 = v306_12.relationship();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray14 = v306_12.capabilities();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat15 = v306_12.relationshipTypeToken();
    boolean boolean16 = relationshipRecordFormat0.equals((java.lang.Object) v306_12);
    java.lang.String str17 = v306_12.name();
    org.junit.Assert.assertNotNull(relationshipRecord2);
    org.junit.Assert.assertNotNull(relationshipRecord3);
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat13);
    org.junit.Assert.assertNotNull(capabilityArray14);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat15);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "high_limitV3_0_6" + "'", str17,
        "high_limitV3_0_6");
  }

  @Test
  public void test1361() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1361");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = recordFormatDynamicRecordImpl0.newRecord();
    int int9 = recordFormatDynamicRecordImpl0.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord10 = recordFormatDynamicRecordImpl0.newRecord();
    long long11 = recordFormatDynamicRecordImpl0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl12 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean14 = recordFormatDynamicRecordImpl12.equals((java.lang.Object) 100.0f);
    int int17 = recordFormatDynamicRecordImpl12.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord18 = recordFormatDynamicRecordImpl12.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl19 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean21 = recordFormatDynamicRecordImpl19.equals((java.lang.Object) 100.0f);
    int int24 = recordFormatDynamicRecordImpl19.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord25 = recordFormatDynamicRecordImpl19.newRecord();
    long long26 = recordFormatDynamicRecordImpl12.getNextRecordReference(dynamicRecord25);
    org.neo4j.internal.id.IdSequence idSequence28 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext29 = null;
    recordFormatDynamicRecordImpl0.prepare(dynamicRecord25, 128, idSequence28, cursorContext29);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl31 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean33 = recordFormatDynamicRecordImpl31.equals((java.lang.Object) 100.0f);
    int int36 = recordFormatDynamicRecordImpl31.getPageSize(16, (-1));
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl37 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    int int40 = recordFormatDynamicRecordImpl37.getPageSize(24, 8);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl41 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean43 = recordFormatDynamicRecordImpl41.equals((java.lang.Object) 100.0f);
    int int46 = recordFormatDynamicRecordImpl41.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord47 = recordFormatDynamicRecordImpl41.newRecord();
    long long48 = recordFormatDynamicRecordImpl37.getNextRecordReference(dynamicRecord47);
    org.neo4j.internal.id.IdSequence idSequence50 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext51 = null;
    recordFormatDynamicRecordImpl31.prepare(dynamicRecord47, 10, idSequence50, cursorContext51);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat53 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat54 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord55 = propertyRecordFormat54.newRecord();
    long long56 = propertyOneByteHeaderRecordFormat53.getNextRecordReference(propertyRecord55);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat57 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat58 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord59 = propertyRecordFormat58.newRecord();
    long long60 = propertyOneByteHeaderRecordFormat57.getNextRecordReference(propertyRecord59);
    long long61 = propertyOneByteHeaderRecordFormat53.getNextRecordReference(propertyRecord59);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat62 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long63 = propertyOneByteHeaderRecordFormat62.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord64 = propertyOneByteHeaderRecordFormat62.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat65 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long66 = propertyOneByteHeaderRecordFormat65.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord67 = propertyOneByteHeaderRecordFormat65.newRecord();
    long long68 = propertyOneByteHeaderRecordFormat62.getNextRecordReference(propertyRecord67);
    org.neo4j.internal.id.IdSequence idSequence70 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext71 = null;
    propertyOneByteHeaderRecordFormat53.prepare(propertyRecord67, (int) (byte) -1, idSequence70,
        cursorContext71);
    boolean boolean73 = recordFormatDynamicRecordImpl31.equals(
        (java.lang.Object) propertyOneByteHeaderRecordFormat53);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord74 = recordFormatDynamicRecordImpl31.newRecord();
    org.neo4j.io.pagecache.PageCursor pageCursor75 = null;
    try {
      recordFormatDynamicRecordImpl0.write(dynamicRecord74, pageCursor75, (-1), (int) ' ');
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord6);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord10);
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1125899906842623L + "'",
        long11 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    org.junit.Assert.assertTrue("'" + int17 + "' != '" + 16 + "'", int17 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord18);
    org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    org.junit.Assert.assertTrue("'" + int24 + "' != '" + 16 + "'", int24 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord25);
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    org.junit.Assert.assertTrue("'" + int36 + "' != '" + 16 + "'", int36 == 16);
    org.junit.Assert.assertTrue("'" + int40 + "' != '" + 24 + "'", int40 == 24);
    org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    org.junit.Assert.assertTrue("'" + int46 + "' != '" + 16 + "'", int46 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord47);
    org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord55);
    org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-1L) + "'", long56 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord59);
    org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-1L) + "'", long60 == (-1L));
    org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
    org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1125899906842623L + "'",
        long63 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord64);
    org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1125899906842623L + "'",
        long66 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord67);
    org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-1L) + "'", long68 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    org.junit.Assert.assertNotNull(dynamicRecord74);
  }

  @Test
  public void test1362() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1362");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long1 = relationshipGroupHighLimitRecordFormat0.getMaxId();
    long long2 = relationshipGroupHighLimitRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long4 = relationshipGroupHighLimitRecordFormat3.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord6 = null;
    long long7 = relationshipGroupHighLimitRecordFormat5.getNextRecordReference(
        relationshipGroupRecord6);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord8 = relationshipGroupHighLimitRecordFormat5.newRecord();
    org.neo4j.internal.id.IdSequence idSequence10 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext11 = null;
    relationshipGroupHighLimitRecordFormat3.prepare(relationshipGroupRecord8, (int) (byte) 1,
        idSequence10, cursorContext11);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat13 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord14 = null;
    long long15 = relationshipGroupHighLimitRecordFormat13.getNextRecordReference(
        relationshipGroupRecord14);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord16 = relationshipGroupHighLimitRecordFormat13.newRecord();
    org.neo4j.internal.id.IdSequence idSequence18 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext19 = null;
    relationshipGroupHighLimitRecordFormat3.prepare(relationshipGroupRecord16, 0, idSequence18,
        cursorContext19);
    long long21 = relationshipGroupHighLimitRecordFormat3.getMaxId();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord22 = relationshipGroupHighLimitRecordFormat3.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord23 = relationshipGroupHighLimitRecordFormat3.newRecord();
    org.neo4j.internal.id.IdSequence idSequence25 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext26 = null;
    relationshipGroupHighLimitRecordFormat0.prepare(relationshipGroupRecord23, 0, idSequence25,
        cursorContext26);
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1125899906842623L + "'",
        long2 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1125899906842623L + "'",
        long4 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord8);
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord16);
    org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1125899906842623L + "'",
        long21 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipGroupRecord22);
    org.junit.Assert.assertNotNull(relationshipGroupRecord23);
  }

  @Test
  public void test1363() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1363");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long1 = relationshipGroupHighLimitRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader3 = null;
    int int4 = relationshipGroupRecordFormat2.getRecordSize(storeHeader3);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long6 = relationshipGroupHighLimitRecordFormat5.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord8 = null;
    long long9 = relationshipGroupHighLimitRecordFormat7.getNextRecordReference(
        relationshipGroupRecord8);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord10 = relationshipGroupHighLimitRecordFormat7.newRecord();
    org.neo4j.internal.id.IdSequence idSequence12 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext13 = null;
    relationshipGroupHighLimitRecordFormat5.prepare(relationshipGroupRecord10, (int) (byte) 1,
        idSequence12, cursorContext13);
    org.neo4j.internal.id.IdSequence idSequence16 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext17 = null;
    relationshipGroupRecordFormat2.prepare(relationshipGroupRecord10, 0, idSequence16,
        cursorContext17);
    org.neo4j.internal.id.IdSequence idSequence20 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext21 = null;
    relationshipGroupHighLimitRecordFormat0.prepare(relationshipGroupRecord10, 64, idSequence20,
        cursorContext21);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord23 = relationshipGroupHighLimitRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_24 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    boolean boolean25 = relationshipGroupHighLimitRecordFormat0.equals((java.lang.Object) v300_24);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat26 = v300_24.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat27 = v300_24.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat28 = v300_24.node();
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1125899906842623L + "'",
        long6 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord10);
    org.junit.Assert.assertNotNull(relationshipGroupRecord23);
    org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat26);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat27);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat28);
  }

  @Test
  public void test1364() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1364");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod(228L, 73L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 237L + "'", long2 == 237L);
  }

  @Test
  public void test1365() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1365");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat1 = v300_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat2 = v300_0.schema();
    java.lang.String str3 = v300_0.storeVersion();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat4 = v300_0.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat5 = v300_0.relationshipGroup();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat6 = v300_0.property();
    java.lang.String str7 = v300_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat8 = v300_0.relationshipTypeToken();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat1);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat2);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "vE.H.0" + "'", str3, "vE.H.0");
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat4);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat5);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat6);
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "high_limitV3_0_0" + "'", str7,
        "high_limitV3_0_0");
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat8);
  }

  @Test
  public void test1366() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1366");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = relationshipGroupRecordFormat0.getRecordSize(storeHeader1);
    long long3 = relationshipGroupRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord5 = null;
    long long6 = relationshipGroupHighLimitRecordFormat4.getNextRecordReference(
        relationshipGroupRecord5);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord7 = relationshipGroupHighLimitRecordFormat4.newRecord();
    org.neo4j.internal.id.IdSequence idSequence9 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext10 = null;
    relationshipGroupRecordFormat0.prepare(relationshipGroupRecord7, 128, idSequence9,
        cursorContext10);
    long long12 = relationshipGroupRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat14 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        0);
    long long15 = relationshipGroupHighLimitRecordFormat14.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat16 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long17 = relationshipGroupHighLimitRecordFormat16.getMaxId();
    long long18 = relationshipGroupHighLimitRecordFormat16.getMaxId();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord19 = relationshipGroupHighLimitRecordFormat16.newRecord();
    org.neo4j.internal.id.IdSequence idSequence21 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext22 = null;
    relationshipGroupHighLimitRecordFormat14.prepare(relationshipGroupRecord19, (int) (short) 0,
        idSequence21, cursorContext22);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader24 = null;
    int int25 = relationshipGroupHighLimitRecordFormat14.getRecordSize(storeHeader24);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat26 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord27 = null;
    long long28 = relationshipGroupHighLimitRecordFormat26.getNextRecordReference(
        relationshipGroupRecord27);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord29 = relationshipGroupHighLimitRecordFormat26.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat30 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader31 = null;
    int int32 = relationshipGroupRecordFormat30.getRecordSize(storeHeader31);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat33 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long34 = relationshipGroupHighLimitRecordFormat33.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat35 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord36 = null;
    long long37 = relationshipGroupHighLimitRecordFormat35.getNextRecordReference(
        relationshipGroupRecord36);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord38 = relationshipGroupHighLimitRecordFormat35.newRecord();
    org.neo4j.internal.id.IdSequence idSequence40 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext41 = null;
    relationshipGroupHighLimitRecordFormat33.prepare(relationshipGroupRecord38, (int) (byte) 1,
        idSequence40, cursorContext41);
    org.neo4j.internal.id.IdSequence idSequence44 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext45 = null;
    relationshipGroupRecordFormat30.prepare(relationshipGroupRecord38, 0, idSequence44,
        cursorContext45);
    org.neo4j.internal.id.IdSequence idSequence48 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext49 = null;
    relationshipGroupHighLimitRecordFormat26.prepare(relationshipGroupRecord38, (int) '4',
        idSequence48, cursorContext49);
    org.neo4j.internal.id.IdSequence idSequence52 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext53 = null;
    relationshipGroupHighLimitRecordFormat14.prepare(relationshipGroupRecord38, (int) (byte) 0,
        idSequence52, cursorContext53);
    org.neo4j.internal.id.IdSequence idSequence56 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext57 = null;
    relationshipGroupRecordFormat0.prepare(relationshipGroupRecord38, 16, idSequence56,
        cursorContext57);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 32 + "'", int2 == 32);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1125899906842623L + "'",
        long3 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord7);
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1125899906842623L + "'",
        long12 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1125899906842623L + "'",
        long15 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1125899906842623L + "'",
        long17 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1125899906842623L + "'",
        long18 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipGroupRecord19);
    org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord29);
    org.junit.Assert.assertTrue("'" + int32 + "' != '" + 32 + "'", int32 == 32);
    org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1125899906842623L + "'",
        long34 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord38);
  }

  @Test
  public void test1367() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1367");
    }
    io.github.onograph.internal.batchimport.EnterpriseBatchImporterFactory enterpriseBatchImporterFactory0 = new io.github.onograph.internal.batchimport.EnterpriseBatchImporterFactory();
    java.lang.String str1 = enterpriseBatchImporterFactory0.getName();
    java.lang.String str2 = enterpriseBatchImporterFactory0.getName();
    java.lang.String str3 = enterpriseBatchImporterFactory0.getName();
    java.lang.String str4 = enterpriseBatchImporterFactory0.getName();
    java.lang.String str5 = enterpriseBatchImporterFactory0.getName();
    java.lang.String str6 = enterpriseBatchImporterFactory0.getName();
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "restartable" + "'", str1, "restartable");
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "restartable" + "'", str2, "restartable");
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "restartable" + "'", str3, "restartable");
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "restartable" + "'", str4, "restartable");
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "restartable" + "'", str5, "restartable");
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "restartable" + "'", str6, "restartable");
  }

  @Test
  public void test1368() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1368");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = propertyRecordFormat0.getRecordSize(storeHeader1);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl3 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats4 = highLimitFactoryDefaultImpl3.newInstance();
    boolean boolean5 = propertyRecordFormat0.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl3);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean8 = propertyRecordFormat0.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord9 = propertyRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat10 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader11 = null;
    int int12 = propertyRecordFormat10.getRecordSize(storeHeader11);
    long long13 = propertyRecordFormat10.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat14 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord16 = propertyRecordFormat15.newRecord();
    long long17 = propertyOneByteHeaderRecordFormat14.getNextRecordReference(propertyRecord16);
    org.neo4j.internal.id.IdSequence idSequence19 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext20 = null;
    propertyRecordFormat10.prepare(propertyRecord16, 0, idSequence19, cursorContext20);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord22 = propertyRecordFormat10.newRecord();
    long long23 = propertyRecordFormat0.getNextRecordReference(propertyRecord22);
    int int24 = propertyRecordFormat0.getRecordHeaderSize();
    int int27 = propertyRecordFormat0.getPageSize((int) (short) -1, (int) '4');
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    org.junit.Assert.assertNotNull(recordFormats4);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    org.junit.Assert.assertNotNull(propertyRecord9);
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 48 + "'", int12 == 48);
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1125899906842623L + "'",
        long13 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord16);
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord22);
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
    org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
  }

  @Test
  public void test1369() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1369");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat();
    long long1 = nodeHighLimitRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord2 = nodeHighLimitRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 1);
    int int7 = nodeHighLimitRecordFormat4.getPageSize(48, (int) '#');
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord8 = nodeHighLimitRecordFormat4.newRecord();
    int int9 = nodeHighLimitRecordFormat0.rerdtlgForRE(nodeRecord8);
    int int10 = nodeHighLimitRecordFormat0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader11 = null;
    int int12 = nodeHighLimitRecordFormat0.getRecordSize(storeHeader11);
    int int13 = nodeHighLimitRecordFormat0.getRecordHeaderSize();
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertNotNull(nodeRecord2);
    org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
    org.junit.Assert.assertNotNull(nodeRecord8);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 16 + "'", int12 == 16);
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
  }

  @Test
  public void test1370() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1370");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    int int3 = relationshipGroupRecordFormat0.getPageSize((int) 'a', (int) (short) 100);
    long long4 = relationshipGroupRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat6 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord7 = null;
    long long8 = relationshipGroupHighLimitRecordFormat6.getNextRecordReference(
        relationshipGroupRecord7);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord9 = relationshipGroupHighLimitRecordFormat6.newRecord();
    org.neo4j.internal.id.IdSequence idSequence11 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext12 = null;
    relationshipGroupRecordFormat5.prepare(relationshipGroupRecord9, (-1), idSequence11,
        cursorContext12);
    org.neo4j.internal.id.IdSequence idSequence15 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext16 = null;
    relationshipGroupRecordFormat0.prepare(relationshipGroupRecord9, 128, idSequence15,
        cursorContext16);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord18 = relationshipGroupRecordFormat0.newRecord();
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1125899906842623L + "'",
        long4 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord9);
    org.junit.Assert.assertNotNull(relationshipGroupRecord18);
  }

  @Test
  public void test1371() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1371");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat6 = v300_1.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat7 = v300_1.dynamic();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat6);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat7);
  }

  @Test
  public void test1372() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1372");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = recordFormatDynamicRecordImpl0.newRecord();
    int int9 = recordFormatDynamicRecordImpl0.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord10 = recordFormatDynamicRecordImpl0.newRecord();
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord11 = recordFormatDynamicRecordImpl0.newRecord();
    long long12 = recordFormatDynamicRecordImpl0.getMaxId();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord6);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord10);
    org.junit.Assert.assertNotNull(dynamicRecord11);
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1125899906842623L + "'",
        long12 == 1125899906842623L);
  }

  @Test
  public void test1373() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1373");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = recordFormatDynamicRecordImpl0.newRecord();
    int int9 = recordFormatDynamicRecordImpl0.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord10 = recordFormatDynamicRecordImpl0.newRecord();
    int int13 = recordFormatDynamicRecordImpl0.getPageSize((int) '4', (int) (short) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_14 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat15 = v320_14.relationship();
    boolean boolean16 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) v320_14);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat17 = v320_14.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat18 = v320_14.relationshipGroup();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat19 = v320_14.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily20 = v320_14.getFormatFamily();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord6);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord10);
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat15);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat17);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat18);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat19);
    org.junit.Assert.assertTrue(
        "'" + formatFamily20 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily20.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
  }

  @Test
  public void test1374() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1374");
    }
    org.neo4j.internal.batchimport.AdditionalInitialIds additionalInitialIds0 = null;
    org.neo4j.internal.batchimport.input.Collector collector1 = null;
    org.neo4j.internal.batchimport.Configuration configuration2 = null;
    org.neo4j.configuration.Config config3 = null;
    org.neo4j.io.layout.DatabaseLayout databaseLayout4 = null;
    org.neo4j.internal.batchimport.staging.ExecutionMonitor executionMonitor5 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.internal.batchimport.IndexImporterFactory indexImporterFactory7 = null;
    org.neo4j.scheduler.JobScheduler jobScheduler8 = null;
    org.neo4j.storageengine.api.LogFilesInitializer logFilesInitializer9 = null;
    org.neo4j.logging.internal.LogService logService10 = null;
    org.neo4j.memory.MemoryTracker memoryTracker11 = null;
    org.neo4j.internal.batchimport.ImportLogic.Monitor monitor12 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer13 = null;
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_14 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat15 = v306_14.node();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily16 = v306_14.getFormatFamily();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily17 = v306_14.getFormatFamily();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat18 = v306_14.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat19 = v306_14.labelToken();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_20 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat21 = v300_20.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat22 = v300_20.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat23 = v300_20.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat24 = v300_20.node();
    org.neo4j.kernel.impl.store.format.RecordFormats[] recordFormatsArray25 = v300_20.compatibleVersionsForRollingUpgrade();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType26 = null;
    boolean boolean27 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_14,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_20, capabilityType26);
    try {
      io.github.onograph.internal.batchimport.EnterpriseBatchImporter enterpriseBatchImporter28 = new io.github.onograph.internal.batchimport.EnterpriseBatchImporter(
          additionalInitialIds0, collector1, configuration2, config3, databaseLayout4,
          executionMonitor5, fileSystemAbstraction6, indexImporterFactory7, jobScheduler8,
          logFilesInitializer9, logService10, memoryTracker11, monitor12, pageCacheTracer13,
          (org.neo4j.kernel.impl.store.format.RecordFormats) v300_20);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat15);
    org.junit.Assert.assertTrue(
        "'" + formatFamily16 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily16.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertTrue(
        "'" + formatFamily17 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily17.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat18);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat19);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat21);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat22);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat23);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat24);
    org.junit.Assert.assertNotNull(recordFormatsArray25);
    org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
  }

  @Test
  public void test1375() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1375");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v320_0.relationship();
    java.lang.String str2 = v320_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat3 = v320_0.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat4 = v320_0.relationshipGroup();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat5 = v320_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat6 = v320_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat7 = v320_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat8 = v320_0.node();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_2_0" + "'", str2,
        "high_limitV3_2_0");
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat3);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat4);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat5);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat6);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat7);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat8);
  }

  @Test
  public void test1376() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1376");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat1 = v320_0.labelToken();
    java.lang.String str2 = v320_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat3 = v320_0.labelToken();
    int int4 = v320_0.generation();
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_5 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat6 = v310_5.relationship();
    java.lang.String str7 = v310_5.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat8 = v310_5.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat9 = v310_5.node();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray10 = v310_5.capabilities();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat11 = v310_5.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat12 = v310_5.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat13 = v310_5.relationshipGroup();
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_14 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat15 = v320_14.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat16 = v320_14.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType17 = null;
    boolean boolean18 = v310_5.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v320_14, capabilityType17);
    org.neo4j.kernel.impl.store.format.RecordFormats[] recordFormatsArray19 = v320_14.compatibleVersionsForRollingUpgrade();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType20 = null;
    boolean boolean21 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v320_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v320_14, capabilityType20);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_2_0" + "'", str2,
        "high_limitV3_2_0");
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat6);
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "high_limitV3_1_0" + "'", str7,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat8);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat9);
    org.junit.Assert.assertNotNull(capabilityArray10);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat11);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat12);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat13);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat15);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat16);
    org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    org.junit.Assert.assertNotNull(recordFormatsArray19);
    org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
  }

  @Test
  public void test1377() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1377");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat1 = v300_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat2 = v300_0.relationship();
    int int3 = v300_0.generation();
    org.neo4j.storageengine.api.format.Capability capability4 = null;
    boolean boolean5 = v300_0.hasCapability(capability4);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat6 = v300_0.relationshipGroup();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat1);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat2);
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat6);
  }

  @Test
  public void test1378() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1378");
    }
    int int1 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.leg(103L);
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 3 + "'", int1 == 3);
  }

  @Test
  public void test1379() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1379");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat1 = v306_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat2 = v306_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat3 = v306_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat4 = v306_0.property();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily5 = v306_0.getFormatFamily();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily6 = v306_0.getFormatFamily();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat7 = v306_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat8 = v306_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat9 = v306_0.labelToken();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily10 = v306_0.getFormatFamily();
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat1);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat2);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat3);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat4);
    org.junit.Assert.assertTrue(
        "'" + formatFamily5 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily5.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertTrue(
        "'" + formatFamily6 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily6.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat7);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat8);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat9);
    org.junit.Assert.assertTrue(
        "'" + formatFamily10 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily10.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
  }

  @Test
  public void test1380() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1380");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long1 = propertyOneByteHeaderRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord2 = propertyOneByteHeaderRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long4 = propertyOneByteHeaderRecordFormat3.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord5 = propertyOneByteHeaderRecordFormat3.newRecord();
    long long6 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord5);
    int int7 = propertyOneByteHeaderRecordFormat0.getRecordHeaderSize();
    int int8 = propertyOneByteHeaderRecordFormat0.getRecordHeaderSize();
    int int9 = propertyOneByteHeaderRecordFormat0.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat10 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader11 = null;
    int int12 = propertyRecordFormat10.getRecordSize(storeHeader11);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl13 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats14 = highLimitFactoryDefaultImpl13.newInstance();
    boolean boolean15 = propertyRecordFormat10.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl13);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat17 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean18 = propertyRecordFormat10.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord19 = null;
    org.neo4j.internal.id.IdSequence idSequence21 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext22 = null;
    propertyRecordFormat10.prepare(propertyRecord19, (int) (short) 0, idSequence21,
        cursorContext22);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat24 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord25 = propertyRecordFormat24.newRecord();
    org.neo4j.internal.id.IdSequence idSequence27 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext28 = null;
    propertyRecordFormat10.prepare(propertyRecord25, 52, idSequence27, cursorContext28);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader30 = null;
    int int31 = propertyRecordFormat10.getRecordSize(storeHeader30);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat32 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader33 = null;
    int int34 = propertyRecordFormat32.getRecordSize(storeHeader33);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl35 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats36 = highLimitFactoryDefaultImpl35.newInstance();
    boolean boolean37 = propertyRecordFormat32.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl35);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat39 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean40 = propertyRecordFormat32.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord41 = null;
    org.neo4j.internal.id.IdSequence idSequence43 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext44 = null;
    propertyRecordFormat32.prepare(propertyRecord41, (int) (short) 0, idSequence43,
        cursorContext44);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat46 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord47 = propertyRecordFormat46.newRecord();
    org.neo4j.internal.id.IdSequence idSequence49 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext50 = null;
    propertyRecordFormat32.prepare(propertyRecord47, 52, idSequence49, cursorContext50);
    long long52 = propertyRecordFormat10.getNextRecordReference(propertyRecord47);
    long long53 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord47);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat54 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long55 = propertyOneByteHeaderRecordFormat54.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat56 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat57 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord58 = propertyRecordFormat57.newRecord();
    long long59 = propertyOneByteHeaderRecordFormat56.getNextRecordReference(propertyRecord58);
    long long60 = propertyOneByteHeaderRecordFormat54.getNextRecordReference(propertyRecord58);
    int int63 = propertyOneByteHeaderRecordFormat54.getPageSize(64, (int) (short) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat64 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord65 = propertyRecordFormat64.newRecord();
    long long66 = propertyOneByteHeaderRecordFormat54.getNextRecordReference(propertyRecord65);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat67 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader68 = null;
    int int69 = propertyRecordFormat67.getRecordSize(storeHeader68);
    long long70 = propertyRecordFormat67.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat71 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat72 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord73 = propertyRecordFormat72.newRecord();
    long long74 = propertyOneByteHeaderRecordFormat71.getNextRecordReference(propertyRecord73);
    org.neo4j.internal.id.IdSequence idSequence76 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext77 = null;
    propertyRecordFormat67.prepare(propertyRecord73, 0, idSequence76, cursorContext77);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord79 = propertyRecordFormat67.newRecord();
    long long80 = propertyOneByteHeaderRecordFormat54.getNextRecordReference(propertyRecord79);
    org.neo4j.io.pagecache.PageCursor pageCursor81 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad82 = null;
    try {
      propertyOneByteHeaderRecordFormat0.read(propertyRecord79, pageCursor81, recordLoad82,
          (int) '#', 3);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord2);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1125899906842623L + "'",
        long4 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord5);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 48 + "'", int12 == 48);
    org.junit.Assert.assertNotNull(recordFormats14);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    org.junit.Assert.assertNotNull(propertyRecord25);
    org.junit.Assert.assertTrue("'" + int31 + "' != '" + 48 + "'", int31 == 48);
    org.junit.Assert.assertTrue("'" + int34 + "' != '" + 48 + "'", int34 == 48);
    org.junit.Assert.assertNotNull(recordFormats36);
    org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    org.junit.Assert.assertNotNull(propertyRecord47);
    org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
    org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-1L) + "'", long53 == (-1L));
    org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1125899906842623L + "'",
        long55 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord58);
    org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-1L) + "'", long59 == (-1L));
    org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-1L) + "'", long60 == (-1L));
    org.junit.Assert.assertTrue("'" + int63 + "' != '" + 64 + "'", int63 == 64);
    org.junit.Assert.assertNotNull(propertyRecord65);
    org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
    org.junit.Assert.assertTrue("'" + int69 + "' != '" + 48 + "'", int69 == 48);
    org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1125899906842623L + "'",
        long70 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord73);
    org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-1L) + "'", long74 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord79);
    org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-1L) + "'", long80 == (-1L));
  }

  @Test
  public void test1381() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1381");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod(31L, 123L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 127L + "'", long2 == 127L);
  }

  @Test
  public void test1382() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1382");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord1 = null;
    org.neo4j.internal.id.IdSequence idSequence3 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext4 = null;
    propertyRecordFormat0.prepare(propertyRecord1, (int) (short) -1, idSequence3, cursorContext4);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord6 = propertyRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat8 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord9 = propertyRecordFormat8.newRecord();
    long long10 = propertyOneByteHeaderRecordFormat7.getNextRecordReference(propertyRecord9);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader11 = null;
    int int12 = propertyOneByteHeaderRecordFormat7.getRecordSize(storeHeader11);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat13 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long14 = propertyOneByteHeaderRecordFormat13.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat16 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord17 = propertyRecordFormat16.newRecord();
    long long18 = propertyOneByteHeaderRecordFormat15.getNextRecordReference(propertyRecord17);
    long long19 = propertyOneByteHeaderRecordFormat13.getNextRecordReference(propertyRecord17);
    org.neo4j.internal.id.IdSequence idSequence21 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext22 = null;
    propertyOneByteHeaderRecordFormat7.prepare(propertyRecord17, 64, idSequence21, cursorContext22);
    long long24 = propertyRecordFormat0.getNextRecordReference(propertyRecord17);
    boolean boolean26 = propertyRecordFormat0.equals((java.lang.Object) 100);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat27 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader28 = null;
    int int29 = propertyRecordFormat27.getRecordSize(storeHeader28);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl30 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats31 = highLimitFactoryDefaultImpl30.newInstance();
    boolean boolean32 = propertyRecordFormat27.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl30);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat34 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean35 = propertyRecordFormat27.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord36 = propertyRecordFormat27.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat37 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader38 = null;
    int int39 = propertyRecordFormat37.getRecordSize(storeHeader38);
    long long40 = propertyRecordFormat37.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat41 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat42 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord43 = propertyRecordFormat42.newRecord();
    long long44 = propertyOneByteHeaderRecordFormat41.getNextRecordReference(propertyRecord43);
    org.neo4j.internal.id.IdSequence idSequence46 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext47 = null;
    propertyRecordFormat37.prepare(propertyRecord43, 0, idSequence46, cursorContext47);
    org.neo4j.internal.id.IdSequence idSequence50 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext51 = null;
    propertyRecordFormat27.prepare(propertyRecord43, 0, idSequence50, cursorContext51);
    long long53 = propertyRecordFormat0.getNextRecordReference(propertyRecord43);
    int int56 = propertyRecordFormat0.getPageSize(0, (int) '4');
    org.junit.Assert.assertNotNull(propertyRecord6);
    org.junit.Assert.assertNotNull(propertyRecord9);
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 48 + "'", int12 == 48);
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1125899906842623L + "'",
        long14 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord17);
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    org.junit.Assert.assertTrue("'" + int29 + "' != '" + 48 + "'", int29 == 48);
    org.junit.Assert.assertNotNull(recordFormats31);
    org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    org.junit.Assert.assertNotNull(propertyRecord36);
    org.junit.Assert.assertTrue("'" + int39 + "' != '" + 48 + "'", int39 == 48);
    org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1125899906842623L + "'",
        long40 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord43);
    org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
    org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-1L) + "'", long53 == (-1L));
    org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
  }

  @Test
  public void test1383() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1383");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl6 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    int int9 = recordFormatDynamicRecordImpl6.getPageSize(24, 8);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl10 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean12 = recordFormatDynamicRecordImpl10.equals((java.lang.Object) 100.0f);
    int int15 = recordFormatDynamicRecordImpl10.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord16 = recordFormatDynamicRecordImpl10.newRecord();
    long long17 = recordFormatDynamicRecordImpl6.getNextRecordReference(dynamicRecord16);
    org.neo4j.internal.id.IdSequence idSequence19 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext20 = null;
    recordFormatDynamicRecordImpl0.prepare(dynamicRecord16, 10, idSequence19, cursorContext20);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat22 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat23 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord24 = propertyRecordFormat23.newRecord();
    long long25 = propertyOneByteHeaderRecordFormat22.getNextRecordReference(propertyRecord24);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat26 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat27 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord28 = propertyRecordFormat27.newRecord();
    long long29 = propertyOneByteHeaderRecordFormat26.getNextRecordReference(propertyRecord28);
    long long30 = propertyOneByteHeaderRecordFormat22.getNextRecordReference(propertyRecord28);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat31 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long32 = propertyOneByteHeaderRecordFormat31.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord33 = propertyOneByteHeaderRecordFormat31.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat34 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long35 = propertyOneByteHeaderRecordFormat34.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord36 = propertyOneByteHeaderRecordFormat34.newRecord();
    long long37 = propertyOneByteHeaderRecordFormat31.getNextRecordReference(propertyRecord36);
    org.neo4j.internal.id.IdSequence idSequence39 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext40 = null;
    propertyOneByteHeaderRecordFormat22.prepare(propertyRecord36, (int) (byte) -1, idSequence39,
        cursorContext40);
    boolean boolean42 = recordFormatDynamicRecordImpl0.equals(
        (java.lang.Object) propertyOneByteHeaderRecordFormat22);
    int int45 = recordFormatDynamicRecordImpl0.getPageSize(1, (int) '4');
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 24 + "'", int9 == 24);
    org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    org.junit.Assert.assertTrue("'" + int15 + "' != '" + 16 + "'", int15 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord16);
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord24);
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord28);
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
    org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
    org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1125899906842623L + "'",
        long32 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord33);
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1125899906842623L + "'",
        long35 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord36);
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
  }

  @Test
  public void test1384() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1384");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_6 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat7 = v306_6.node();
    org.neo4j.storageengine.api.format.Capability capability8 = null;
    boolean boolean9 = v306_6.hasCapability(capability8);
    org.neo4j.storageengine.api.format.CapabilityType capabilityType10 = null;
    boolean boolean11 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_6, capabilityType10);
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily12 = v300_1.getFormatFamily();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat13 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    long long14 = relationshipRecordFormat13.getMaxId();
    boolean boolean15 = v300_1.equals((java.lang.Object) long14);
    java.lang.String str16 = v300_1.name();
    java.lang.String str17 = v300_1.name();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat7);
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    org.junit.Assert.assertTrue(
        "'" + formatFamily12 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily12.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1125899906842623L + "'",
        long14 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "high_limitV3_0_0" + "'", str16,
        "high_limitV3_0_0");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "high_limitV3_0_0" + "'", str17,
        "high_limitV3_0_0");
  }

  @Test
  public void test1385() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1385");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord1 = propertyRecordFormat0.newRecord();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord2 = propertyRecordFormat0.newRecord();
    org.junit.Assert.assertNotNull(propertyRecord1);
    org.junit.Assert.assertNotNull(propertyRecord2);
  }

  @Test
  public void test1386() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1386");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat1 = v320_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat2 = v320_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat3 = v320_0.property();
    java.lang.String str4 = v320_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat5 = v320_0.relationshipGroup();
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat1);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat2);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "high_limitV3_2_0" + "'", str4,
        "high_limitV3_2_0");
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat5);
  }

  @Test
  public void test1387() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1387");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.storageengine.api.format.Capability capability1 = null;
    boolean boolean2 = v310_0.hasCapability(capability1);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat3 = v310_0.property();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord6 = propertyRecordFormat5.newRecord();
    long long7 = propertyOneByteHeaderRecordFormat4.getNextRecordReference(propertyRecord6);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_8 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat9 = v300_8.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat10 = v300_8.relationshipTypeToken();
    java.lang.String str11 = v300_8.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat12 = v300_8.property();
    boolean boolean13 = propertyOneByteHeaderRecordFormat4.equals((java.lang.Object) v300_8);
    int int14 = v300_8.generation();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType15 = null;
    boolean boolean16 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v310_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_8, capabilityType15);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat17 = v300_8.propertyKeyToken();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat3);
    org.junit.Assert.assertNotNull(propertyRecord6);
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat9);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat10);
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "high_limitV3_0_0" + "'", str11,
        "high_limitV3_0_0");
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat12);
    org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat17);
  }

  @Test
  public void test1388() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1388");
    }
    int int1 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.leg(
        1125899906842623L);
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 7 + "'", int1 == 7);
  }

  @Test
  public void test1389() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1389");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.storageengine.api.format.Capability capability1 = null;
    boolean boolean2 = v310_0.hasCapability(capability1);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat3 = v310_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat4 = v310_0.labelToken();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat3);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat4);
  }

  @Test
  public void test1390() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1390");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_6 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat7 = v310_6.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat8 = v310_6.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat9 = v310_6.labelToken();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType10 = null;
    boolean boolean11 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v310_6, capabilityType10);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat12 = v300_1.schema();
    org.neo4j.storageengine.api.format.Capability capability13 = null;
    boolean boolean14 = v300_1.hasCapability(capability13);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat7);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat8);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat9);
    org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat12);
    org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
  }

  @Test
  public void test1391() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1391");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long1 = relationshipGroupHighLimitRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader3 = null;
    int int4 = relationshipGroupRecordFormat2.getRecordSize(storeHeader3);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long6 = relationshipGroupHighLimitRecordFormat5.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord8 = null;
    long long9 = relationshipGroupHighLimitRecordFormat7.getNextRecordReference(
        relationshipGroupRecord8);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord10 = relationshipGroupHighLimitRecordFormat7.newRecord();
    org.neo4j.internal.id.IdSequence idSequence12 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext13 = null;
    relationshipGroupHighLimitRecordFormat5.prepare(relationshipGroupRecord10, (int) (byte) 1,
        idSequence12, cursorContext13);
    org.neo4j.internal.id.IdSequence idSequence16 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext17 = null;
    relationshipGroupRecordFormat2.prepare(relationshipGroupRecord10, 0, idSequence16,
        cursorContext17);
    org.neo4j.internal.id.IdSequence idSequence20 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext21 = null;
    relationshipGroupHighLimitRecordFormat0.prepare(relationshipGroupRecord10, 64, idSequence20,
        cursorContext21);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord23 = relationshipGroupHighLimitRecordFormat0.newRecord();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader24 = null;
    int int25 = relationshipGroupHighLimitRecordFormat0.getRecordSize(storeHeader24);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.FactoryHighLimitDefaultImpl factoryHighLimitDefaultImpl26 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.FactoryHighLimitDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats27 = factoryHighLimitDefaultImpl26.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats28 = factoryHighLimitDefaultImpl26.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats29 = factoryHighLimitDefaultImpl26.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats30 = factoryHighLimitDefaultImpl26.newInstance();
    boolean boolean31 = relationshipGroupHighLimitRecordFormat0.equals(
        (java.lang.Object) factoryHighLimitDefaultImpl26);
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1125899906842623L + "'",
        long6 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord10);
    org.junit.Assert.assertNotNull(relationshipGroupRecord23);
    org.junit.Assert.assertTrue("'" + int25 + "' != '" + 32 + "'", int25 == 32);
    org.junit.Assert.assertNotNull(recordFormats27);
    org.junit.Assert.assertNotNull(recordFormats28);
    org.junit.Assert.assertNotNull(recordFormats29);
    org.junit.Assert.assertNotNull(recordFormats30);
    org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
  }

  @Test
  public void test1392() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1392");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        100);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_3 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_4 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat5 = v300_4.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat6 = v300_4.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType7 = null;
    boolean boolean8 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_3,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_4, capabilityType7);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat9 = v300_4.relationship();
    boolean boolean10 = relationshipGroupRecordFormat2.equals(
        (java.lang.Object) relationshipRecordRecordFormat9);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord11 = relationshipGroupRecordFormat2.newRecord();
    org.neo4j.io.pagecache.PageCursor pageCursor12 = null;
    try {
      relationshipGroupHighLimitRecordFormat1.write(relationshipGroupRecord11, pageCursor12, 100,
          (int) ' ');
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat5);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat6);
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat9);
    org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    org.junit.Assert.assertNotNull(relationshipGroupRecord11);
  }

  @Test
  public void test1393() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1393");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v306_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat2 = v306_0.schema();
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_3 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat4 = v310_3.relationship();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType5 = null;
    boolean boolean6 = v306_0.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v310_3, capabilityType5);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat7 = v306_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat8 = v306_0.labelToken();
    org.neo4j.storageengine.api.format.Capability capability9 = null;
    boolean boolean10 = v306_0.hasCapability(capability9);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat2);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat4);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat7);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat8);
    org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
  }

  @Test
  public void test1394() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1394");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = relationshipGroupRecordFormat0.getRecordSize(storeHeader1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long4 = relationshipGroupHighLimitRecordFormat3.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord6 = null;
    long long7 = relationshipGroupHighLimitRecordFormat5.getNextRecordReference(
        relationshipGroupRecord6);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord8 = relationshipGroupHighLimitRecordFormat5.newRecord();
    org.neo4j.internal.id.IdSequence idSequence10 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext11 = null;
    relationshipGroupHighLimitRecordFormat3.prepare(relationshipGroupRecord8, (int) (byte) 1,
        idSequence10, cursorContext11);
    org.neo4j.internal.id.IdSequence idSequence14 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext15 = null;
    relationshipGroupRecordFormat0.prepare(relationshipGroupRecord8, 0, idSequence14,
        cursorContext15);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord17 = relationshipGroupRecordFormat0.newRecord();
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 32 + "'", int2 == 32);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1125899906842623L + "'",
        long4 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord8);
    org.junit.Assert.assertNotNull(relationshipGroupRecord17);
  }

  @Test
  public void test1395() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1395");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord2 = relationshipRecordFormat1.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord3 = relationshipRecordFormat1.newRecord();
    org.neo4j.internal.id.IdSequence idSequence5 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext6 = null;
    relationshipRecordFormat0.prepare(relationshipRecord3, 100, idSequence5, cursorContext6);
    int int10 = relationshipRecordFormat0.getPageSize(0, 3);
    int int11 = relationshipRecordFormat0.getRecordHeaderSize();
    int int14 = relationshipRecordFormat0.getPageSize(0, 128);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat16 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord17 = relationshipRecordFormat16.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord18 = relationshipRecordFormat16.newRecord();
    org.neo4j.internal.id.IdSequence idSequence20 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext21 = null;
    relationshipRecordFormat15.prepare(relationshipRecord18, 100, idSequence20, cursorContext21);
    org.neo4j.internal.id.IdSequence idSequence24 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext25 = null;
    relationshipRecordFormat0.prepare(relationshipRecord18, 35, idSequence24, cursorContext25);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat27 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat28 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord29 = relationshipRecordFormat28.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord30 = relationshipRecordFormat28.newRecord();
    org.neo4j.internal.id.IdSequence idSequence32 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext33 = null;
    relationshipRecordFormat27.prepare(relationshipRecord30, 100, idSequence32, cursorContext33);
    long long35 = relationshipRecordFormat27.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat36 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader37 = null;
    int int38 = relationshipRecordFormat36.getRecordSize(storeHeader37);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat40 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat41 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord42 = relationshipRecordFormat41.newRecord();
    long long43 = relationshipHighLimitRecordFormat40.getNextRecordReference(relationshipRecord42);
    org.neo4j.internal.id.IdSequence idSequence45 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext46 = null;
    relationshipRecordFormat36.prepare(relationshipRecord42, 3, idSequence45, cursorContext46);
    long long48 = relationshipRecordFormat27.getNextRecordReference(relationshipRecord42);
    long long49 = relationshipRecordFormat27.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_50 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat51 = v300_50.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat52 = v300_50.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat53 = v300_50.propertyKeyToken();
    boolean boolean54 = relationshipRecordFormat27.equals(
        (java.lang.Object) propertyKeyTokenRecordRecordFormat53);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat56 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord57 = relationshipHighLimitRecordFormat56.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat58 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord59 = relationshipRecordFormat58.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord60 = relationshipRecordFormat58.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat62 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord63 = relationshipHighLimitRecordFormat62.newRecord();
    org.neo4j.internal.id.IdSequence idSequence65 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext66 = null;
    relationshipRecordFormat58.prepare(relationshipRecord63, (int) (byte) 100, idSequence65,
        cursorContext66);
    org.neo4j.internal.id.IdSequence idSequence69 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext70 = null;
    relationshipHighLimitRecordFormat56.prepare(relationshipRecord63, 100, idSequence69,
        cursorContext70);
    org.neo4j.internal.id.IdSequence idSequence73 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext74 = null;
    relationshipRecordFormat27.prepare(relationshipRecord63, 16, idSequence73, cursorContext74);
    org.neo4j.internal.id.IdSequence idSequence77 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext78 = null;
    relationshipRecordFormat0.prepare(relationshipRecord63, 48, idSequence77, cursorContext78);
    org.junit.Assert.assertNotNull(relationshipRecord2);
    org.junit.Assert.assertNotNull(relationshipRecord3);
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord17);
    org.junit.Assert.assertNotNull(relationshipRecord18);
    org.junit.Assert.assertNotNull(relationshipRecord29);
    org.junit.Assert.assertNotNull(relationshipRecord30);
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1125899906842623L + "'",
        long35 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int38 + "' != '" + 32 + "'", int38 == 32);
    org.junit.Assert.assertNotNull(relationshipRecord42);
    org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
    org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
    org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1125899906842623L + "'",
        long49 == 1125899906842623L);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat51);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat52);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat53);
    org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    org.junit.Assert.assertNotNull(relationshipRecord57);
    org.junit.Assert.assertNotNull(relationshipRecord59);
    org.junit.Assert.assertNotNull(relationshipRecord60);
    org.junit.Assert.assertNotNull(relationshipRecord63);
  }

  @Test
  public void test1396() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1396");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat1 = v306_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat2 = v306_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat3 = v306_0.property();
    org.neo4j.storageengine.api.format.Capability capability4 = null;
    boolean boolean5 = v306_0.hasCapability(capability4);
    int int6 = v306_0.generation();
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat1);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat2);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
  }

  @Test
  public void test1397() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1397");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily1 = v300_0.getFormatFamily();
    java.lang.String str2 = v300_0.storeVersion();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat3 = v300_0.propertyKeyToken();
    java.lang.String str4 = v300_0.name();
    org.junit.Assert.assertTrue(
        "'" + formatFamily1 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily1.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "vE.H.0" + "'", str2, "vE.H.0");
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "high_limitV3_0_0" + "'", str4,
        "high_limitV3_0_0");
  }

  @Test
  public void test1398() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1398");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord2 = propertyRecordFormat1.newRecord();
    long long3 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord2);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader4 = null;
    int int5 = propertyOneByteHeaderRecordFormat0.getRecordSize(storeHeader4);
    long long6 = propertyOneByteHeaderRecordFormat0.getMaxId();
    org.junit.Assert.assertNotNull(propertyRecord2);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 48 + "'", int5 == 48);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1125899906842623L + "'",
        long6 == 1125899906842623L);
  }

  @Test
  public void test1399() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1399");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v310_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat2 = v310_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat3 = v310_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat4 = v310_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat5 = v310_0.propertyKeyToken();
    java.lang.String str6 = v310_0.introductionVersion();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat2);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat3);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat4);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat5);
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "3.1.0" + "'", str6, "3.1.0");
  }

  @Test
  public void test1400() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1400");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = recordFormatDynamicRecordImpl0.newRecord();
    int int9 = recordFormatDynamicRecordImpl0.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord10 = recordFormatDynamicRecordImpl0.newRecord();
    int int13 = recordFormatDynamicRecordImpl0.getPageSize((int) '4', (int) (short) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_14 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat15 = v320_14.relationship();
    boolean boolean16 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) v320_14);
    long long17 = recordFormatDynamicRecordImpl0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl18 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    int int21 = recordFormatDynamicRecordImpl18.getPageSize(24, 8);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl22 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean24 = recordFormatDynamicRecordImpl22.equals((java.lang.Object) 100.0f);
    int int27 = recordFormatDynamicRecordImpl22.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord28 = recordFormatDynamicRecordImpl22.newRecord();
    long long29 = recordFormatDynamicRecordImpl18.getNextRecordReference(dynamicRecord28);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl30 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean32 = recordFormatDynamicRecordImpl30.equals((java.lang.Object) 100.0f);
    int int35 = recordFormatDynamicRecordImpl30.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord36 = recordFormatDynamicRecordImpl30.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl37 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean39 = recordFormatDynamicRecordImpl37.equals((java.lang.Object) 100.0f);
    int int42 = recordFormatDynamicRecordImpl37.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord43 = recordFormatDynamicRecordImpl37.newRecord();
    long long44 = recordFormatDynamicRecordImpl30.getNextRecordReference(dynamicRecord43);
    long long45 = recordFormatDynamicRecordImpl18.getNextRecordReference(dynamicRecord43);
    org.neo4j.io.pagecache.PageCursor pageCursor46 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad47 = null;
    try {
      recordFormatDynamicRecordImpl0.read(dynamicRecord43, pageCursor46, recordLoad47, 0, 52);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord6);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord10);
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat15);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1125899906842623L + "'",
        long17 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int21 + "' != '" + 24 + "'", int21 == 24);
    org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    org.junit.Assert.assertTrue("'" + int27 + "' != '" + 16 + "'", int27 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord28);
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    org.junit.Assert.assertTrue("'" + int35 + "' != '" + 16 + "'", int35 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord36);
    org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    org.junit.Assert.assertTrue("'" + int42 + "' != '" + 16 + "'", int42 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord43);
    org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
    org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
  }

  @Test
  public void test1401() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1401");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long1 = propertyOneByteHeaderRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord2 = propertyOneByteHeaderRecordFormat0.newRecord();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord3 = propertyOneByteHeaderRecordFormat0.newRecord();
    int int6 = propertyOneByteHeaderRecordFormat0.getPageSize(1, 128);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long8 = propertyOneByteHeaderRecordFormat7.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat9 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat10 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord11 = propertyRecordFormat10.newRecord();
    long long12 = propertyOneByteHeaderRecordFormat9.getNextRecordReference(propertyRecord11);
    long long13 = propertyOneByteHeaderRecordFormat7.getNextRecordReference(propertyRecord11);
    int int16 = propertyOneByteHeaderRecordFormat7.getPageSize(64, (int) (short) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat17 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord18 = propertyRecordFormat17.newRecord();
    long long19 = propertyOneByteHeaderRecordFormat7.getNextRecordReference(propertyRecord18);
    long long20 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord18);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader21 = null;
    int int22 = propertyOneByteHeaderRecordFormat0.getRecordSize(storeHeader21);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord23 = propertyOneByteHeaderRecordFormat0.newRecord();
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord2);
    org.junit.Assert.assertNotNull(propertyRecord3);
    org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1125899906842623L + "'",
        long8 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord11);
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
    org.junit.Assert.assertTrue("'" + int16 + "' != '" + 64 + "'", int16 == 64);
    org.junit.Assert.assertNotNull(propertyRecord18);
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
    org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
    org.junit.Assert.assertTrue("'" + int22 + "' != '" + 48 + "'", int22 == 48);
    org.junit.Assert.assertNotNull(propertyRecord23);
  }

  @Test
  public void test1402() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1402");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl6 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    int int9 = recordFormatDynamicRecordImpl6.getPageSize(24, 8);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl10 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean12 = recordFormatDynamicRecordImpl10.equals((java.lang.Object) 100.0f);
    int int15 = recordFormatDynamicRecordImpl10.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord16 = recordFormatDynamicRecordImpl10.newRecord();
    long long17 = recordFormatDynamicRecordImpl6.getNextRecordReference(dynamicRecord16);
    org.neo4j.internal.id.IdSequence idSequence19 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext20 = null;
    recordFormatDynamicRecordImpl0.prepare(dynamicRecord16, 10, idSequence19, cursorContext20);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat22 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat23 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord24 = propertyRecordFormat23.newRecord();
    long long25 = propertyOneByteHeaderRecordFormat22.getNextRecordReference(propertyRecord24);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat26 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat27 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord28 = propertyRecordFormat27.newRecord();
    long long29 = propertyOneByteHeaderRecordFormat26.getNextRecordReference(propertyRecord28);
    long long30 = propertyOneByteHeaderRecordFormat22.getNextRecordReference(propertyRecord28);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat31 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long32 = propertyOneByteHeaderRecordFormat31.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord33 = propertyOneByteHeaderRecordFormat31.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat34 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long35 = propertyOneByteHeaderRecordFormat34.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord36 = propertyOneByteHeaderRecordFormat34.newRecord();
    long long37 = propertyOneByteHeaderRecordFormat31.getNextRecordReference(propertyRecord36);
    org.neo4j.internal.id.IdSequence idSequence39 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext40 = null;
    propertyOneByteHeaderRecordFormat22.prepare(propertyRecord36, (int) (byte) -1, idSequence39,
        cursorContext40);
    boolean boolean42 = recordFormatDynamicRecordImpl0.equals(
        (java.lang.Object) propertyOneByteHeaderRecordFormat22);
    int int45 = propertyOneByteHeaderRecordFormat22.getPageSize((int) 'a', 52);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat46 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat47 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord48 = propertyRecordFormat47.newRecord();
    long long49 = propertyOneByteHeaderRecordFormat46.getNextRecordReference(propertyRecord48);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader50 = null;
    int int51 = propertyOneByteHeaderRecordFormat46.getRecordSize(storeHeader50);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat52 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long53 = propertyOneByteHeaderRecordFormat52.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat54 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat55 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord56 = propertyRecordFormat55.newRecord();
    long long57 = propertyOneByteHeaderRecordFormat54.getNextRecordReference(propertyRecord56);
    long long58 = propertyOneByteHeaderRecordFormat52.getNextRecordReference(propertyRecord56);
    org.neo4j.internal.id.IdSequence idSequence60 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext61 = null;
    propertyOneByteHeaderRecordFormat46.prepare(propertyRecord56, 64, idSequence60,
        cursorContext61);
    long long63 = propertyOneByteHeaderRecordFormat22.getNextRecordReference(propertyRecord56);
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 24 + "'", int9 == 24);
    org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    org.junit.Assert.assertTrue("'" + int15 + "' != '" + 16 + "'", int15 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord16);
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord24);
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord28);
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
    org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
    org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1125899906842623L + "'",
        long32 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord33);
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1125899906842623L + "'",
        long35 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord36);
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
    org.junit.Assert.assertNotNull(propertyRecord48);
    org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
    org.junit.Assert.assertTrue("'" + int51 + "' != '" + 48 + "'", int51 == 48);
    org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1125899906842623L + "'",
        long53 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord56);
    org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
    org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-1L) + "'", long58 == (-1L));
    org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
  }

  @Test
  public void test1403() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1403");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord2 = propertyRecordFormat1.newRecord();
    long long3 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord2);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord6 = propertyRecordFormat5.newRecord();
    long long7 = propertyOneByteHeaderRecordFormat4.getNextRecordReference(propertyRecord6);
    long long8 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord6);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader9 = null;
    int int10 = propertyOneByteHeaderRecordFormat0.getRecordSize(storeHeader9);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader11 = null;
    int int12 = propertyOneByteHeaderRecordFormat0.getRecordSize(storeHeader11);
    org.junit.Assert.assertNotNull(propertyRecord2);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord6);
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
    org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 48 + "'", int10 == 48);
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 48 + "'", int12 == 48);
  }

  @Test
  public void test1404() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1404");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v310_0.relationship();
    java.lang.String str2 = v310_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat3 = v310_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat4 = v310_0.node();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray5 = v310_0.capabilities();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat6 = v310_0.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat7 = v310_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat8 = v310_0.relationshipGroup();
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_9 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat10 = v320_9.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat11 = v320_9.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType12 = null;
    boolean boolean13 = v310_0.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v320_9, capabilityType12);
    org.neo4j.kernel.impl.store.format.RecordFormats[] recordFormatsArray14 = v320_9.compatibleVersionsForRollingUpgrade();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat15 = v320_9.relationshipTypeToken();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_1_0" + "'", str2,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat3);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat4);
    org.junit.Assert.assertNotNull(capabilityArray5);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat6);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat7);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat8);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat10);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat11);
    org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    org.junit.Assert.assertNotNull(recordFormatsArray14);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat15);
  }

  @Test
  public void test1405() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1405");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod(334L, 3L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 335L + "'", long2 == 335L);
  }

  @Test
  public void test1406() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1406");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord2 = propertyRecordFormat1.newRecord();
    long long3 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord2);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord6 = propertyRecordFormat5.newRecord();
    long long7 = propertyOneByteHeaderRecordFormat4.getNextRecordReference(propertyRecord6);
    long long8 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord6);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat9 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long10 = propertyOneByteHeaderRecordFormat9.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord11 = propertyOneByteHeaderRecordFormat9.newRecord();
    long long12 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord11);
    org.junit.Assert.assertNotNull(propertyRecord2);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord6);
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
    org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1125899906842623L + "'",
        long10 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord11);
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
  }

  @Test
  public void test1407() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1407");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.NodeRecordFormat nodeRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.NodeRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord2 = null;
    long long3 = nodeRecordFormat1.getNextRecordReference(nodeRecord2);
    int int4 = nodeRecordFormat1.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader5 = null;
    int int6 = nodeRecordFormat1.getRecordSize(storeHeader5);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord8 = null;
    long long9 = nodeRecordFormat7.getNextRecordReference(nodeRecord8);
    int int10 = nodeRecordFormat7.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader11 = null;
    int int12 = nodeRecordFormat7.getRecordSize(storeHeader11);
    int int15 = nodeRecordFormat7.getPageSize((int) '4', (int) (short) 1);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord16 = nodeRecordFormat7.newRecord();
    long long17 = nodeRecordFormat1.getNextRecordReference(nodeRecord16);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord18 = nodeRecordFormat1.newRecord();
    long long19 = nodeRecordFormat0.getNextRecordReference(nodeRecord18);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat20 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    int int21 = nodeRecordFormat20.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.NodeRecordFormat nodeRecordFormat22 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.NodeRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat23 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord24 = null;
    long long25 = nodeRecordFormat23.getNextRecordReference(nodeRecord24);
    int int26 = nodeRecordFormat23.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader27 = null;
    int int28 = nodeRecordFormat23.getRecordSize(storeHeader27);
    int int31 = nodeRecordFormat23.getPageSize((int) '4', (int) (short) 1);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord32 = nodeRecordFormat23.newRecord();
    int int33 = nodeRecordFormat22.rerdtlgForRE(nodeRecord32);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord34 = nodeRecordFormat22.newRecord();
    int int35 = nodeRecordFormat20.rerdtlgForRE(nodeRecord34);
    int int36 = nodeRecordFormat0.rerdtlgForRE(nodeRecord34);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    org.junit.Assert.assertTrue("'" + int6 + "' != '" + 16 + "'", int6 == 16);
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 16 + "'", int12 == 16);
    org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
    org.junit.Assert.assertNotNull(nodeRecord16);
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    org.junit.Assert.assertNotNull(nodeRecord18);
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
    org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
    org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    org.junit.Assert.assertTrue("'" + int28 + "' != '" + 16 + "'", int28 == 16);
    org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
    org.junit.Assert.assertNotNull(nodeRecord32);
    org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    org.junit.Assert.assertNotNull(nodeRecord34);
    org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
  }

  @Test
  public void test1408() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1408");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v310_0.relationship();
    java.lang.String str2 = v310_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat3 = v310_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat4 = v310_0.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat5 = v310_0.schema();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_1_0" + "'", str2,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat3);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat4);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat5);
  }

  @Test
  public void test1409() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1409");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord1 = null;
    org.neo4j.internal.id.IdSequence idSequence3 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext4 = null;
    propertyRecordFormat0.prepare(propertyRecord1, (int) (short) -1, idSequence3, cursorContext4);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord6 = propertyRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat8 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord9 = propertyRecordFormat8.newRecord();
    long long10 = propertyOneByteHeaderRecordFormat7.getNextRecordReference(propertyRecord9);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader11 = null;
    int int12 = propertyOneByteHeaderRecordFormat7.getRecordSize(storeHeader11);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat13 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long14 = propertyOneByteHeaderRecordFormat13.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat16 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord17 = propertyRecordFormat16.newRecord();
    long long18 = propertyOneByteHeaderRecordFormat15.getNextRecordReference(propertyRecord17);
    long long19 = propertyOneByteHeaderRecordFormat13.getNextRecordReference(propertyRecord17);
    org.neo4j.internal.id.IdSequence idSequence21 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext22 = null;
    propertyOneByteHeaderRecordFormat7.prepare(propertyRecord17, 64, idSequence21, cursorContext22);
    long long24 = propertyRecordFormat0.getNextRecordReference(propertyRecord17);
    boolean boolean26 = propertyRecordFormat0.equals((java.lang.Object) 100);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat27 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader28 = null;
    int int29 = propertyRecordFormat27.getRecordSize(storeHeader28);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl30 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats31 = highLimitFactoryDefaultImpl30.newInstance();
    boolean boolean32 = propertyRecordFormat27.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl30);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat34 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean35 = propertyRecordFormat27.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord36 = propertyRecordFormat27.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat37 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader38 = null;
    int int39 = propertyRecordFormat37.getRecordSize(storeHeader38);
    long long40 = propertyRecordFormat37.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat41 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat42 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord43 = propertyRecordFormat42.newRecord();
    long long44 = propertyOneByteHeaderRecordFormat41.getNextRecordReference(propertyRecord43);
    org.neo4j.internal.id.IdSequence idSequence46 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext47 = null;
    propertyRecordFormat37.prepare(propertyRecord43, 0, idSequence46, cursorContext47);
    org.neo4j.internal.id.IdSequence idSequence50 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext51 = null;
    propertyRecordFormat27.prepare(propertyRecord43, 0, idSequence50, cursorContext51);
    long long53 = propertyRecordFormat0.getNextRecordReference(propertyRecord43);
    long long54 = propertyRecordFormat0.getMaxId();
    org.junit.Assert.assertNotNull(propertyRecord6);
    org.junit.Assert.assertNotNull(propertyRecord9);
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 48 + "'", int12 == 48);
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1125899906842623L + "'",
        long14 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord17);
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    org.junit.Assert.assertTrue("'" + int29 + "' != '" + 48 + "'", int29 == 48);
    org.junit.Assert.assertNotNull(recordFormats31);
    org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    org.junit.Assert.assertNotNull(propertyRecord36);
    org.junit.Assert.assertTrue("'" + int39 + "' != '" + 48 + "'", int39 == 48);
    org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1125899906842623L + "'",
        long40 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord43);
    org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
    org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-1L) + "'", long53 == (-1L));
    org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1125899906842623L + "'",
        long54 == 1125899906842623L);
  }

  @Test
  public void test1410() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1410");
    }
    org.neo4j.io.pagecache.PageCursor pageCursor1 = null;
    try {
      io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.enoForPa((-98L),
          pageCursor1);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test1411() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1411");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    long long3 = recordFormatDynamicRecordImpl0.getMaxId();
    int int6 = recordFormatDynamicRecordImpl0.getPageSize(64, 48);
    int int7 = recordFormatDynamicRecordImpl0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord8 = recordFormatDynamicRecordImpl0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl9 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean11 = recordFormatDynamicRecordImpl9.equals((java.lang.Object) 100.0f);
    long long12 = recordFormatDynamicRecordImpl9.getMaxId();
    int int15 = recordFormatDynamicRecordImpl9.getPageSize(64, 48);
    int int18 = recordFormatDynamicRecordImpl9.getPageSize(10, (int) (short) 100);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord19 = recordFormatDynamicRecordImpl9.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl20 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean22 = recordFormatDynamicRecordImpl20.equals((java.lang.Object) 100.0f);
    int int25 = recordFormatDynamicRecordImpl20.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord26 = recordFormatDynamicRecordImpl20.newRecord();
    int int29 = recordFormatDynamicRecordImpl20.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord30 = recordFormatDynamicRecordImpl20.newRecord();
    org.neo4j.internal.id.IdSequence idSequence32 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext33 = null;
    recordFormatDynamicRecordImpl9.prepare(dynamicRecord30, 24, idSequence32, cursorContext33);
    org.neo4j.io.pagecache.PageCursor pageCursor35 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad36 = null;
    try {
      recordFormatDynamicRecordImpl0.read(dynamicRecord30, pageCursor35, recordLoad36, 16, 0);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1125899906842623L + "'",
        long3 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int6 + "' != '" + 48 + "'", int6 == 48);
    org.junit.Assert.assertTrue("'" + int7 + "' != '" + 12 + "'", int7 == 12);
    org.junit.Assert.assertNotNull(dynamicRecord8);
    org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1125899906842623L + "'",
        long12 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int15 + "' != '" + 48 + "'", int15 == 48);
    org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    org.junit.Assert.assertNotNull(dynamicRecord19);
    org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    org.junit.Assert.assertTrue("'" + int25 + "' != '" + 16 + "'", int25 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord26);
    org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord30);
  }

  @Test
  public void test1412() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1412");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats1 = highLimitFactoryDefaultImpl0.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats2 = highLimitFactoryDefaultImpl0.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats3 = highLimitFactoryDefaultImpl0.newInstance();
    java.lang.String str4 = highLimitFactoryDefaultImpl0.getName();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats5 = highLimitFactoryDefaultImpl0.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats6 = highLimitFactoryDefaultImpl0.newInstance();
    org.junit.Assert.assertNotNull(recordFormats1);
    org.junit.Assert.assertNotNull(recordFormats2);
    org.junit.Assert.assertNotNull(recordFormats3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "high_limitV4_0_0" + "'", str4,
        "high_limitV4_0_0");
    org.junit.Assert.assertNotNull(recordFormats5);
    org.junit.Assert.assertNotNull(recordFormats6);
  }

  @Test
  public void test1413() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1413");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v310_0.relationship();
    java.lang.String str2 = v310_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat3 = v310_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat4 = v310_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat5 = v310_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat6 = v310_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat7 = v310_0.propertyKeyToken();
    java.lang.String str8 = v310_0.storeVersion();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_1_0" + "'", str2,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat3);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat4);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat5);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat6);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat7);
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "vE.H.2" + "'", str8, "vE.H.2");
  }

  @Test
  public void test1414() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1414");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.storageengine.api.format.Capability capability1 = null;
    boolean boolean2 = v310_0.hasCapability(capability1);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat3 = v310_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat4 = v310_0.relationshipTypeToken();
    java.lang.String str5 = v310_0.toString();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily6 = v310_0.getFormatFamily();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat3);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "RecordFormat:V310[vE.H.2]" + "'", str5,
        "RecordFormat:V310[vE.H.2]");
    org.junit.Assert.assertTrue(
        "'" + formatFamily6 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily6.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
  }

  @Test
  public void test1415() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1415");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = recordFormatDynamicRecordImpl0.newRecord();
    int int9 = recordFormatDynamicRecordImpl0.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord10 = recordFormatDynamicRecordImpl0.newRecord();
    long long11 = recordFormatDynamicRecordImpl0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl12 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean14 = recordFormatDynamicRecordImpl12.equals((java.lang.Object) 100.0f);
    int int17 = recordFormatDynamicRecordImpl12.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord18 = recordFormatDynamicRecordImpl12.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl19 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean21 = recordFormatDynamicRecordImpl19.equals((java.lang.Object) 100.0f);
    int int24 = recordFormatDynamicRecordImpl19.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord25 = recordFormatDynamicRecordImpl19.newRecord();
    long long26 = recordFormatDynamicRecordImpl12.getNextRecordReference(dynamicRecord25);
    org.neo4j.internal.id.IdSequence idSequence28 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext29 = null;
    recordFormatDynamicRecordImpl0.prepare(dynamicRecord25, 128, idSequence28, cursorContext29);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord31 = recordFormatDynamicRecordImpl0.newRecord();
    int int34 = recordFormatDynamicRecordImpl0.getPageSize(24, 4);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl35 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean37 = recordFormatDynamicRecordImpl35.equals((java.lang.Object) 100.0f);
    int int40 = recordFormatDynamicRecordImpl35.getPageSize(16, (-1));
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl41 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean43 = recordFormatDynamicRecordImpl41.equals((java.lang.Object) 100.0f);
    int int46 = recordFormatDynamicRecordImpl41.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord47 = recordFormatDynamicRecordImpl41.newRecord();
    int int50 = recordFormatDynamicRecordImpl41.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord51 = recordFormatDynamicRecordImpl41.newRecord();
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord52 = recordFormatDynamicRecordImpl41.newRecord();
    org.neo4j.internal.id.IdSequence idSequence54 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext55 = null;
    recordFormatDynamicRecordImpl35.prepare(dynamicRecord52, 10, idSequence54, cursorContext55);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord57 = recordFormatDynamicRecordImpl35.newRecord();
    org.neo4j.io.pagecache.PageCursor pageCursor58 = null;
    try {
      recordFormatDynamicRecordImpl0.write(dynamicRecord57, pageCursor58, 52, 24);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord6);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord10);
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1125899906842623L + "'",
        long11 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    org.junit.Assert.assertTrue("'" + int17 + "' != '" + 16 + "'", int17 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord18);
    org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    org.junit.Assert.assertTrue("'" + int24 + "' != '" + 16 + "'", int24 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord25);
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
    org.junit.Assert.assertNotNull(dynamicRecord31);
    org.junit.Assert.assertTrue("'" + int34 + "' != '" + 24 + "'", int34 == 24);
    org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    org.junit.Assert.assertTrue("'" + int40 + "' != '" + 16 + "'", int40 == 16);
    org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    org.junit.Assert.assertTrue("'" + int46 + "' != '" + 16 + "'", int46 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord47);
    org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord51);
    org.junit.Assert.assertNotNull(dynamicRecord52);
    org.junit.Assert.assertNotNull(dynamicRecord57);
  }

  @Test
  public void test1416() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1416");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v310_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat2 = v310_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat3 = v310_0.propertyKeyToken();
    java.lang.String str4 = v310_0.toString();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat5 = v310_0.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat6 = v310_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat7 = v310_0.property();
    java.lang.String str8 = v310_0.storeVersion();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RecordFormat:V310[vE.H.2]" + "'", str4,
        "RecordFormat:V310[vE.H.2]");
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat5);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat6);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat7);
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "vE.H.2" + "'", str8, "vE.H.2");
  }

  @Test
  public void test1417() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1417");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat1 = v300_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat2 = v300_0.relationshipTypeToken();
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat1);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat2);
  }

  @Test
  public void test1418() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1418");
    }
    org.neo4j.internal.batchimport.AdditionalInitialIds additionalInitialIds0 = null;
    org.neo4j.internal.batchimport.input.Collector collector1 = null;
    org.neo4j.internal.batchimport.Configuration configuration2 = null;
    org.neo4j.configuration.Config config3 = null;
    org.neo4j.io.layout.DatabaseLayout databaseLayout4 = null;
    org.neo4j.internal.batchimport.staging.ExecutionMonitor executionMonitor5 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.internal.batchimport.IndexImporterFactory indexImporterFactory7 = null;
    org.neo4j.scheduler.JobScheduler jobScheduler8 = null;
    org.neo4j.storageengine.api.LogFilesInitializer logFilesInitializer9 = null;
    org.neo4j.logging.internal.LogService logService10 = null;
    org.neo4j.memory.MemoryTracker memoryTracker11 = null;
    org.neo4j.internal.batchimport.ImportLogic.Monitor monitor12 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer13 = null;
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_14 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.storageengine.api.format.Capability capability15 = null;
    boolean boolean16 = v310_14.hasCapability(capability15);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat17 = v310_14.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat18 = v310_14.relationshipTypeToken();
    java.lang.String str19 = v310_14.toString();
    try {
      io.github.onograph.internal.batchimport.EnterpriseBatchImporter enterpriseBatchImporter20 = new io.github.onograph.internal.batchimport.EnterpriseBatchImporter(
          additionalInitialIds0, collector1, configuration2, config3, databaseLayout4,
          executionMonitor5, fileSystemAbstraction6, indexImporterFactory7, jobScheduler8,
          logFilesInitializer9, logService10, memoryTracker11, monitor12, pageCacheTracer13,
          (org.neo4j.kernel.impl.store.format.RecordFormats) v310_14);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat17);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat18);
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "RecordFormat:V310[vE.H.2]" + "'", str19,
        "RecordFormat:V310[vE.H.2]");
  }

  @Test
  public void test1419() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1419");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod(119L, 0L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 119L + "'", long2 == 119L);
  }

  @Test
  public void test1420() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1420");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat1 = v306_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat2 = v306_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat3 = v306_0.property();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily4 = v306_0.getFormatFamily();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat5 = v306_0.node();
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat1);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat2);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat3);
    org.junit.Assert.assertTrue(
        "'" + formatFamily4 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily4.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat5);
  }

  @Test
  public void test1421() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1421");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    java.lang.String str1 = v306_0.storeVersion();
    org.neo4j.storageengine.api.format.Capability capability2 = null;
    boolean boolean3 = v306_0.hasCapability(capability2);
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily4 = v306_0.getFormatFamily();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat5 = v306_0.schema();
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "vE.H.0b" + "'", str1, "vE.H.0b");
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue(
        "'" + formatFamily4 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily4.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat5);
  }

  @Test
  public void test1422() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1422");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = recordFormatDynamicRecordImpl0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl7 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean9 = recordFormatDynamicRecordImpl7.equals((java.lang.Object) 100.0f);
    int int12 = recordFormatDynamicRecordImpl7.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord13 = recordFormatDynamicRecordImpl7.newRecord();
    long long14 = recordFormatDynamicRecordImpl0.getNextRecordReference(dynamicRecord13);
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_15 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat16 = v320_15.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat17 = v320_15.relationshipGroup();
    boolean boolean18 = recordFormatDynamicRecordImpl0.equals(
        (java.lang.Object) relationshipGroupRecordRecordFormat17);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl19 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean21 = recordFormatDynamicRecordImpl19.equals((java.lang.Object) 100.0f);
    int int24 = recordFormatDynamicRecordImpl19.getPageSize(16, (-1));
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl25 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean27 = recordFormatDynamicRecordImpl25.equals((java.lang.Object) 100.0f);
    int int30 = recordFormatDynamicRecordImpl25.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord31 = recordFormatDynamicRecordImpl25.newRecord();
    int int34 = recordFormatDynamicRecordImpl25.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord35 = recordFormatDynamicRecordImpl25.newRecord();
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord36 = recordFormatDynamicRecordImpl25.newRecord();
    org.neo4j.internal.id.IdSequence idSequence38 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext39 = null;
    recordFormatDynamicRecordImpl19.prepare(dynamicRecord36, 10, idSequence38, cursorContext39);
    org.neo4j.io.pagecache.PageCursor pageCursor41 = null;
    try {
      recordFormatDynamicRecordImpl0.write(dynamicRecord36, pageCursor41, (int) 'a', 1);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord6);
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 16 + "'", int12 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord13);
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat16);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat17);
    org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    org.junit.Assert.assertTrue("'" + int24 + "' != '" + 16 + "'", int24 == 16);
    org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    org.junit.Assert.assertTrue("'" + int30 + "' != '" + 16 + "'", int30 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord31);
    org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord35);
    org.junit.Assert.assertNotNull(dynamicRecord36);
  }

  @Test
  public void test1423() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1423");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod(237L, 154L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 255L + "'", long2 == 255L);
  }

  @Test
  public void test1424() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1424");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod(239L,
        (long) (short) 100);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 239L + "'", long2 == 239L);
  }

  @Test
  public void test1425() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1425");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats1 = highLimitFactoryDefaultImpl0.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats2 = highLimitFactoryDefaultImpl0.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats3 = highLimitFactoryDefaultImpl0.newInstance();
    java.lang.String str4 = highLimitFactoryDefaultImpl0.getName();
    java.lang.String str5 = highLimitFactoryDefaultImpl0.getName();
    org.junit.Assert.assertNotNull(recordFormats1);
    org.junit.Assert.assertNotNull(recordFormats2);
    org.junit.Assert.assertNotNull(recordFormats3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "high_limitV4_0_0" + "'", str4,
        "high_limitV4_0_0");
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "high_limitV4_0_0" + "'", str5,
        "high_limitV4_0_0");
  }

  @Test
  public void test1426() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1426");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat6 = v300_1.schema();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat7 = v300_1.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat8 = v300_1.property();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat6);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat7);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat8);
  }

  @Test
  public void test1427() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1427");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat1 = v320_0.property();
    int int2 = v320_0.generation();
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat1);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
  }

  @Test
  public void test1428() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1428");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        (int) (short) 10);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord2 = relationshipGroupHighLimitRecordFormat1.newRecord();
    org.neo4j.io.pagecache.PageCursor pageCursor3 = null;
    try {
      boolean boolean4 = relationshipGroupHighLimitRecordFormat1.isInUse(pageCursor3);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(relationshipGroupRecord2);
  }

  @Test
  public void test1429() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1429");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = recordFormatDynamicRecordImpl0.newRecord();
    int int9 = recordFormatDynamicRecordImpl0.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord10 = recordFormatDynamicRecordImpl0.newRecord();
    int int13 = recordFormatDynamicRecordImpl0.getPageSize((int) '4', (int) (short) 1);
    int int16 = recordFormatDynamicRecordImpl0.getPageSize((int) (short) 10, 2);
    int int19 = recordFormatDynamicRecordImpl0.getPageSize(0, (int) '#');
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord20 = null;
    org.neo4j.io.pagecache.PageCursor pageCursor21 = null;
    try {
      recordFormatDynamicRecordImpl0.write(dynamicRecord20, pageCursor21, 24, 35);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord6);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord10);
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
    org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
    org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
  }

  @Test
  public void test1430() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1430");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    long long1 = recordFormatDynamicRecordImpl0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl2 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean4 = recordFormatDynamicRecordImpl2.equals((java.lang.Object) 100.0f);
    int int7 = recordFormatDynamicRecordImpl2.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord8 = recordFormatDynamicRecordImpl2.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl9 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean11 = recordFormatDynamicRecordImpl9.equals((java.lang.Object) 100.0f);
    int int14 = recordFormatDynamicRecordImpl9.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord15 = recordFormatDynamicRecordImpl9.newRecord();
    long long16 = recordFormatDynamicRecordImpl2.getNextRecordReference(dynamicRecord15);
    int int17 = recordFormatDynamicRecordImpl2.getRecordHeaderSize();
    int int18 = recordFormatDynamicRecordImpl2.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord19 = recordFormatDynamicRecordImpl2.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl20 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean22 = recordFormatDynamicRecordImpl20.equals((java.lang.Object) 100.0f);
    int int25 = recordFormatDynamicRecordImpl20.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord26 = recordFormatDynamicRecordImpl20.newRecord();
    int int29 = recordFormatDynamicRecordImpl20.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord30 = recordFormatDynamicRecordImpl20.newRecord();
    long long31 = recordFormatDynamicRecordImpl20.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl32 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean34 = recordFormatDynamicRecordImpl32.equals((java.lang.Object) 100.0f);
    int int37 = recordFormatDynamicRecordImpl32.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord38 = recordFormatDynamicRecordImpl32.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl39 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean41 = recordFormatDynamicRecordImpl39.equals((java.lang.Object) 100.0f);
    int int44 = recordFormatDynamicRecordImpl39.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord45 = recordFormatDynamicRecordImpl39.newRecord();
    long long46 = recordFormatDynamicRecordImpl32.getNextRecordReference(dynamicRecord45);
    org.neo4j.internal.id.IdSequence idSequence48 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext49 = null;
    recordFormatDynamicRecordImpl20.prepare(dynamicRecord45, 128, idSequence48, cursorContext49);
    org.neo4j.internal.id.IdSequence idSequence52 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext53 = null;
    recordFormatDynamicRecordImpl2.prepare(dynamicRecord45, 48, idSequence52, cursorContext53);
    org.neo4j.internal.id.IdSequence idSequence56 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext57 = null;
    recordFormatDynamicRecordImpl0.prepare(dynamicRecord45, (int) (short) 100, idSequence56,
        cursorContext57);
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord8);
    org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    org.junit.Assert.assertTrue("'" + int14 + "' != '" + 16 + "'", int14 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord15);
    org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
    org.junit.Assert.assertTrue("'" + int18 + "' != '" + 12 + "'", int18 == 12);
    org.junit.Assert.assertNotNull(dynamicRecord19);
    org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    org.junit.Assert.assertTrue("'" + int25 + "' != '" + 16 + "'", int25 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord26);
    org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord30);
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1125899906842623L + "'",
        long31 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    org.junit.Assert.assertTrue("'" + int37 + "' != '" + 16 + "'", int37 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord38);
    org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    org.junit.Assert.assertTrue("'" + int44 + "' != '" + 16 + "'", int44 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord45);
    org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
  }

  @Test
  public void test1431() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1431");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v300_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat2 = v300_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat3 = v300_0.relationship();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily4 = v300_0.getFormatFamily();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat2);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat3);
    org.junit.Assert.assertTrue(
        "'" + formatFamily4 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily4.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
  }

  @Test
  public void test1432() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1432");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.FactoryHighLimitDefaultImpl factoryHighLimitDefaultImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.FactoryHighLimitDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats1 = factoryHighLimitDefaultImpl0.newInstance();
    java.lang.String str2 = factoryHighLimitDefaultImpl0.getName();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats3 = factoryHighLimitDefaultImpl0.newInstance();
    java.lang.String str4 = factoryHighLimitDefaultImpl0.getName();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats5 = factoryHighLimitDefaultImpl0.newInstance();
    org.junit.Assert.assertNotNull(recordFormats1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_0_6" + "'", str2,
        "high_limitV3_0_6");
    org.junit.Assert.assertNotNull(recordFormats3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "high_limitV3_0_6" + "'", str4,
        "high_limitV3_0_6");
    org.junit.Assert.assertNotNull(recordFormats5);
  }

  @Test
  public void test1433() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1433");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.NodeRecordFormat nodeRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.NodeRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord2 = null;
    long long3 = nodeRecordFormat1.getNextRecordReference(nodeRecord2);
    int int4 = nodeRecordFormat1.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader5 = null;
    int int6 = nodeRecordFormat1.getRecordSize(storeHeader5);
    int int9 = nodeRecordFormat1.getPageSize((int) '4', (int) (short) 1);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord10 = nodeRecordFormat1.newRecord();
    int int11 = nodeRecordFormat0.rerdtlgForRE(nodeRecord10);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader12 = null;
    int int13 = nodeRecordFormat0.getRecordSize(storeHeader12);
    int int16 = nodeRecordFormat0.getPageSize((int) (short) 0, 1);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    org.junit.Assert.assertTrue("'" + int6 + "' != '" + 16 + "'", int6 == 16);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
    org.junit.Assert.assertNotNull(nodeRecord10);
    org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
    org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
  }

  @Test
  public void test1434() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1434");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily1 = v300_0.getFormatFamily();
    int int2 = v300_0.generation();
    org.junit.Assert.assertTrue(
        "'" + formatFamily1 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily1.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
  }

  @Test
  public void test1435() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1435");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat();
    long long1 = nodeHighLimitRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord2 = nodeHighLimitRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 1);
    int int7 = nodeHighLimitRecordFormat4.getPageSize(48, (int) '#');
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord8 = nodeHighLimitRecordFormat4.newRecord();
    int int9 = nodeHighLimitRecordFormat0.rerdtlgForRE(nodeRecord8);
    int int10 = nodeHighLimitRecordFormat0.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat11 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord12 = null;
    long long13 = nodeRecordFormat11.getNextRecordReference(nodeRecord12);
    int int14 = nodeRecordFormat11.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_15 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_16 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat17 = v300_16.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat18 = v300_16.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType19 = null;
    boolean boolean20 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_15,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_16, capabilityType19);
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_21 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat22 = v306_21.node();
    org.neo4j.storageengine.api.format.Capability capability23 = null;
    boolean boolean24 = v306_21.hasCapability(capability23);
    org.neo4j.storageengine.api.format.CapabilityType capabilityType25 = null;
    boolean boolean26 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_16,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_21, capabilityType25);
    boolean boolean27 = nodeRecordFormat11.equals((java.lang.Object) v306_21);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord28 = nodeRecordFormat11.newRecord();
    org.neo4j.io.pagecache.PageCursor pageCursor29 = null;
    try {
      nodeHighLimitRecordFormat0.write(nodeRecord28, pageCursor29, (int) 'a', (int) '#');
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertNotNull(nodeRecord2);
    org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
    org.junit.Assert.assertNotNull(nodeRecord8);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
    org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat17);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat18);
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat22);
    org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    org.junit.Assert.assertNotNull(nodeRecord28);
  }

  @Test
  public void test1436() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1436");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat1 = v306_0.node();
    org.neo4j.storageengine.api.format.Capability capability2 = null;
    boolean boolean3 = v306_0.hasCapability(capability2);
    org.neo4j.storageengine.api.format.Capability capability4 = null;
    boolean boolean5 = v306_0.hasCapability(capability4);
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats6 = io.github.onograph.kernel.srv.store.format.highlimit.v340.V340.RCD_FMXS;
    org.neo4j.kernel.impl.store.format.RecordFormats[] recordFormatsArray7 = recordFormats6.compatibleVersionsForRollingUpgrade();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType8 = null;
    boolean boolean9 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0, recordFormats6, capabilityType8);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_10 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat11 = v300_10.labelToken();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType12 = null;
    boolean boolean13 = v306_0.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_10, capabilityType12);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat14 = v306_0.labelToken();
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat1);
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    org.junit.Assert.assertNotNull(recordFormats6);
    org.junit.Assert.assertNotNull(recordFormatsArray7);
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat11);
    org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat14);
  }

  @Test
  public void test1437() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1437");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long2 = relationshipGroupHighLimitRecordFormat1.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord4 = null;
    long long5 = relationshipGroupHighLimitRecordFormat3.getNextRecordReference(
        relationshipGroupRecord4);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord6 = relationshipGroupHighLimitRecordFormat3.newRecord();
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    relationshipGroupHighLimitRecordFormat1.prepare(relationshipGroupRecord6, (int) (byte) 1,
        idSequence8, cursorContext9);
    long long11 = relationshipGroupHighLimitRecordFormat0.getNextRecordReference(
        relationshipGroupRecord6);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long13 = relationshipGroupHighLimitRecordFormat12.getMaxId();
    long long14 = relationshipGroupHighLimitRecordFormat12.getMaxId();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord15 = relationshipGroupHighLimitRecordFormat12.newRecord();
    org.neo4j.internal.id.IdSequence idSequence17 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext18 = null;
    relationshipGroupHighLimitRecordFormat0.prepare(relationshipGroupRecord15, 3, idSequence17,
        cursorContext18);
    int int20 = relationshipGroupHighLimitRecordFormat0.getRecordHeaderSize();
    org.neo4j.io.pagecache.PageCursor pageCursor21 = null;
    try {
      boolean boolean22 = relationshipGroupHighLimitRecordFormat0.isInUse(pageCursor21);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1125899906842623L + "'",
        long2 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord6);
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1125899906842623L + "'",
        long13 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1125899906842623L + "'",
        long14 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipGroupRecord15);
    org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
  }

  @Test
  public void test1438() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1438");
    }
    org.neo4j.internal.batchimport.AdditionalInitialIds additionalInitialIds0 = null;
    org.neo4j.internal.batchimport.input.Collector collector1 = null;
    org.neo4j.internal.batchimport.Configuration configuration2 = null;
    org.neo4j.configuration.Config config3 = null;
    org.neo4j.io.layout.DatabaseLayout databaseLayout4 = null;
    org.neo4j.internal.batchimport.staging.ExecutionMonitor executionMonitor5 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.internal.batchimport.IndexImporterFactory indexImporterFactory7 = null;
    org.neo4j.scheduler.JobScheduler jobScheduler8 = null;
    org.neo4j.storageengine.api.LogFilesInitializer logFilesInitializer9 = null;
    org.neo4j.logging.internal.LogService logService10 = null;
    org.neo4j.memory.MemoryTracker memoryTracker11 = null;
    org.neo4j.internal.batchimport.ImportLogic.Monitor monitor12 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer13 = null;
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_14 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat15 = v310_14.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat16 = v310_14.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat17 = v310_14.labelToken();
    java.lang.String str18 = v310_14.name();
    try {
      io.github.onograph.internal.batchimport.EnterpriseBatchImporter enterpriseBatchImporter19 = new io.github.onograph.internal.batchimport.EnterpriseBatchImporter(
          additionalInitialIds0, collector1, configuration2, config3, databaseLayout4,
          executionMonitor5, fileSystemAbstraction6, indexImporterFactory7, jobScheduler8,
          logFilesInitializer9, logService10, memoryTracker11, monitor12, pageCacheTracer13,
          (org.neo4j.kernel.impl.store.format.RecordFormats) v310_14);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat15);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat16);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat17);
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "high_limitV3_1_0" + "'", str18,
        "high_limitV3_1_0");
  }

  @Test
  public void test1439() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1439");
    }
    int int1 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.leg((long) 0);
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 3 + "'", int1 == 3);
  }

  @Test
  public void test1440() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1440");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_6 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat7 = v306_6.node();
    org.neo4j.storageengine.api.format.Capability capability8 = null;
    boolean boolean9 = v306_6.hasCapability(capability8);
    org.neo4j.storageengine.api.format.CapabilityType capabilityType10 = null;
    boolean boolean11 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_6, capabilityType10);
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily12 = v300_1.getFormatFamily();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat13 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    long long14 = relationshipRecordFormat13.getMaxId();
    boolean boolean15 = v300_1.equals((java.lang.Object) long14);
    java.lang.String str16 = v300_1.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat17 = v300_1.relationship();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat7);
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    org.junit.Assert.assertTrue(
        "'" + formatFamily12 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily12.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1125899906842623L + "'",
        long14 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "high_limitV3_0_0" + "'", str16,
        "high_limitV3_0_0");
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat17);
  }

  @Test
  public void test1441() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1441");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        3);
  }

  @Test
  public void test1442() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1442");
    }
    org.neo4j.io.pagecache.PageCursor pageCursor1 = null;
    try {
      io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.enoForPa(54L,
          pageCursor1);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test1443() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1443");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    java.lang.String str1 = v300_0.name();
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "high_limitV3_0_0" + "'", str1,
        "high_limitV3_0_0");
  }

  @Test
  public void test1444() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1444");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) ' ');
    io.github.onograph.kernel.srv.store.format.highlimit.v340.NodeRecordFormat nodeRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.NodeRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord4 = null;
    long long5 = nodeRecordFormat3.getNextRecordReference(nodeRecord4);
    int int6 = nodeRecordFormat3.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader7 = null;
    int int8 = nodeRecordFormat3.getRecordSize(storeHeader7);
    int int11 = nodeRecordFormat3.getPageSize((int) '4', (int) (short) 1);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord12 = nodeRecordFormat3.newRecord();
    int int13 = nodeRecordFormat2.rerdtlgForRE(nodeRecord12);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord14 = nodeRecordFormat2.newRecord();
    org.neo4j.io.pagecache.PageCursor pageCursor15 = null;
    try {
      nodeHighLimitRecordFormat1.write(nodeRecord14, pageCursor15, 50, (-1));
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
    org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    org.junit.Assert.assertTrue("'" + int8 + "' != '" + 16 + "'", int8 == 16);
    org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
    org.junit.Assert.assertNotNull(nodeRecord12);
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    org.junit.Assert.assertNotNull(nodeRecord14);
  }

  @Test
  public void test1445() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1445");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.FactoryHighLimitDefaultImpl factoryHighLimitDefaultImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.FactoryHighLimitDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats1 = factoryHighLimitDefaultImpl0.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats2 = factoryHighLimitDefaultImpl0.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats3 = factoryHighLimitDefaultImpl0.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats4 = factoryHighLimitDefaultImpl0.newInstance();
    java.lang.String str5 = factoryHighLimitDefaultImpl0.getName();
    org.junit.Assert.assertNotNull(recordFormats1);
    org.junit.Assert.assertNotNull(recordFormats2);
    org.junit.Assert.assertNotNull(recordFormats3);
    org.junit.Assert.assertNotNull(recordFormats4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "high_limitV3_1_0" + "'", str5,
        "high_limitV3_1_0");
  }

  @Test
  public void test1446() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1446");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord2 = propertyRecordFormat1.newRecord();
    long long3 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord2);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord6 = propertyRecordFormat5.newRecord();
    long long7 = propertyOneByteHeaderRecordFormat4.getNextRecordReference(propertyRecord6);
    long long8 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord6);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat9 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long10 = propertyOneByteHeaderRecordFormat9.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord11 = propertyOneByteHeaderRecordFormat9.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long13 = propertyOneByteHeaderRecordFormat12.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord14 = propertyOneByteHeaderRecordFormat12.newRecord();
    long long15 = propertyOneByteHeaderRecordFormat9.getNextRecordReference(propertyRecord14);
    org.neo4j.internal.id.IdSequence idSequence17 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext18 = null;
    propertyOneByteHeaderRecordFormat0.prepare(propertyRecord14, (int) (byte) -1, idSequence17,
        cursorContext18);
    int int20 = propertyOneByteHeaderRecordFormat0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord21 = propertyOneByteHeaderRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat22 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader23 = null;
    int int24 = propertyRecordFormat22.getRecordSize(storeHeader23);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader25 = null;
    int int26 = propertyRecordFormat22.getRecordSize(storeHeader25);
    int int27 = propertyRecordFormat22.getRecordHeaderSize();
    long long28 = propertyRecordFormat22.getMaxId();
    long long29 = propertyRecordFormat22.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat30 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader31 = null;
    int int32 = propertyRecordFormat30.getRecordSize(storeHeader31);
    long long33 = propertyRecordFormat30.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat34 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat35 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord36 = propertyRecordFormat35.newRecord();
    long long37 = propertyOneByteHeaderRecordFormat34.getNextRecordReference(propertyRecord36);
    org.neo4j.internal.id.IdSequence idSequence39 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext40 = null;
    propertyRecordFormat30.prepare(propertyRecord36, 0, idSequence39, cursorContext40);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord42 = propertyRecordFormat30.newRecord();
    long long43 = propertyRecordFormat22.getNextRecordReference(propertyRecord42);
    org.neo4j.io.pagecache.PageCursor pageCursor44 = null;
    try {
      propertyOneByteHeaderRecordFormat0.write(propertyRecord42, pageCursor44, (int) '#', 4);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(propertyRecord2);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord6);
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
    org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1125899906842623L + "'",
        long10 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord11);
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1125899906842623L + "'",
        long13 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord14);
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
    org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    org.junit.Assert.assertNotNull(propertyRecord21);
    org.junit.Assert.assertTrue("'" + int24 + "' != '" + 48 + "'", int24 == 48);
    org.junit.Assert.assertTrue("'" + int26 + "' != '" + 48 + "'", int26 == 48);
    org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1125899906842623L + "'",
        long28 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1125899906842623L + "'",
        long29 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int32 + "' != '" + 48 + "'", int32 == 48);
    org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1125899906842623L + "'",
        long33 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord36);
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord42);
    org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
  }

  @Test
  public void test1447() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1447");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = recordFormatDynamicRecordImpl0.newRecord();
    int int9 = recordFormatDynamicRecordImpl0.getPageSize(48, 35);
    int int12 = recordFormatDynamicRecordImpl0.getPageSize(4, 8);
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord6);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
  }

  @Test
  public void test1448() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1448");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        34);
  }

  @Test
  public void test1449() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1449");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    long long3 = recordFormatDynamicRecordImpl0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl4 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean6 = recordFormatDynamicRecordImpl4.equals((java.lang.Object) 100.0f);
    int int9 = recordFormatDynamicRecordImpl4.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord10 = null;
    org.neo4j.internal.id.IdSequence idSequence12 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext13 = null;
    recordFormatDynamicRecordImpl4.prepare(dynamicRecord10, (int) (byte) -1, idSequence12,
        cursorContext13);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl15 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean17 = recordFormatDynamicRecordImpl15.equals((java.lang.Object) 100.0f);
    int int20 = recordFormatDynamicRecordImpl15.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord21 = recordFormatDynamicRecordImpl15.newRecord();
    long long22 = recordFormatDynamicRecordImpl4.getNextRecordReference(dynamicRecord21);
    org.neo4j.internal.id.IdSequence idSequence24 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext25 = null;
    recordFormatDynamicRecordImpl0.prepare(dynamicRecord21, (int) (short) 10, idSequence24,
        cursorContext25);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl27 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean29 = recordFormatDynamicRecordImpl27.equals((java.lang.Object) 100.0f);
    long long30 = recordFormatDynamicRecordImpl27.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl31 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean33 = recordFormatDynamicRecordImpl31.equals((java.lang.Object) 100.0f);
    int int36 = recordFormatDynamicRecordImpl31.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord37 = null;
    org.neo4j.internal.id.IdSequence idSequence39 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext40 = null;
    recordFormatDynamicRecordImpl31.prepare(dynamicRecord37, (int) (byte) -1, idSequence39,
        cursorContext40);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl42 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean44 = recordFormatDynamicRecordImpl42.equals((java.lang.Object) 100.0f);
    int int47 = recordFormatDynamicRecordImpl42.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord48 = recordFormatDynamicRecordImpl42.newRecord();
    long long49 = recordFormatDynamicRecordImpl31.getNextRecordReference(dynamicRecord48);
    org.neo4j.internal.id.IdSequence idSequence51 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext52 = null;
    recordFormatDynamicRecordImpl27.prepare(dynamicRecord48, (int) (short) 10, idSequence51,
        cursorContext52);
    long long54 = recordFormatDynamicRecordImpl0.getNextRecordReference(dynamicRecord48);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl55 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean57 = recordFormatDynamicRecordImpl55.equals((java.lang.Object) 100.0f);
    int int60 = recordFormatDynamicRecordImpl55.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord61 = recordFormatDynamicRecordImpl55.newRecord();
    int int64 = recordFormatDynamicRecordImpl55.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord65 = recordFormatDynamicRecordImpl55.newRecord();
    long long66 = recordFormatDynamicRecordImpl55.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl67 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean69 = recordFormatDynamicRecordImpl67.equals((java.lang.Object) 100.0f);
    int int72 = recordFormatDynamicRecordImpl67.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord73 = recordFormatDynamicRecordImpl67.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl74 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean76 = recordFormatDynamicRecordImpl74.equals((java.lang.Object) 100.0f);
    int int79 = recordFormatDynamicRecordImpl74.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord80 = recordFormatDynamicRecordImpl74.newRecord();
    long long81 = recordFormatDynamicRecordImpl67.getNextRecordReference(dynamicRecord80);
    org.neo4j.internal.id.IdSequence idSequence83 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext84 = null;
    recordFormatDynamicRecordImpl55.prepare(dynamicRecord80, 128, idSequence83, cursorContext84);
    org.neo4j.internal.id.IdSequence idSequence87 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext88 = null;
    recordFormatDynamicRecordImpl0.prepare(dynamicRecord80, (int) (byte) 100, idSequence87,
        cursorContext88);
    org.neo4j.io.pagecache.PageCursor pageCursor90 = null;
    try {
      boolean boolean91 = recordFormatDynamicRecordImpl0.isInUse(pageCursor90);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1125899906842623L + "'",
        long3 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16 + "'", int9 == 16);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord21);
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1125899906842623L + "'",
        long30 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    org.junit.Assert.assertTrue("'" + int36 + "' != '" + 16 + "'", int36 == 16);
    org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    org.junit.Assert.assertTrue("'" + int47 + "' != '" + 16 + "'", int47 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord48);
    org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
    org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-1L) + "'", long54 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    org.junit.Assert.assertTrue("'" + int60 + "' != '" + 16 + "'", int60 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord61);
    org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord65);
    org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1125899906842623L + "'",
        long66 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    org.junit.Assert.assertTrue("'" + int72 + "' != '" + 16 + "'", int72 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord73);
    org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    org.junit.Assert.assertTrue("'" + int79 + "' != '" + 16 + "'", int79 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord80);
    org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-1L) + "'", long81 == (-1L));
  }

  @Test
  public void test1450() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1450");
    }
    io.github.onograph.internal.batchimport.EnterpriseBatchImporterFactory enterpriseBatchImporterFactory0 = new io.github.onograph.internal.batchimport.EnterpriseBatchImporterFactory();
    org.neo4j.io.layout.DatabaseLayout databaseLayout1 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction2 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer3 = null;
    org.neo4j.internal.batchimport.Configuration configuration4 = null;
    org.neo4j.logging.internal.LogService logService5 = null;
    org.neo4j.internal.batchimport.staging.ExecutionMonitor executionMonitor6 = null;
    org.neo4j.internal.batchimport.AdditionalInitialIds additionalInitialIds7 = null;
    org.neo4j.configuration.Config config8 = null;
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_9 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat10 = v306_9.node();
    org.neo4j.storageengine.api.format.Capability capability11 = null;
    boolean boolean12 = v306_9.hasCapability(capability11);
    org.neo4j.storageengine.api.format.Capability capability13 = null;
    boolean boolean14 = v306_9.hasCapability(capability13);
    org.neo4j.internal.batchimport.ImportLogic.Monitor monitor15 = null;
    org.neo4j.scheduler.JobScheduler jobScheduler16 = null;
    org.neo4j.internal.batchimport.input.Collector collector17 = null;
    org.neo4j.storageengine.api.LogFilesInitializer logFilesInitializer18 = null;
    org.neo4j.internal.batchimport.IndexImporterFactory indexImporterFactory19 = null;
    org.neo4j.memory.MemoryTracker memoryTracker20 = null;
    try {
      org.neo4j.internal.batchimport.BatchImporter batchImporter21 = enterpriseBatchImporterFactory0.instantiate(
          databaseLayout1, fileSystemAbstraction2, pageCacheTracer3, configuration4, logService5,
          executionMonitor6, additionalInitialIds7, config8,
          (org.neo4j.kernel.impl.store.format.RecordFormats) v306_9, monitor15, jobScheduler16,
          collector17, logFilesInitializer18, indexImporterFactory19, memoryTracker20);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat10);
    org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
  }

  @Test
  public void test1451() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1451");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) '4');
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord3 = relationshipRecordFormat2.newRecord();
    int int4 = relationshipRecordFormat2.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat6 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord7 = relationshipRecordFormat6.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord8 = relationshipRecordFormat6.newRecord();
    org.neo4j.internal.id.IdSequence idSequence10 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext11 = null;
    relationshipRecordFormat5.prepare(relationshipRecord8, 100, idSequence10, cursorContext11);
    long long13 = relationshipRecordFormat2.getNextRecordReference(relationshipRecord8);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat14 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord16 = relationshipRecordFormat15.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord17 = relationshipRecordFormat15.newRecord();
    org.neo4j.internal.id.IdSequence idSequence19 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext20 = null;
    relationshipRecordFormat14.prepare(relationshipRecord17, 100, idSequence19, cursorContext20);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat23 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord24 = relationshipHighLimitRecordFormat23.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat26 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord27 = relationshipHighLimitRecordFormat26.newRecord();
    org.neo4j.internal.id.IdSequence idSequence29 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext30 = null;
    relationshipHighLimitRecordFormat23.prepare(relationshipRecord27, (int) (short) 1, idSequence29,
        cursorContext30);
    org.neo4j.internal.id.IdSequence idSequence33 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext34 = null;
    relationshipRecordFormat14.prepare(relationshipRecord27, 24, idSequence33, cursorContext34);
    long long36 = relationshipRecordFormat2.getNextRecordReference(relationshipRecord27);
    org.neo4j.internal.id.IdSequence idSequence38 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext39 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord27, (int) (short) -1, idSequence38,
        cursorContext39);
    org.junit.Assert.assertNotNull(relationshipRecord3);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord7);
    org.junit.Assert.assertNotNull(relationshipRecord8);
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord16);
    org.junit.Assert.assertNotNull(relationshipRecord17);
    org.junit.Assert.assertNotNull(relationshipRecord24);
    org.junit.Assert.assertNotNull(relationshipRecord27);
    org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
  }

  @Test
  public void test1452() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1452");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord5 = relationshipRecordFormat4.newRecord();
    long long6 = relationshipHighLimitRecordFormat3.getNextRecordReference(relationshipRecord5);
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord5, (int) (byte) 10, idSequence8,
        cursorContext9);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat14 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord16 = relationshipRecordFormat15.newRecord();
    long long17 = relationshipHighLimitRecordFormat14.getNextRecordReference(relationshipRecord16);
    org.neo4j.internal.id.IdSequence idSequence19 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext20 = null;
    relationshipHighLimitRecordFormat12.prepare(relationshipRecord16, (int) (byte) 10, idSequence19,
        cursorContext20);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat23 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord24 = relationshipHighLimitRecordFormat23.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat26 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord27 = relationshipHighLimitRecordFormat26.newRecord();
    org.neo4j.internal.id.IdSequence idSequence29 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext30 = null;
    relationshipHighLimitRecordFormat23.prepare(relationshipRecord27, (int) (short) 1, idSequence29,
        cursorContext30);
    long long32 = relationshipHighLimitRecordFormat12.getNextRecordReference(relationshipRecord27);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord33 = relationshipHighLimitRecordFormat12.newRecord();
    org.neo4j.internal.id.IdSequence idSequence35 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext36 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord33, (int) ' ', idSequence35,
        cursorContext36);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat38 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat39 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord40 = relationshipRecordFormat39.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord41 = relationshipRecordFormat39.newRecord();
    org.neo4j.internal.id.IdSequence idSequence43 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext44 = null;
    relationshipRecordFormat38.prepare(relationshipRecord41, 100, idSequence43, cursorContext44);
    long long46 = relationshipRecordFormat38.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat47 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader48 = null;
    int int49 = relationshipRecordFormat47.getRecordSize(storeHeader48);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat51 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat52 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord53 = relationshipRecordFormat52.newRecord();
    long long54 = relationshipHighLimitRecordFormat51.getNextRecordReference(relationshipRecord53);
    org.neo4j.internal.id.IdSequence idSequence56 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext57 = null;
    relationshipRecordFormat47.prepare(relationshipRecord53, 3, idSequence56, cursorContext57);
    long long59 = relationshipRecordFormat38.getNextRecordReference(relationshipRecord53);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat61 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord62 = relationshipHighLimitRecordFormat61.newRecord();
    org.neo4j.internal.id.IdSequence idSequence64 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext65 = null;
    relationshipRecordFormat38.prepare(relationshipRecord62, (int) (short) 1, idSequence64,
        cursorContext65);
    org.neo4j.internal.id.IdSequence idSequence68 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext69 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord62, (int) (byte) 0, idSequence68,
        cursorContext69);
    org.junit.Assert.assertNotNull(relationshipRecord5);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord16);
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord24);
    org.junit.Assert.assertNotNull(relationshipRecord27);
    org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord33);
    org.junit.Assert.assertNotNull(relationshipRecord40);
    org.junit.Assert.assertNotNull(relationshipRecord41);
    org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1125899906842623L + "'",
        long46 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int49 + "' != '" + 32 + "'", int49 == 32);
    org.junit.Assert.assertNotNull(relationshipRecord53);
    org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-1L) + "'", long54 == (-1L));
    org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-1L) + "'", long59 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord62);
  }

  @Test
  public void test1453() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1453");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        24);
    int int2 = relationshipGroupHighLimitRecordFormat1.getRecordHeaderSize();
    int int5 = relationshipGroupHighLimitRecordFormat1.getPageSize(64, 2);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        0);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat8 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long9 = relationshipGroupHighLimitRecordFormat8.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat10 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord11 = null;
    long long12 = relationshipGroupHighLimitRecordFormat10.getNextRecordReference(
        relationshipGroupRecord11);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord13 = relationshipGroupHighLimitRecordFormat10.newRecord();
    org.neo4j.internal.id.IdSequence idSequence15 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext16 = null;
    relationshipGroupHighLimitRecordFormat8.prepare(relationshipGroupRecord13, (int) (byte) 1,
        idSequence15, cursorContext16);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat18 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long19 = relationshipGroupHighLimitRecordFormat18.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat20 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord21 = null;
    long long22 = relationshipGroupHighLimitRecordFormat20.getNextRecordReference(
        relationshipGroupRecord21);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord23 = relationshipGroupHighLimitRecordFormat20.newRecord();
    org.neo4j.internal.id.IdSequence idSequence25 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext26 = null;
    relationshipGroupHighLimitRecordFormat18.prepare(relationshipGroupRecord23, (int) (byte) 1,
        idSequence25, cursorContext26);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat28 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord29 = null;
    long long30 = relationshipGroupHighLimitRecordFormat28.getNextRecordReference(
        relationshipGroupRecord29);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord31 = relationshipGroupHighLimitRecordFormat28.newRecord();
    org.neo4j.internal.id.IdSequence idSequence33 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext34 = null;
    relationshipGroupHighLimitRecordFormat18.prepare(relationshipGroupRecord31, 0, idSequence33,
        cursorContext34);
    org.neo4j.internal.id.IdSequence idSequence37 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext38 = null;
    relationshipGroupHighLimitRecordFormat8.prepare(relationshipGroupRecord31, 128, idSequence37,
        cursorContext38);
    org.neo4j.internal.id.IdSequence idSequence41 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext42 = null;
    relationshipGroupHighLimitRecordFormat7.prepare(relationshipGroupRecord31, 16, idSequence41,
        cursorContext42);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord44 = relationshipGroupHighLimitRecordFormat7.newRecord();
    org.neo4j.internal.id.IdSequence idSequence46 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext47 = null;
    relationshipGroupHighLimitRecordFormat1.prepare(relationshipGroupRecord44, 128, idSequence46,
        cursorContext47);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 64 + "'", int5 == 64);
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1125899906842623L + "'",
        long9 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord13);
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1125899906842623L + "'",
        long19 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord23);
    org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord31);
    org.junit.Assert.assertNotNull(relationshipGroupRecord44);
  }

  @Test
  public void test1454() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1454");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord2 = relationshipHighLimitRecordFormat1.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord5 = relationshipHighLimitRecordFormat4.newRecord();
    org.neo4j.internal.id.IdSequence idSequence7 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext8 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord5, (int) (short) 1, idSequence7,
        cursorContext8);
    try {
      int int12 = relationshipHighLimitRecordFormat1.getPageSize((int) (short) 1, 0);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.ArithmeticException; message: / by zero");
    } catch (java.lang.ArithmeticException e) {
    }
    org.junit.Assert.assertNotNull(relationshipRecord2);
    org.junit.Assert.assertNotNull(relationshipRecord5);
  }

  @Test
  public void test1455() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1455");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat1 = v300_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat2 = v300_0.schema();
    java.lang.String str3 = v300_0.storeVersion();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat4 = v300_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat5 = v300_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat6 = v300_0.relationshipTypeToken();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat1);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat2);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "vE.H.0" + "'", str3, "vE.H.0");
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat4);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat5);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat6);
  }

  @Test
  public void test1456() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1456");
    }
    org.neo4j.internal.batchimport.AdditionalInitialIds additionalInitialIds0 = null;
    org.neo4j.internal.batchimport.input.Collector collector1 = null;
    org.neo4j.internal.batchimport.Configuration configuration2 = null;
    org.neo4j.configuration.Config config3 = null;
    org.neo4j.io.layout.DatabaseLayout databaseLayout4 = null;
    org.neo4j.internal.batchimport.staging.ExecutionMonitor executionMonitor5 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.internal.batchimport.IndexImporterFactory indexImporterFactory7 = null;
    org.neo4j.scheduler.JobScheduler jobScheduler8 = null;
    org.neo4j.storageengine.api.LogFilesInitializer logFilesInitializer9 = null;
    org.neo4j.logging.internal.LogService logService10 = null;
    org.neo4j.memory.MemoryTracker memoryTracker11 = null;
    org.neo4j.internal.batchimport.ImportLogic.Monitor monitor12 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer13 = null;
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl14 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats15 = highLimitFactoryDefaultImpl14.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats16 = highLimitFactoryDefaultImpl14.newInstance();
    try {
      io.github.onograph.internal.batchimport.EnterpriseBatchImporter enterpriseBatchImporter17 = new io.github.onograph.internal.batchimport.EnterpriseBatchImporter(
          additionalInitialIds0, collector1, configuration2, config3, databaseLayout4,
          executionMonitor5, fileSystemAbstraction6, indexImporterFactory7, jobScheduler8,
          logFilesInitializer9, logService10, memoryTracker11, monitor12, pageCacheTracer13,
          recordFormats16);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(recordFormats15);
    org.junit.Assert.assertNotNull(recordFormats16);
  }

  @Test
  public void test1457() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1457");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v310_0.relationship();
    java.lang.String str2 = v310_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat3 = v310_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat4 = v310_0.node();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray5 = v310_0.capabilities();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat6 = v310_0.labelToken();
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_7 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_8 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat9 = v300_8.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat10 = v300_8.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType11 = null;
    boolean boolean12 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_7,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_8, capabilityType11);
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_13 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat14 = v306_13.node();
    org.neo4j.storageengine.api.format.Capability capability15 = null;
    boolean boolean16 = v306_13.hasCapability(capability15);
    org.neo4j.storageengine.api.format.CapabilityType capabilityType17 = null;
    boolean boolean18 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_8,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_13, capabilityType17);
    org.neo4j.storageengine.api.format.Capability capability19 = null;
    boolean boolean20 = v306_13.hasCapability(capability19);
    org.neo4j.storageengine.api.format.Capability[] capabilityArray21 = v306_13.capabilities();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType22 = null;
    boolean boolean23 = v310_0.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_13, capabilityType22);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat24 = v306_13.relationshipGroup();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray25 = v306_13.capabilities();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_1_0" + "'", str2,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat3);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat4);
    org.junit.Assert.assertNotNull(capabilityArray5);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat6);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat9);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat10);
    org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat14);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    org.junit.Assert.assertNotNull(capabilityArray21);
    org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat24);
    org.junit.Assert.assertNotNull(capabilityArray25);
  }

  @Test
  public void test1458() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1458");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v310_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat2 = v310_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat3 = v310_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat4 = v310_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat5 = v310_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat6 = v310_0.relationshipGroup();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat3);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat4);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat5);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat6);
  }

  @Test
  public void test1459() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1459");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long1 = propertyOneByteHeaderRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord2 = propertyOneByteHeaderRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long4 = propertyOneByteHeaderRecordFormat3.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord5 = propertyOneByteHeaderRecordFormat3.newRecord();
    long long6 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord5);
    int int7 = propertyOneByteHeaderRecordFormat0.getRecordHeaderSize();
    int int8 = propertyOneByteHeaderRecordFormat0.getRecordHeaderSize();
    int int9 = propertyOneByteHeaderRecordFormat0.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat10 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader11 = null;
    int int12 = propertyRecordFormat10.getRecordSize(storeHeader11);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl13 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats14 = highLimitFactoryDefaultImpl13.newInstance();
    boolean boolean15 = propertyRecordFormat10.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl13);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat17 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean18 = propertyRecordFormat10.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord19 = null;
    org.neo4j.internal.id.IdSequence idSequence21 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext22 = null;
    propertyRecordFormat10.prepare(propertyRecord19, (int) (short) 0, idSequence21,
        cursorContext22);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat24 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord25 = propertyRecordFormat24.newRecord();
    org.neo4j.internal.id.IdSequence idSequence27 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext28 = null;
    propertyRecordFormat10.prepare(propertyRecord25, 52, idSequence27, cursorContext28);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader30 = null;
    int int31 = propertyRecordFormat10.getRecordSize(storeHeader30);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat32 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader33 = null;
    int int34 = propertyRecordFormat32.getRecordSize(storeHeader33);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl35 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats36 = highLimitFactoryDefaultImpl35.newInstance();
    boolean boolean37 = propertyRecordFormat32.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl35);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat39 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean40 = propertyRecordFormat32.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord41 = null;
    org.neo4j.internal.id.IdSequence idSequence43 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext44 = null;
    propertyRecordFormat32.prepare(propertyRecord41, (int) (short) 0, idSequence43,
        cursorContext44);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat46 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord47 = propertyRecordFormat46.newRecord();
    org.neo4j.internal.id.IdSequence idSequence49 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext50 = null;
    propertyRecordFormat32.prepare(propertyRecord47, 52, idSequence49, cursorContext50);
    long long52 = propertyRecordFormat10.getNextRecordReference(propertyRecord47);
    long long53 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord47);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader54 = null;
    int int55 = propertyOneByteHeaderRecordFormat0.getRecordSize(storeHeader54);
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord2);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1125899906842623L + "'",
        long4 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord5);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 48 + "'", int12 == 48);
    org.junit.Assert.assertNotNull(recordFormats14);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    org.junit.Assert.assertNotNull(propertyRecord25);
    org.junit.Assert.assertTrue("'" + int31 + "' != '" + 48 + "'", int31 == 48);
    org.junit.Assert.assertTrue("'" + int34 + "' != '" + 48 + "'", int34 == 48);
    org.junit.Assert.assertNotNull(recordFormats36);
    org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    org.junit.Assert.assertNotNull(propertyRecord47);
    org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
    org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-1L) + "'", long53 == (-1L));
    org.junit.Assert.assertTrue("'" + int55 + "' != '" + 48 + "'", int55 == 48);
  }

  @Test
  public void test1460() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1460");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord2 = relationshipRecordFormat1.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord3 = relationshipRecordFormat1.newRecord();
    org.neo4j.internal.id.IdSequence idSequence5 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext6 = null;
    relationshipRecordFormat0.prepare(relationshipRecord3, 100, idSequence5, cursorContext6);
    long long8 = relationshipRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat9 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader10 = null;
    int int11 = relationshipRecordFormat9.getRecordSize(storeHeader10);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat13 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat14 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord15 = relationshipRecordFormat14.newRecord();
    long long16 = relationshipHighLimitRecordFormat13.getNextRecordReference(relationshipRecord15);
    org.neo4j.internal.id.IdSequence idSequence18 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext19 = null;
    relationshipRecordFormat9.prepare(relationshipRecord15, 3, idSequence18, cursorContext19);
    long long21 = relationshipRecordFormat0.getNextRecordReference(relationshipRecord15);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat23 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord24 = relationshipHighLimitRecordFormat23.newRecord();
    org.neo4j.internal.id.IdSequence idSequence26 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext27 = null;
    relationshipRecordFormat0.prepare(relationshipRecord24, (int) (short) 1, idSequence26,
        cursorContext27);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat30 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord31 = relationshipHighLimitRecordFormat30.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat33 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord34 = relationshipHighLimitRecordFormat33.newRecord();
    org.neo4j.internal.id.IdSequence idSequence36 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext37 = null;
    relationshipHighLimitRecordFormat30.prepare(relationshipRecord34, (int) (short) 1, idSequence36,
        cursorContext37);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat40 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord41 = relationshipHighLimitRecordFormat40.newRecord();
    org.neo4j.internal.id.IdSequence idSequence43 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext44 = null;
    relationshipHighLimitRecordFormat30.prepare(relationshipRecord41, (int) (short) 1, idSequence43,
        cursorContext44);
    org.neo4j.internal.id.IdSequence idSequence47 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext48 = null;
    relationshipRecordFormat0.prepare(relationshipRecord41, 100, idSequence47, cursorContext48);
    org.junit.Assert.assertNotNull(relationshipRecord2);
    org.junit.Assert.assertNotNull(relationshipRecord3);
    org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1125899906842623L + "'",
        long8 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int11 + "' != '" + 32 + "'", int11 == 32);
    org.junit.Assert.assertNotNull(relationshipRecord15);
    org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord24);
    org.junit.Assert.assertNotNull(relationshipRecord31);
    org.junit.Assert.assertNotNull(relationshipRecord34);
    org.junit.Assert.assertNotNull(relationshipRecord41);
  }

  @Test
  public void test1461() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1461");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat1 = v306_0.node();
    org.neo4j.storageengine.api.format.Capability capability2 = null;
    boolean boolean3 = v306_0.hasCapability(capability2);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat4 = v306_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat5 = v306_0.propertyKeyToken();
    java.lang.String str6 = v306_0.storeVersion();
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat1);
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat4);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat5);
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "vE.H.0b" + "'", str6, "vE.H.0b");
  }

  @Test
  public void test1462() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1462");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = propertyRecordFormat0.getRecordSize(storeHeader1);
    long long3 = propertyRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum highLimitEncEnum4 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8;
    boolean boolean5 = propertyRecordFormat0.equals((java.lang.Object) highLimitEncEnum4);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord6 = null;
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    propertyRecordFormat0.prepare(propertyRecord6, 128, idSequence8, cursorContext9);
    long long11 = propertyRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_12 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat13 = v320_12.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat14 = v320_12.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat15 = v320_12.property();
    boolean boolean16 = propertyRecordFormat0.equals((java.lang.Object) v320_12);
    org.neo4j.storageengine.api.format.Capability[] capabilityArray17 = v320_12.capabilities();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat18 = v320_12.property();
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1125899906842623L + "'",
        long3 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + highLimitEncEnum4 + "' != '"
            + io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8 + "'",
        highLimitEncEnum4.equals(
            io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8));
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1125899906842623L + "'",
        long11 == 1125899906842623L);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat13);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat14);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat15);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    org.junit.Assert.assertNotNull(capabilityArray17);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat18);
  }

  @Test
  public void test1463() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1463");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord2 = relationshipHighLimitRecordFormat1.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord5 = relationshipHighLimitRecordFormat4.newRecord();
    org.neo4j.internal.id.IdSequence idSequence7 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext8 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord5, (int) (short) 1, idSequence7,
        cursorContext8);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat11 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat13 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat14 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord15 = relationshipRecordFormat14.newRecord();
    long long16 = relationshipHighLimitRecordFormat13.getNextRecordReference(relationshipRecord15);
    org.neo4j.internal.id.IdSequence idSequence18 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext19 = null;
    relationshipHighLimitRecordFormat11.prepare(relationshipRecord15, (int) (byte) 10, idSequence18,
        cursorContext19);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat22 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord23 = relationshipHighLimitRecordFormat22.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat25 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord26 = relationshipHighLimitRecordFormat25.newRecord();
    org.neo4j.internal.id.IdSequence idSequence28 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext29 = null;
    relationshipHighLimitRecordFormat22.prepare(relationshipRecord26, (int) (short) 1, idSequence28,
        cursorContext29);
    long long31 = relationshipHighLimitRecordFormat11.getNextRecordReference(relationshipRecord26);
    org.neo4j.internal.id.IdSequence idSequence33 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext34 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord26, (int) (byte) -1, idSequence33,
        cursorContext34);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat37 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord38 = relationshipHighLimitRecordFormat37.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat40 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord41 = relationshipHighLimitRecordFormat40.newRecord();
    org.neo4j.internal.id.IdSequence idSequence43 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext44 = null;
    relationshipHighLimitRecordFormat37.prepare(relationshipRecord41, (int) (short) 1, idSequence43,
        cursorContext44);
    int int46 = relationshipHighLimitRecordFormat37.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord47 = relationshipHighLimitRecordFormat37.newRecord();
    org.neo4j.internal.id.IdSequence idSequence49 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext50 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord47, (int) (byte) 100, idSequence49,
        cursorContext50);
    org.junit.Assert.assertNotNull(relationshipRecord2);
    org.junit.Assert.assertNotNull(relationshipRecord5);
    org.junit.Assert.assertNotNull(relationshipRecord15);
    org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord23);
    org.junit.Assert.assertNotNull(relationshipRecord26);
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord38);
    org.junit.Assert.assertNotNull(relationshipRecord41);
    org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord47);
  }

  @Test
  public void test1464() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1464");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    int int1 = recordFormatDynamicRecordImpl0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord2 = recordFormatDynamicRecordImpl0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl3 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean5 = recordFormatDynamicRecordImpl3.equals((java.lang.Object) 100.0f);
    long long6 = recordFormatDynamicRecordImpl3.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl7 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean9 = recordFormatDynamicRecordImpl7.equals((java.lang.Object) 100.0f);
    int int12 = recordFormatDynamicRecordImpl7.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord13 = null;
    org.neo4j.internal.id.IdSequence idSequence15 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext16 = null;
    recordFormatDynamicRecordImpl7.prepare(dynamicRecord13, (int) (byte) -1, idSequence15,
        cursorContext16);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl18 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean20 = recordFormatDynamicRecordImpl18.equals((java.lang.Object) 100.0f);
    int int23 = recordFormatDynamicRecordImpl18.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord24 = recordFormatDynamicRecordImpl18.newRecord();
    long long25 = recordFormatDynamicRecordImpl7.getNextRecordReference(dynamicRecord24);
    org.neo4j.internal.id.IdSequence idSequence27 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext28 = null;
    recordFormatDynamicRecordImpl3.prepare(dynamicRecord24, (int) (short) 10, idSequence27,
        cursorContext28);
    long long30 = recordFormatDynamicRecordImpl0.getNextRecordReference(dynamicRecord24);
    int int33 = recordFormatDynamicRecordImpl0.getPageSize(128, (int) (byte) -1);
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 12 + "'", int1 == 12);
    org.junit.Assert.assertNotNull(dynamicRecord2);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1125899906842623L + "'",
        long6 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 16 + "'", int12 == 16);
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    org.junit.Assert.assertTrue("'" + int23 + "' != '" + 16 + "'", int23 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord24);
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
    org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
    org.junit.Assert.assertTrue("'" + int33 + "' != '" + 128 + "'", int33 == 128);
  }

  @Test
  public void test1465() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1465");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod((long) 10,
        24L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 26L + "'", long2 == 26L);
  }

  @Test
  public void test1466() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1466");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.FactoryHighLimitDefaultImpl factoryHighLimitDefaultImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.FactoryHighLimitDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats1 = factoryHighLimitDefaultImpl0.newInstance();
    java.lang.String str2 = factoryHighLimitDefaultImpl0.getName();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats3 = factoryHighLimitDefaultImpl0.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats4 = factoryHighLimitDefaultImpl0.newInstance();
    java.lang.String str5 = factoryHighLimitDefaultImpl0.getName();
    java.lang.String str6 = factoryHighLimitDefaultImpl0.getName();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats7 = factoryHighLimitDefaultImpl0.newInstance();
    org.junit.Assert.assertNotNull(recordFormats1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_0_6" + "'", str2,
        "high_limitV3_0_6");
    org.junit.Assert.assertNotNull(recordFormats3);
    org.junit.Assert.assertNotNull(recordFormats4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "high_limitV3_0_6" + "'", str5,
        "high_limitV3_0_6");
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "high_limitV3_0_6" + "'", str6,
        "high_limitV3_0_6");
    org.junit.Assert.assertNotNull(recordFormats7);
  }

  @Test
  public void test1467() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1467");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = relationshipGroupRecordFormat0.getRecordSize(storeHeader1);
    long long3 = relationshipGroupRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long5 = relationshipGroupHighLimitRecordFormat4.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat6 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord7 = null;
    long long8 = relationshipGroupHighLimitRecordFormat6.getNextRecordReference(
        relationshipGroupRecord7);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord9 = relationshipGroupHighLimitRecordFormat6.newRecord();
    org.neo4j.internal.id.IdSequence idSequence11 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext12 = null;
    relationshipGroupHighLimitRecordFormat4.prepare(relationshipGroupRecord9, (int) (byte) 1,
        idSequence11, cursorContext12);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat14 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord15 = null;
    long long16 = relationshipGroupHighLimitRecordFormat14.getNextRecordReference(
        relationshipGroupRecord15);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord17 = relationshipGroupHighLimitRecordFormat14.newRecord();
    org.neo4j.internal.id.IdSequence idSequence19 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext20 = null;
    relationshipGroupHighLimitRecordFormat4.prepare(relationshipGroupRecord17, 0, idSequence19,
        cursorContext20);
    long long22 = relationshipGroupHighLimitRecordFormat4.getMaxId();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord23 = relationshipGroupHighLimitRecordFormat4.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord24 = relationshipGroupHighLimitRecordFormat4.newRecord();
    org.neo4j.internal.id.IdSequence idSequence26 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext27 = null;
    relationshipGroupRecordFormat0.prepare(relationshipGroupRecord24, (int) (byte) 0, idSequence26,
        cursorContext27);
    org.neo4j.io.pagecache.PageCursor pageCursor29 = null;
    try {
      boolean boolean30 = relationshipGroupRecordFormat0.isInUse(pageCursor29);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 32 + "'", int2 == 32);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1125899906842623L + "'",
        long3 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1125899906842623L + "'",
        long5 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord9);
    org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord17);
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1125899906842623L + "'",
        long22 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipGroupRecord23);
    org.junit.Assert.assertNotNull(relationshipGroupRecord24);
  }

  @Test
  public void test1468() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1468");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord1 = relationshipRecordFormat0.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord2 = relationshipRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord5 = relationshipHighLimitRecordFormat4.newRecord();
    org.neo4j.internal.id.IdSequence idSequence7 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext8 = null;
    relationshipRecordFormat0.prepare(relationshipRecord5, (int) (byte) 100, idSequence7,
        cursorContext8);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat11 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat13 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat14 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord15 = relationshipRecordFormat14.newRecord();
    long long16 = relationshipHighLimitRecordFormat13.getNextRecordReference(relationshipRecord15);
    org.neo4j.internal.id.IdSequence idSequence18 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext19 = null;
    relationshipHighLimitRecordFormat11.prepare(relationshipRecord15, (int) (byte) 10, idSequence18,
        cursorContext19);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat22 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord23 = relationshipHighLimitRecordFormat22.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat25 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord26 = relationshipHighLimitRecordFormat25.newRecord();
    org.neo4j.internal.id.IdSequence idSequence28 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext29 = null;
    relationshipHighLimitRecordFormat22.prepare(relationshipRecord26, (int) (short) 1, idSequence28,
        cursorContext29);
    long long31 = relationshipHighLimitRecordFormat11.getNextRecordReference(relationshipRecord26);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord32 = relationshipHighLimitRecordFormat11.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord33 = relationshipHighLimitRecordFormat11.newRecord();
    int int36 = relationshipHighLimitRecordFormat11.getPageSize(16, (int) (short) 10);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat38 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) '4');
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat40 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat42 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord43 = relationshipHighLimitRecordFormat42.newRecord();
    org.neo4j.internal.id.IdSequence idSequence45 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext46 = null;
    relationshipHighLimitRecordFormat40.prepare(relationshipRecord43, (int) 'a', idSequence45,
        cursorContext46);
    org.neo4j.internal.id.IdSequence idSequence49 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext50 = null;
    relationshipHighLimitRecordFormat38.prepare(relationshipRecord43, 10, idSequence49,
        cursorContext50);
    long long52 = relationshipHighLimitRecordFormat11.getNextRecordReference(relationshipRecord43);
    org.neo4j.internal.id.IdSequence idSequence54 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext55 = null;
    relationshipRecordFormat0.prepare(relationshipRecord43, 64, idSequence54, cursorContext55);
    org.junit.Assert.assertNotNull(relationshipRecord1);
    org.junit.Assert.assertNotNull(relationshipRecord2);
    org.junit.Assert.assertNotNull(relationshipRecord5);
    org.junit.Assert.assertNotNull(relationshipRecord15);
    org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord23);
    org.junit.Assert.assertNotNull(relationshipRecord26);
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord32);
    org.junit.Assert.assertNotNull(relationshipRecord33);
    org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
    org.junit.Assert.assertNotNull(relationshipRecord43);
    org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
  }

  @Test
  public void test1469() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1469");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat6 = v300_1.relationship();
    boolean boolean8 = v300_1.equals((java.lang.Object) 24);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat9 = v300_1.schema();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat10 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily11 = v300_1.getFormatFamily();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat6);
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat9);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat10);
    org.junit.Assert.assertTrue(
        "'" + formatFamily11 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily11.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
  }

  @Test
  public void test1470() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1470");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long1 = relationshipGroupHighLimitRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader3 = null;
    int int4 = relationshipGroupRecordFormat2.getRecordSize(storeHeader3);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long6 = relationshipGroupHighLimitRecordFormat5.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord8 = null;
    long long9 = relationshipGroupHighLimitRecordFormat7.getNextRecordReference(
        relationshipGroupRecord8);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord10 = relationshipGroupHighLimitRecordFormat7.newRecord();
    org.neo4j.internal.id.IdSequence idSequence12 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext13 = null;
    relationshipGroupHighLimitRecordFormat5.prepare(relationshipGroupRecord10, (int) (byte) 1,
        idSequence12, cursorContext13);
    org.neo4j.internal.id.IdSequence idSequence16 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext17 = null;
    relationshipGroupRecordFormat2.prepare(relationshipGroupRecord10, 0, idSequence16,
        cursorContext17);
    org.neo4j.internal.id.IdSequence idSequence20 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext21 = null;
    relationshipGroupHighLimitRecordFormat0.prepare(relationshipGroupRecord10, 64, idSequence20,
        cursorContext21);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord23 = relationshipGroupHighLimitRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_24 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    boolean boolean25 = relationshipGroupHighLimitRecordFormat0.equals((java.lang.Object) v300_24);
    int int28 = relationshipGroupHighLimitRecordFormat0.getPageSize(8, (int) '4');
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1125899906842623L + "'",
        long6 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord10);
    org.junit.Assert.assertNotNull(relationshipGroupRecord23);
    org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
  }

  @Test
  public void test1471() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1471");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) '4');
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord6 = relationshipHighLimitRecordFormat5.newRecord();
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    relationshipHighLimitRecordFormat3.prepare(relationshipRecord6, (int) 'a', idSequence8,
        cursorContext9);
    org.neo4j.internal.id.IdSequence idSequence12 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext13 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord6, 10, idSequence12,
        cursorContext13);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat16 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat17 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord18 = relationshipRecordFormat17.newRecord();
    long long19 = relationshipHighLimitRecordFormat16.getNextRecordReference(relationshipRecord18);
    org.neo4j.internal.id.IdSequence idSequence21 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext22 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord18, 96, idSequence21,
        cursorContext22);
    int int26 = relationshipHighLimitRecordFormat1.getPageSize((int) (short) -1, 50);
    org.junit.Assert.assertNotNull(relationshipRecord6);
    org.junit.Assert.assertNotNull(relationshipRecord18);
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
    org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
  }

  @Test
  public void test1472() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1472");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v310_0.relationship();
    java.lang.String str2 = v310_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat3 = v310_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat4 = v310_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat5 = v310_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat6 = v310_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat7 = v310_0.relationshipGroup();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat9 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord10 = relationshipHighLimitRecordFormat9.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord13 = relationshipHighLimitRecordFormat12.newRecord();
    org.neo4j.internal.id.IdSequence idSequence15 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext16 = null;
    relationshipHighLimitRecordFormat9.prepare(relationshipRecord13, (int) (short) 1, idSequence15,
        cursorContext16);
    boolean boolean18 = v310_0.equals((java.lang.Object) relationshipHighLimitRecordFormat9);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord19 = relationshipHighLimitRecordFormat9.newRecord();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_1_0" + "'", str2,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat3);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat4);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat5);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat6);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat7);
    org.junit.Assert.assertNotNull(relationshipRecord10);
    org.junit.Assert.assertNotNull(relationshipRecord13);
    org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    org.junit.Assert.assertNotNull(relationshipRecord19);
  }

  @Test
  public void test1473() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1473");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat1 = v306_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat2 = v306_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat3 = v306_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat4 = v306_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat5 = v306_0.property();
    java.lang.String str6 = v306_0.toString();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat7 = v306_0.propertyKeyToken();
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat1);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat2);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat3);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat4);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat5);
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "RecordFormat:V306[vE.H.0b]" + "'", str6,
        "RecordFormat:V306[vE.H.0b]");
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat7);
  }

  @Test
  public void test1474() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1474");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) ' ');
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord3 = null;
    long long4 = nodeRecordFormat2.getNextRecordReference(nodeRecord3);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord5 = nodeRecordFormat2.newRecord();
    org.neo4j.internal.id.IdSequence idSequence7 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext8 = null;
    nodeHighLimitRecordFormat1.prepare(nodeRecord5, 32, idSequence7, cursorContext8);
    int int10 = nodeHighLimitRecordFormat1.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 1);
    int int15 = nodeHighLimitRecordFormat12.getPageSize(48, (int) '#');
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord16 = nodeHighLimitRecordFormat12.newRecord();
    int int17 = nodeHighLimitRecordFormat1.rerdtlgForRE(nodeRecord16);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
    org.junit.Assert.assertNotNull(nodeRecord5);
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
    org.junit.Assert.assertNotNull(nodeRecord16);
    org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
  }

  @Test
  public void test1475() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1475");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = recordFormatDynamicRecordImpl0.newRecord();
    int int9 = recordFormatDynamicRecordImpl0.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord10 = recordFormatDynamicRecordImpl0.newRecord();
    int int13 = recordFormatDynamicRecordImpl0.getPageSize((int) '4', (int) (short) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_14 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat15 = v320_14.relationship();
    boolean boolean16 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) v320_14);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat17 = v320_14.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat18 = v320_14.relationshipGroup();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat19 = v320_14.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat20 = v320_14.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat21 = v320_14.labelToken();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord6);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord10);
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat15);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat17);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat18);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat19);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat20);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat21);
  }

  @Test
  public void test1476() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1476");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long1 = relationshipGroupHighLimitRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader3 = null;
    int int4 = relationshipGroupRecordFormat2.getRecordSize(storeHeader3);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long6 = relationshipGroupHighLimitRecordFormat5.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord8 = null;
    long long9 = relationshipGroupHighLimitRecordFormat7.getNextRecordReference(
        relationshipGroupRecord8);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord10 = relationshipGroupHighLimitRecordFormat7.newRecord();
    org.neo4j.internal.id.IdSequence idSequence12 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext13 = null;
    relationshipGroupHighLimitRecordFormat5.prepare(relationshipGroupRecord10, (int) (byte) 1,
        idSequence12, cursorContext13);
    org.neo4j.internal.id.IdSequence idSequence16 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext17 = null;
    relationshipGroupRecordFormat2.prepare(relationshipGroupRecord10, 0, idSequence16,
        cursorContext17);
    org.neo4j.internal.id.IdSequence idSequence20 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext21 = null;
    relationshipGroupHighLimitRecordFormat0.prepare(relationshipGroupRecord10, 64, idSequence20,
        cursorContext21);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord23 = relationshipGroupHighLimitRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat25 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        0);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat26 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long27 = relationshipGroupHighLimitRecordFormat26.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat28 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord29 = null;
    long long30 = relationshipGroupHighLimitRecordFormat28.getNextRecordReference(
        relationshipGroupRecord29);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord31 = relationshipGroupHighLimitRecordFormat28.newRecord();
    org.neo4j.internal.id.IdSequence idSequence33 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext34 = null;
    relationshipGroupHighLimitRecordFormat26.prepare(relationshipGroupRecord31, (int) (byte) 1,
        idSequence33, cursorContext34);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat36 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long37 = relationshipGroupHighLimitRecordFormat36.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat38 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord39 = null;
    long long40 = relationshipGroupHighLimitRecordFormat38.getNextRecordReference(
        relationshipGroupRecord39);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord41 = relationshipGroupHighLimitRecordFormat38.newRecord();
    org.neo4j.internal.id.IdSequence idSequence43 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext44 = null;
    relationshipGroupHighLimitRecordFormat36.prepare(relationshipGroupRecord41, (int) (byte) 1,
        idSequence43, cursorContext44);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat46 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord47 = null;
    long long48 = relationshipGroupHighLimitRecordFormat46.getNextRecordReference(
        relationshipGroupRecord47);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord49 = relationshipGroupHighLimitRecordFormat46.newRecord();
    org.neo4j.internal.id.IdSequence idSequence51 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext52 = null;
    relationshipGroupHighLimitRecordFormat36.prepare(relationshipGroupRecord49, 0, idSequence51,
        cursorContext52);
    org.neo4j.internal.id.IdSequence idSequence55 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext56 = null;
    relationshipGroupHighLimitRecordFormat26.prepare(relationshipGroupRecord49, 128, idSequence55,
        cursorContext56);
    org.neo4j.internal.id.IdSequence idSequence59 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext60 = null;
    relationshipGroupHighLimitRecordFormat25.prepare(relationshipGroupRecord49, 16, idSequence59,
        cursorContext60);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord62 = relationshipGroupHighLimitRecordFormat25.newRecord();
    org.neo4j.internal.id.IdSequence idSequence64 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext65 = null;
    relationshipGroupHighLimitRecordFormat0.prepare(relationshipGroupRecord62, 8, idSequence64,
        cursorContext65);
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1125899906842623L + "'",
        long6 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord10);
    org.junit.Assert.assertNotNull(relationshipGroupRecord23);
    org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1125899906842623L + "'",
        long27 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord31);
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1125899906842623L + "'",
        long37 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord41);
    org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord49);
    org.junit.Assert.assertNotNull(relationshipGroupRecord62);
  }

  @Test
  public void test1477() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1477");
    }
    java.util.function.Function<org.neo4j.kernel.impl.store.StoreHeader, java.lang.Integer> storeHeaderFunction1 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.fixedRecordSize(
        48);
    org.junit.Assert.assertNotNull(storeHeaderFunction1);
  }

  @Test
  public void test1478() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1478");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord2 = propertyRecordFormat1.newRecord();
    long long3 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord2);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_4 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat5 = v300_4.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat6 = v300_4.relationshipTypeToken();
    java.lang.String str7 = v300_4.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat8 = v300_4.property();
    boolean boolean9 = propertyOneByteHeaderRecordFormat0.equals((java.lang.Object) v300_4);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat10 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long11 = propertyOneByteHeaderRecordFormat10.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord12 = propertyOneByteHeaderRecordFormat10.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat13 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long14 = propertyOneByteHeaderRecordFormat13.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord15 = propertyOneByteHeaderRecordFormat13.newRecord();
    long long16 = propertyOneByteHeaderRecordFormat10.getNextRecordReference(propertyRecord15);
    org.neo4j.io.pagecache.PageCursor pageCursor17 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad18 = null;
    try {
      propertyOneByteHeaderRecordFormat0.read(propertyRecord15, pageCursor17, recordLoad18, 12, 30);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(propertyRecord2);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat5);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat6);
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "high_limitV3_0_0" + "'", str7,
        "high_limitV3_0_0");
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat8);
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1125899906842623L + "'",
        long11 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord12);
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1125899906842623L + "'",
        long14 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord15);
    org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
  }

  @Test
  public void test1479() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1479");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.NodeRecordFormat nodeRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord1 = nodeRecordFormat0.newRecord();
    int int2 = nodeRecordFormat0.getRecordHeaderSize();
    org.junit.Assert.assertNotNull(nodeRecord1);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
  }

  @Test
  public void test1480() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1480");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod(
        (long) (byte) 10, (long) 0);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L);
  }

  @Test
  public void test1481() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1481");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat6 = v300_1.relationship();
    org.neo4j.storageengine.api.format.Capability capability7 = null;
    boolean boolean8 = v300_1.hasCapability(capability7);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat9 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat10 = v300_1.node();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat6);
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat9);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat10);
  }

  @Test
  public void test1482() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1482");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        16);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader2 = null;
    int int3 = relationshipGroupHighLimitRecordFormat1.getRecordSize(storeHeader2);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        24);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader6 = null;
    int int7 = relationshipGroupHighLimitRecordFormat5.getRecordSize(storeHeader6);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat8 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader9 = null;
    int int10 = relationshipGroupRecordFormat8.getRecordSize(storeHeader9);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat11 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long12 = relationshipGroupHighLimitRecordFormat11.getMaxId();
    long long13 = relationshipGroupHighLimitRecordFormat11.getMaxId();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord14 = relationshipGroupHighLimitRecordFormat11.newRecord();
    org.neo4j.internal.id.IdSequence idSequence16 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext17 = null;
    relationshipGroupRecordFormat8.prepare(relationshipGroupRecord14, 4, idSequence16,
        cursorContext17);
    org.neo4j.internal.id.IdSequence idSequence20 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext21 = null;
    relationshipGroupHighLimitRecordFormat5.prepare(relationshipGroupRecord14, 96, idSequence20,
        cursorContext21);
    org.neo4j.io.pagecache.PageCursor pageCursor23 = null;
    try {
      relationshipGroupHighLimitRecordFormat1.write(relationshipGroupRecord14, pageCursor23, 50,
          34);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
    org.junit.Assert.assertTrue("'" + int7 + "' != '" + 24 + "'", int7 == 24);
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1125899906842623L + "'",
        long12 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1125899906842623L + "'",
        long13 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipGroupRecord14);
  }

  @Test
  public void test1483() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1483");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = recordFormatDynamicRecordImpl0.newRecord();
    int int9 = recordFormatDynamicRecordImpl0.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord10 = recordFormatDynamicRecordImpl0.newRecord();
    int int13 = recordFormatDynamicRecordImpl0.getPageSize((int) '4', (int) (short) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_14 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat15 = v320_14.relationship();
    boolean boolean16 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) v320_14);
    java.util.function.Function<org.neo4j.kernel.impl.store.StoreHeader, java.lang.Integer> storeHeaderFunction18 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.fixedRecordSize(
        (int) (byte) -1);
    boolean boolean19 = recordFormatDynamicRecordImpl0.equals(
        (java.lang.Object) storeHeaderFunction18);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl20 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean22 = recordFormatDynamicRecordImpl20.equals((java.lang.Object) 100.0f);
    int int25 = recordFormatDynamicRecordImpl20.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord26 = recordFormatDynamicRecordImpl20.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl27 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean29 = recordFormatDynamicRecordImpl27.equals((java.lang.Object) 100.0f);
    int int32 = recordFormatDynamicRecordImpl27.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord33 = recordFormatDynamicRecordImpl27.newRecord();
    long long34 = recordFormatDynamicRecordImpl20.getNextRecordReference(dynamicRecord33);
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_35 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat36 = v320_35.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat37 = v320_35.relationshipGroup();
    boolean boolean38 = recordFormatDynamicRecordImpl20.equals(
        (java.lang.Object) relationshipGroupRecordRecordFormat37);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl39 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean41 = recordFormatDynamicRecordImpl39.equals((java.lang.Object) 100.0f);
    int int44 = recordFormatDynamicRecordImpl39.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord45 = recordFormatDynamicRecordImpl39.newRecord();
    int int48 = recordFormatDynamicRecordImpl39.getPageSize(48, 35);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl49 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean51 = recordFormatDynamicRecordImpl49.equals((java.lang.Object) 100.0f);
    int int54 = recordFormatDynamicRecordImpl49.getPageSize(16, (-1));
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl55 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    int int58 = recordFormatDynamicRecordImpl55.getPageSize(24, 8);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl59 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean61 = recordFormatDynamicRecordImpl59.equals((java.lang.Object) 100.0f);
    int int64 = recordFormatDynamicRecordImpl59.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord65 = recordFormatDynamicRecordImpl59.newRecord();
    long long66 = recordFormatDynamicRecordImpl55.getNextRecordReference(dynamicRecord65);
    org.neo4j.internal.id.IdSequence idSequence68 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext69 = null;
    recordFormatDynamicRecordImpl49.prepare(dynamicRecord65, 10, idSequence68, cursorContext69);
    org.neo4j.internal.id.IdSequence idSequence72 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext73 = null;
    recordFormatDynamicRecordImpl39.prepare(dynamicRecord65, (int) (byte) 1, idSequence72,
        cursorContext73);
    long long75 = recordFormatDynamicRecordImpl20.getNextRecordReference(dynamicRecord65);
    long long76 = recordFormatDynamicRecordImpl0.getNextRecordReference(dynamicRecord65);
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord6);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord10);
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat15);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    org.junit.Assert.assertNotNull(storeHeaderFunction18);
    org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    org.junit.Assert.assertTrue("'" + int25 + "' != '" + 16 + "'", int25 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord26);
    org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    org.junit.Assert.assertTrue("'" + int32 + "' != '" + 16 + "'", int32 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord33);
    org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat36);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat37);
    org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    org.junit.Assert.assertTrue("'" + int44 + "' != '" + 16 + "'", int44 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord45);
    org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
    org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    org.junit.Assert.assertTrue("'" + int54 + "' != '" + 16 + "'", int54 == 16);
    org.junit.Assert.assertTrue("'" + int58 + "' != '" + 24 + "'", int58 == 24);
    org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    org.junit.Assert.assertTrue("'" + int64 + "' != '" + 16 + "'", int64 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord65);
    org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
    org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-1L) + "'", long75 == (-1L));
    org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-1L) + "'", long76 == (-1L));
  }

  @Test
  public void test1484() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1484");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat1 = v306_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat2 = v306_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat3 = v306_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormats[] recordFormatsArray4 = v306_0.compatibleVersionsForRollingUpgrade();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat5 = v306_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat6 = v306_0.propertyKeyToken();
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat1);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat2);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat3);
    org.junit.Assert.assertNotNull(recordFormatsArray4);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat5);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat6);
  }

  @Test
  public void test1485() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1485");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v320_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat2 = v320_0.relationshipGroup();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat3 = v320_0.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.MetaDataRecord> metaDataRecordRecordFormat4 = v320_0.metaData();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat2);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat3);
    org.junit.Assert.assertNotNull(metaDataRecordRecordFormat4);
  }

  @Test
  public void test1486() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1486");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        0);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long4 = relationshipGroupHighLimitRecordFormat3.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord6 = null;
    long long7 = relationshipGroupHighLimitRecordFormat5.getNextRecordReference(
        relationshipGroupRecord6);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord8 = relationshipGroupHighLimitRecordFormat5.newRecord();
    org.neo4j.internal.id.IdSequence idSequence10 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext11 = null;
    relationshipGroupHighLimitRecordFormat3.prepare(relationshipGroupRecord8, (int) (byte) 1,
        idSequence10, cursorContext11);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat13 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long14 = relationshipGroupHighLimitRecordFormat13.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord16 = null;
    long long17 = relationshipGroupHighLimitRecordFormat15.getNextRecordReference(
        relationshipGroupRecord16);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord18 = relationshipGroupHighLimitRecordFormat15.newRecord();
    org.neo4j.internal.id.IdSequence idSequence20 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext21 = null;
    relationshipGroupHighLimitRecordFormat13.prepare(relationshipGroupRecord18, (int) (byte) 1,
        idSequence20, cursorContext21);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat23 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord24 = null;
    long long25 = relationshipGroupHighLimitRecordFormat23.getNextRecordReference(
        relationshipGroupRecord24);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord26 = relationshipGroupHighLimitRecordFormat23.newRecord();
    org.neo4j.internal.id.IdSequence idSequence28 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext29 = null;
    relationshipGroupHighLimitRecordFormat13.prepare(relationshipGroupRecord26, 0, idSequence28,
        cursorContext29);
    org.neo4j.internal.id.IdSequence idSequence32 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext33 = null;
    relationshipGroupHighLimitRecordFormat3.prepare(relationshipGroupRecord26, 128, idSequence32,
        cursorContext33);
    org.neo4j.internal.id.IdSequence idSequence36 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext37 = null;
    relationshipGroupHighLimitRecordFormat2.prepare(relationshipGroupRecord26, 16, idSequence36,
        cursorContext37);
    org.neo4j.io.pagecache.PageCursor pageCursor39 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad40 = null;
    try {
      relationshipGroupHighLimitRecordFormat0.read(relationshipGroupRecord26, pageCursor39,
          recordLoad40, 4, 3);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1125899906842623L + "'",
        long4 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord8);
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1125899906842623L + "'",
        long14 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord18);
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord26);
  }

  @Test
  public void test1487() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1487");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        0);
    long long2 = relationshipGroupHighLimitRecordFormat1.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long4 = relationshipGroupHighLimitRecordFormat3.getMaxId();
    long long5 = relationshipGroupHighLimitRecordFormat3.getMaxId();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord6 = relationshipGroupHighLimitRecordFormat3.newRecord();
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    relationshipGroupHighLimitRecordFormat1.prepare(relationshipGroupRecord6, (int) (short) 0,
        idSequence8, cursorContext9);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader11 = null;
    int int12 = relationshipGroupHighLimitRecordFormat1.getRecordSize(storeHeader11);
    long long13 = relationshipGroupHighLimitRecordFormat1.getMaxId();
    int int16 = relationshipGroupHighLimitRecordFormat1.getPageSize((int) (byte) 100, 3);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1125899906842623L + "'",
        long2 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1125899906842623L + "'",
        long4 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1125899906842623L + "'",
        long5 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipGroupRecord6);
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1125899906842623L + "'",
        long13 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int16 + "' != '" + 99 + "'", int16 == 99);
  }

  @Test
  public void test1488() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1488");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        16);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader2 = null;
    int int3 = relationshipHighLimitRecordFormat1.getRecordSize(storeHeader2);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord6 = relationshipHighLimitRecordFormat5.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader8 = null;
    int int9 = relationshipRecordFormat7.getRecordSize(storeHeader8);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat11 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord13 = relationshipRecordFormat12.newRecord();
    long long14 = relationshipHighLimitRecordFormat11.getNextRecordReference(relationshipRecord13);
    org.neo4j.internal.id.IdSequence idSequence16 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext17 = null;
    relationshipRecordFormat7.prepare(relationshipRecord13, 3, idSequence16, cursorContext17);
    org.neo4j.internal.id.IdSequence idSequence20 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext21 = null;
    relationshipHighLimitRecordFormat5.prepare(relationshipRecord13, 0, idSequence20,
        cursorContext21);
    org.neo4j.internal.id.IdSequence idSequence24 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext25 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord13, 64, idSequence24,
        cursorContext25);
    java.lang.Class<?> wildcardClass27 = relationshipHighLimitRecordFormat1.getClass();
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
    org.junit.Assert.assertNotNull(relationshipRecord6);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 32 + "'", int9 == 32);
    org.junit.Assert.assertNotNull(relationshipRecord13);
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    org.junit.Assert.assertNotNull(wildcardClass27);
  }

  @Test
  public void test1489() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1489");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = recordFormatDynamicRecordImpl0.newRecord();
    int int9 = recordFormatDynamicRecordImpl0.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord10 = recordFormatDynamicRecordImpl0.newRecord();
    int int13 = recordFormatDynamicRecordImpl0.getPageSize((int) '4', (int) (short) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_14 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat15 = v320_14.relationship();
    boolean boolean16 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) v320_14);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat17 = v320_14.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.MetaDataRecord> metaDataRecordRecordFormat18 = v320_14.metaData();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat19 = v320_14.node();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord6);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord10);
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat15);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat17);
    org.junit.Assert.assertNotNull(metaDataRecordRecordFormat18);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat19);
  }

  @Test
  public void test1490() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1490");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat1 = v320_0.dynamic();
    java.lang.String str2 = v320_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat3 = v320_0.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat4 = v320_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat5 = v320_0.property();
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_2_0" + "'", str2,
        "high_limitV3_2_0");
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat3);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat4);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat5);
  }

  @Test
  public void test1491() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1491");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord2 = propertyRecordFormat1.newRecord();
    long long3 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord2);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord6 = propertyRecordFormat5.newRecord();
    long long7 = propertyOneByteHeaderRecordFormat4.getNextRecordReference(propertyRecord6);
    long long8 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord6);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat9 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long10 = propertyOneByteHeaderRecordFormat9.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord11 = propertyOneByteHeaderRecordFormat9.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long13 = propertyOneByteHeaderRecordFormat12.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord14 = propertyOneByteHeaderRecordFormat12.newRecord();
    long long15 = propertyOneByteHeaderRecordFormat9.getNextRecordReference(propertyRecord14);
    org.neo4j.internal.id.IdSequence idSequence17 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext18 = null;
    propertyOneByteHeaderRecordFormat0.prepare(propertyRecord14, (int) (byte) -1, idSequence17,
        cursorContext18);
    int int20 = propertyOneByteHeaderRecordFormat0.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat21 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader22 = null;
    int int23 = propertyRecordFormat21.getRecordSize(storeHeader22);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl24 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats25 = highLimitFactoryDefaultImpl24.newInstance();
    boolean boolean26 = propertyRecordFormat21.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl24);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat28 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean29 = propertyRecordFormat21.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord30 = null;
    org.neo4j.internal.id.IdSequence idSequence32 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext33 = null;
    propertyRecordFormat21.prepare(propertyRecord30, (int) (short) 0, idSequence32,
        cursorContext33);
    boolean boolean36 = propertyRecordFormat21.equals((java.lang.Object) "3.0.6");
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat37 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader38 = null;
    int int39 = propertyRecordFormat37.getRecordSize(storeHeader38);
    int int42 = propertyRecordFormat37.getPageSize((int) (byte) -1, 128);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat43 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long44 = propertyOneByteHeaderRecordFormat43.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord45 = propertyOneByteHeaderRecordFormat43.newRecord();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord46 = propertyOneByteHeaderRecordFormat43.newRecord();
    long long47 = propertyRecordFormat37.getNextRecordReference(propertyRecord46);
    long long48 = propertyRecordFormat21.getNextRecordReference(propertyRecord46);
    org.neo4j.io.pagecache.PageCursor pageCursor49 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad50 = null;
    try {
      propertyOneByteHeaderRecordFormat0.read(propertyRecord46, pageCursor49, recordLoad50,
          (int) (short) 0, 7);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(propertyRecord2);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord6);
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
    org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1125899906842623L + "'",
        long10 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord11);
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1125899906842623L + "'",
        long13 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord14);
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
    org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    org.junit.Assert.assertTrue("'" + int23 + "' != '" + 48 + "'", int23 == 48);
    org.junit.Assert.assertNotNull(recordFormats25);
    org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    org.junit.Assert.assertTrue("'" + int39 + "' != '" + 48 + "'", int39 == 48);
    org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1125899906842623L + "'",
        long44 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord45);
    org.junit.Assert.assertNotNull(propertyRecord46);
    org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
    org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
  }

  @Test
  public void test1492() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1492");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat6 = v300_1.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat7 = v300_1.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat8 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat9 = v300_1.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat10 = v300_1.labelToken();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat6);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat7);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat8);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat9);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat10);
  }

  @Test
  public void test1493() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1493");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat1 = v320_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat2 = v320_0.relationshipGroup();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat3 = v320_0.node();
    java.lang.String str4 = v320_0.storeVersion();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily5 = v320_0.getFormatFamily();
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat1);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat2);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "vE.H.3" + "'", str4, "vE.H.3");
    org.junit.Assert.assertTrue(
        "'" + formatFamily5 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily5.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
  }

  @Test
  public void test1494() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1494");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord1 = propertyRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader3 = null;
    int int4 = propertyRecordFormat2.getRecordSize(storeHeader3);
    long long5 = propertyRecordFormat2.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat6 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord8 = propertyRecordFormat7.newRecord();
    long long9 = propertyOneByteHeaderRecordFormat6.getNextRecordReference(propertyRecord8);
    org.neo4j.internal.id.IdSequence idSequence11 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext12 = null;
    propertyRecordFormat2.prepare(propertyRecord8, 0, idSequence11, cursorContext12);
    long long14 = propertyRecordFormat0.getNextRecordReference(propertyRecord8);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader16 = null;
    int int17 = propertyRecordFormat15.getRecordSize(storeHeader16);
    int int20 = propertyRecordFormat15.getPageSize((int) (byte) -1, 128);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat21 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long22 = propertyOneByteHeaderRecordFormat21.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord23 = propertyOneByteHeaderRecordFormat21.newRecord();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord24 = propertyOneByteHeaderRecordFormat21.newRecord();
    long long25 = propertyRecordFormat15.getNextRecordReference(propertyRecord24);
    long long26 = propertyRecordFormat0.getNextRecordReference(propertyRecord24);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader27 = null;
    int int28 = propertyRecordFormat0.getRecordSize(storeHeader27);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord29 = propertyRecordFormat0.newRecord();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader30 = null;
    int int31 = propertyRecordFormat0.getRecordSize(storeHeader30);
    org.junit.Assert.assertNotNull(propertyRecord1);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 48 + "'", int4 == 48);
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1125899906842623L + "'",
        long5 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord8);
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    org.junit.Assert.assertTrue("'" + int17 + "' != '" + 48 + "'", int17 == 48);
    org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1125899906842623L + "'",
        long22 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord23);
    org.junit.Assert.assertNotNull(propertyRecord24);
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
    org.junit.Assert.assertTrue("'" + int28 + "' != '" + 48 + "'", int28 == 48);
    org.junit.Assert.assertNotNull(propertyRecord29);
    org.junit.Assert.assertTrue("'" + int31 + "' != '" + 48 + "'", int31 == 48);
  }

  @Test
  public void test1495() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1495");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat1 = v310_0.relationshipGroup();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat2 = v310_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat3 = v310_0.relationshipGroup();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat4 = v310_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat5 = v310_0.dynamic();
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat1);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat2);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat3);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat4);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat5);
  }

  @Test
  public void test1496() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1496");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v306_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v306_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat3 = v306_0.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat4 = v306_0.propertyKeyToken();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat3);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat4);
  }

  @Test
  public void test1497() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1497");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = recordFormatDynamicRecordImpl0.newRecord();
    int int9 = recordFormatDynamicRecordImpl0.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord10 = recordFormatDynamicRecordImpl0.newRecord();
    int int13 = recordFormatDynamicRecordImpl0.getPageSize((int) '4', (int) (short) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_14 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat15 = v320_14.relationship();
    boolean boolean16 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) v320_14);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat17 = v320_14.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat18 = v320_14.relationshipGroup();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat19 = v320_14.relationshipGroup();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat20 = v320_14.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat21 = v320_14.property();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord6);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord10);
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat15);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat17);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat18);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat19);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat20);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat21);
  }

  @Test
  public void test1498() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1498");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v306_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat2 = v306_0.schema();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat3 = v306_0.labelToken();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily4 = v306_0.getFormatFamily();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat5 = v306_0.property();
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_6 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.storageengine.api.format.Capability capability7 = null;
    boolean boolean8 = v310_6.hasCapability(capability7);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat9 = v310_6.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat10 = v310_6.node();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType11 = null;
    boolean boolean12 = v306_0.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v310_6, capabilityType11);
    java.lang.String str13 = v306_0.name();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat2);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat3);
    org.junit.Assert.assertTrue(
        "'" + formatFamily4 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily4.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat5);
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat9);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat10);
    org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "high_limitV3_0_6" + "'", str13,
        "high_limitV3_0_6");
  }

  @Test
  public void test1499() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1499");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat1 = v320_0.dynamic();
    java.lang.String str2 = v320_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat3 = v320_0.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat4 = v320_0.property();
    java.lang.String str5 = v320_0.name();
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_2_0" + "'", str2,
        "high_limitV3_2_0");
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat3);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "high_limitV3_2_0" + "'", str5,
        "high_limitV3_2_0");
  }

  @Test
  public void test1500() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest2.test1500");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord1 = relationshipRecordFormat0.newRecord();
    int int2 = relationshipRecordFormat0.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord5 = relationshipRecordFormat4.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord6 = relationshipRecordFormat4.newRecord();
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    relationshipRecordFormat3.prepare(relationshipRecord6, 100, idSequence8, cursorContext9);
    long long11 = relationshipRecordFormat0.getNextRecordReference(relationshipRecord6);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord13 = relationshipRecordFormat12.newRecord();
    int int14 = relationshipRecordFormat12.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat16 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord17 = relationshipRecordFormat16.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord18 = relationshipRecordFormat16.newRecord();
    org.neo4j.internal.id.IdSequence idSequence20 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext21 = null;
    relationshipRecordFormat15.prepare(relationshipRecord18, 100, idSequence20, cursorContext21);
    long long23 = relationshipRecordFormat12.getNextRecordReference(relationshipRecord18);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat24 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat25 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord26 = relationshipRecordFormat25.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord27 = relationshipRecordFormat25.newRecord();
    org.neo4j.internal.id.IdSequence idSequence29 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext30 = null;
    relationshipRecordFormat24.prepare(relationshipRecord27, 100, idSequence29, cursorContext30);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat33 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord34 = relationshipHighLimitRecordFormat33.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat36 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord37 = relationshipHighLimitRecordFormat36.newRecord();
    org.neo4j.internal.id.IdSequence idSequence39 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext40 = null;
    relationshipHighLimitRecordFormat33.prepare(relationshipRecord37, (int) (short) 1, idSequence39,
        cursorContext40);
    org.neo4j.internal.id.IdSequence idSequence43 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext44 = null;
    relationshipRecordFormat24.prepare(relationshipRecord37, 24, idSequence43, cursorContext44);
    long long46 = relationshipRecordFormat12.getNextRecordReference(relationshipRecord37);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat48 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord49 = relationshipHighLimitRecordFormat48.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat51 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord52 = relationshipHighLimitRecordFormat51.newRecord();
    org.neo4j.internal.id.IdSequence idSequence54 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext55 = null;
    relationshipHighLimitRecordFormat48.prepare(relationshipRecord52, (int) (short) 1, idSequence54,
        cursorContext55);
    org.neo4j.internal.id.IdSequence idSequence58 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext59 = null;
    relationshipRecordFormat12.prepare(relationshipRecord52, 12, idSequence58, cursorContext59);
    org.neo4j.internal.id.IdSequence idSequence62 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext63 = null;
    relationshipRecordFormat0.prepare(relationshipRecord52, 8, idSequence62, cursorContext63);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord65 = relationshipRecordFormat0.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord66 = relationshipRecordFormat0.newRecord();
    org.junit.Assert.assertNotNull(relationshipRecord1);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord5);
    org.junit.Assert.assertNotNull(relationshipRecord6);
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord13);
    org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord17);
    org.junit.Assert.assertNotNull(relationshipRecord18);
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord26);
    org.junit.Assert.assertNotNull(relationshipRecord27);
    org.junit.Assert.assertNotNull(relationshipRecord34);
    org.junit.Assert.assertNotNull(relationshipRecord37);
    org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord49);
    org.junit.Assert.assertNotNull(relationshipRecord52);
    org.junit.Assert.assertNotNull(relationshipRecord65);
    org.junit.Assert.assertNotNull(relationshipRecord66);
  }
}

