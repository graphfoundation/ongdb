package io.github.onograph.test;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ModRegTest1 {

  public static boolean debug = false;

  @Test
  public void test0501() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0501");
    }
    java.util.function.Function<org.neo4j.kernel.impl.store.StoreHeader, java.lang.Integer> storeHeaderFunction1 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.fixedRecordSize(
        12);
    org.junit.Assert.assertNotNull(storeHeaderFunction1);
  }

  @Test
  public void test0502() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0502");
    }
    io.github.onograph.internal.batchimport.EnterpriseBatchImporterFactory enterpriseBatchImporterFactory0 = new io.github.onograph.internal.batchimport.EnterpriseBatchImporterFactory();
    java.lang.String str1 = enterpriseBatchImporterFactory0.getName();
    java.lang.String str2 = enterpriseBatchImporterFactory0.getName();
    org.neo4j.io.layout.DatabaseLayout databaseLayout3 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction4 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer5 = null;
    org.neo4j.internal.batchimport.Configuration configuration6 = null;
    org.neo4j.logging.internal.LogService logService7 = null;
    org.neo4j.internal.batchimport.staging.ExecutionMonitor executionMonitor8 = null;
    org.neo4j.internal.batchimport.AdditionalInitialIds additionalInitialIds9 = null;
    org.neo4j.configuration.Config config10 = null;
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_11 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_12 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat13 = v300_12.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat14 = v300_12.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType15 = null;
    boolean boolean16 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_11,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_12, capabilityType15);
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_17 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat18 = v310_17.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat19 = v310_17.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat20 = v310_17.labelToken();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType21 = null;
    boolean boolean22 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_12,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v310_17, capabilityType21);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat23 = v300_12.relationshipTypeToken();
    org.neo4j.internal.batchimport.ImportLogic.Monitor monitor24 = null;
    org.neo4j.scheduler.JobScheduler jobScheduler25 = null;
    org.neo4j.internal.batchimport.input.Collector collector26 = null;
    org.neo4j.storageengine.api.LogFilesInitializer logFilesInitializer27 = null;
    org.neo4j.internal.batchimport.IndexImporterFactory indexImporterFactory28 = null;
    org.neo4j.memory.MemoryTracker memoryTracker29 = null;
    try {
      org.neo4j.internal.batchimport.BatchImporter batchImporter30 = enterpriseBatchImporterFactory0.instantiate(
          databaseLayout3, fileSystemAbstraction4, pageCacheTracer5, configuration6, logService7,
          executionMonitor8, additionalInitialIds9, config10,
          (org.neo4j.kernel.impl.store.format.RecordFormats) v300_12, monitor24, jobScheduler25,
          collector26, logFilesInitializer27, indexImporterFactory28, memoryTracker29);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "restartable" + "'", str1, "restartable");
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "restartable" + "'", str2, "restartable");
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat13);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat14);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat18);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat19);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat20);
    org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat23);
  }

  @Test
  public void test0503() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0503");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v300_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat2 = v300_0.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat3 = v300_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.MetaDataRecord> metaDataRecordRecordFormat4 = v300_0.metaData();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily5 = v300_0.getFormatFamily();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat3);
    org.junit.Assert.assertNotNull(metaDataRecordRecordFormat4);
    org.junit.Assert.assertTrue(
        "'" + formatFamily5 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily5.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
  }

  @Test
  public void test0504() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0504");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = relationshipGroupRecordFormat0.getRecordSize(storeHeader1);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord3 = relationshipGroupRecordFormat0.newRecord();
    long long4 = relationshipGroupRecordFormat0.getMaxId();
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 32 + "'", int2 == 32);
    org.junit.Assert.assertNotNull(relationshipGroupRecord3);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1125899906842623L + "'",
        long4 == 1125899906842623L);
  }

  @Test
  public void test0505() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0505");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v320_0.relationship();
    java.lang.String str2 = v320_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat3 = v320_0.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat4 = v320_0.relationshipGroup();
    int int5 = v320_0.generation();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_2_0" + "'", str2,
        "high_limitV3_2_0");
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat3);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat4);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
  }

  @Test
  public void test0506() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0506");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v306_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat2 = v306_0.schema();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat3 = v306_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat4 = v306_0.schema();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat2);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat3);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat4);
  }

  @Test
  public void test0507() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0507");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod(101L, 60L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 125L + "'", long2 == 125L);
  }

  @Test
  public void test0508() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0508");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    int int3 = relationshipGroupRecordFormat0.getPageSize((int) 'a', (int) (short) 100);
    long long4 = relationshipGroupRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord5 = relationshipGroupRecordFormat0.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord6 = relationshipGroupRecordFormat0.newRecord();
    long long7 = relationshipGroupRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord8 = relationshipGroupRecordFormat0.newRecord();
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1125899906842623L + "'",
        long4 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipGroupRecord5);
    org.junit.Assert.assertNotNull(relationshipGroupRecord6);
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1125899906842623L + "'",
        long7 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipGroupRecord8);
  }

  @Test
  public void test0509() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0509");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v300_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat2 = v300_0.relationshipTypeToken();
    java.lang.String str3 = v300_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat4 = v300_0.relationshipGroup();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat2);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "high_limitV3_0_0" + "'", str3,
        "high_limitV3_0_0");
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat4);
  }

  @Test
  public void test0510() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0510");
    }
    java.util.function.Function<org.neo4j.kernel.impl.store.StoreHeader, java.lang.Integer> storeHeaderFunction1 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.fixedRecordSize(
        (int) (byte) -1);
    org.junit.Assert.assertNotNull(storeHeaderFunction1);
  }

  @Test
  public void test0511() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0511");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = propertyRecordFormat0.getRecordSize(storeHeader1);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl3 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats4 = highLimitFactoryDefaultImpl3.newInstance();
    boolean boolean5 = propertyRecordFormat0.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl3);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean8 = propertyRecordFormat0.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord9 = null;
    org.neo4j.internal.id.IdSequence idSequence11 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext12 = null;
    propertyRecordFormat0.prepare(propertyRecord9, (int) (short) 0, idSequence11, cursorContext12);
    boolean boolean15 = propertyRecordFormat0.equals((java.lang.Object) "3.0.6");
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat16 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader17 = null;
    int int18 = propertyRecordFormat16.getRecordSize(storeHeader17);
    int int21 = propertyRecordFormat16.getPageSize((int) (byte) -1, 128);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat22 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long23 = propertyOneByteHeaderRecordFormat22.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord24 = propertyOneByteHeaderRecordFormat22.newRecord();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord25 = propertyOneByteHeaderRecordFormat22.newRecord();
    long long26 = propertyRecordFormat16.getNextRecordReference(propertyRecord25);
    long long27 = propertyRecordFormat0.getNextRecordReference(propertyRecord25);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat28 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long29 = relationshipGroupHighLimitRecordFormat28.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat30 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord31 = null;
    long long32 = relationshipGroupHighLimitRecordFormat30.getNextRecordReference(
        relationshipGroupRecord31);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord33 = relationshipGroupHighLimitRecordFormat30.newRecord();
    org.neo4j.internal.id.IdSequence idSequence35 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext36 = null;
    relationshipGroupHighLimitRecordFormat28.prepare(relationshipGroupRecord33, (int) (byte) 1,
        idSequence35, cursorContext36);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat38 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord39 = null;
    long long40 = relationshipGroupHighLimitRecordFormat38.getNextRecordReference(
        relationshipGroupRecord39);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord41 = relationshipGroupHighLimitRecordFormat38.newRecord();
    org.neo4j.internal.id.IdSequence idSequence43 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext44 = null;
    relationshipGroupHighLimitRecordFormat28.prepare(relationshipGroupRecord41, 0, idSequence43,
        cursorContext44);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord46 = relationshipGroupHighLimitRecordFormat28.newRecord();
    boolean boolean47 = propertyRecordFormat0.equals(
        (java.lang.Object) relationshipGroupHighLimitRecordFormat28);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl48 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean50 = recordFormatDynamicRecordImpl48.equals((java.lang.Object) 100.0f);
    int int53 = recordFormatDynamicRecordImpl48.getPageSize(16, (-1));
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl54 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    int int57 = recordFormatDynamicRecordImpl54.getPageSize(24, 8);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl58 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean60 = recordFormatDynamicRecordImpl58.equals((java.lang.Object) 100.0f);
    int int63 = recordFormatDynamicRecordImpl58.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord64 = recordFormatDynamicRecordImpl58.newRecord();
    long long65 = recordFormatDynamicRecordImpl54.getNextRecordReference(dynamicRecord64);
    org.neo4j.internal.id.IdSequence idSequence67 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext68 = null;
    recordFormatDynamicRecordImpl48.prepare(dynamicRecord64, 10, idSequence67, cursorContext68);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat70 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat71 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord72 = propertyRecordFormat71.newRecord();
    long long73 = propertyOneByteHeaderRecordFormat70.getNextRecordReference(propertyRecord72);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat74 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat75 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord76 = propertyRecordFormat75.newRecord();
    long long77 = propertyOneByteHeaderRecordFormat74.getNextRecordReference(propertyRecord76);
    long long78 = propertyOneByteHeaderRecordFormat70.getNextRecordReference(propertyRecord76);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat79 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long80 = propertyOneByteHeaderRecordFormat79.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord81 = propertyOneByteHeaderRecordFormat79.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat82 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long83 = propertyOneByteHeaderRecordFormat82.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord84 = propertyOneByteHeaderRecordFormat82.newRecord();
    long long85 = propertyOneByteHeaderRecordFormat79.getNextRecordReference(propertyRecord84);
    org.neo4j.internal.id.IdSequence idSequence87 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext88 = null;
    propertyOneByteHeaderRecordFormat70.prepare(propertyRecord84, (int) (byte) -1, idSequence87,
        cursorContext88);
    boolean boolean90 = recordFormatDynamicRecordImpl48.equals(
        (java.lang.Object) propertyOneByteHeaderRecordFormat70);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord91 = recordFormatDynamicRecordImpl48.newRecord();
    boolean boolean92 = relationshipGroupHighLimitRecordFormat28.equals(
        (java.lang.Object) dynamicRecord91);
    org.neo4j.io.pagecache.PageCursor pageCursor93 = null;
    try {
      boolean boolean94 = relationshipGroupHighLimitRecordFormat28.isInUse(pageCursor93);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    org.junit.Assert.assertNotNull(recordFormats4);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    org.junit.Assert.assertTrue("'" + int18 + "' != '" + 48 + "'", int18 == 48);
    org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1125899906842623L + "'",
        long23 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord24);
    org.junit.Assert.assertNotNull(propertyRecord25);
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
    org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1125899906842623L + "'",
        long29 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord33);
    org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord41);
    org.junit.Assert.assertNotNull(relationshipGroupRecord46);
    org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    org.junit.Assert.assertTrue("'" + int53 + "' != '" + 16 + "'", int53 == 16);
    org.junit.Assert.assertTrue("'" + int57 + "' != '" + 24 + "'", int57 == 24);
    org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    org.junit.Assert.assertTrue("'" + int63 + "' != '" + 16 + "'", int63 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord64);
    org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord72);
    org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-1L) + "'", long73 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord76);
    org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-1L) + "'", long77 == (-1L));
    org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-1L) + "'", long78 == (-1L));
    org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1125899906842623L + "'",
        long80 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord81);
    org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1125899906842623L + "'",
        long83 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord84);
    org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-1L) + "'", long85 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    org.junit.Assert.assertNotNull(dynamicRecord91);
    org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
  }

  @Test
  public void test0512() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0512");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    long long3 = recordFormatDynamicRecordImpl0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl4 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean6 = recordFormatDynamicRecordImpl4.equals((java.lang.Object) 100.0f);
    int int9 = recordFormatDynamicRecordImpl4.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord10 = null;
    org.neo4j.internal.id.IdSequence idSequence12 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext13 = null;
    recordFormatDynamicRecordImpl4.prepare(dynamicRecord10, (int) (byte) -1, idSequence12,
        cursorContext13);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl15 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean17 = recordFormatDynamicRecordImpl15.equals((java.lang.Object) 100.0f);
    int int20 = recordFormatDynamicRecordImpl15.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord21 = recordFormatDynamicRecordImpl15.newRecord();
    long long22 = recordFormatDynamicRecordImpl4.getNextRecordReference(dynamicRecord21);
    org.neo4j.internal.id.IdSequence idSequence24 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext25 = null;
    recordFormatDynamicRecordImpl0.prepare(dynamicRecord21, (int) (short) 10, idSequence24,
        cursorContext25);
    int int29 = recordFormatDynamicRecordImpl0.getPageSize(96, (int) '4');
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1125899906842623L + "'",
        long3 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16 + "'", int9 == 16);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord21);
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
    org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
  }

  @Test
  public void test0513() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0513");
    }
    long long2 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.torete(73L,
        (long) 99);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 26L + "'", long2 == 26L);
  }

  @Test
  public void test0514() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0514");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod(233L, 0L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 233L + "'", long2 == 233L);
  }

  @Test
  public void test0515() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0515");
    }
    org.neo4j.io.pagecache.PageCursor pageCursor1 = null;
    try {
      io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.enoForPa((long) 8,
          pageCursor1);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test0516() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0516");
    }
    long long2 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.toable(234L,
        (long) (short) 100);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 334L + "'", long2 == 334L);
  }

  @Test
  public void test0517() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0517");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod(50L,
        (long) 16);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 50L + "'", long2 == 50L);
  }

  @Test
  public void test0518() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0518");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v306_0.relationship();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray2 = v306_0.capabilities();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat3 = v306_0.relationshipGroup();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray4 = v306_0.capabilities();
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_5 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_6 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat7 = v300_6.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat8 = v300_6.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType9 = null;
    boolean boolean10 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_5,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_6, capabilityType9);
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_11 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat12 = v306_11.node();
    org.neo4j.storageengine.api.format.Capability capability13 = null;
    boolean boolean14 = v306_11.hasCapability(capability13);
    org.neo4j.storageengine.api.format.CapabilityType capabilityType15 = null;
    boolean boolean16 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_6,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_11, capabilityType15);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.MetaDataRecord> metaDataRecordRecordFormat17 = v300_6.metaData();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat18 = v300_6.propertyKeyToken();
    boolean boolean19 = v306_0.equals((java.lang.Object) propertyKeyTokenRecordRecordFormat18);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(capabilityArray2);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat3);
    org.junit.Assert.assertNotNull(capabilityArray4);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat7);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat8);
    org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat12);
    org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    org.junit.Assert.assertNotNull(metaDataRecordRecordFormat17);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat18);
    org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
  }

  @Test
  public void test0519() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0519");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_6 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat7 = v306_6.node();
    org.neo4j.storageengine.api.format.Capability capability8 = null;
    boolean boolean9 = v306_6.hasCapability(capability8);
    org.neo4j.storageengine.api.format.CapabilityType capabilityType10 = null;
    boolean boolean11 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_6, capabilityType10);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.MetaDataRecord> metaDataRecordRecordFormat12 = v300_1.metaData();
    java.lang.String str13 = v300_1.name();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat7);
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    org.junit.Assert.assertNotNull(metaDataRecordRecordFormat12);
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "high_limitV3_0_0" + "'", str13,
        "high_limitV3_0_0");
  }

  @Test
  public void test0520() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0520");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord1 = null;
    long long2 = nodeRecordFormat0.getNextRecordReference(nodeRecord1);
    int int3 = nodeRecordFormat0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader4 = null;
    int int5 = nodeRecordFormat0.getRecordSize(storeHeader4);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader6 = null;
    int int7 = nodeRecordFormat0.getRecordSize(storeHeader6);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat8 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader9 = null;
    int int10 = nodeRecordFormat8.getRecordSize(storeHeader9);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord11 = nodeRecordFormat8.newRecord();
    long long12 = nodeRecordFormat0.getNextRecordReference(nodeRecord11);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
    org.junit.Assert.assertNotNull(nodeRecord11);
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
  }

  @Test
  public void test0521() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0521");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_6 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat7 = v306_6.node();
    org.neo4j.storageengine.api.format.Capability capability8 = null;
    boolean boolean9 = v306_6.hasCapability(capability8);
    org.neo4j.storageengine.api.format.CapabilityType capabilityType10 = null;
    boolean boolean11 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_6, capabilityType10);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat12 = v300_1.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat13 = v300_1.property();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat7);
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat12);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat13);
  }

  @Test
  public void test0522() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0522");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        0);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader2 = null;
    int int3 = relationshipGroupHighLimitRecordFormat1.getRecordSize(storeHeader2);
    int int4 = relationshipGroupHighLimitRecordFormat1.getRecordHeaderSize();
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
  }

  @Test
  public void test0523() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0523");
    }
    java.util.function.Function<org.neo4j.kernel.impl.store.StoreHeader, java.lang.Integer> storeHeaderFunction1 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.fixedRecordSize(
        52);
    org.junit.Assert.assertNotNull(storeHeaderFunction1);
  }

  @Test
  public void test0524() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0524");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod(
        (long) (short) 10, 15L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 15L + "'", long2 == 15L);
  }

  @Test
  public void test0525() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0525");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord5 = relationshipRecordFormat4.newRecord();
    long long6 = relationshipHighLimitRecordFormat3.getNextRecordReference(relationshipRecord5);
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord5, (int) (byte) 10, idSequence8,
        cursorContext9);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord13 = relationshipHighLimitRecordFormat12.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord16 = relationshipHighLimitRecordFormat15.newRecord();
    org.neo4j.internal.id.IdSequence idSequence18 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext19 = null;
    relationshipHighLimitRecordFormat12.prepare(relationshipRecord16, (int) (short) 1, idSequence18,
        cursorContext19);
    long long21 = relationshipHighLimitRecordFormat1.getNextRecordReference(relationshipRecord16);
    org.neo4j.io.pagecache.PageCursor pageCursor22 = null;
    try {
      boolean boolean23 = relationshipHighLimitRecordFormat1.isInUse(pageCursor22);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(relationshipRecord5);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord13);
    org.junit.Assert.assertNotNull(relationshipRecord16);
    org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
  }

  @Test
  public void test0526() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0526");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.storageengine.api.format.Capability capability1 = null;
    boolean boolean2 = v310_0.hasCapability(capability1);
    int int3 = v310_0.generation();
    org.neo4j.kernel.impl.store.format.RecordFormats[] recordFormatsArray4 = v310_0.compatibleVersionsForRollingUpgrade();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
    org.junit.Assert.assertNotNull(recordFormatsArray4);
  }

  @Test
  public void test0527() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0527");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v300_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat2 = v300_0.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat3 = v300_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat4 = v300_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat5 = v300_0.node();
    java.lang.String str6 = v300_0.storeVersion();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat3);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat4);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat5);
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "vE.H.0" + "'", str6, "vE.H.0");
  }

  @Test
  public void test0528() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0528");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        24);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long3 = relationshipGroupHighLimitRecordFormat2.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader5 = null;
    int int6 = relationshipGroupRecordFormat4.getRecordSize(storeHeader5);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long8 = relationshipGroupHighLimitRecordFormat7.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat9 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord10 = null;
    long long11 = relationshipGroupHighLimitRecordFormat9.getNextRecordReference(
        relationshipGroupRecord10);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord12 = relationshipGroupHighLimitRecordFormat9.newRecord();
    org.neo4j.internal.id.IdSequence idSequence14 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext15 = null;
    relationshipGroupHighLimitRecordFormat7.prepare(relationshipGroupRecord12, (int) (byte) 1,
        idSequence14, cursorContext15);
    org.neo4j.internal.id.IdSequence idSequence18 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext19 = null;
    relationshipGroupRecordFormat4.prepare(relationshipGroupRecord12, 0, idSequence18,
        cursorContext19);
    org.neo4j.internal.id.IdSequence idSequence22 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext23 = null;
    relationshipGroupHighLimitRecordFormat2.prepare(relationshipGroupRecord12, 64, idSequence22,
        cursorContext23);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord25 = relationshipGroupHighLimitRecordFormat2.newRecord();
    org.neo4j.io.pagecache.PageCursor pageCursor26 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad27 = null;
    try {
      relationshipGroupHighLimitRecordFormat1.read(relationshipGroupRecord25, pageCursor26,
          recordLoad27, (int) (short) 10, 8);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1125899906842623L + "'",
        long3 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
    org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1125899906842623L + "'",
        long8 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord12);
    org.junit.Assert.assertNotNull(relationshipGroupRecord25);
  }

  @Test
  public void test0529() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0529");
    }
    java.util.function.Function<org.neo4j.kernel.impl.store.StoreHeader, java.lang.Integer> storeHeaderFunction1 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.fixedRecordSize(
        32);
    org.junit.Assert.assertNotNull(storeHeaderFunction1);
  }

  @Test
  public void test0530() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0530");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = null;
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    recordFormatDynamicRecordImpl0.prepare(dynamicRecord6, (int) (byte) -1, idSequence8,
        cursorContext9);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader11 = null;
    try {
      int int12 = recordFormatDynamicRecordImpl0.getRecordSize(storeHeader11);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
  }

  @Test
  public void test0531() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0531");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord1 = null;
    long long2 = nodeRecordFormat0.getNextRecordReference(nodeRecord1);
    int int3 = nodeRecordFormat0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader4 = null;
    int int5 = nodeRecordFormat0.getRecordSize(storeHeader4);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader6 = null;
    int int7 = nodeRecordFormat0.getRecordSize(storeHeader6);
    int int10 = nodeRecordFormat0.getPageSize((int) ' ', 4);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord11 = nodeRecordFormat0.newRecord();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord12 = nodeRecordFormat0.newRecord();
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
    org.junit.Assert.assertNotNull(nodeRecord11);
    org.junit.Assert.assertNotNull(nodeRecord12);
  }

  @Test
  public void test0532() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0532");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = propertyRecordFormat0.getRecordSize(storeHeader1);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl3 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats4 = highLimitFactoryDefaultImpl3.newInstance();
    boolean boolean5 = propertyRecordFormat0.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl3);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean8 = propertyRecordFormat0.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord9 = null;
    org.neo4j.internal.id.IdSequence idSequence11 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext12 = null;
    propertyRecordFormat0.prepare(propertyRecord9, (int) (short) 0, idSequence11, cursorContext12);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat14 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord15 = propertyRecordFormat14.newRecord();
    org.neo4j.internal.id.IdSequence idSequence17 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext18 = null;
    propertyRecordFormat0.prepare(propertyRecord15, 52, idSequence17, cursorContext18);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader20 = null;
    int int21 = propertyRecordFormat0.getRecordSize(storeHeader20);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat22 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord23 = propertyRecordFormat22.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat24 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader25 = null;
    int int26 = propertyRecordFormat24.getRecordSize(storeHeader25);
    long long27 = propertyRecordFormat24.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat28 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat29 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord30 = propertyRecordFormat29.newRecord();
    long long31 = propertyOneByteHeaderRecordFormat28.getNextRecordReference(propertyRecord30);
    org.neo4j.internal.id.IdSequence idSequence33 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext34 = null;
    propertyRecordFormat24.prepare(propertyRecord30, 0, idSequence33, cursorContext34);
    long long36 = propertyRecordFormat22.getNextRecordReference(propertyRecord30);
    org.neo4j.io.pagecache.PageCursor pageCursor37 = null;
    try {
      propertyRecordFormat0.write(propertyRecord30, pageCursor37, 8, 99);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    org.junit.Assert.assertNotNull(recordFormats4);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    org.junit.Assert.assertNotNull(propertyRecord15);
    org.junit.Assert.assertTrue("'" + int21 + "' != '" + 48 + "'", int21 == 48);
    org.junit.Assert.assertNotNull(propertyRecord23);
    org.junit.Assert.assertTrue("'" + int26 + "' != '" + 48 + "'", int26 == 48);
    org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1125899906842623L + "'",
        long27 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord30);
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
    org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
  }

  @Test
  public void test0533() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0533");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = recordFormatDynamicRecordImpl0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl7 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean9 = recordFormatDynamicRecordImpl7.equals((java.lang.Object) 100.0f);
    int int12 = recordFormatDynamicRecordImpl7.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord13 = recordFormatDynamicRecordImpl7.newRecord();
    long long14 = recordFormatDynamicRecordImpl0.getNextRecordReference(dynamicRecord13);
    int int15 = recordFormatDynamicRecordImpl0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader16 = null;
    try {
      int int17 = recordFormatDynamicRecordImpl0.getRecordSize(storeHeader16);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord6);
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 16 + "'", int12 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord13);
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    org.junit.Assert.assertTrue("'" + int15 + "' != '" + 12 + "'", int15 == 12);
  }

  @Test
  public void test0534() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0534");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat1 = v300_0.labelToken();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily2 = v300_0.getFormatFamily();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily3 = v300_0.getFormatFamily();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat4 = v300_0.property();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat1);
    org.junit.Assert.assertTrue(
        "'" + formatFamily2 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily2.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertTrue(
        "'" + formatFamily3 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily3.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat4);
  }

  @Test
  public void test0535() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0535");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat1 = v306_0.node();
    org.neo4j.storageengine.api.format.Capability capability2 = null;
    boolean boolean3 = v306_0.hasCapability(capability2);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat4 = v306_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat5 = v306_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat6 = v306_0.propertyKeyToken();
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat1);
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat4);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat5);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat6);
  }

  @Test
  public void test0536() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0536");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord1 = propertyRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader3 = null;
    int int4 = propertyRecordFormat2.getRecordSize(storeHeader3);
    long long5 = propertyRecordFormat2.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat6 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord8 = propertyRecordFormat7.newRecord();
    long long9 = propertyOneByteHeaderRecordFormat6.getNextRecordReference(propertyRecord8);
    org.neo4j.internal.id.IdSequence idSequence11 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext12 = null;
    propertyRecordFormat2.prepare(propertyRecord8, 0, idSequence11, cursorContext12);
    long long14 = propertyRecordFormat0.getNextRecordReference(propertyRecord8);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader16 = null;
    int int17 = propertyRecordFormat15.getRecordSize(storeHeader16);
    int int20 = propertyRecordFormat15.getPageSize((int) (byte) -1, 128);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat21 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long22 = propertyOneByteHeaderRecordFormat21.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord23 = propertyOneByteHeaderRecordFormat21.newRecord();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord24 = propertyOneByteHeaderRecordFormat21.newRecord();
    long long25 = propertyRecordFormat15.getNextRecordReference(propertyRecord24);
    long long26 = propertyRecordFormat0.getNextRecordReference(propertyRecord24);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat27 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader28 = null;
    int int29 = propertyRecordFormat27.getRecordSize(storeHeader28);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl30 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats31 = highLimitFactoryDefaultImpl30.newInstance();
    boolean boolean32 = propertyRecordFormat27.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl30);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat34 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean35 = propertyRecordFormat27.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord36 = null;
    org.neo4j.internal.id.IdSequence idSequence38 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext39 = null;
    propertyRecordFormat27.prepare(propertyRecord36, (int) (short) 0, idSequence38,
        cursorContext39);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat41 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord42 = propertyRecordFormat41.newRecord();
    org.neo4j.internal.id.IdSequence idSequence44 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext45 = null;
    propertyRecordFormat27.prepare(propertyRecord42, 52, idSequence44, cursorContext45);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader47 = null;
    int int48 = propertyRecordFormat27.getRecordSize(storeHeader47);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat49 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader50 = null;
    int int51 = propertyRecordFormat49.getRecordSize(storeHeader50);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl52 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats53 = highLimitFactoryDefaultImpl52.newInstance();
    boolean boolean54 = propertyRecordFormat49.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl52);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat56 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean57 = propertyRecordFormat49.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord58 = null;
    org.neo4j.internal.id.IdSequence idSequence60 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext61 = null;
    propertyRecordFormat49.prepare(propertyRecord58, (int) (short) 0, idSequence60,
        cursorContext61);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat63 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord64 = propertyRecordFormat63.newRecord();
    org.neo4j.internal.id.IdSequence idSequence66 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext67 = null;
    propertyRecordFormat49.prepare(propertyRecord64, 52, idSequence66, cursorContext67);
    long long69 = propertyRecordFormat27.getNextRecordReference(propertyRecord64);
    long long70 = propertyRecordFormat0.getNextRecordReference(propertyRecord64);
    org.junit.Assert.assertNotNull(propertyRecord1);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 48 + "'", int4 == 48);
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1125899906842623L + "'",
        long5 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord8);
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    org.junit.Assert.assertTrue("'" + int17 + "' != '" + 48 + "'", int17 == 48);
    org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1125899906842623L + "'",
        long22 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord23);
    org.junit.Assert.assertNotNull(propertyRecord24);
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
    org.junit.Assert.assertTrue("'" + int29 + "' != '" + 48 + "'", int29 == 48);
    org.junit.Assert.assertNotNull(recordFormats31);
    org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    org.junit.Assert.assertNotNull(propertyRecord42);
    org.junit.Assert.assertTrue("'" + int48 + "' != '" + 48 + "'", int48 == 48);
    org.junit.Assert.assertTrue("'" + int51 + "' != '" + 48 + "'", int51 == 48);
    org.junit.Assert.assertNotNull(recordFormats53);
    org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    org.junit.Assert.assertNotNull(propertyRecord64);
    org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-1L) + "'", long69 == (-1L));
    org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-1L) + "'", long70 == (-1L));
  }

  @Test
  public void test0537() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0537");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    int int3 = relationshipGroupRecordFormat0.getPageSize((int) 'a', (int) (short) 100);
    long long4 = relationshipGroupRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord5 = relationshipGroupRecordFormat0.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord6 = relationshipGroupRecordFormat0.newRecord();
    long long7 = relationshipGroupRecordFormat0.getMaxId();
    org.neo4j.io.pagecache.PageCursor pageCursor8 = null;
    try {
      boolean boolean9 = relationshipGroupRecordFormat0.isInUse(pageCursor8);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1125899906842623L + "'",
        long4 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipGroupRecord5);
    org.junit.Assert.assertNotNull(relationshipGroupRecord6);
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1125899906842623L + "'",
        long7 == 1125899906842623L);
  }

  @Test
  public void test0538() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0538");
    }
    java.util.function.Function<org.neo4j.kernel.impl.store.StoreHeader, java.lang.Integer> storeHeaderFunction1 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.fixedRecordSize(
        4);
    org.junit.Assert.assertNotNull(storeHeaderFunction1);
  }

  @Test
  public void test0539() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0539");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    int int3 = recordFormatDynamicRecordImpl0.getPageSize(24, 8);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl4 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean6 = recordFormatDynamicRecordImpl4.equals((java.lang.Object) 100.0f);
    int int9 = recordFormatDynamicRecordImpl4.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord10 = recordFormatDynamicRecordImpl4.newRecord();
    long long11 = recordFormatDynamicRecordImpl0.getNextRecordReference(dynamicRecord10);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl12 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean14 = recordFormatDynamicRecordImpl12.equals((java.lang.Object) 100.0f);
    long long15 = recordFormatDynamicRecordImpl12.getMaxId();
    int int18 = recordFormatDynamicRecordImpl12.getPageSize(64, 48);
    int int21 = recordFormatDynamicRecordImpl12.getPageSize(10, (int) (short) 100);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord22 = recordFormatDynamicRecordImpl12.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl23 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean25 = recordFormatDynamicRecordImpl23.equals((java.lang.Object) 100.0f);
    int int28 = recordFormatDynamicRecordImpl23.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord29 = recordFormatDynamicRecordImpl23.newRecord();
    int int32 = recordFormatDynamicRecordImpl23.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord33 = recordFormatDynamicRecordImpl23.newRecord();
    org.neo4j.internal.id.IdSequence idSequence35 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext36 = null;
    recordFormatDynamicRecordImpl12.prepare(dynamicRecord33, 24, idSequence35, cursorContext36);
    org.neo4j.io.pagecache.PageCursor pageCursor38 = null;
    try {
      recordFormatDynamicRecordImpl0.write(dynamicRecord33, pageCursor38, (int) 'a', 2);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 24 + "'", int3 == 24);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16 + "'", int9 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord10);
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1125899906842623L + "'",
        long15 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int18 + "' != '" + 48 + "'", int18 == 48);
    org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    org.junit.Assert.assertNotNull(dynamicRecord22);
    org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    org.junit.Assert.assertTrue("'" + int28 + "' != '" + 16 + "'", int28 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord29);
    org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord33);
  }

  @Test
  public void test0540() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0540");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    int int1 = propertyRecordFormat0.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader3 = null;
    int int4 = propertyRecordFormat2.getRecordSize(storeHeader3);
    long long5 = propertyRecordFormat2.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum highLimitEncEnum6 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8;
    boolean boolean7 = propertyRecordFormat2.equals((java.lang.Object) highLimitEncEnum6);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat8 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord9 = null;
    org.neo4j.internal.id.IdSequence idSequence11 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext12 = null;
    propertyRecordFormat8.prepare(propertyRecord9, (int) (short) -1, idSequence11, cursorContext12);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord14 = propertyRecordFormat8.newRecord();
    long long15 = propertyRecordFormat2.getNextRecordReference(propertyRecord14);
    int int16 = propertyRecordFormat2.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat17 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader18 = null;
    int int19 = propertyRecordFormat17.getRecordSize(storeHeader18);
    long long20 = propertyRecordFormat17.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum highLimitEncEnum21 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8;
    boolean boolean22 = propertyRecordFormat17.equals((java.lang.Object) highLimitEncEnum21);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat23 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord24 = null;
    org.neo4j.internal.id.IdSequence idSequence26 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext27 = null;
    propertyRecordFormat23.prepare(propertyRecord24, (int) (short) -1, idSequence26,
        cursorContext27);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord29 = propertyRecordFormat23.newRecord();
    long long30 = propertyRecordFormat17.getNextRecordReference(propertyRecord29);
    long long31 = propertyRecordFormat2.getNextRecordReference(propertyRecord29);
    org.neo4j.io.pagecache.PageCursor pageCursor32 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad33 = null;
    try {
      propertyRecordFormat0.read(propertyRecord29, pageCursor32, recordLoad33, 24, (int) 'a');
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 48 + "'", int4 == 48);
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1125899906842623L + "'",
        long5 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + highLimitEncEnum6 + "' != '"
            + io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8 + "'",
        highLimitEncEnum6.equals(
            io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8));
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    org.junit.Assert.assertNotNull(propertyRecord14);
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
    org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    org.junit.Assert.assertTrue("'" + int19 + "' != '" + 48 + "'", int19 == 48);
    org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1125899906842623L + "'",
        long20 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + highLimitEncEnum21 + "' != '"
            + io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8 + "'",
        highLimitEncEnum21.equals(
            io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8));
    org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    org.junit.Assert.assertNotNull(propertyRecord29);
    org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
  }

  @Test
  public void test0541() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0541");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = nodeRecordFormat0.getRecordSize(storeHeader1);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord3 = nodeRecordFormat0.newRecord();
    org.neo4j.io.pagecache.PageCursor pageCursor4 = null;
    try {
      boolean boolean5 = nodeRecordFormat0.isInUse(pageCursor4);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
    org.junit.Assert.assertNotNull(nodeRecord3);
  }

  @Test
  public void test0542() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0542");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = propertyRecordFormat0.getRecordSize(storeHeader1);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader3 = null;
    int int4 = propertyRecordFormat0.getRecordSize(storeHeader3);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader6 = null;
    int int7 = propertyRecordFormat5.getRecordSize(storeHeader6);
    long long8 = propertyRecordFormat5.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum highLimitEncEnum9 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8;
    boolean boolean10 = propertyRecordFormat5.equals((java.lang.Object) highLimitEncEnum9);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat11 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord12 = null;
    org.neo4j.internal.id.IdSequence idSequence14 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext15 = null;
    propertyRecordFormat11.prepare(propertyRecord12, (int) (short) -1, idSequence14,
        cursorContext15);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord17 = propertyRecordFormat11.newRecord();
    long long18 = propertyRecordFormat5.getNextRecordReference(propertyRecord17);
    int int19 = propertyRecordFormat5.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat20 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader21 = null;
    int int22 = propertyRecordFormat20.getRecordSize(storeHeader21);
    long long23 = propertyRecordFormat20.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum highLimitEncEnum24 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8;
    boolean boolean25 = propertyRecordFormat20.equals((java.lang.Object) highLimitEncEnum24);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat26 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord27 = null;
    org.neo4j.internal.id.IdSequence idSequence29 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext30 = null;
    propertyRecordFormat26.prepare(propertyRecord27, (int) (short) -1, idSequence29,
        cursorContext30);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord32 = propertyRecordFormat26.newRecord();
    long long33 = propertyRecordFormat20.getNextRecordReference(propertyRecord32);
    long long34 = propertyRecordFormat5.getNextRecordReference(propertyRecord32);
    org.neo4j.io.pagecache.PageCursor pageCursor35 = null;
    try {
      propertyRecordFormat0.write(propertyRecord32, pageCursor35, 30, 4);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 48 + "'", int4 == 48);
    org.junit.Assert.assertTrue("'" + int7 + "' != '" + 48 + "'", int7 == 48);
    org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1125899906842623L + "'",
        long8 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + highLimitEncEnum9 + "' != '"
            + io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8 + "'",
        highLimitEncEnum9.equals(
            io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8));
    org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    org.junit.Assert.assertNotNull(propertyRecord17);
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    org.junit.Assert.assertTrue("'" + int22 + "' != '" + 48 + "'", int22 == 48);
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1125899906842623L + "'",
        long23 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + highLimitEncEnum24 + "' != '"
            + io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8 + "'",
        highLimitEncEnum24.equals(
            io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8));
    org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    org.junit.Assert.assertNotNull(propertyRecord32);
    org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
    org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
  }

  @Test
  public void test0543() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0543");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.storageengine.api.format.Capability capability1 = null;
    boolean boolean2 = v310_0.hasCapability(capability1);
    int int3 = v310_0.generation();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat4 = v310_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.MetaDataRecord> metaDataRecordRecordFormat5 = v310_0.metaData();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat4);
    org.junit.Assert.assertNotNull(metaDataRecordRecordFormat5);
  }

  @Test
  public void test0544() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0544");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod(54L,
        (long) (byte) 100);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 118L + "'", long2 == 118L);
  }

  @Test
  public void test0545() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0545");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord1 = propertyRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord4 = propertyRecordFormat3.newRecord();
    long long5 = propertyOneByteHeaderRecordFormat2.getNextRecordReference(propertyRecord4);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat6 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord8 = propertyRecordFormat7.newRecord();
    long long9 = propertyOneByteHeaderRecordFormat6.getNextRecordReference(propertyRecord8);
    long long10 = propertyOneByteHeaderRecordFormat2.getNextRecordReference(propertyRecord8);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat11 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long12 = propertyOneByteHeaderRecordFormat11.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord13 = propertyOneByteHeaderRecordFormat11.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat14 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long15 = propertyOneByteHeaderRecordFormat14.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord16 = propertyOneByteHeaderRecordFormat14.newRecord();
    long long17 = propertyOneByteHeaderRecordFormat11.getNextRecordReference(propertyRecord16);
    org.neo4j.internal.id.IdSequence idSequence19 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext20 = null;
    propertyOneByteHeaderRecordFormat2.prepare(propertyRecord16, (int) (byte) -1, idSequence19,
        cursorContext20);
    long long22 = propertyRecordFormat0.getNextRecordReference(propertyRecord16);
    org.junit.Assert.assertNotNull(propertyRecord1);
    org.junit.Assert.assertNotNull(propertyRecord4);
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord8);
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1125899906842623L + "'",
        long12 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord13);
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1125899906842623L + "'",
        long15 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord16);
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
  }

  @Test
  public void test0546() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0546");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod(119L, 65L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 119L + "'", long2 == 119L);
  }

  @Test
  public void test0547() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0547");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long1 = relationshipGroupHighLimitRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord3 = null;
    long long4 = relationshipGroupHighLimitRecordFormat2.getNextRecordReference(
        relationshipGroupRecord3);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord5 = relationshipGroupHighLimitRecordFormat2.newRecord();
    org.neo4j.internal.id.IdSequence idSequence7 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext8 = null;
    relationshipGroupHighLimitRecordFormat0.prepare(relationshipGroupRecord5, (int) (byte) 1,
        idSequence7, cursorContext8);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat10 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord11 = null;
    long long12 = relationshipGroupHighLimitRecordFormat10.getNextRecordReference(
        relationshipGroupRecord11);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord13 = relationshipGroupHighLimitRecordFormat10.newRecord();
    org.neo4j.internal.id.IdSequence idSequence15 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext16 = null;
    relationshipGroupHighLimitRecordFormat0.prepare(relationshipGroupRecord13, 0, idSequence15,
        cursorContext16);
    long long18 = relationshipGroupHighLimitRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord19 = relationshipGroupHighLimitRecordFormat0.newRecord();
    int int22 = relationshipGroupHighLimitRecordFormat0.getPageSize(32, 99);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat23 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader24 = null;
    int int25 = relationshipGroupRecordFormat23.getRecordSize(storeHeader24);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord26 = relationshipGroupRecordFormat23.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat27 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader28 = null;
    int int29 = relationshipGroupRecordFormat27.getRecordSize(storeHeader28);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat30 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long31 = relationshipGroupHighLimitRecordFormat30.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat32 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord33 = null;
    long long34 = relationshipGroupHighLimitRecordFormat32.getNextRecordReference(
        relationshipGroupRecord33);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord35 = relationshipGroupHighLimitRecordFormat32.newRecord();
    org.neo4j.internal.id.IdSequence idSequence37 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext38 = null;
    relationshipGroupHighLimitRecordFormat30.prepare(relationshipGroupRecord35, (int) (byte) 1,
        idSequence37, cursorContext38);
    org.neo4j.internal.id.IdSequence idSequence41 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext42 = null;
    relationshipGroupRecordFormat27.prepare(relationshipGroupRecord35, 0, idSequence41,
        cursorContext42);
    long long44 = relationshipGroupRecordFormat23.getNextRecordReference(relationshipGroupRecord35);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat45 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader46 = null;
    int int47 = relationshipGroupRecordFormat45.getRecordSize(storeHeader46);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord48 = relationshipGroupRecordFormat45.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat49 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader50 = null;
    int int51 = relationshipGroupRecordFormat49.getRecordSize(storeHeader50);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat52 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long53 = relationshipGroupHighLimitRecordFormat52.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat54 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord55 = null;
    long long56 = relationshipGroupHighLimitRecordFormat54.getNextRecordReference(
        relationshipGroupRecord55);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord57 = relationshipGroupHighLimitRecordFormat54.newRecord();
    org.neo4j.internal.id.IdSequence idSequence59 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext60 = null;
    relationshipGroupHighLimitRecordFormat52.prepare(relationshipGroupRecord57, (int) (byte) 1,
        idSequence59, cursorContext60);
    org.neo4j.internal.id.IdSequence idSequence63 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext64 = null;
    relationshipGroupRecordFormat49.prepare(relationshipGroupRecord57, 0, idSequence63,
        cursorContext64);
    long long66 = relationshipGroupRecordFormat45.getNextRecordReference(relationshipGroupRecord57);
    org.neo4j.internal.id.IdSequence idSequence68 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext69 = null;
    relationshipGroupRecordFormat23.prepare(relationshipGroupRecord57, 4, idSequence68,
        cursorContext69);
    org.neo4j.io.pagecache.PageCursor pageCursor71 = null;
    try {
      relationshipGroupHighLimitRecordFormat0.write(relationshipGroupRecord57, pageCursor71, 48,
          12);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord5);
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord13);
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1125899906842623L + "'",
        long18 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipGroupRecord19);
    org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    org.junit.Assert.assertTrue("'" + int25 + "' != '" + 32 + "'", int25 == 32);
    org.junit.Assert.assertNotNull(relationshipGroupRecord26);
    org.junit.Assert.assertTrue("'" + int29 + "' != '" + 32 + "'", int29 == 32);
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1125899906842623L + "'",
        long31 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord35);
    org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
    org.junit.Assert.assertTrue("'" + int47 + "' != '" + 32 + "'", int47 == 32);
    org.junit.Assert.assertNotNull(relationshipGroupRecord48);
    org.junit.Assert.assertTrue("'" + int51 + "' != '" + 32 + "'", int51 == 32);
    org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1125899906842623L + "'",
        long53 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-1L) + "'", long56 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord57);
    org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
  }

  @Test
  public void test0548() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0548");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) '4');
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord6 = relationshipHighLimitRecordFormat5.newRecord();
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    relationshipHighLimitRecordFormat3.prepare(relationshipRecord6, (int) 'a', idSequence8,
        cursorContext9);
    org.neo4j.internal.id.IdSequence idSequence12 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext13 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord6, 10, idSequence12,
        cursorContext13);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord15 = null;
    org.neo4j.io.pagecache.PageCursor pageCursor16 = null;
    try {
      relationshipHighLimitRecordFormat1.write(relationshipRecord15, pageCursor16, 32, 0);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(relationshipRecord6);
  }

  @Test
  public void test0549() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0549");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord2 = propertyRecordFormat1.newRecord();
    long long3 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord2);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader4 = null;
    int int5 = propertyOneByteHeaderRecordFormat0.getRecordSize(storeHeader4);
    int int8 = propertyOneByteHeaderRecordFormat0.getPageSize(0, (int) (short) 10);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat9 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader10 = null;
    int int11 = propertyRecordFormat9.getRecordSize(storeHeader10);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl12 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats13 = highLimitFactoryDefaultImpl12.newInstance();
    boolean boolean14 = propertyRecordFormat9.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl12);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat16 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean17 = propertyRecordFormat9.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord18 = null;
    org.neo4j.internal.id.IdSequence idSequence20 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext21 = null;
    propertyRecordFormat9.prepare(propertyRecord18, (int) (short) 0, idSequence20, cursorContext21);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat23 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord24 = propertyRecordFormat23.newRecord();
    org.neo4j.internal.id.IdSequence idSequence26 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext27 = null;
    propertyRecordFormat9.prepare(propertyRecord24, 52, idSequence26, cursorContext27);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord29 = propertyRecordFormat9.newRecord();
    org.neo4j.io.pagecache.PageCursor pageCursor30 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad31 = null;
    try {
      propertyOneByteHeaderRecordFormat0.read(propertyRecord29, pageCursor30, recordLoad31, 50, 10);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(propertyRecord2);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 48 + "'", int5 == 48);
    org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    org.junit.Assert.assertTrue("'" + int11 + "' != '" + 48 + "'", int11 == 48);
    org.junit.Assert.assertNotNull(recordFormats13);
    org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    org.junit.Assert.assertNotNull(propertyRecord24);
    org.junit.Assert.assertNotNull(propertyRecord29);
  }

  @Test
  public void test0550() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0550");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long1 = relationshipGroupHighLimitRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader2 = null;
    int int3 = relationshipGroupHighLimitRecordFormat0.getRecordSize(storeHeader2);
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
  }

  @Test
  public void test0551() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0551");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod(249L, 33L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 249L + "'", long2 == 249L);
  }

  @Test
  public void test0552() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0552");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.FactoryHighLimitRecordFormatsImpl factoryHighLimitRecordFormatsImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.FactoryHighLimitRecordFormatsImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats1 = factoryHighLimitRecordFormatsImpl0.newInstance();
    java.lang.String str2 = factoryHighLimitRecordFormatsImpl0.getName();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats3 = factoryHighLimitRecordFormatsImpl0.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats4 = factoryHighLimitRecordFormatsImpl0.newInstance();
    org.junit.Assert.assertNotNull(recordFormats1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limit" + "'", str2, "high_limit");
    org.junit.Assert.assertNotNull(recordFormats3);
    org.junit.Assert.assertNotNull(recordFormats4);
  }

  @Test
  public void test0553() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0553");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord1 = null;
    org.neo4j.internal.id.IdSequence idSequence3 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext4 = null;
    propertyRecordFormat0.prepare(propertyRecord1, (int) (short) -1, idSequence3, cursorContext4);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord6 = propertyRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat8 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord9 = propertyRecordFormat8.newRecord();
    long long10 = propertyOneByteHeaderRecordFormat7.getNextRecordReference(propertyRecord9);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader11 = null;
    int int12 = propertyOneByteHeaderRecordFormat7.getRecordSize(storeHeader11);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat13 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long14 = propertyOneByteHeaderRecordFormat13.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat16 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord17 = propertyRecordFormat16.newRecord();
    long long18 = propertyOneByteHeaderRecordFormat15.getNextRecordReference(propertyRecord17);
    long long19 = propertyOneByteHeaderRecordFormat13.getNextRecordReference(propertyRecord17);
    org.neo4j.internal.id.IdSequence idSequence21 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext22 = null;
    propertyOneByteHeaderRecordFormat7.prepare(propertyRecord17, 64, idSequence21, cursorContext22);
    long long24 = propertyRecordFormat0.getNextRecordReference(propertyRecord17);
    boolean boolean26 = propertyRecordFormat0.equals((java.lang.Object) 100);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat27 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader28 = null;
    int int29 = propertyRecordFormat27.getRecordSize(storeHeader28);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl30 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats31 = highLimitFactoryDefaultImpl30.newInstance();
    boolean boolean32 = propertyRecordFormat27.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl30);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat34 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean35 = propertyRecordFormat27.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord36 = propertyRecordFormat27.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat37 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader38 = null;
    int int39 = propertyRecordFormat37.getRecordSize(storeHeader38);
    long long40 = propertyRecordFormat37.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat41 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat42 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord43 = propertyRecordFormat42.newRecord();
    long long44 = propertyOneByteHeaderRecordFormat41.getNextRecordReference(propertyRecord43);
    org.neo4j.internal.id.IdSequence idSequence46 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext47 = null;
    propertyRecordFormat37.prepare(propertyRecord43, 0, idSequence46, cursorContext47);
    org.neo4j.internal.id.IdSequence idSequence50 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext51 = null;
    propertyRecordFormat27.prepare(propertyRecord43, 0, idSequence50, cursorContext51);
    long long53 = propertyRecordFormat0.getNextRecordReference(propertyRecord43);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat54 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader55 = null;
    int int56 = propertyRecordFormat54.getRecordSize(storeHeader55);
    long long57 = propertyRecordFormat54.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat58 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat59 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord60 = propertyRecordFormat59.newRecord();
    long long61 = propertyOneByteHeaderRecordFormat58.getNextRecordReference(propertyRecord60);
    org.neo4j.internal.id.IdSequence idSequence63 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext64 = null;
    propertyRecordFormat54.prepare(propertyRecord60, 0, idSequence63, cursorContext64);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat66 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader67 = null;
    int int68 = propertyRecordFormat66.getRecordSize(storeHeader67);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl69 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats70 = highLimitFactoryDefaultImpl69.newInstance();
    boolean boolean71 = propertyRecordFormat66.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl69);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat73 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean74 = propertyRecordFormat66.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord75 = null;
    org.neo4j.internal.id.IdSequence idSequence77 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext78 = null;
    propertyRecordFormat66.prepare(propertyRecord75, (int) (short) 0, idSequence77,
        cursorContext78);
    boolean boolean81 = propertyRecordFormat66.equals((java.lang.Object) "3.0.6");
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat82 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader83 = null;
    int int84 = propertyRecordFormat82.getRecordSize(storeHeader83);
    int int87 = propertyRecordFormat82.getPageSize((int) (byte) -1, 128);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat88 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long89 = propertyOneByteHeaderRecordFormat88.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord90 = propertyOneByteHeaderRecordFormat88.newRecord();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord91 = propertyOneByteHeaderRecordFormat88.newRecord();
    long long92 = propertyRecordFormat82.getNextRecordReference(propertyRecord91);
    long long93 = propertyRecordFormat66.getNextRecordReference(propertyRecord91);
    long long94 = propertyRecordFormat54.getNextRecordReference(propertyRecord91);
    org.neo4j.io.pagecache.PageCursor pageCursor95 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad96 = null;
    try {
      propertyRecordFormat0.read(propertyRecord91, pageCursor95, recordLoad96, (int) (byte) 0,
          (int) (byte) 100);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(propertyRecord6);
    org.junit.Assert.assertNotNull(propertyRecord9);
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 48 + "'", int12 == 48);
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1125899906842623L + "'",
        long14 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord17);
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    org.junit.Assert.assertTrue("'" + int29 + "' != '" + 48 + "'", int29 == 48);
    org.junit.Assert.assertNotNull(recordFormats31);
    org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    org.junit.Assert.assertNotNull(propertyRecord36);
    org.junit.Assert.assertTrue("'" + int39 + "' != '" + 48 + "'", int39 == 48);
    org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1125899906842623L + "'",
        long40 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord43);
    org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
    org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-1L) + "'", long53 == (-1L));
    org.junit.Assert.assertTrue("'" + int56 + "' != '" + 48 + "'", int56 == 48);
    org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1125899906842623L + "'",
        long57 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord60);
    org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
    org.junit.Assert.assertTrue("'" + int68 + "' != '" + 48 + "'", int68 == 48);
    org.junit.Assert.assertNotNull(recordFormats70);
    org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    org.junit.Assert.assertTrue("'" + int84 + "' != '" + 48 + "'", int84 == 48);
    org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    org.junit.Assert.assertTrue("'" + long89 + "' != '" + 1125899906842623L + "'",
        long89 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord90);
    org.junit.Assert.assertNotNull(propertyRecord91);
    org.junit.Assert.assertTrue("'" + long92 + "' != '" + (-1L) + "'", long92 == (-1L));
    org.junit.Assert.assertTrue("'" + long93 + "' != '" + (-1L) + "'", long93 == (-1L));
    org.junit.Assert.assertTrue("'" + long94 + "' != '" + (-1L) + "'", long94 == (-1L));
  }

  @Test
  public void test0554() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0554");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    int int1 = v300_0.generation();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat2 = v300_0.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat3 = v300_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat4 = v300_0.node();
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat3);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat4);
  }

  @Test
  public void test0555() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0555");
    }
    long long2 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.torete(24L,
        0L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-24L) + "'", long2 == (-24L));
  }

  @Test
  public void test0556() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0556");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v306_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat2 = v306_0.schema();
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_3 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat4 = v310_3.relationship();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType5 = null;
    boolean boolean6 = v306_0.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v310_3, capabilityType5);
    java.lang.String str7 = v310_3.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat8 = v310_3.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat9 = v310_3.property();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat2);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat4);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "high_limitV3_1_0" + "'", str7,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat8);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat9);
  }

  @Test
  public void test0557() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0557");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord2 = relationshipRecordFormat1.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord3 = relationshipRecordFormat1.newRecord();
    org.neo4j.internal.id.IdSequence idSequence5 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext6 = null;
    relationshipRecordFormat0.prepare(relationshipRecord3, 100, idSequence5, cursorContext6);
    int int10 = relationshipRecordFormat0.getPageSize(0, 3);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord11 = relationshipRecordFormat0.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord12 = relationshipRecordFormat0.newRecord();
    try {
      int int15 = relationshipRecordFormat0.getPageSize(64, 0);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.ArithmeticException; message: / by zero");
    } catch (java.lang.ArithmeticException e) {
    }
    org.junit.Assert.assertNotNull(relationshipRecord2);
    org.junit.Assert.assertNotNull(relationshipRecord3);
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord11);
    org.junit.Assert.assertNotNull(relationshipRecord12);
  }

  @Test
  public void test0558() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0558");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v310_0.relationship();
    java.lang.String str2 = v310_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat3 = v310_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat4 = v310_0.node();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray5 = v310_0.capabilities();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat6 = v310_0.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat7 = v310_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat8 = v310_0.labelToken();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_1_0" + "'", str2,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat3);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat4);
    org.junit.Assert.assertNotNull(capabilityArray5);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat6);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat7);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat8);
  }

  @Test
  public void test0559() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0559");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) ' ');
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord3 = null;
    long long4 = nodeRecordFormat2.getNextRecordReference(nodeRecord3);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord5 = nodeRecordFormat2.newRecord();
    org.neo4j.internal.id.IdSequence idSequence7 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext8 = null;
    nodeHighLimitRecordFormat1.prepare(nodeRecord5, 32, idSequence7, cursorContext8);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord10 = null;
    try {
      int int11 = nodeHighLimitRecordFormat1.rerdtlgForRE(nodeRecord10);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
    org.junit.Assert.assertNotNull(nodeRecord5);
  }

  @Test
  public void test0560() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0560");
    }
    java.util.function.Function<org.neo4j.kernel.impl.store.StoreHeader, java.lang.Integer> storeHeaderFunction1 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.fixedRecordSize(
        64);
    org.junit.Assert.assertNotNull(storeHeaderFunction1);
  }

  @Test
  public void test0561() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0561");
    }
    long long2 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.toable(62L,
        (long) 3);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 65L + "'", long2 == 65L);
  }

  @Test
  public void test0562() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0562");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord2 = propertyRecordFormat1.newRecord();
    long long3 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord2);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord6 = propertyRecordFormat5.newRecord();
    long long7 = propertyOneByteHeaderRecordFormat4.getNextRecordReference(propertyRecord6);
    long long8 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord6);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat9 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long10 = propertyOneByteHeaderRecordFormat9.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord11 = propertyOneByteHeaderRecordFormat9.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long13 = propertyOneByteHeaderRecordFormat12.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord14 = propertyOneByteHeaderRecordFormat12.newRecord();
    long long15 = propertyOneByteHeaderRecordFormat9.getNextRecordReference(propertyRecord14);
    org.neo4j.internal.id.IdSequence idSequence17 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext18 = null;
    propertyOneByteHeaderRecordFormat0.prepare(propertyRecord14, (int) (byte) -1, idSequence17,
        cursorContext18);
    int int20 = propertyOneByteHeaderRecordFormat0.getRecordHeaderSize();
    org.neo4j.io.pagecache.PageCursor pageCursor21 = null;
    try {
      boolean boolean22 = propertyOneByteHeaderRecordFormat0.isInUse(pageCursor21);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(propertyRecord2);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord6);
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
    org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1125899906842623L + "'",
        long10 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord11);
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1125899906842623L + "'",
        long13 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord14);
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
    org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
  }

  @Test
  public void test0563() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0563");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod((-1L), 239L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
  }

  @Test
  public void test0564() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0564");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) '4');
    org.neo4j.kernel.impl.store.StoreHeader storeHeader2 = null;
    int int3 = nodeHighLimitRecordFormat1.getRecordSize(storeHeader2);
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
  }

  @Test
  public void test0565() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0565");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v300_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat2 = v300_0.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat3 = v300_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.MetaDataRecord> metaDataRecordRecordFormat4 = v300_0.metaData();
    java.lang.String str5 = v300_0.introductionVersion();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat6 = v300_0.dynamic();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat3);
    org.junit.Assert.assertNotNull(metaDataRecordRecordFormat4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "3.0.0" + "'", str5, "3.0.0");
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat6);
  }

  @Test
  public void test0566() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0566");
    }
    io.github.onograph.internal.batchimport.EnterpriseBatchImporterFactory enterpriseBatchImporterFactory0 = new io.github.onograph.internal.batchimport.EnterpriseBatchImporterFactory();
    org.neo4j.io.layout.DatabaseLayout databaseLayout1 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction2 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer3 = null;
    org.neo4j.internal.batchimport.Configuration configuration4 = null;
    org.neo4j.logging.internal.LogService logService5 = null;
    org.neo4j.internal.batchimport.staging.ExecutionMonitor executionMonitor6 = null;
    org.neo4j.internal.batchimport.AdditionalInitialIds additionalInitialIds7 = null;
    org.neo4j.configuration.Config config8 = null;
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_9 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat10 = v310_9.relationship();
    java.lang.String str11 = v310_9.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat12 = v310_9.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat13 = v310_9.node();
    org.neo4j.internal.batchimport.ImportLogic.Monitor monitor14 = null;
    org.neo4j.scheduler.JobScheduler jobScheduler15 = null;
    org.neo4j.internal.batchimport.input.Collector collector16 = null;
    org.neo4j.storageengine.api.LogFilesInitializer logFilesInitializer17 = null;
    org.neo4j.internal.batchimport.IndexImporterFactory indexImporterFactory18 = null;
    org.neo4j.memory.MemoryTracker memoryTracker19 = null;
    try {
      org.neo4j.internal.batchimport.BatchImporter batchImporter20 = enterpriseBatchImporterFactory0.instantiate(
          databaseLayout1, fileSystemAbstraction2, pageCacheTracer3, configuration4, logService5,
          executionMonitor6, additionalInitialIds7, config8,
          (org.neo4j.kernel.impl.store.format.RecordFormats) v310_9, monitor14, jobScheduler15,
          collector16, logFilesInitializer17, indexImporterFactory18, memoryTracker19);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat10);
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "high_limitV3_1_0" + "'", str11,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat12);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat13);
  }

  @Test
  public void test0567() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0567");
    }
    int int1 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.leg(119L);
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 3 + "'", int1 == 3);
  }

  @Test
  public void test0568() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0568");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord2 = propertyRecordFormat1.newRecord();
    long long3 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord2);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long5 = propertyOneByteHeaderRecordFormat4.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat6 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord8 = propertyRecordFormat7.newRecord();
    long long9 = propertyOneByteHeaderRecordFormat6.getNextRecordReference(propertyRecord8);
    long long10 = propertyOneByteHeaderRecordFormat4.getNextRecordReference(propertyRecord8);
    long long11 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord8);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader13 = null;
    int int14 = propertyRecordFormat12.getRecordSize(storeHeader13);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl15 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats16 = highLimitFactoryDefaultImpl15.newInstance();
    boolean boolean17 = propertyRecordFormat12.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl15);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat19 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean20 = propertyRecordFormat12.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord21 = propertyRecordFormat12.newRecord();
    long long22 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord21);
    int int23 = propertyOneByteHeaderRecordFormat0.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat24 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader25 = null;
    int int26 = propertyRecordFormat24.getRecordSize(storeHeader25);
    long long27 = propertyRecordFormat24.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat28 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat29 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord30 = propertyRecordFormat29.newRecord();
    long long31 = propertyOneByteHeaderRecordFormat28.getNextRecordReference(propertyRecord30);
    org.neo4j.internal.id.IdSequence idSequence33 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext34 = null;
    propertyRecordFormat24.prepare(propertyRecord30, 0, idSequence33, cursorContext34);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat36 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader37 = null;
    int int38 = propertyRecordFormat36.getRecordSize(storeHeader37);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl39 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats40 = highLimitFactoryDefaultImpl39.newInstance();
    boolean boolean41 = propertyRecordFormat36.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl39);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat43 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean44 = propertyRecordFormat36.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord45 = null;
    org.neo4j.internal.id.IdSequence idSequence47 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext48 = null;
    propertyRecordFormat36.prepare(propertyRecord45, (int) (short) 0, idSequence47,
        cursorContext48);
    boolean boolean51 = propertyRecordFormat36.equals((java.lang.Object) "3.0.6");
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat52 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader53 = null;
    int int54 = propertyRecordFormat52.getRecordSize(storeHeader53);
    int int57 = propertyRecordFormat52.getPageSize((int) (byte) -1, 128);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat58 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long59 = propertyOneByteHeaderRecordFormat58.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord60 = propertyOneByteHeaderRecordFormat58.newRecord();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord61 = propertyOneByteHeaderRecordFormat58.newRecord();
    long long62 = propertyRecordFormat52.getNextRecordReference(propertyRecord61);
    long long63 = propertyRecordFormat36.getNextRecordReference(propertyRecord61);
    long long64 = propertyRecordFormat24.getNextRecordReference(propertyRecord61);
    org.neo4j.io.pagecache.PageCursor pageCursor65 = null;
    try {
      propertyOneByteHeaderRecordFormat0.write(propertyRecord61, pageCursor65, (int) 'a',
          (int) (short) 1);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(propertyRecord2);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1125899906842623L + "'",
        long5 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord8);
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    org.junit.Assert.assertTrue("'" + int14 + "' != '" + 48 + "'", int14 == 48);
    org.junit.Assert.assertNotNull(recordFormats16);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    org.junit.Assert.assertNotNull(propertyRecord21);
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
    org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    org.junit.Assert.assertTrue("'" + int26 + "' != '" + 48 + "'", int26 == 48);
    org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1125899906842623L + "'",
        long27 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord30);
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
    org.junit.Assert.assertTrue("'" + int38 + "' != '" + 48 + "'", int38 == 48);
    org.junit.Assert.assertNotNull(recordFormats40);
    org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    org.junit.Assert.assertTrue("'" + int54 + "' != '" + 48 + "'", int54 == 48);
    org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1125899906842623L + "'",
        long59 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord60);
    org.junit.Assert.assertNotNull(propertyRecord61);
    org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-1L) + "'", long62 == (-1L));
    org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
    org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-1L) + "'", long64 == (-1L));
  }

  @Test
  public void test0569() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0569");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat6 = v300_1.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat7 = v300_1.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.MetaDataRecord> metaDataRecordRecordFormat8 = v300_1.metaData();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat9 = v300_1.relationshipGroup();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat6);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat7);
    org.junit.Assert.assertNotNull(metaDataRecordRecordFormat8);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat9);
  }

  @Test
  public void test0570() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0570");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.NodeRecordFormat nodeRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.NodeRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord2 = null;
    long long3 = nodeRecordFormat1.getNextRecordReference(nodeRecord2);
    int int4 = nodeRecordFormat1.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader5 = null;
    int int6 = nodeRecordFormat1.getRecordSize(storeHeader5);
    int int9 = nodeRecordFormat1.getPageSize((int) '4', (int) (short) 1);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord10 = nodeRecordFormat1.newRecord();
    int int11 = nodeRecordFormat0.rerdtlgForRE(nodeRecord10);
    long long12 = nodeRecordFormat0.getMaxId();
    int int13 = nodeRecordFormat0.getRecordHeaderSize();
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    org.junit.Assert.assertTrue("'" + int6 + "' != '" + 16 + "'", int6 == 16);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
    org.junit.Assert.assertNotNull(nodeRecord10);
    org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1125899906842623L + "'",
        long12 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
  }

  @Test
  public void test0571() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0571");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_6 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat7 = v306_6.node();
    org.neo4j.storageengine.api.format.Capability capability8 = null;
    boolean boolean9 = v306_6.hasCapability(capability8);
    org.neo4j.storageengine.api.format.CapabilityType capabilityType10 = null;
    boolean boolean11 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_6, capabilityType10);
    org.neo4j.storageengine.api.format.Capability capability12 = null;
    boolean boolean13 = v306_6.hasCapability(capability12);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat14 = v306_6.relationship();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat7);
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat14);
  }

  @Test
  public void test0572() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0572");
    }
    org.neo4j.io.pagecache.PageCursor pageCursor1 = null;
    try {
      io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.enoForPa(
          (long) (byte) 1, pageCursor1);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test0573() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0573");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.NodeRecordFormat nodeRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.NodeRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord2 = null;
    long long3 = nodeRecordFormat1.getNextRecordReference(nodeRecord2);
    int int4 = nodeRecordFormat1.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader5 = null;
    int int6 = nodeRecordFormat1.getRecordSize(storeHeader5);
    int int9 = nodeRecordFormat1.getPageSize((int) '4', (int) (short) 1);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord10 = nodeRecordFormat1.newRecord();
    int int11 = nodeRecordFormat0.rerdtlgForRE(nodeRecord10);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader12 = null;
    int int13 = nodeRecordFormat0.getRecordSize(storeHeader12);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.NodeRecordFormat nodeRecordFormat14 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.NodeRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord16 = null;
    long long17 = nodeRecordFormat15.getNextRecordReference(nodeRecord16);
    int int18 = nodeRecordFormat15.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader19 = null;
    int int20 = nodeRecordFormat15.getRecordSize(storeHeader19);
    int int23 = nodeRecordFormat15.getPageSize((int) '4', (int) (short) 1);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord24 = nodeRecordFormat15.newRecord();
    int int25 = nodeRecordFormat14.rerdtlgForRE(nodeRecord24);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord26 = nodeRecordFormat14.newRecord();
    long long27 = nodeRecordFormat0.getNextRecordReference(nodeRecord26);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    org.junit.Assert.assertTrue("'" + int6 + "' != '" + 16 + "'", int6 == 16);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
    org.junit.Assert.assertNotNull(nodeRecord10);
    org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16);
    org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
    org.junit.Assert.assertNotNull(nodeRecord24);
    org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    org.junit.Assert.assertNotNull(nodeRecord26);
    org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
  }

  @Test
  public void test0574() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0574");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord1 = relationshipRecordFormat0.newRecord();
    int int2 = relationshipRecordFormat0.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord5 = relationshipRecordFormat4.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord6 = relationshipRecordFormat4.newRecord();
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    relationshipRecordFormat3.prepare(relationshipRecord6, 100, idSequence8, cursorContext9);
    long long11 = relationshipRecordFormat0.getNextRecordReference(relationshipRecord6);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat13 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord14 = relationshipRecordFormat13.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord15 = relationshipRecordFormat13.newRecord();
    org.neo4j.internal.id.IdSequence idSequence17 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext18 = null;
    relationshipRecordFormat12.prepare(relationshipRecord15, 100, idSequence17, cursorContext18);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat21 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord22 = relationshipHighLimitRecordFormat21.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat24 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord25 = relationshipHighLimitRecordFormat24.newRecord();
    org.neo4j.internal.id.IdSequence idSequence27 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext28 = null;
    relationshipHighLimitRecordFormat21.prepare(relationshipRecord25, (int) (short) 1, idSequence27,
        cursorContext28);
    org.neo4j.internal.id.IdSequence idSequence31 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext32 = null;
    relationshipRecordFormat12.prepare(relationshipRecord25, 24, idSequence31, cursorContext32);
    long long34 = relationshipRecordFormat0.getNextRecordReference(relationshipRecord25);
    org.neo4j.io.pagecache.PageCursor pageCursor35 = null;
    try {
      boolean boolean36 = relationshipRecordFormat0.isInUse(pageCursor35);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(relationshipRecord1);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord5);
    org.junit.Assert.assertNotNull(relationshipRecord6);
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord14);
    org.junit.Assert.assertNotNull(relationshipRecord15);
    org.junit.Assert.assertNotNull(relationshipRecord22);
    org.junit.Assert.assertNotNull(relationshipRecord25);
    org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
  }

  @Test
  public void test0575() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0575");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod((long) 0,
        (-3L));
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-3L) + "'", long2 == (-3L));
  }

  @Test
  public void test0576() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0576");
    }
    org.neo4j.internal.batchimport.AdditionalInitialIds additionalInitialIds0 = null;
    org.neo4j.internal.batchimport.input.Collector collector1 = null;
    org.neo4j.internal.batchimport.Configuration configuration2 = null;
    org.neo4j.configuration.Config config3 = null;
    org.neo4j.io.layout.DatabaseLayout databaseLayout4 = null;
    org.neo4j.internal.batchimport.staging.ExecutionMonitor executionMonitor5 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.internal.batchimport.IndexImporterFactory indexImporterFactory7 = null;
    org.neo4j.scheduler.JobScheduler jobScheduler8 = null;
    org.neo4j.storageengine.api.LogFilesInitializer logFilesInitializer9 = null;
    org.neo4j.logging.internal.LogService logService10 = null;
    org.neo4j.memory.MemoryTracker memoryTracker11 = null;
    org.neo4j.internal.batchimport.ImportLogic.Monitor monitor12 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer13 = null;
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_14 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat15 = v306_14.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat16 = v306_14.schema();
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_17 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat18 = v310_17.relationship();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType19 = null;
    boolean boolean20 = v306_14.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v310_17, capabilityType19);
    java.lang.String str21 = v310_17.name();
    java.lang.String str22 = v310_17.name();
    try {
      io.github.onograph.internal.batchimport.EnterpriseBatchImporter enterpriseBatchImporter23 = new io.github.onograph.internal.batchimport.EnterpriseBatchImporter(
          additionalInitialIds0, collector1, configuration2, config3, databaseLayout4,
          executionMonitor5, fileSystemAbstraction6, indexImporterFactory7, jobScheduler8,
          logFilesInitializer9, logService10, memoryTracker11, monitor12, pageCacheTracer13,
          (org.neo4j.kernel.impl.store.format.RecordFormats) v310_17);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat15);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat16);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat18);
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    org.junit.Assert.assertEquals("'" + str21 + "' != '" + "high_limitV3_1_0" + "'", str21,
        "high_limitV3_1_0");
    org.junit.Assert.assertEquals("'" + str22 + "' != '" + "high_limitV3_1_0" + "'", str22,
        "high_limitV3_1_0");
  }

  @Test
  public void test0577() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0577");
    }
    long long2 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.toable(
        (-24L), 139L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 115L + "'", long2 == 115L);
  }

  @Test
  public void test0578() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0578");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = propertyRecordFormat0.getRecordSize(storeHeader1);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader3 = null;
    int int4 = propertyRecordFormat0.getRecordSize(storeHeader3);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl5 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean7 = recordFormatDynamicRecordImpl5.equals((java.lang.Object) 100.0f);
    int int10 = recordFormatDynamicRecordImpl5.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord11 = recordFormatDynamicRecordImpl5.newRecord();
    int int14 = recordFormatDynamicRecordImpl5.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord15 = recordFormatDynamicRecordImpl5.newRecord();
    int int18 = recordFormatDynamicRecordImpl5.getPageSize((int) '4', (int) (short) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_19 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat20 = v320_19.relationship();
    boolean boolean21 = recordFormatDynamicRecordImpl5.equals((java.lang.Object) v320_19);
    boolean boolean22 = propertyRecordFormat0.equals(
        (java.lang.Object) recordFormatDynamicRecordImpl5);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl23 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean25 = recordFormatDynamicRecordImpl23.equals((java.lang.Object) 100.0f);
    long long26 = recordFormatDynamicRecordImpl23.getMaxId();
    int int29 = recordFormatDynamicRecordImpl23.getPageSize(64, 48);
    int int32 = recordFormatDynamicRecordImpl23.getPageSize(10, (int) (short) 100);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord33 = recordFormatDynamicRecordImpl23.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl34 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean36 = recordFormatDynamicRecordImpl34.equals((java.lang.Object) 100.0f);
    int int39 = recordFormatDynamicRecordImpl34.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord40 = recordFormatDynamicRecordImpl34.newRecord();
    int int43 = recordFormatDynamicRecordImpl34.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord44 = recordFormatDynamicRecordImpl34.newRecord();
    org.neo4j.internal.id.IdSequence idSequence46 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext47 = null;
    recordFormatDynamicRecordImpl23.prepare(dynamicRecord44, 24, idSequence46, cursorContext47);
    long long49 = recordFormatDynamicRecordImpl5.getNextRecordReference(dynamicRecord44);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 48 + "'", int4 == 48);
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord11);
    org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord15);
    org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat20);
    org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1125899906842623L + "'",
        long26 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int29 + "' != '" + 48 + "'", int29 == 48);
    org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    org.junit.Assert.assertNotNull(dynamicRecord33);
    org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    org.junit.Assert.assertTrue("'" + int39 + "' != '" + 16 + "'", int39 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord40);
    org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord44);
    org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
  }

  @Test
  public void test0579() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0579");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl6 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    int int9 = recordFormatDynamicRecordImpl6.getPageSize(24, 8);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl10 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean12 = recordFormatDynamicRecordImpl10.equals((java.lang.Object) 100.0f);
    int int15 = recordFormatDynamicRecordImpl10.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord16 = recordFormatDynamicRecordImpl10.newRecord();
    long long17 = recordFormatDynamicRecordImpl6.getNextRecordReference(dynamicRecord16);
    org.neo4j.internal.id.IdSequence idSequence19 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext20 = null;
    recordFormatDynamicRecordImpl0.prepare(dynamicRecord16, 10, idSequence19, cursorContext20);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat22 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat23 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord24 = propertyRecordFormat23.newRecord();
    long long25 = propertyOneByteHeaderRecordFormat22.getNextRecordReference(propertyRecord24);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat26 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat27 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord28 = propertyRecordFormat27.newRecord();
    long long29 = propertyOneByteHeaderRecordFormat26.getNextRecordReference(propertyRecord28);
    long long30 = propertyOneByteHeaderRecordFormat22.getNextRecordReference(propertyRecord28);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat31 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long32 = propertyOneByteHeaderRecordFormat31.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord33 = propertyOneByteHeaderRecordFormat31.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat34 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long35 = propertyOneByteHeaderRecordFormat34.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord36 = propertyOneByteHeaderRecordFormat34.newRecord();
    long long37 = propertyOneByteHeaderRecordFormat31.getNextRecordReference(propertyRecord36);
    org.neo4j.internal.id.IdSequence idSequence39 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext40 = null;
    propertyOneByteHeaderRecordFormat22.prepare(propertyRecord36, (int) (byte) -1, idSequence39,
        cursorContext40);
    boolean boolean42 = recordFormatDynamicRecordImpl0.equals(
        (java.lang.Object) propertyOneByteHeaderRecordFormat22);
    int int45 = propertyOneByteHeaderRecordFormat22.getPageSize((int) 'a', 52);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat46 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord47 = propertyRecordFormat46.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat48 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader49 = null;
    int int50 = propertyRecordFormat48.getRecordSize(storeHeader49);
    long long51 = propertyRecordFormat48.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat52 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat53 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord54 = propertyRecordFormat53.newRecord();
    long long55 = propertyOneByteHeaderRecordFormat52.getNextRecordReference(propertyRecord54);
    org.neo4j.internal.id.IdSequence idSequence57 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext58 = null;
    propertyRecordFormat48.prepare(propertyRecord54, 0, idSequence57, cursorContext58);
    long long60 = propertyRecordFormat46.getNextRecordReference(propertyRecord54);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat61 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader62 = null;
    int int63 = propertyRecordFormat61.getRecordSize(storeHeader62);
    int int66 = propertyRecordFormat61.getPageSize((int) (byte) -1, 128);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat67 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long68 = propertyOneByteHeaderRecordFormat67.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord69 = propertyOneByteHeaderRecordFormat67.newRecord();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord70 = propertyOneByteHeaderRecordFormat67.newRecord();
    long long71 = propertyRecordFormat61.getNextRecordReference(propertyRecord70);
    long long72 = propertyRecordFormat46.getNextRecordReference(propertyRecord70);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader73 = null;
    int int74 = propertyRecordFormat46.getRecordSize(storeHeader73);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord75 = propertyRecordFormat46.newRecord();
    org.neo4j.internal.id.IdSequence idSequence77 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext78 = null;
    propertyOneByteHeaderRecordFormat22.prepare(propertyRecord75, (-1), idSequence77,
        cursorContext78);
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 24 + "'", int9 == 24);
    org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    org.junit.Assert.assertTrue("'" + int15 + "' != '" + 16 + "'", int15 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord16);
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord24);
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord28);
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
    org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
    org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1125899906842623L + "'",
        long32 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord33);
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1125899906842623L + "'",
        long35 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord36);
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
    org.junit.Assert.assertNotNull(propertyRecord47);
    org.junit.Assert.assertTrue("'" + int50 + "' != '" + 48 + "'", int50 == 48);
    org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1125899906842623L + "'",
        long51 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord54);
    org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
    org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-1L) + "'", long60 == (-1L));
    org.junit.Assert.assertTrue("'" + int63 + "' != '" + 48 + "'", int63 == 48);
    org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1125899906842623L + "'",
        long68 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord69);
    org.junit.Assert.assertNotNull(propertyRecord70);
    org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-1L) + "'", long71 == (-1L));
    org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-1L) + "'", long72 == (-1L));
    org.junit.Assert.assertTrue("'" + int74 + "' != '" + 48 + "'", int74 == 48);
    org.junit.Assert.assertNotNull(propertyRecord75);
  }

  @Test
  public void test0580() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0580");
    }
    java.util.function.Function<org.neo4j.kernel.impl.store.StoreHeader, java.lang.Integer> storeHeaderFunction1 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.fixedRecordSize(
        2);
    org.junit.Assert.assertNotNull(storeHeaderFunction1);
  }

  @Test
  public void test0581() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0581");
    }
    java.util.function.Function<org.neo4j.kernel.impl.store.StoreHeader, java.lang.Integer> storeHeaderFunction1 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.fixedRecordSize(
        (int) (short) 100);
    org.junit.Assert.assertNotNull(storeHeaderFunction1);
  }

  @Test
  public void test0582() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0582");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl3 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean5 = recordFormatDynamicRecordImpl3.equals((java.lang.Object) 100.0f);
    int int8 = recordFormatDynamicRecordImpl3.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord9 = recordFormatDynamicRecordImpl3.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl10 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean12 = recordFormatDynamicRecordImpl10.equals((java.lang.Object) 100.0f);
    int int15 = recordFormatDynamicRecordImpl10.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord16 = recordFormatDynamicRecordImpl10.newRecord();
    long long17 = recordFormatDynamicRecordImpl3.getNextRecordReference(dynamicRecord16);
    int int18 = recordFormatDynamicRecordImpl3.getRecordHeaderSize();
    int int19 = recordFormatDynamicRecordImpl3.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord20 = recordFormatDynamicRecordImpl3.newRecord();
    org.neo4j.io.pagecache.PageCursor pageCursor21 = null;
    try {
      recordFormatDynamicRecordImpl0.write(dynamicRecord20, pageCursor21, 100, (int) (byte) 10);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    org.junit.Assert.assertTrue("'" + int8 + "' != '" + 16 + "'", int8 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord9);
    org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    org.junit.Assert.assertTrue("'" + int15 + "' != '" + 16 + "'", int15 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord16);
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    org.junit.Assert.assertTrue("'" + int18 + "' != '" + 12 + "'", int18 == 12);
    org.junit.Assert.assertTrue("'" + int19 + "' != '" + 12 + "'", int19 == 12);
    org.junit.Assert.assertNotNull(dynamicRecord20);
  }

  @Test
  public void test0583() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0583");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod(0L, 14L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 14L + "'", long2 == 14L);
  }

  @Test
  public void test0584() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0584");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord1 = propertyRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader3 = null;
    int int4 = propertyRecordFormat2.getRecordSize(storeHeader3);
    long long5 = propertyRecordFormat2.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat6 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord8 = propertyRecordFormat7.newRecord();
    long long9 = propertyOneByteHeaderRecordFormat6.getNextRecordReference(propertyRecord8);
    org.neo4j.internal.id.IdSequence idSequence11 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext12 = null;
    propertyRecordFormat2.prepare(propertyRecord8, 0, idSequence11, cursorContext12);
    long long14 = propertyRecordFormat0.getNextRecordReference(propertyRecord8);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader16 = null;
    int int17 = propertyRecordFormat15.getRecordSize(storeHeader16);
    int int20 = propertyRecordFormat15.getPageSize((int) (byte) -1, 128);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat21 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long22 = propertyOneByteHeaderRecordFormat21.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord23 = propertyOneByteHeaderRecordFormat21.newRecord();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord24 = propertyOneByteHeaderRecordFormat21.newRecord();
    long long25 = propertyRecordFormat15.getNextRecordReference(propertyRecord24);
    long long26 = propertyRecordFormat0.getNextRecordReference(propertyRecord24);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat27 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long28 = propertyOneByteHeaderRecordFormat27.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat29 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat30 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord31 = propertyRecordFormat30.newRecord();
    long long32 = propertyOneByteHeaderRecordFormat29.getNextRecordReference(propertyRecord31);
    long long33 = propertyOneByteHeaderRecordFormat27.getNextRecordReference(propertyRecord31);
    long long34 = propertyRecordFormat0.getNextRecordReference(propertyRecord31);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat35 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat36 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord37 = propertyRecordFormat36.newRecord();
    long long38 = propertyOneByteHeaderRecordFormat35.getNextRecordReference(propertyRecord37);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat39 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat40 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord41 = propertyRecordFormat40.newRecord();
    long long42 = propertyOneByteHeaderRecordFormat39.getNextRecordReference(propertyRecord41);
    long long43 = propertyOneByteHeaderRecordFormat35.getNextRecordReference(propertyRecord41);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat44 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long45 = propertyOneByteHeaderRecordFormat44.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord46 = propertyOneByteHeaderRecordFormat44.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat47 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long48 = propertyOneByteHeaderRecordFormat47.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord49 = propertyOneByteHeaderRecordFormat47.newRecord();
    long long50 = propertyOneByteHeaderRecordFormat44.getNextRecordReference(propertyRecord49);
    org.neo4j.internal.id.IdSequence idSequence52 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext53 = null;
    propertyOneByteHeaderRecordFormat35.prepare(propertyRecord49, (int) (byte) -1, idSequence52,
        cursorContext53);
    org.neo4j.io.pagecache.PageCursor pageCursor55 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad56 = null;
    try {
      propertyRecordFormat0.read(propertyRecord49, pageCursor55, recordLoad56, 0, (int) (byte) 10);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(propertyRecord1);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 48 + "'", int4 == 48);
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1125899906842623L + "'",
        long5 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord8);
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    org.junit.Assert.assertTrue("'" + int17 + "' != '" + 48 + "'", int17 == 48);
    org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1125899906842623L + "'",
        long22 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord23);
    org.junit.Assert.assertNotNull(propertyRecord24);
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
    org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1125899906842623L + "'",
        long28 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord31);
    org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
    org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
    org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord37);
    org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord41);
    org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
    org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
    org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1125899906842623L + "'",
        long45 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord46);
    org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1125899906842623L + "'",
        long48 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord49);
    org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
  }

  @Test
  public void test0585() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0585");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat1 = v320_0.dynamic();
    java.lang.String str2 = v320_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat3 = v320_0.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat4 = v320_0.relationshipGroup();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat5 = v320_0.relationshipGroup();
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_2_0" + "'", str2,
        "high_limitV3_2_0");
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat3);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat4);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat5);
  }

  @Test
  public void test0586() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0586");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord1 = null;
    long long2 = nodeRecordFormat0.getNextRecordReference(nodeRecord1);
    int int3 = nodeRecordFormat0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader4 = null;
    int int5 = nodeRecordFormat0.getRecordSize(storeHeader4);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader6 = null;
    int int7 = nodeRecordFormat0.getRecordSize(storeHeader6);
    int int10 = nodeRecordFormat0.getPageSize(100, (int) (byte) -1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat11 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long13 = relationshipGroupHighLimitRecordFormat12.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat14 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord15 = null;
    long long16 = relationshipGroupHighLimitRecordFormat14.getNextRecordReference(
        relationshipGroupRecord15);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord17 = relationshipGroupHighLimitRecordFormat14.newRecord();
    org.neo4j.internal.id.IdSequence idSequence19 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext20 = null;
    relationshipGroupHighLimitRecordFormat12.prepare(relationshipGroupRecord17, (int) (byte) 1,
        idSequence19, cursorContext20);
    long long22 = relationshipGroupHighLimitRecordFormat11.getNextRecordReference(
        relationshipGroupRecord17);
    boolean boolean23 = nodeRecordFormat0.equals(
        (java.lang.Object) relationshipGroupHighLimitRecordFormat11);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat24 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long25 = relationshipGroupHighLimitRecordFormat24.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat26 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord27 = null;
    long long28 = relationshipGroupHighLimitRecordFormat26.getNextRecordReference(
        relationshipGroupRecord27);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord29 = relationshipGroupHighLimitRecordFormat26.newRecord();
    org.neo4j.internal.id.IdSequence idSequence31 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext32 = null;
    relationshipGroupHighLimitRecordFormat24.prepare(relationshipGroupRecord29, 0, idSequence31,
        cursorContext32);
    org.neo4j.io.pagecache.PageCursor pageCursor34 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad35 = null;
    try {
      relationshipGroupHighLimitRecordFormat11.read(relationshipGroupRecord29, pageCursor34,
          recordLoad35, 50, 100);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1125899906842623L + "'",
        long13 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord17);
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1125899906842623L + "'",
        long25 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord29);
  }

  @Test
  public void test0587() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0587");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = propertyRecordFormat0.getRecordSize(storeHeader1);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl3 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats4 = highLimitFactoryDefaultImpl3.newInstance();
    boolean boolean5 = propertyRecordFormat0.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl3);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean8 = propertyRecordFormat0.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord9 = null;
    org.neo4j.internal.id.IdSequence idSequence11 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext12 = null;
    propertyRecordFormat0.prepare(propertyRecord9, (int) (short) 0, idSequence11, cursorContext12);
    boolean boolean15 = propertyRecordFormat0.equals((java.lang.Object) 12);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat16 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat17 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord18 = propertyRecordFormat17.newRecord();
    long long19 = propertyOneByteHeaderRecordFormat16.getNextRecordReference(propertyRecord18);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat20 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long21 = propertyOneByteHeaderRecordFormat20.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat22 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat23 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord24 = propertyRecordFormat23.newRecord();
    long long25 = propertyOneByteHeaderRecordFormat22.getNextRecordReference(propertyRecord24);
    long long26 = propertyOneByteHeaderRecordFormat20.getNextRecordReference(propertyRecord24);
    long long27 = propertyOneByteHeaderRecordFormat16.getNextRecordReference(propertyRecord24);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat28 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader29 = null;
    int int30 = propertyRecordFormat28.getRecordSize(storeHeader29);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl31 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats32 = highLimitFactoryDefaultImpl31.newInstance();
    boolean boolean33 = propertyRecordFormat28.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl31);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat35 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean36 = propertyRecordFormat28.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord37 = propertyRecordFormat28.newRecord();
    long long38 = propertyOneByteHeaderRecordFormat16.getNextRecordReference(propertyRecord37);
    org.neo4j.io.pagecache.PageCursor pageCursor39 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad40 = null;
    try {
      propertyRecordFormat0.read(propertyRecord37, pageCursor39, recordLoad40, (int) (byte) 1, 10);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    org.junit.Assert.assertNotNull(recordFormats4);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    org.junit.Assert.assertNotNull(propertyRecord18);
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
    org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1125899906842623L + "'",
        long21 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord24);
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
    org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
    org.junit.Assert.assertTrue("'" + int30 + "' != '" + 48 + "'", int30 == 48);
    org.junit.Assert.assertNotNull(recordFormats32);
    org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    org.junit.Assert.assertNotNull(propertyRecord37);
    org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
  }

  @Test
  public void test0588() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0588");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.FactoryHighLimitDefaultImpl factoryHighLimitDefaultImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.FactoryHighLimitDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats1 = factoryHighLimitDefaultImpl0.newInstance();
    java.lang.String str2 = factoryHighLimitDefaultImpl0.getName();
    java.lang.String str3 = factoryHighLimitDefaultImpl0.getName();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats4 = factoryHighLimitDefaultImpl0.newInstance();
    java.lang.String str5 = factoryHighLimitDefaultImpl0.getName();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats6 = factoryHighLimitDefaultImpl0.newInstance();
    org.junit.Assert.assertNotNull(recordFormats1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_0_6" + "'", str2,
        "high_limitV3_0_6");
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "high_limitV3_0_6" + "'", str3,
        "high_limitV3_0_6");
    org.junit.Assert.assertNotNull(recordFormats4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "high_limitV3_0_6" + "'", str5,
        "high_limitV3_0_6");
    org.junit.Assert.assertNotNull(recordFormats6);
  }

  @Test
  public void test0589() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0589");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord2 = relationshipHighLimitRecordFormat1.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader4 = null;
    int int5 = relationshipRecordFormat3.getRecordSize(storeHeader4);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat8 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord9 = relationshipRecordFormat8.newRecord();
    long long10 = relationshipHighLimitRecordFormat7.getNextRecordReference(relationshipRecord9);
    org.neo4j.internal.id.IdSequence idSequence12 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext13 = null;
    relationshipRecordFormat3.prepare(relationshipRecord9, 3, idSequence12, cursorContext13);
    org.neo4j.internal.id.IdSequence idSequence16 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext17 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord9, 0, idSequence16,
        cursorContext17);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader19 = null;
    int int20 = relationshipHighLimitRecordFormat1.getRecordSize(storeHeader19);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat22 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord23 = relationshipHighLimitRecordFormat22.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat25 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord26 = relationshipHighLimitRecordFormat25.newRecord();
    org.neo4j.internal.id.IdSequence idSequence28 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext29 = null;
    relationshipHighLimitRecordFormat22.prepare(relationshipRecord26, (int) (short) 1, idSequence28,
        cursorContext29);
    org.neo4j.io.pagecache.PageCursor pageCursor31 = null;
    try {
      relationshipHighLimitRecordFormat1.write(relationshipRecord26, pageCursor31, (int) (short) -1,
          (int) (short) -1);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(relationshipRecord2);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
    org.junit.Assert.assertNotNull(relationshipRecord9);
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    org.junit.Assert.assertNotNull(relationshipRecord23);
    org.junit.Assert.assertNotNull(relationshipRecord26);
  }

  @Test
  public void test0590() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0590");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod((long) 100,
        (long) 32);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
  }

  @Test
  public void test0591() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0591");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord1 = null;
    long long2 = nodeRecordFormat0.getNextRecordReference(nodeRecord1);
    int int3 = nodeRecordFormat0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader4 = null;
    int int5 = nodeRecordFormat0.getRecordSize(storeHeader4);
    int int8 = nodeRecordFormat0.getPageSize((int) '4', (int) (short) 1);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord9 = nodeRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_10 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat11 = v306_10.relationship();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray12 = v306_10.capabilities();
    java.lang.String str13 = v306_10.introductionVersion();
    boolean boolean14 = nodeRecordFormat0.equals((java.lang.Object) v306_10);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_15 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily16 = v300_15.getFormatFamily();
    boolean boolean17 = v306_10.equals((java.lang.Object) formatFamily16);
    org.neo4j.kernel.impl.store.format.RecordFormats[] recordFormatsArray18 = v306_10.compatibleVersionsForRollingUpgrade();
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
    org.junit.Assert.assertNotNull(nodeRecord9);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat11);
    org.junit.Assert.assertNotNull(capabilityArray12);
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "3.0.6" + "'", str13, "3.0.6");
    org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    org.junit.Assert.assertTrue(
        "'" + formatFamily16 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily16.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    org.junit.Assert.assertNotNull(recordFormatsArray18);
  }

  @Test
  public void test0592() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0592");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.FactoryHighLimitDefaultImpl factoryHighLimitDefaultImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.FactoryHighLimitDefaultImpl();
    java.lang.String str1 = factoryHighLimitDefaultImpl0.getName();
    java.lang.String str2 = factoryHighLimitDefaultImpl0.getName();
    java.lang.String str3 = factoryHighLimitDefaultImpl0.getName();
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "high_limitV3_0_0" + "'", str1,
        "high_limitV3_0_0");
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_0_0" + "'", str2,
        "high_limitV3_0_0");
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "high_limitV3_0_0" + "'", str3,
        "high_limitV3_0_0");
  }

  @Test
  public void test0593() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0593");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat1 = v306_0.node();
    org.neo4j.storageengine.api.format.Capability capability2 = null;
    boolean boolean3 = v306_0.hasCapability(capability2);
    java.lang.String str4 = v306_0.name();
    java.lang.String str5 = v306_0.introductionVersion();
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat1);
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "high_limitV3_0_6" + "'", str4,
        "high_limitV3_0_6");
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "3.0.6" + "'", str5, "3.0.6");
  }

  @Test
  public void test0594() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0594");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord2 = propertyRecordFormat1.newRecord();
    long long3 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord2);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader4 = null;
    int int5 = propertyOneByteHeaderRecordFormat0.getRecordSize(storeHeader4);
    int int8 = propertyOneByteHeaderRecordFormat0.getPageSize(0, (int) (short) 10);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader9 = null;
    int int10 = propertyOneByteHeaderRecordFormat0.getRecordSize(storeHeader9);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat11 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord13 = propertyRecordFormat12.newRecord();
    long long14 = propertyOneByteHeaderRecordFormat11.getNextRecordReference(propertyRecord13);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long16 = propertyOneByteHeaderRecordFormat15.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat17 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat18 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord19 = propertyRecordFormat18.newRecord();
    long long20 = propertyOneByteHeaderRecordFormat17.getNextRecordReference(propertyRecord19);
    long long21 = propertyOneByteHeaderRecordFormat15.getNextRecordReference(propertyRecord19);
    long long22 = propertyOneByteHeaderRecordFormat11.getNextRecordReference(propertyRecord19);
    org.neo4j.io.pagecache.PageCursor pageCursor23 = null;
    try {
      propertyOneByteHeaderRecordFormat0.write(propertyRecord19, pageCursor23, 8, 1);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(propertyRecord2);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 48 + "'", int5 == 48);
    org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 48 + "'", int10 == 48);
    org.junit.Assert.assertNotNull(propertyRecord13);
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1125899906842623L + "'",
        long16 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord19);
    org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
    org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
  }

  @Test
  public void test0595() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0595");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.NodeRecordFormat nodeRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord1 = nodeRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 1);
    int int6 = nodeHighLimitRecordFormat3.getPageSize(48, (int) '#');
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord7 = nodeHighLimitRecordFormat3.newRecord();
    int int8 = nodeRecordFormat0.rerdtlgForRE(nodeRecord7);
    org.junit.Assert.assertNotNull(nodeRecord1);
    org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
    org.junit.Assert.assertNotNull(nodeRecord7);
    org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
  }

  @Test
  public void test0596() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0596");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        1);
  }

  @Test
  public void test0597() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0597");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = relationshipGroupRecordFormat0.getRecordSize(storeHeader1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long4 = relationshipGroupHighLimitRecordFormat3.getMaxId();
    long long5 = relationshipGroupHighLimitRecordFormat3.getMaxId();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord6 = relationshipGroupHighLimitRecordFormat3.newRecord();
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    relationshipGroupRecordFormat0.prepare(relationshipGroupRecord6, 4, idSequence8,
        cursorContext9);
    int int13 = relationshipGroupRecordFormat0.getPageSize(30, 8);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 32 + "'", int2 == 32);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1125899906842623L + "'",
        long4 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1125899906842623L + "'",
        long5 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipGroupRecord6);
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 24 + "'", int13 == 24);
  }

  @Test
  public void test0598() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0598");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) ' ');
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord3 = null;
    long long4 = nodeRecordFormat2.getNextRecordReference(nodeRecord3);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord5 = nodeRecordFormat2.newRecord();
    org.neo4j.internal.id.IdSequence idSequence7 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext8 = null;
    nodeHighLimitRecordFormat1.prepare(nodeRecord5, 32, idSequence7, cursorContext8);
    long long10 = nodeHighLimitRecordFormat1.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat11 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord12 = null;
    long long13 = nodeRecordFormat11.getNextRecordReference(nodeRecord12);
    int int14 = nodeRecordFormat11.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader15 = null;
    int int16 = nodeRecordFormat11.getRecordSize(storeHeader15);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord17 = nodeRecordFormat11.newRecord();
    org.neo4j.io.pagecache.PageCursor pageCursor18 = null;
    try {
      nodeHighLimitRecordFormat1.write(nodeRecord17, pageCursor18, 24, (int) ' ');
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
    org.junit.Assert.assertNotNull(nodeRecord5);
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1125899906842623L + "'",
        long10 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
    org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16 + "'", int16 == 16);
    org.junit.Assert.assertNotNull(nodeRecord17);
  }

  @Test
  public void test0599() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0599");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v300_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat2 = v300_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat3 = v300_0.propertyKeyToken();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat2);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat3);
  }

  @Test
  public void test0600() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0600");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (-1));
  }

  @Test
  public void test0601() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0601");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl6 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    int int9 = recordFormatDynamicRecordImpl6.getPageSize(24, 8);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl10 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean12 = recordFormatDynamicRecordImpl10.equals((java.lang.Object) 100.0f);
    int int15 = recordFormatDynamicRecordImpl10.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord16 = recordFormatDynamicRecordImpl10.newRecord();
    long long17 = recordFormatDynamicRecordImpl6.getNextRecordReference(dynamicRecord16);
    org.neo4j.internal.id.IdSequence idSequence19 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext20 = null;
    recordFormatDynamicRecordImpl0.prepare(dynamicRecord16, 10, idSequence19, cursorContext20);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat22 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat23 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord24 = propertyRecordFormat23.newRecord();
    long long25 = propertyOneByteHeaderRecordFormat22.getNextRecordReference(propertyRecord24);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat26 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat27 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord28 = propertyRecordFormat27.newRecord();
    long long29 = propertyOneByteHeaderRecordFormat26.getNextRecordReference(propertyRecord28);
    long long30 = propertyOneByteHeaderRecordFormat22.getNextRecordReference(propertyRecord28);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat31 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long32 = propertyOneByteHeaderRecordFormat31.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord33 = propertyOneByteHeaderRecordFormat31.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat34 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long35 = propertyOneByteHeaderRecordFormat34.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord36 = propertyOneByteHeaderRecordFormat34.newRecord();
    long long37 = propertyOneByteHeaderRecordFormat31.getNextRecordReference(propertyRecord36);
    org.neo4j.internal.id.IdSequence idSequence39 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext40 = null;
    propertyOneByteHeaderRecordFormat22.prepare(propertyRecord36, (int) (byte) -1, idSequence39,
        cursorContext40);
    boolean boolean42 = recordFormatDynamicRecordImpl0.equals(
        (java.lang.Object) propertyOneByteHeaderRecordFormat22);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat43 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader44 = null;
    int int45 = propertyRecordFormat43.getRecordSize(storeHeader44);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl46 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats47 = highLimitFactoryDefaultImpl46.newInstance();
    boolean boolean48 = propertyRecordFormat43.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl46);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat50 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean51 = propertyRecordFormat43.equals((java.lang.Object) (short) 100);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat52 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord53 = propertyRecordFormat52.newRecord();
    long long54 = propertyRecordFormat43.getNextRecordReference(propertyRecord53);
    org.neo4j.io.pagecache.PageCursor pageCursor55 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad56 = null;
    try {
      propertyOneByteHeaderRecordFormat22.read(propertyRecord53, pageCursor55, recordLoad56, 0, 99);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 24 + "'", int9 == 24);
    org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    org.junit.Assert.assertTrue("'" + int15 + "' != '" + 16 + "'", int15 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord16);
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord24);
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord28);
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
    org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
    org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1125899906842623L + "'",
        long32 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord33);
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1125899906842623L + "'",
        long35 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord36);
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    org.junit.Assert.assertTrue("'" + int45 + "' != '" + 48 + "'", int45 == 48);
    org.junit.Assert.assertNotNull(recordFormats47);
    org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    org.junit.Assert.assertNotNull(propertyRecord53);
    org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-1L) + "'", long54 == (-1L));
  }

  @Test
  public void test0602() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0602");
    }
    java.util.function.Function<org.neo4j.kernel.impl.store.StoreHeader, java.lang.Integer> storeHeaderFunction1 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.fixedRecordSize(
        48);
    org.junit.Assert.assertNotNull(storeHeaderFunction1);
  }

  @Test
  public void test0603() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0603");
    }
    java.util.function.Function<org.neo4j.kernel.impl.store.StoreHeader, java.lang.Integer> storeHeaderFunction1 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.fixedRecordSize(
        96);
    org.junit.Assert.assertNotNull(storeHeaderFunction1);
  }

  @Test
  public void test0604() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0604");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.io.pagecache.PageCursor pageCursor1 = null;
    try {
      boolean boolean2 = nodeRecordFormat0.isInUse(pageCursor1);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test0605() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0605");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord1 = null;
    long long2 = nodeRecordFormat0.getNextRecordReference(nodeRecord1);
    int int3 = nodeRecordFormat0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader4 = null;
    int int5 = nodeRecordFormat0.getRecordSize(storeHeader4);
    int int8 = nodeRecordFormat0.getPageSize((int) '4', (int) (short) 1);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord9 = nodeRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_10 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat11 = v306_10.relationship();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray12 = v306_10.capabilities();
    java.lang.String str13 = v306_10.introductionVersion();
    boolean boolean14 = nodeRecordFormat0.equals((java.lang.Object) v306_10);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_15 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily16 = v300_15.getFormatFamily();
    boolean boolean17 = v306_10.equals((java.lang.Object) formatFamily16);
    java.lang.String str18 = v306_10.toString();
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_19 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat20 = v310_19.labelToken();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType21 = null;
    boolean boolean22 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_10,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v310_19, capabilityType21);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat23 = v310_19.labelToken();
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
    org.junit.Assert.assertNotNull(nodeRecord9);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat11);
    org.junit.Assert.assertNotNull(capabilityArray12);
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "3.0.6" + "'", str13, "3.0.6");
    org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    org.junit.Assert.assertTrue(
        "'" + formatFamily16 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily16.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "RecordFormat:V306[vE.H.0b]" + "'",
        str18, "RecordFormat:V306[vE.H.0b]");
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat20);
    org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat23);
  }

  @Test
  public void test0606() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0606");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod((long) 24,
        115L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 123L + "'", long2 == 123L);
  }

  @Test
  public void test0607() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0607");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord2 = relationshipHighLimitRecordFormat1.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord5 = relationshipHighLimitRecordFormat4.newRecord();
    org.neo4j.internal.id.IdSequence idSequence7 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext8 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord5, (int) (short) 1, idSequence7,
        cursorContext8);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat11 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord12 = relationshipHighLimitRecordFormat11.newRecord();
    org.neo4j.internal.id.IdSequence idSequence14 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext15 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord12, (int) (short) 1, idSequence14,
        cursorContext15);
    long long17 = relationshipHighLimitRecordFormat1.getMaxId();
    org.junit.Assert.assertNotNull(relationshipRecord2);
    org.junit.Assert.assertNotNull(relationshipRecord5);
    org.junit.Assert.assertNotNull(relationshipRecord12);
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1125899906842623L + "'",
        long17 == 1125899906842623L);
  }

  @Test
  public void test0608() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0608");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat1 = v320_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat2 = v320_0.relationshipGroup();
    java.lang.String str3 = v320_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat4 = v320_0.labelToken();
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat1);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat2);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "high_limitV3_2_0" + "'", str3,
        "high_limitV3_2_0");
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat4);
  }

  @Test
  public void test0609() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0609");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = propertyRecordFormat0.getRecordSize(storeHeader1);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl3 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats4 = highLimitFactoryDefaultImpl3.newInstance();
    boolean boolean5 = propertyRecordFormat0.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl3);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean8 = propertyRecordFormat0.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord9 = propertyRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat10 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader11 = null;
    int int12 = propertyRecordFormat10.getRecordSize(storeHeader11);
    long long13 = propertyRecordFormat10.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat14 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord16 = propertyRecordFormat15.newRecord();
    long long17 = propertyOneByteHeaderRecordFormat14.getNextRecordReference(propertyRecord16);
    org.neo4j.internal.id.IdSequence idSequence19 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext20 = null;
    propertyRecordFormat10.prepare(propertyRecord16, 0, idSequence19, cursorContext20);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord22 = propertyRecordFormat10.newRecord();
    long long23 = propertyRecordFormat0.getNextRecordReference(propertyRecord22);
    boolean boolean25 = propertyRecordFormat0.equals((java.lang.Object) "high_limitV4_0_0");
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    org.junit.Assert.assertNotNull(recordFormats4);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    org.junit.Assert.assertNotNull(propertyRecord9);
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 48 + "'", int12 == 48);
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1125899906842623L + "'",
        long13 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord16);
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord22);
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
  }

  @Test
  public void test0610() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0610");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = recordFormatDynamicRecordImpl0.newRecord();
    int int9 = recordFormatDynamicRecordImpl0.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord10 = recordFormatDynamicRecordImpl0.newRecord();
    int int13 = recordFormatDynamicRecordImpl0.getPageSize((int) '4', (int) (short) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_14 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat15 = v320_14.relationship();
    boolean boolean16 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) v320_14);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat17 = v320_14.relationship();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord6);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord10);
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat15);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat17);
  }

  @Test
  public void test0611() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0611");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat1 = v306_0.node();
    org.neo4j.storageengine.api.format.Capability capability2 = null;
    boolean boolean3 = v306_0.hasCapability(capability2);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat4 = v306_0.relationshipTypeToken();
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat1);
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat4);
  }

  @Test
  public void test0612() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0612");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v306_0.relationship();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray2 = v306_0.capabilities();
    java.lang.String str3 = v306_0.introductionVersion();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat4 = v306_0.relationship();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(capabilityArray2);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "3.0.6" + "'", str3, "3.0.6");
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat4);
  }

  @Test
  public void test0613() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0613");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord1 = null;
    org.neo4j.internal.id.IdSequence idSequence3 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext4 = null;
    propertyRecordFormat0.prepare(propertyRecord1, (int) (short) -1, idSequence3, cursorContext4);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat6 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord8 = propertyRecordFormat7.newRecord();
    long long9 = propertyOneByteHeaderRecordFormat6.getNextRecordReference(propertyRecord8);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat10 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat11 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord12 = propertyRecordFormat11.newRecord();
    long long13 = propertyOneByteHeaderRecordFormat10.getNextRecordReference(propertyRecord12);
    long long14 = propertyOneByteHeaderRecordFormat6.getNextRecordReference(propertyRecord12);
    org.neo4j.io.pagecache.PageCursor pageCursor15 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad16 = null;
    try {
      propertyRecordFormat0.read(propertyRecord12, pageCursor15, recordLoad16, 12, 4);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(propertyRecord8);
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord12);
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
  }

  @Test
  public void test0614() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0614");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord2 = propertyRecordFormat1.newRecord();
    long long3 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord2);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord6 = propertyRecordFormat5.newRecord();
    long long7 = propertyOneByteHeaderRecordFormat4.getNextRecordReference(propertyRecord6);
    long long8 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord6);
    int int11 = propertyOneByteHeaderRecordFormat0.getPageSize(50, (int) (short) 1);
    org.neo4j.io.pagecache.PageCursor pageCursor12 = null;
    try {
      boolean boolean13 = propertyOneByteHeaderRecordFormat0.isInUse(pageCursor12);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(propertyRecord2);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord6);
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
    org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
    org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
  }

  @Test
  public void test0615() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0615");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long1 = propertyOneByteHeaderRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord2 = propertyOneByteHeaderRecordFormat0.newRecord();
    long long3 = propertyOneByteHeaderRecordFormat0.getMaxId();
    org.neo4j.io.pagecache.PageCursor pageCursor4 = null;
    try {
      boolean boolean5 = propertyOneByteHeaderRecordFormat0.isInUse(pageCursor4);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord2);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1125899906842623L + "'",
        long3 == 1125899906842623L);
  }

  @Test
  public void test0616() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0616");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    long long3 = recordFormatDynamicRecordImpl0.getMaxId();
    int int6 = recordFormatDynamicRecordImpl0.getPageSize(64, 48);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl7 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean9 = recordFormatDynamicRecordImpl7.equals((java.lang.Object) 100.0f);
    int int12 = recordFormatDynamicRecordImpl7.getPageSize(16, (-1));
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl13 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    int int16 = recordFormatDynamicRecordImpl13.getPageSize(24, 8);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl17 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean19 = recordFormatDynamicRecordImpl17.equals((java.lang.Object) 100.0f);
    int int22 = recordFormatDynamicRecordImpl17.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord23 = recordFormatDynamicRecordImpl17.newRecord();
    long long24 = recordFormatDynamicRecordImpl13.getNextRecordReference(dynamicRecord23);
    org.neo4j.internal.id.IdSequence idSequence26 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext27 = null;
    recordFormatDynamicRecordImpl7.prepare(dynamicRecord23, 10, idSequence26, cursorContext27);
    org.neo4j.io.pagecache.PageCursor pageCursor29 = null;
    try {
      recordFormatDynamicRecordImpl0.write(dynamicRecord23, pageCursor29, 8, (-1));
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1125899906842623L + "'",
        long3 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int6 + "' != '" + 48 + "'", int6 == 48);
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 16 + "'", int12 == 16);
    org.junit.Assert.assertTrue("'" + int16 + "' != '" + 24 + "'", int16 == 24);
    org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    org.junit.Assert.assertTrue("'" + int22 + "' != '" + 16 + "'", int22 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord23);
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
  }

  @Test
  public void test0617() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0617");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        32);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long3 = relationshipGroupHighLimitRecordFormat2.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord5 = null;
    long long6 = relationshipGroupHighLimitRecordFormat4.getNextRecordReference(
        relationshipGroupRecord5);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord7 = relationshipGroupHighLimitRecordFormat4.newRecord();
    org.neo4j.internal.id.IdSequence idSequence9 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext10 = null;
    relationshipGroupHighLimitRecordFormat2.prepare(relationshipGroupRecord7, (int) (byte) 1,
        idSequence9, cursorContext10);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long13 = relationshipGroupHighLimitRecordFormat12.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat14 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord15 = null;
    long long16 = relationshipGroupHighLimitRecordFormat14.getNextRecordReference(
        relationshipGroupRecord15);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord17 = relationshipGroupHighLimitRecordFormat14.newRecord();
    org.neo4j.internal.id.IdSequence idSequence19 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext20 = null;
    relationshipGroupHighLimitRecordFormat12.prepare(relationshipGroupRecord17, (int) (byte) 1,
        idSequence19, cursorContext20);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat22 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord23 = null;
    long long24 = relationshipGroupHighLimitRecordFormat22.getNextRecordReference(
        relationshipGroupRecord23);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord25 = relationshipGroupHighLimitRecordFormat22.newRecord();
    org.neo4j.internal.id.IdSequence idSequence27 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext28 = null;
    relationshipGroupHighLimitRecordFormat12.prepare(relationshipGroupRecord25, 0, idSequence27,
        cursorContext28);
    org.neo4j.internal.id.IdSequence idSequence31 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext32 = null;
    relationshipGroupHighLimitRecordFormat2.prepare(relationshipGroupRecord25, 128, idSequence31,
        cursorContext32);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat34 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long35 = relationshipGroupHighLimitRecordFormat34.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat36 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord37 = null;
    long long38 = relationshipGroupHighLimitRecordFormat36.getNextRecordReference(
        relationshipGroupRecord37);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord39 = relationshipGroupHighLimitRecordFormat36.newRecord();
    org.neo4j.internal.id.IdSequence idSequence41 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext42 = null;
    relationshipGroupHighLimitRecordFormat34.prepare(relationshipGroupRecord39, (int) (byte) 1,
        idSequence41, cursorContext42);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat44 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord45 = null;
    long long46 = relationshipGroupHighLimitRecordFormat44.getNextRecordReference(
        relationshipGroupRecord45);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord47 = relationshipGroupHighLimitRecordFormat44.newRecord();
    org.neo4j.internal.id.IdSequence idSequence49 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext50 = null;
    relationshipGroupHighLimitRecordFormat34.prepare(relationshipGroupRecord47, 0, idSequence49,
        cursorContext50);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord52 = relationshipGroupHighLimitRecordFormat34.newRecord();
    org.neo4j.internal.id.IdSequence idSequence54 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext55 = null;
    relationshipGroupHighLimitRecordFormat2.prepare(relationshipGroupRecord52, 8, idSequence54,
        cursorContext55);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat57 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader58 = null;
    int int59 = relationshipGroupRecordFormat57.getRecordSize(storeHeader58);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat60 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long61 = relationshipGroupHighLimitRecordFormat60.getMaxId();
    long long62 = relationshipGroupHighLimitRecordFormat60.getMaxId();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord63 = relationshipGroupHighLimitRecordFormat60.newRecord();
    org.neo4j.internal.id.IdSequence idSequence65 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext66 = null;
    relationshipGroupRecordFormat57.prepare(relationshipGroupRecord63, 4, idSequence65,
        cursorContext66);
    org.neo4j.internal.id.IdSequence idSequence69 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext70 = null;
    relationshipGroupHighLimitRecordFormat2.prepare(relationshipGroupRecord63, (int) (byte) 1,
        idSequence69, cursorContext70);
    org.neo4j.internal.id.IdSequence idSequence73 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext74 = null;
    relationshipGroupHighLimitRecordFormat1.prepare(relationshipGroupRecord63, (int) (byte) 0,
        idSequence73, cursorContext74);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1125899906842623L + "'",
        long3 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord7);
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1125899906842623L + "'",
        long13 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord17);
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord25);
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1125899906842623L + "'",
        long35 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord39);
    org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord47);
    org.junit.Assert.assertNotNull(relationshipGroupRecord52);
    org.junit.Assert.assertTrue("'" + int59 + "' != '" + 32 + "'", int59 == 32);
    org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1125899906842623L + "'",
        long61 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1125899906842623L + "'",
        long62 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipGroupRecord63);
  }

  @Test
  public void test0618() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0618");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod(35L,
        (long) 30);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 63L + "'", long2 == 63L);
  }

  @Test
  public void test0619() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0619");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.FactoryHighLimitDefaultImpl factoryHighLimitDefaultImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.FactoryHighLimitDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats1 = factoryHighLimitDefaultImpl0.newInstance();
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_2 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_3 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat4 = v300_3.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat5 = v300_3.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType6 = null;
    boolean boolean7 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_2,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_3, capabilityType6);
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_8 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat9 = v310_8.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat10 = v310_8.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat11 = v310_8.labelToken();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType12 = null;
    boolean boolean13 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_3,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v310_8, capabilityType12);
    org.neo4j.storageengine.api.format.CapabilityType capabilityType14 = null;
    boolean boolean15 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        recordFormats1, (org.neo4j.kernel.impl.store.format.RecordFormats) v300_3,
        capabilityType14);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat16 = v300_3.relationshipTypeToken();
    org.junit.Assert.assertNotNull(recordFormats1);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat4);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat5);
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat9);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat10);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat11);
    org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat16);
  }

  @Test
  public void test0620() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0620");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat6 = v300_1.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat7 = v300_1.relationship();
    java.lang.String str8 = v300_1.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat9 = v300_1.node();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat6);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat7);
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "high_limitV3_0_0" + "'", str8,
        "high_limitV3_0_0");
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat9);
  }

  @Test
  public void test0621() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0621");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod(101L,
        (long) 32);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 101L + "'", long2 == 101L);
  }

  @Test
  public void test0622() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0622");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int3 = recordFormatDynamicRecordImpl0.getRecordHeaderSize();
    int int4 = recordFormatDynamicRecordImpl0.getRecordHeaderSize();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 12 + "'", int3 == 12);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 12 + "'", int4 == 12);
  }

  @Test
  public void test0623() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0623");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats1 = highLimitFactoryDefaultImpl0.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats2 = highLimitFactoryDefaultImpl0.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats3 = highLimitFactoryDefaultImpl0.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats4 = highLimitFactoryDefaultImpl0.newInstance();
    org.junit.Assert.assertNotNull(recordFormats1);
    org.junit.Assert.assertNotNull(recordFormats2);
    org.junit.Assert.assertNotNull(recordFormats3);
    org.junit.Assert.assertNotNull(recordFormats4);
  }

  @Test
  public void test0624() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0624");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long1 = propertyOneByteHeaderRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord2 = propertyOneByteHeaderRecordFormat0.newRecord();
    long long3 = propertyOneByteHeaderRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long5 = propertyOneByteHeaderRecordFormat4.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat6 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord8 = propertyRecordFormat7.newRecord();
    long long9 = propertyOneByteHeaderRecordFormat6.getNextRecordReference(propertyRecord8);
    long long10 = propertyOneByteHeaderRecordFormat4.getNextRecordReference(propertyRecord8);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat11 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord13 = propertyRecordFormat12.newRecord();
    long long14 = propertyOneByteHeaderRecordFormat11.getNextRecordReference(propertyRecord13);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat16 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord17 = propertyRecordFormat16.newRecord();
    long long18 = propertyOneByteHeaderRecordFormat15.getNextRecordReference(propertyRecord17);
    long long19 = propertyOneByteHeaderRecordFormat11.getNextRecordReference(propertyRecord17);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat20 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long21 = propertyOneByteHeaderRecordFormat20.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord22 = propertyOneByteHeaderRecordFormat20.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat23 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long24 = propertyOneByteHeaderRecordFormat23.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord25 = propertyOneByteHeaderRecordFormat23.newRecord();
    long long26 = propertyOneByteHeaderRecordFormat20.getNextRecordReference(propertyRecord25);
    org.neo4j.internal.id.IdSequence idSequence28 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext29 = null;
    propertyOneByteHeaderRecordFormat11.prepare(propertyRecord25, (int) (byte) -1, idSequence28,
        cursorContext29);
    long long31 = propertyOneByteHeaderRecordFormat4.getNextRecordReference(propertyRecord25);
    org.neo4j.io.pagecache.PageCursor pageCursor32 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad33 = null;
    try {
      propertyOneByteHeaderRecordFormat0.read(propertyRecord25, pageCursor32, recordLoad33, 0, 3);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord2);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1125899906842623L + "'",
        long3 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1125899906842623L + "'",
        long5 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord8);
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord13);
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord17);
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
    org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1125899906842623L + "'",
        long21 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord22);
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1125899906842623L + "'",
        long24 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord25);
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
  }

  @Test
  public void test0625() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0625");
    }
    java.util.function.Function<org.neo4j.kernel.impl.store.StoreHeader, java.lang.Integer> storeHeaderFunction1 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.fixedRecordSize(
        (int) (short) 100);
    org.junit.Assert.assertNotNull(storeHeaderFunction1);
  }

  @Test
  public void test0626() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0626");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord2 = relationshipRecordFormat1.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord3 = relationshipRecordFormat1.newRecord();
    org.neo4j.internal.id.IdSequence idSequence5 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext6 = null;
    relationshipRecordFormat0.prepare(relationshipRecord3, 100, idSequence5, cursorContext6);
    int int10 = relationshipRecordFormat0.getPageSize(0, 3);
    int int11 = relationshipRecordFormat0.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_12 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat13 = v306_12.relationship();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray14 = v306_12.capabilities();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat15 = v306_12.relationshipTypeToken();
    boolean boolean16 = relationshipRecordFormat0.equals((java.lang.Object) v306_12);
    try {
      int int19 = relationshipRecordFormat0.getPageSize(1, 0);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.ArithmeticException; message: / by zero");
    } catch (java.lang.ArithmeticException e) {
    }
    org.junit.Assert.assertNotNull(relationshipRecord2);
    org.junit.Assert.assertNotNull(relationshipRecord3);
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat13);
    org.junit.Assert.assertNotNull(capabilityArray14);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat15);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
  }

  @Test
  public void test0627() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0627");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = recordFormatDynamicRecordImpl0.newRecord();
    int int7 = recordFormatDynamicRecordImpl0.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl8 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean10 = recordFormatDynamicRecordImpl8.equals((java.lang.Object) 100.0f);
    int int13 = recordFormatDynamicRecordImpl8.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord14 = recordFormatDynamicRecordImpl8.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl15 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean17 = recordFormatDynamicRecordImpl15.equals((java.lang.Object) 100.0f);
    int int20 = recordFormatDynamicRecordImpl15.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord21 = recordFormatDynamicRecordImpl15.newRecord();
    long long22 = recordFormatDynamicRecordImpl8.getNextRecordReference(dynamicRecord21);
    int int23 = recordFormatDynamicRecordImpl8.getRecordHeaderSize();
    int int24 = recordFormatDynamicRecordImpl8.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord25 = recordFormatDynamicRecordImpl8.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl26 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean28 = recordFormatDynamicRecordImpl26.equals((java.lang.Object) 100.0f);
    int int31 = recordFormatDynamicRecordImpl26.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord32 = recordFormatDynamicRecordImpl26.newRecord();
    int int35 = recordFormatDynamicRecordImpl26.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord36 = recordFormatDynamicRecordImpl26.newRecord();
    long long37 = recordFormatDynamicRecordImpl26.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl38 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean40 = recordFormatDynamicRecordImpl38.equals((java.lang.Object) 100.0f);
    int int43 = recordFormatDynamicRecordImpl38.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord44 = recordFormatDynamicRecordImpl38.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl45 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean47 = recordFormatDynamicRecordImpl45.equals((java.lang.Object) 100.0f);
    int int50 = recordFormatDynamicRecordImpl45.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord51 = recordFormatDynamicRecordImpl45.newRecord();
    long long52 = recordFormatDynamicRecordImpl38.getNextRecordReference(dynamicRecord51);
    org.neo4j.internal.id.IdSequence idSequence54 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext55 = null;
    recordFormatDynamicRecordImpl26.prepare(dynamicRecord51, 128, idSequence54, cursorContext55);
    org.neo4j.internal.id.IdSequence idSequence58 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext59 = null;
    recordFormatDynamicRecordImpl8.prepare(dynamicRecord51, 48, idSequence58, cursorContext59);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl61 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    int int62 = recordFormatDynamicRecordImpl61.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord63 = recordFormatDynamicRecordImpl61.newRecord();
    long long64 = recordFormatDynamicRecordImpl8.getNextRecordReference(dynamicRecord63);
    org.neo4j.io.pagecache.PageCursor pageCursor65 = null;
    try {
      recordFormatDynamicRecordImpl0.write(dynamicRecord63, pageCursor65, (int) ' ', 4);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord6);
    org.junit.Assert.assertTrue("'" + int7 + "' != '" + 12 + "'", int7 == 12);
    org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord14);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord21);
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
    org.junit.Assert.assertTrue("'" + int23 + "' != '" + 12 + "'", int23 == 12);
    org.junit.Assert.assertTrue("'" + int24 + "' != '" + 12 + "'", int24 == 12);
    org.junit.Assert.assertNotNull(dynamicRecord25);
    org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    org.junit.Assert.assertTrue("'" + int31 + "' != '" + 16 + "'", int31 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord32);
    org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord36);
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1125899906842623L + "'",
        long37 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    org.junit.Assert.assertTrue("'" + int43 + "' != '" + 16 + "'", int43 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord44);
    org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    org.junit.Assert.assertTrue("'" + int50 + "' != '" + 16 + "'", int50 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord51);
    org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
    org.junit.Assert.assertTrue("'" + int62 + "' != '" + 12 + "'", int62 == 12);
    org.junit.Assert.assertNotNull(dynamicRecord63);
    org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-1L) + "'", long64 == (-1L));
  }

  @Test
  public void test0628() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0628");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    java.lang.String str1 = v306_0.storeVersion();
    org.neo4j.storageengine.api.format.Capability capability2 = null;
    boolean boolean3 = v306_0.hasCapability(capability2);
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily4 = v306_0.getFormatFamily();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat5 = v306_0.relationshipGroup();
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "vE.H.0b" + "'", str1, "vE.H.0b");
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue(
        "'" + formatFamily4 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily4.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat5);
  }

  @Test
  public void test0629() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0629");
    }
    java.util.function.Function<org.neo4j.kernel.impl.store.StoreHeader, java.lang.Integer> storeHeaderFunction1 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.fixedRecordSize(
        50);
    org.junit.Assert.assertNotNull(storeHeaderFunction1);
  }

  @Test
  public void test0630() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0630");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod((long) 48,
        65L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 113L + "'", long2 == 113L);
  }

  @Test
  public void test0631() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0631");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long1 = relationshipGroupHighLimitRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord3 = null;
    long long4 = relationshipGroupHighLimitRecordFormat2.getNextRecordReference(
        relationshipGroupRecord3);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord5 = relationshipGroupHighLimitRecordFormat2.newRecord();
    org.neo4j.internal.id.IdSequence idSequence7 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext8 = null;
    relationshipGroupHighLimitRecordFormat0.prepare(relationshipGroupRecord5, (int) (byte) 1,
        idSequence7, cursorContext8);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat10 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord11 = null;
    long long12 = relationshipGroupHighLimitRecordFormat10.getNextRecordReference(
        relationshipGroupRecord11);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord13 = relationshipGroupHighLimitRecordFormat10.newRecord();
    org.neo4j.internal.id.IdSequence idSequence15 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext16 = null;
    relationshipGroupHighLimitRecordFormat0.prepare(relationshipGroupRecord13, 0, idSequence15,
        cursorContext16);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat18 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long19 = relationshipGroupHighLimitRecordFormat18.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat20 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord21 = null;
    long long22 = relationshipGroupHighLimitRecordFormat20.getNextRecordReference(
        relationshipGroupRecord21);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord23 = relationshipGroupHighLimitRecordFormat20.newRecord();
    org.neo4j.internal.id.IdSequence idSequence25 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext26 = null;
    relationshipGroupHighLimitRecordFormat18.prepare(relationshipGroupRecord23, 0, idSequence25,
        cursorContext26);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat28 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader29 = null;
    int int30 = relationshipGroupRecordFormat28.getRecordSize(storeHeader29);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord31 = relationshipGroupRecordFormat28.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat32 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader33 = null;
    int int34 = relationshipGroupRecordFormat32.getRecordSize(storeHeader33);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat35 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long36 = relationshipGroupHighLimitRecordFormat35.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat37 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord38 = null;
    long long39 = relationshipGroupHighLimitRecordFormat37.getNextRecordReference(
        relationshipGroupRecord38);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord40 = relationshipGroupHighLimitRecordFormat37.newRecord();
    org.neo4j.internal.id.IdSequence idSequence42 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext43 = null;
    relationshipGroupHighLimitRecordFormat35.prepare(relationshipGroupRecord40, (int) (byte) 1,
        idSequence42, cursorContext43);
    org.neo4j.internal.id.IdSequence idSequence46 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext47 = null;
    relationshipGroupRecordFormat32.prepare(relationshipGroupRecord40, 0, idSequence46,
        cursorContext47);
    long long49 = relationshipGroupRecordFormat28.getNextRecordReference(relationshipGroupRecord40);
    long long50 = relationshipGroupHighLimitRecordFormat18.getNextRecordReference(
        relationshipGroupRecord40);
    org.neo4j.internal.id.IdSequence idSequence52 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext53 = null;
    relationshipGroupHighLimitRecordFormat0.prepare(relationshipGroupRecord40, 3, idSequence52,
        cursorContext53);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader55 = null;
    int int56 = relationshipGroupHighLimitRecordFormat0.getRecordSize(storeHeader55);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord57 = relationshipGroupHighLimitRecordFormat0.newRecord();
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord5);
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord13);
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1125899906842623L + "'",
        long19 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord23);
    org.junit.Assert.assertTrue("'" + int30 + "' != '" + 32 + "'", int30 == 32);
    org.junit.Assert.assertNotNull(relationshipGroupRecord31);
    org.junit.Assert.assertTrue("'" + int34 + "' != '" + 32 + "'", int34 == 32);
    org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1125899906842623L + "'",
        long36 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord40);
    org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
    org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
    org.junit.Assert.assertTrue("'" + int56 + "' != '" + 32 + "'", int56 == 32);
    org.junit.Assert.assertNotNull(relationshipGroupRecord57);
  }

  @Test
  public void test0632() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0632");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod((long) 'a',
        139L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 235L + "'", long2 == 235L);
  }

  @Test
  public void test0633() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0633");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = recordFormatDynamicRecordImpl0.newRecord();
    int int9 = recordFormatDynamicRecordImpl0.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord10 = recordFormatDynamicRecordImpl0.newRecord();
    int int13 = recordFormatDynamicRecordImpl0.getPageSize((int) '4', (int) (short) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_14 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat15 = v320_14.relationship();
    boolean boolean16 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) v320_14);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat17 = v320_14.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat18 = v320_14.relationshipGroup();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat19 = v320_14.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat20 = v320_14.property();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord6);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord10);
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat15);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat17);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat18);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat19);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat20);
  }

  @Test
  public void test0634() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0634");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v306_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat2 = v306_0.schema();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat3 = v306_0.labelToken();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily4 = v306_0.getFormatFamily();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat5 = v306_0.property();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray6 = v306_0.capabilities();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat2);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat3);
    org.junit.Assert.assertTrue(
        "'" + formatFamily4 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily4.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat5);
    org.junit.Assert.assertNotNull(capabilityArray6);
  }

  @Test
  public void test0635() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0635");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat1 = v310_0.relationshipGroup();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader3 = null;
    int int4 = propertyRecordFormat2.getRecordSize(storeHeader3);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl5 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats6 = highLimitFactoryDefaultImpl5.newInstance();
    boolean boolean7 = propertyRecordFormat2.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl5);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat9 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean10 = propertyRecordFormat2.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord11 = propertyRecordFormat2.newRecord();
    boolean boolean12 = v310_0.equals((java.lang.Object) propertyRecordFormat2);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader13 = null;
    int int14 = propertyRecordFormat2.getRecordSize(storeHeader13);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat1);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 48 + "'", int4 == 48);
    org.junit.Assert.assertNotNull(recordFormats6);
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    org.junit.Assert.assertNotNull(propertyRecord11);
    org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    org.junit.Assert.assertTrue("'" + int14 + "' != '" + 48 + "'", int14 == 48);
  }

  @Test
  public void test0636() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0636");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod(
        (long) (short) 1, 15L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 15L + "'", long2 == 15L);
  }

  @Test
  public void test0637() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0637");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long1 = relationshipGroupHighLimitRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord3 = null;
    long long4 = relationshipGroupHighLimitRecordFormat2.getNextRecordReference(
        relationshipGroupRecord3);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord5 = relationshipGroupHighLimitRecordFormat2.newRecord();
    org.neo4j.internal.id.IdSequence idSequence7 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext8 = null;
    relationshipGroupHighLimitRecordFormat0.prepare(relationshipGroupRecord5, 0, idSequence7,
        cursorContext8);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord10 = relationshipGroupHighLimitRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat11 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long12 = relationshipGroupHighLimitRecordFormat11.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat13 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord14 = null;
    long long15 = relationshipGroupHighLimitRecordFormat13.getNextRecordReference(
        relationshipGroupRecord14);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord16 = relationshipGroupHighLimitRecordFormat13.newRecord();
    org.neo4j.internal.id.IdSequence idSequence18 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext19 = null;
    relationshipGroupHighLimitRecordFormat11.prepare(relationshipGroupRecord16, (int) (byte) 1,
        idSequence18, cursorContext19);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat21 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord22 = null;
    long long23 = relationshipGroupHighLimitRecordFormat21.getNextRecordReference(
        relationshipGroupRecord22);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord24 = relationshipGroupHighLimitRecordFormat21.newRecord();
    org.neo4j.internal.id.IdSequence idSequence26 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext27 = null;
    relationshipGroupHighLimitRecordFormat11.prepare(relationshipGroupRecord24, 0, idSequence26,
        cursorContext27);
    long long29 = relationshipGroupHighLimitRecordFormat11.getMaxId();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord30 = relationshipGroupHighLimitRecordFormat11.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord31 = relationshipGroupHighLimitRecordFormat11.newRecord();
    org.neo4j.io.pagecache.PageCursor pageCursor32 = null;
    try {
      relationshipGroupHighLimitRecordFormat0.write(relationshipGroupRecord31, pageCursor32,
          (int) 'a', 16);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord5);
    org.junit.Assert.assertNotNull(relationshipGroupRecord10);
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1125899906842623L + "'",
        long12 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord16);
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord24);
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1125899906842623L + "'",
        long29 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipGroupRecord30);
    org.junit.Assert.assertNotNull(relationshipGroupRecord31);
  }

  @Test
  public void test0638() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0638");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    org.neo4j.storageengine.api.format.Capability[] capabilityArray6 = v306_0.capabilities();
    org.neo4j.kernel.impl.store.format.RecordFormats[] recordFormatsArray7 = v306_0.compatibleVersionsForRollingUpgrade();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat8 = v306_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat9 = v306_0.dynamic();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(capabilityArray6);
    org.junit.Assert.assertNotNull(recordFormatsArray7);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat8);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat9);
  }

  @Test
  public void test0639() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0639");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    int int1 = propertyRecordFormat0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord2 = propertyRecordFormat0.newRecord();
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    org.junit.Assert.assertNotNull(propertyRecord2);
  }

  @Test
  public void test0640() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0640");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = nodeRecordFormat0.getRecordSize(storeHeader1);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord3 = nodeRecordFormat0.newRecord();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord4 = nodeRecordFormat0.newRecord();
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
    org.junit.Assert.assertNotNull(nodeRecord3);
    org.junit.Assert.assertNotNull(nodeRecord4);
  }

  @Test
  public void test0641() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0641");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat1 = v306_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat2 = v306_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat3 = v306_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat4 = v306_0.property();
    java.lang.String str5 = v306_0.name();
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat1);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat2);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat3);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "high_limitV3_0_6" + "'", str5,
        "high_limitV3_0_6");
  }

  @Test
  public void test0642() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0642");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v300_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat2 = v300_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat3 = v300_0.relationshipTypeToken();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat2);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat3);
  }

  @Test
  public void test0643() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0643");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        0);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long3 = relationshipGroupHighLimitRecordFormat2.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord5 = null;
    long long6 = relationshipGroupHighLimitRecordFormat4.getNextRecordReference(
        relationshipGroupRecord5);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord7 = relationshipGroupHighLimitRecordFormat4.newRecord();
    org.neo4j.internal.id.IdSequence idSequence9 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext10 = null;
    relationshipGroupHighLimitRecordFormat2.prepare(relationshipGroupRecord7, (int) (byte) 1,
        idSequence9, cursorContext10);
    org.neo4j.internal.id.IdSequence idSequence13 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext14 = null;
    relationshipGroupHighLimitRecordFormat1.prepare(relationshipGroupRecord7, 10, idSequence13,
        cursorContext14);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat16 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long17 = relationshipGroupHighLimitRecordFormat16.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat18 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord19 = null;
    long long20 = relationshipGroupHighLimitRecordFormat18.getNextRecordReference(
        relationshipGroupRecord19);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord21 = relationshipGroupHighLimitRecordFormat18.newRecord();
    org.neo4j.internal.id.IdSequence idSequence23 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext24 = null;
    relationshipGroupHighLimitRecordFormat16.prepare(relationshipGroupRecord21, 0, idSequence23,
        cursorContext24);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl26 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean28 = recordFormatDynamicRecordImpl26.equals((java.lang.Object) 100.0f);
    int int31 = recordFormatDynamicRecordImpl26.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord32 = recordFormatDynamicRecordImpl26.newRecord();
    boolean boolean33 = relationshipGroupHighLimitRecordFormat16.equals(
        (java.lang.Object) recordFormatDynamicRecordImpl26);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat34 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader35 = null;
    int int36 = relationshipGroupRecordFormat34.getRecordSize(storeHeader35);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord37 = relationshipGroupRecordFormat34.newRecord();
    org.neo4j.internal.id.IdSequence idSequence39 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext40 = null;
    relationshipGroupHighLimitRecordFormat16.prepare(relationshipGroupRecord37, (int) (short) 0,
        idSequence39, cursorContext40);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat42 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader43 = null;
    int int44 = relationshipGroupRecordFormat42.getRecordSize(storeHeader43);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat45 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long46 = relationshipGroupHighLimitRecordFormat45.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat47 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord48 = null;
    long long49 = relationshipGroupHighLimitRecordFormat47.getNextRecordReference(
        relationshipGroupRecord48);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord50 = relationshipGroupHighLimitRecordFormat47.newRecord();
    org.neo4j.internal.id.IdSequence idSequence52 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext53 = null;
    relationshipGroupHighLimitRecordFormat45.prepare(relationshipGroupRecord50, 0, idSequence52,
        cursorContext53);
    long long55 = relationshipGroupRecordFormat42.getNextRecordReference(relationshipGroupRecord50);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat56 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader57 = null;
    int int58 = relationshipGroupRecordFormat56.getRecordSize(storeHeader57);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat59 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long60 = relationshipGroupHighLimitRecordFormat59.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat61 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord62 = null;
    long long63 = relationshipGroupHighLimitRecordFormat61.getNextRecordReference(
        relationshipGroupRecord62);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord64 = relationshipGroupHighLimitRecordFormat61.newRecord();
    org.neo4j.internal.id.IdSequence idSequence66 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext67 = null;
    relationshipGroupHighLimitRecordFormat59.prepare(relationshipGroupRecord64, 0, idSequence66,
        cursorContext67);
    long long69 = relationshipGroupRecordFormat56.getNextRecordReference(relationshipGroupRecord64);
    org.neo4j.internal.id.IdSequence idSequence71 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext72 = null;
    relationshipGroupRecordFormat42.prepare(relationshipGroupRecord64, (int) '#', idSequence71,
        cursorContext72);
    org.neo4j.internal.id.IdSequence idSequence75 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext76 = null;
    relationshipGroupHighLimitRecordFormat16.prepare(relationshipGroupRecord64, 16, idSequence75,
        cursorContext76);
    org.neo4j.io.pagecache.PageCursor pageCursor78 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad79 = null;
    try {
      relationshipGroupHighLimitRecordFormat1.read(relationshipGroupRecord64, pageCursor78,
          recordLoad79, 0, (int) (short) 1);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1125899906842623L + "'",
        long3 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord7);
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1125899906842623L + "'",
        long17 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord21);
    org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    org.junit.Assert.assertTrue("'" + int31 + "' != '" + 16 + "'", int31 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord32);
    org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    org.junit.Assert.assertTrue("'" + int36 + "' != '" + 32 + "'", int36 == 32);
    org.junit.Assert.assertNotNull(relationshipGroupRecord37);
    org.junit.Assert.assertTrue("'" + int44 + "' != '" + 32 + "'", int44 == 32);
    org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1125899906842623L + "'",
        long46 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord50);
    org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
    org.junit.Assert.assertTrue("'" + int58 + "' != '" + 32 + "'", int58 == 32);
    org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1125899906842623L + "'",
        long60 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord64);
    org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-1L) + "'", long69 == (-1L));
  }

  @Test
  public void test0644() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0644");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord2 = relationshipRecordFormat1.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord3 = relationshipRecordFormat1.newRecord();
    org.neo4j.internal.id.IdSequence idSequence5 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext6 = null;
    relationshipRecordFormat0.prepare(relationshipRecord3, 100, idSequence5, cursorContext6);
    int int10 = relationshipRecordFormat0.getPageSize(0, 3);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord11 = relationshipRecordFormat0.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord12 = relationshipRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat14 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord16 = relationshipRecordFormat15.newRecord();
    long long17 = relationshipHighLimitRecordFormat14.getNextRecordReference(relationshipRecord16);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat18 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord19 = relationshipRecordFormat18.newRecord();
    int int20 = relationshipRecordFormat18.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat21 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat22 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord23 = relationshipRecordFormat22.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord24 = relationshipRecordFormat22.newRecord();
    org.neo4j.internal.id.IdSequence idSequence26 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext27 = null;
    relationshipRecordFormat21.prepare(relationshipRecord24, 100, idSequence26, cursorContext27);
    long long29 = relationshipRecordFormat18.getNextRecordReference(relationshipRecord24);
    long long30 = relationshipHighLimitRecordFormat14.getNextRecordReference(relationshipRecord24);
    org.neo4j.internal.id.IdSequence idSequence32 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext33 = null;
    relationshipRecordFormat0.prepare(relationshipRecord24, (int) (short) 1, idSequence32,
        cursorContext33);
    org.junit.Assert.assertNotNull(relationshipRecord2);
    org.junit.Assert.assertNotNull(relationshipRecord3);
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord11);
    org.junit.Assert.assertNotNull(relationshipRecord12);
    org.junit.Assert.assertNotNull(relationshipRecord16);
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord19);
    org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord23);
    org.junit.Assert.assertNotNull(relationshipRecord24);
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
    org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
  }

  @Test
  public void test0645() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0645");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod((-37L), 62L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
  }

  @Test
  public void test0646() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0646");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat1 = v320_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat2 = v320_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat3 = v320_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat4 = v320_0.propertyKeyToken();
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat1);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat2);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat3);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat4);
  }

  @Test
  public void test0647() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0647");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat1 = v310_0.labelToken();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily2 = v310_0.getFormatFamily();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat3 = v310_0.dynamic();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat1);
    org.junit.Assert.assertTrue(
        "'" + formatFamily2 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily2.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat3);
  }

  @Test
  public void test0648() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0648");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.FactoryHighLimitDefaultImpl factoryHighLimitDefaultImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.FactoryHighLimitDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats1 = factoryHighLimitDefaultImpl0.newInstance();
    java.lang.String str2 = factoryHighLimitDefaultImpl0.getName();
    java.lang.String str3 = factoryHighLimitDefaultImpl0.getName();
    java.lang.String str4 = factoryHighLimitDefaultImpl0.getName();
    org.junit.Assert.assertNotNull(recordFormats1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_0_0" + "'", str2,
        "high_limitV3_0_0");
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "high_limitV3_0_0" + "'", str3,
        "high_limitV3_0_0");
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "high_limitV3_0_0" + "'", str4,
        "high_limitV3_0_0");
  }

  @Test
  public void test0649() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0649");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.storageengine.api.format.Capability capability1 = null;
    boolean boolean2 = v310_0.hasCapability(capability1);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat3 = v310_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat4 = v310_0.labelToken();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat3);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat4);
  }

  @Test
  public void test0650() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0650");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = recordFormatDynamicRecordImpl0.newRecord();
    int int9 = recordFormatDynamicRecordImpl0.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader10 = null;
    try {
      int int11 = recordFormatDynamicRecordImpl0.getRecordSize(storeHeader10);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord6);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
  }

  @Test
  public void test0651() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0651");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        99);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader3 = null;
    int int4 = relationshipGroupRecordFormat2.getRecordSize(storeHeader3);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord5 = relationshipGroupRecordFormat2.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat6 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader7 = null;
    int int8 = relationshipGroupRecordFormat6.getRecordSize(storeHeader7);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat9 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long10 = relationshipGroupHighLimitRecordFormat9.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat11 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord12 = null;
    long long13 = relationshipGroupHighLimitRecordFormat11.getNextRecordReference(
        relationshipGroupRecord12);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord14 = relationshipGroupHighLimitRecordFormat11.newRecord();
    org.neo4j.internal.id.IdSequence idSequence16 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext17 = null;
    relationshipGroupHighLimitRecordFormat9.prepare(relationshipGroupRecord14, (int) (byte) 1,
        idSequence16, cursorContext17);
    org.neo4j.internal.id.IdSequence idSequence20 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext21 = null;
    relationshipGroupRecordFormat6.prepare(relationshipGroupRecord14, 0, idSequence20,
        cursorContext21);
    long long23 = relationshipGroupRecordFormat2.getNextRecordReference(relationshipGroupRecord14);
    org.neo4j.io.pagecache.PageCursor pageCursor24 = null;
    try {
      relationshipGroupHighLimitRecordFormat1.write(relationshipGroupRecord14, pageCursor24, 48, 2);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
    org.junit.Assert.assertNotNull(relationshipGroupRecord5);
    org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32);
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1125899906842623L + "'",
        long10 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord14);
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
  }

  @Test
  public void test0652() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0652");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.FactoryHighLimitRecordFormatsImpl factoryHighLimitRecordFormatsImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.FactoryHighLimitRecordFormatsImpl();
    java.lang.String str1 = factoryHighLimitRecordFormatsImpl0.getName();
    java.lang.String str2 = factoryHighLimitRecordFormatsImpl0.getName();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats3 = factoryHighLimitRecordFormatsImpl0.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats4 = factoryHighLimitRecordFormatsImpl0.newInstance();
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "high_limit" + "'", str1, "high_limit");
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limit" + "'", str2, "high_limit");
    org.junit.Assert.assertNotNull(recordFormats3);
    org.junit.Assert.assertNotNull(recordFormats4);
  }

  @Test
  public void test0653() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0653");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat1 = v310_0.relationshipGroup();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat2 = v310_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat3 = v310_0.relationshipGroup();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat4 = v310_0.node();
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat1);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat2);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat3);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat4);
  }

  @Test
  public void test0654() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0654");
    }
    io.github.onograph.internal.batchimport.EnterpriseBatchImporterFactory enterpriseBatchImporterFactory0 = new io.github.onograph.internal.batchimport.EnterpriseBatchImporterFactory();
    org.neo4j.io.layout.DatabaseLayout databaseLayout1 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction2 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer3 = null;
    org.neo4j.internal.batchimport.Configuration configuration4 = null;
    org.neo4j.logging.internal.LogService logService5 = null;
    org.neo4j.internal.batchimport.staging.ExecutionMonitor executionMonitor6 = null;
    org.neo4j.internal.batchimport.AdditionalInitialIds additionalInitialIds7 = null;
    org.neo4j.configuration.Config config8 = null;
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_9 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_10 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat11 = v300_10.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat12 = v300_10.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType13 = null;
    boolean boolean14 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_9,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_10, capabilityType13);
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_15 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat16 = v306_15.node();
    org.neo4j.storageengine.api.format.Capability capability17 = null;
    boolean boolean18 = v306_15.hasCapability(capability17);
    org.neo4j.storageengine.api.format.CapabilityType capabilityType19 = null;
    boolean boolean20 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_10,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_15, capabilityType19);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.MetaDataRecord> metaDataRecordRecordFormat21 = v300_10.metaData();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat22 = v300_10.node();
    org.neo4j.internal.batchimport.ImportLogic.Monitor monitor23 = null;
    org.neo4j.scheduler.JobScheduler jobScheduler24 = null;
    org.neo4j.internal.batchimport.input.Collector collector25 = null;
    org.neo4j.storageengine.api.LogFilesInitializer logFilesInitializer26 = null;
    org.neo4j.internal.batchimport.IndexImporterFactory indexImporterFactory27 = null;
    org.neo4j.memory.MemoryTracker memoryTracker28 = null;
    try {
      org.neo4j.internal.batchimport.BatchImporter batchImporter29 = enterpriseBatchImporterFactory0.instantiate(
          databaseLayout1, fileSystemAbstraction2, pageCacheTracer3, configuration4, logService5,
          executionMonitor6, additionalInitialIds7, config8,
          (org.neo4j.kernel.impl.store.format.RecordFormats) v300_10, monitor23, jobScheduler24,
          collector25, logFilesInitializer26, indexImporterFactory27, memoryTracker28);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat11);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat12);
    org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat16);
    org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    org.junit.Assert.assertNotNull(metaDataRecordRecordFormat21);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat22);
  }

  @Test
  public void test0655() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0655");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_6 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat7 = v306_6.node();
    org.neo4j.storageengine.api.format.Capability capability8 = null;
    boolean boolean9 = v306_6.hasCapability(capability8);
    org.neo4j.storageengine.api.format.CapabilityType capabilityType10 = null;
    boolean boolean11 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_6, capabilityType10);
    java.lang.String str12 = v306_6.storeVersion();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat13 = v306_6.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat14 = v306_6.property();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat7);
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "vE.H.0b" + "'", str12, "vE.H.0b");
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat13);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat14);
  }

  @Test
  public void test0656() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0656");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long1 = relationshipGroupHighLimitRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord3 = null;
    long long4 = relationshipGroupHighLimitRecordFormat2.getNextRecordReference(
        relationshipGroupRecord3);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord5 = relationshipGroupHighLimitRecordFormat2.newRecord();
    org.neo4j.internal.id.IdSequence idSequence7 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext8 = null;
    relationshipGroupHighLimitRecordFormat0.prepare(relationshipGroupRecord5, 0, idSequence7,
        cursorContext8);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord10 = relationshipGroupHighLimitRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        0);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat13 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long14 = relationshipGroupHighLimitRecordFormat13.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord16 = null;
    long long17 = relationshipGroupHighLimitRecordFormat15.getNextRecordReference(
        relationshipGroupRecord16);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord18 = relationshipGroupHighLimitRecordFormat15.newRecord();
    org.neo4j.internal.id.IdSequence idSequence20 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext21 = null;
    relationshipGroupHighLimitRecordFormat13.prepare(relationshipGroupRecord18, (int) (byte) 1,
        idSequence20, cursorContext21);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat23 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long24 = relationshipGroupHighLimitRecordFormat23.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat25 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord26 = null;
    long long27 = relationshipGroupHighLimitRecordFormat25.getNextRecordReference(
        relationshipGroupRecord26);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord28 = relationshipGroupHighLimitRecordFormat25.newRecord();
    org.neo4j.internal.id.IdSequence idSequence30 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext31 = null;
    relationshipGroupHighLimitRecordFormat23.prepare(relationshipGroupRecord28, (int) (byte) 1,
        idSequence30, cursorContext31);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat33 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord34 = null;
    long long35 = relationshipGroupHighLimitRecordFormat33.getNextRecordReference(
        relationshipGroupRecord34);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord36 = relationshipGroupHighLimitRecordFormat33.newRecord();
    org.neo4j.internal.id.IdSequence idSequence38 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext39 = null;
    relationshipGroupHighLimitRecordFormat23.prepare(relationshipGroupRecord36, 0, idSequence38,
        cursorContext39);
    org.neo4j.internal.id.IdSequence idSequence42 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext43 = null;
    relationshipGroupHighLimitRecordFormat13.prepare(relationshipGroupRecord36, 128, idSequence42,
        cursorContext43);
    org.neo4j.internal.id.IdSequence idSequence46 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext47 = null;
    relationshipGroupHighLimitRecordFormat12.prepare(relationshipGroupRecord36, 16, idSequence46,
        cursorContext47);
    org.neo4j.io.pagecache.PageCursor pageCursor49 = null;
    try {
      relationshipGroupHighLimitRecordFormat0.write(relationshipGroupRecord36, pageCursor49, 99,
          128);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord5);
    org.junit.Assert.assertNotNull(relationshipGroupRecord10);
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1125899906842623L + "'",
        long14 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord18);
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1125899906842623L + "'",
        long24 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord28);
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord36);
  }

  @Test
  public void test0657() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0657");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat6 = v300_1.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat7 = v300_1.relationship();
    java.lang.String str8 = v300_1.name();
    java.lang.String str9 = v300_1.name();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat6);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat7);
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "high_limitV3_0_0" + "'", str8,
        "high_limitV3_0_0");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "high_limitV3_0_0" + "'", str9,
        "high_limitV3_0_0");
  }

  @Test
  public void test0658() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0658");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat1 = v320_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat2 = v320_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat3 = v320_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat4 = v320_0.property();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily5 = v320_0.getFormatFamily();
    org.neo4j.storageengine.api.format.Capability capability6 = null;
    boolean boolean7 = v320_0.hasCapability(capability6);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat8 = v320_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat9 = v320_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat10 = v320_0.property();
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat1);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat2);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat3);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat4);
    org.junit.Assert.assertTrue(
        "'" + formatFamily5 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily5.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat8);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat9);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat10);
  }

  @Test
  public void test0659() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0659");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v310_0.relationship();
    java.lang.String str2 = v310_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat3 = v310_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat4 = v310_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat5 = v310_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat6 = v310_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat7 = v310_0.labelToken();
    java.lang.String str8 = v310_0.toString();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_1_0" + "'", str2,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat3);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat4);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat5);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat6);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat7);
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "RecordFormat:V310[vE.H.2]" + "'", str8,
        "RecordFormat:V310[vE.H.2]");
  }

  @Test
  public void test0660() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0660");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat1 = v306_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat2 = v306_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat3 = v306_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat4 = v306_0.property();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily5 = v306_0.getFormatFamily();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily6 = v306_0.getFormatFamily();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat7 = v306_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat8 = v306_0.schema();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat9 = v306_0.property();
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat1);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat2);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat3);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat4);
    org.junit.Assert.assertTrue(
        "'" + formatFamily5 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily5.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertTrue(
        "'" + formatFamily6 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily6.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat7);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat8);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat9);
  }

  @Test
  public void test0661() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0661");
    }
    int int1 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.leg(58L);
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 3 + "'", int1 == 3);
  }

  @Test
  public void test0662() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0662");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod((long) 8,
        (-39L));
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-39L) + "'", long2 == (-39L));
  }

  @Test
  public void test0663() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0663");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod((-5L), 0L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-5L) + "'", long2 == (-5L));
  }

  @Test
  public void test0664() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0664");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord2 = relationshipHighLimitRecordFormat1.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader4 = null;
    int int5 = relationshipRecordFormat3.getRecordSize(storeHeader4);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat8 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord9 = relationshipRecordFormat8.newRecord();
    long long10 = relationshipHighLimitRecordFormat7.getNextRecordReference(relationshipRecord9);
    org.neo4j.internal.id.IdSequence idSequence12 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext13 = null;
    relationshipRecordFormat3.prepare(relationshipRecord9, 3, idSequence12, cursorContext13);
    org.neo4j.internal.id.IdSequence idSequence16 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext17 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord9, 0, idSequence16,
        cursorContext17);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader19 = null;
    int int20 = relationshipHighLimitRecordFormat1.getRecordSize(storeHeader19);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader21 = null;
    int int22 = relationshipHighLimitRecordFormat1.getRecordSize(storeHeader21);
    org.junit.Assert.assertNotNull(relationshipRecord2);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
    org.junit.Assert.assertNotNull(relationshipRecord9);
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
  }

  @Test
  public void test0665() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0665");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod(100L, 52L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 116L + "'", long2 == 116L);
  }

  @Test
  public void test0666() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0666");
    }
    java.util.function.Function<org.neo4j.kernel.impl.store.StoreHeader, java.lang.Integer> storeHeaderFunction1 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.fixedRecordSize(
        0);
    org.junit.Assert.assertNotNull(storeHeaderFunction1);
  }

  @Test
  public void test0667() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0667");
    }
    org.neo4j.io.pagecache.PageCursor pageCursor1 = null;
    try {
      io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.enoForPa(233L,
          pageCursor1);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test0668() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0668");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = propertyRecordFormat0.getRecordSize(storeHeader1);
    long long3 = propertyRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum highLimitEncEnum4 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8;
    boolean boolean5 = propertyRecordFormat0.equals((java.lang.Object) highLimitEncEnum4);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat6 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord7 = null;
    org.neo4j.internal.id.IdSequence idSequence9 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext10 = null;
    propertyRecordFormat6.prepare(propertyRecord7, (int) (short) -1, idSequence9, cursorContext10);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord12 = propertyRecordFormat6.newRecord();
    long long13 = propertyRecordFormat0.getNextRecordReference(propertyRecord12);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat14 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader15 = null;
    int int16 = propertyRecordFormat14.getRecordSize(storeHeader15);
    int int19 = propertyRecordFormat14.getPageSize((int) (byte) -1, 128);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat20 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long21 = propertyOneByteHeaderRecordFormat20.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord22 = propertyOneByteHeaderRecordFormat20.newRecord();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord23 = propertyOneByteHeaderRecordFormat20.newRecord();
    long long24 = propertyRecordFormat14.getNextRecordReference(propertyRecord23);
    org.neo4j.io.pagecache.PageCursor pageCursor25 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad26 = null;
    try {
      propertyRecordFormat0.read(propertyRecord23, pageCursor25, recordLoad26, 0, 3);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1125899906842623L + "'",
        long3 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + highLimitEncEnum4 + "' != '"
            + io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8 + "'",
        highLimitEncEnum4.equals(
            io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8));
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    org.junit.Assert.assertNotNull(propertyRecord12);
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
    org.junit.Assert.assertTrue("'" + int16 + "' != '" + 48 + "'", int16 == 48);
    org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1125899906842623L + "'",
        long21 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord22);
    org.junit.Assert.assertNotNull(propertyRecord23);
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
  }

  @Test
  public void test0669() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0669");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily1 = v300_0.getFormatFamily();
    java.lang.String str2 = v300_0.storeVersion();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat3 = v300_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat4 = v300_0.schema();
    org.junit.Assert.assertTrue(
        "'" + formatFamily1 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily1.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "vE.H.0" + "'", str2, "vE.H.0");
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat3);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat4);
  }

  @Test
  public void test0670() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0670");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = recordFormatDynamicRecordImpl0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl7 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean9 = recordFormatDynamicRecordImpl7.equals((java.lang.Object) 100.0f);
    int int12 = recordFormatDynamicRecordImpl7.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord13 = recordFormatDynamicRecordImpl7.newRecord();
    long long14 = recordFormatDynamicRecordImpl0.getNextRecordReference(dynamicRecord13);
    int int15 = recordFormatDynamicRecordImpl0.getRecordHeaderSize();
    int int16 = recordFormatDynamicRecordImpl0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord17 = null;
    org.neo4j.internal.id.IdSequence idSequence19 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext20 = null;
    recordFormatDynamicRecordImpl0.prepare(dynamicRecord17, (int) (byte) 100, idSequence19,
        cursorContext20);
    int int22 = recordFormatDynamicRecordImpl0.getRecordHeaderSize();
    org.neo4j.io.pagecache.PageCursor pageCursor23 = null;
    try {
      boolean boolean24 = recordFormatDynamicRecordImpl0.isInUse(pageCursor23);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord6);
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 16 + "'", int12 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord13);
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    org.junit.Assert.assertTrue("'" + int15 + "' != '" + 12 + "'", int15 == 12);
    org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
    org.junit.Assert.assertTrue("'" + int22 + "' != '" + 12 + "'", int22 == 12);
  }

  @Test
  public void test0671() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0671");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.NodeRecordFormat nodeRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.NodeRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord2 = null;
    long long3 = nodeRecordFormat1.getNextRecordReference(nodeRecord2);
    int int4 = nodeRecordFormat1.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader5 = null;
    int int6 = nodeRecordFormat1.getRecordSize(storeHeader5);
    int int9 = nodeRecordFormat1.getPageSize((int) '4', (int) (short) 1);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord10 = nodeRecordFormat1.newRecord();
    int int11 = nodeRecordFormat0.rerdtlgForRE(nodeRecord10);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord12 = nodeRecordFormat0.newRecord();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord13 = nodeRecordFormat0.newRecord();
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    org.junit.Assert.assertTrue("'" + int6 + "' != '" + 16 + "'", int6 == 16);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
    org.junit.Assert.assertNotNull(nodeRecord10);
    org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    org.junit.Assert.assertNotNull(nodeRecord12);
    org.junit.Assert.assertNotNull(nodeRecord13);
  }

  @Test
  public void test0672() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0672");
    }
    long long2 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.torete(
        (long) 52, (long) '4');
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
  }

  @Test
  public void test0673() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0673");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = recordFormatDynamicRecordImpl0.newRecord();
    int int9 = recordFormatDynamicRecordImpl0.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord10 = recordFormatDynamicRecordImpl0.newRecord();
    int int13 = recordFormatDynamicRecordImpl0.getPageSize((int) '4', (int) (short) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_14 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat15 = v320_14.relationship();
    boolean boolean16 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) v320_14);
    int int19 = recordFormatDynamicRecordImpl0.getPageSize(16, 8);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord20 = recordFormatDynamicRecordImpl0.newRecord();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord6);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord10);
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat15);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    org.junit.Assert.assertTrue("'" + int19 + "' != '" + 16 + "'", int19 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord20);
  }

  @Test
  public void test0674() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0674");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v320_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat2 = v320_0.relationshipGroup();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat3 = v320_0.property();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat2);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat3);
  }

  @Test
  public void test0675() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0675");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_6 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat7 = v306_6.node();
    org.neo4j.storageengine.api.format.Capability capability8 = null;
    boolean boolean9 = v306_6.hasCapability(capability8);
    org.neo4j.storageengine.api.format.CapabilityType capabilityType10 = null;
    boolean boolean11 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_6, capabilityType10);
    org.neo4j.kernel.impl.store.format.RecordFormats[] recordFormatsArray12 = v306_6.compatibleVersionsForRollingUpgrade();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily13 = v306_6.getFormatFamily();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat14 = v306_6.node();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat7);
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    org.junit.Assert.assertNotNull(recordFormatsArray12);
    org.junit.Assert.assertTrue(
        "'" + formatFamily13 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily13.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat14);
  }

  @Test
  public void test0676() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0676");
    }
    io.github.onograph.internal.batchimport.EnterpriseBatchImporterFactory enterpriseBatchImporterFactory0 = new io.github.onograph.internal.batchimport.EnterpriseBatchImporterFactory();
    java.lang.String str1 = enterpriseBatchImporterFactory0.getName();
    java.lang.String str2 = enterpriseBatchImporterFactory0.getName();
    java.lang.String str3 = enterpriseBatchImporterFactory0.getName();
    org.neo4j.io.layout.DatabaseLayout databaseLayout4 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction5 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer6 = null;
    org.neo4j.internal.batchimport.Configuration configuration7 = null;
    org.neo4j.logging.internal.LogService logService8 = null;
    org.neo4j.internal.batchimport.staging.ExecutionMonitor executionMonitor9 = null;
    org.neo4j.internal.batchimport.AdditionalInitialIds additionalInitialIds10 = null;
    org.neo4j.configuration.Config config11 = null;
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_12 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_13 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat14 = v300_13.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat15 = v300_13.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType16 = null;
    boolean boolean17 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_12,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_13, capabilityType16);
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_18 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat19 = v310_18.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat20 = v310_18.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat21 = v310_18.labelToken();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType22 = null;
    boolean boolean23 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_13,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v310_18, capabilityType22);
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily24 = v310_18.getFormatFamily();
    org.neo4j.internal.batchimport.ImportLogic.Monitor monitor25 = null;
    org.neo4j.scheduler.JobScheduler jobScheduler26 = null;
    org.neo4j.internal.batchimport.input.Collector collector27 = null;
    org.neo4j.storageengine.api.LogFilesInitializer logFilesInitializer28 = null;
    org.neo4j.internal.batchimport.IndexImporterFactory indexImporterFactory29 = null;
    org.neo4j.memory.MemoryTracker memoryTracker30 = null;
    try {
      org.neo4j.internal.batchimport.BatchImporter batchImporter31 = enterpriseBatchImporterFactory0.instantiate(
          databaseLayout4, fileSystemAbstraction5, pageCacheTracer6, configuration7, logService8,
          executionMonitor9, additionalInitialIds10, config11,
          (org.neo4j.kernel.impl.store.format.RecordFormats) v310_18, monitor25, jobScheduler26,
          collector27, logFilesInitializer28, indexImporterFactory29, memoryTracker30);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "restartable" + "'", str1, "restartable");
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "restartable" + "'", str2, "restartable");
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "restartable" + "'", str3, "restartable");
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat14);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat15);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat19);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat20);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat21);
    org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    org.junit.Assert.assertTrue(
        "'" + formatFamily24 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily24.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
  }

  @Test
  public void test0677() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0677");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod((long) '#',
        115L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 115L + "'", long2 == 115L);
  }

  @Test
  public void test0678() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0678");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v310_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat2 = v310_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat3 = v310_0.propertyKeyToken();
    java.lang.String str4 = v310_0.toString();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily5 = v310_0.getFormatFamily();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RecordFormat:V310[vE.H.2]" + "'", str4,
        "RecordFormat:V310[vE.H.2]");
    org.junit.Assert.assertTrue(
        "'" + formatFamily5 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily5.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
  }

  @Test
  public void test0679() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0679");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord2 = propertyRecordFormat1.newRecord();
    long long3 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord2);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader4 = null;
    int int5 = propertyOneByteHeaderRecordFormat0.getRecordSize(storeHeader4);
    int int8 = propertyOneByteHeaderRecordFormat0.getPageSize(0, (int) (short) 10);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader9 = null;
    int int10 = propertyOneByteHeaderRecordFormat0.getRecordSize(storeHeader9);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord11 = null;
    org.neo4j.io.pagecache.PageCursor pageCursor12 = null;
    try {
      propertyOneByteHeaderRecordFormat0.write(propertyRecord11, pageCursor12, (int) (byte) 10, 32);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(propertyRecord2);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 48 + "'", int5 == 48);
    org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 48 + "'", int10 == 48);
  }

  @Test
  public void test0680() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0680");
    }
    org.neo4j.io.pagecache.PageCursor pageCursor1 = null;
    try {
      io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.enoForPa(112L,
          pageCursor1);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test0681() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0681");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord5 = relationshipRecordFormat4.newRecord();
    long long6 = relationshipHighLimitRecordFormat3.getNextRecordReference(relationshipRecord5);
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord5, (int) (byte) 10, idSequence8,
        cursorContext9);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat14 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord16 = relationshipRecordFormat15.newRecord();
    long long17 = relationshipHighLimitRecordFormat14.getNextRecordReference(relationshipRecord16);
    org.neo4j.internal.id.IdSequence idSequence19 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext20 = null;
    relationshipHighLimitRecordFormat12.prepare(relationshipRecord16, (int) (byte) 10, idSequence19,
        cursorContext20);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat23 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord24 = relationshipHighLimitRecordFormat23.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat26 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord27 = relationshipHighLimitRecordFormat26.newRecord();
    org.neo4j.internal.id.IdSequence idSequence29 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext30 = null;
    relationshipHighLimitRecordFormat23.prepare(relationshipRecord27, (int) (short) 1, idSequence29,
        cursorContext30);
    long long32 = relationshipHighLimitRecordFormat12.getNextRecordReference(relationshipRecord27);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord33 = relationshipHighLimitRecordFormat12.newRecord();
    org.neo4j.internal.id.IdSequence idSequence35 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext36 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord33, (int) ' ', idSequence35,
        cursorContext36);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat38 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord39 = relationshipRecordFormat38.newRecord();
    int int40 = relationshipRecordFormat38.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat41 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat42 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord43 = relationshipRecordFormat42.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord44 = relationshipRecordFormat42.newRecord();
    org.neo4j.internal.id.IdSequence idSequence46 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext47 = null;
    relationshipRecordFormat41.prepare(relationshipRecord44, 100, idSequence46, cursorContext47);
    long long49 = relationshipRecordFormat38.getNextRecordReference(relationshipRecord44);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat50 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat51 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord52 = relationshipRecordFormat51.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord53 = relationshipRecordFormat51.newRecord();
    org.neo4j.internal.id.IdSequence idSequence55 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext56 = null;
    relationshipRecordFormat50.prepare(relationshipRecord53, 100, idSequence55, cursorContext56);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat59 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord60 = relationshipHighLimitRecordFormat59.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat62 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord63 = relationshipHighLimitRecordFormat62.newRecord();
    org.neo4j.internal.id.IdSequence idSequence65 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext66 = null;
    relationshipHighLimitRecordFormat59.prepare(relationshipRecord63, (int) (short) 1, idSequence65,
        cursorContext66);
    org.neo4j.internal.id.IdSequence idSequence69 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext70 = null;
    relationshipRecordFormat50.prepare(relationshipRecord63, 24, idSequence69, cursorContext70);
    long long72 = relationshipRecordFormat38.getNextRecordReference(relationshipRecord63);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat74 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord75 = relationshipHighLimitRecordFormat74.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat77 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord78 = relationshipHighLimitRecordFormat77.newRecord();
    org.neo4j.internal.id.IdSequence idSequence80 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext81 = null;
    relationshipHighLimitRecordFormat74.prepare(relationshipRecord78, (int) (short) 1, idSequence80,
        cursorContext81);
    org.neo4j.internal.id.IdSequence idSequence84 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext85 = null;
    relationshipRecordFormat38.prepare(relationshipRecord78, 12, idSequence84, cursorContext85);
    org.neo4j.io.pagecache.PageCursor pageCursor87 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad88 = null;
    try {
      relationshipHighLimitRecordFormat1.read(relationshipRecord78, pageCursor87, recordLoad88, 32,
          100);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(relationshipRecord5);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord16);
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord24);
    org.junit.Assert.assertNotNull(relationshipRecord27);
    org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord33);
    org.junit.Assert.assertNotNull(relationshipRecord39);
    org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord43);
    org.junit.Assert.assertNotNull(relationshipRecord44);
    org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord52);
    org.junit.Assert.assertNotNull(relationshipRecord53);
    org.junit.Assert.assertNotNull(relationshipRecord60);
    org.junit.Assert.assertNotNull(relationshipRecord63);
    org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-1L) + "'", long72 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord75);
    org.junit.Assert.assertNotNull(relationshipRecord78);
  }

  @Test
  public void test0682() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0682");
    }
    java.util.function.Function<org.neo4j.kernel.impl.store.StoreHeader, java.lang.Integer> storeHeaderFunction1 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.fixedRecordSize(
        96);
    org.junit.Assert.assertNotNull(storeHeaderFunction1);
  }

  @Test
  public void test0683() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0683");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long1 = relationshipGroupHighLimitRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord3 = null;
    long long4 = relationshipGroupHighLimitRecordFormat2.getNextRecordReference(
        relationshipGroupRecord3);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord5 = relationshipGroupHighLimitRecordFormat2.newRecord();
    org.neo4j.internal.id.IdSequence idSequence7 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext8 = null;
    relationshipGroupHighLimitRecordFormat0.prepare(relationshipGroupRecord5, (int) (byte) 1,
        idSequence7, cursorContext8);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat10 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord11 = null;
    long long12 = relationshipGroupHighLimitRecordFormat10.getNextRecordReference(
        relationshipGroupRecord11);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord13 = relationshipGroupHighLimitRecordFormat10.newRecord();
    org.neo4j.internal.id.IdSequence idSequence15 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext16 = null;
    relationshipGroupHighLimitRecordFormat0.prepare(relationshipGroupRecord13, 0, idSequence15,
        cursorContext16);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat18 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long19 = relationshipGroupHighLimitRecordFormat18.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat20 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord21 = null;
    long long22 = relationshipGroupHighLimitRecordFormat20.getNextRecordReference(
        relationshipGroupRecord21);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord23 = relationshipGroupHighLimitRecordFormat20.newRecord();
    org.neo4j.internal.id.IdSequence idSequence25 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext26 = null;
    relationshipGroupHighLimitRecordFormat18.prepare(relationshipGroupRecord23, 0, idSequence25,
        cursorContext26);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat28 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader29 = null;
    int int30 = relationshipGroupRecordFormat28.getRecordSize(storeHeader29);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord31 = relationshipGroupRecordFormat28.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat32 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader33 = null;
    int int34 = relationshipGroupRecordFormat32.getRecordSize(storeHeader33);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat35 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long36 = relationshipGroupHighLimitRecordFormat35.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat37 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord38 = null;
    long long39 = relationshipGroupHighLimitRecordFormat37.getNextRecordReference(
        relationshipGroupRecord38);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord40 = relationshipGroupHighLimitRecordFormat37.newRecord();
    org.neo4j.internal.id.IdSequence idSequence42 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext43 = null;
    relationshipGroupHighLimitRecordFormat35.prepare(relationshipGroupRecord40, (int) (byte) 1,
        idSequence42, cursorContext43);
    org.neo4j.internal.id.IdSequence idSequence46 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext47 = null;
    relationshipGroupRecordFormat32.prepare(relationshipGroupRecord40, 0, idSequence46,
        cursorContext47);
    long long49 = relationshipGroupRecordFormat28.getNextRecordReference(relationshipGroupRecord40);
    long long50 = relationshipGroupHighLimitRecordFormat18.getNextRecordReference(
        relationshipGroupRecord40);
    org.neo4j.internal.id.IdSequence idSequence52 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext53 = null;
    relationshipGroupHighLimitRecordFormat0.prepare(relationshipGroupRecord40, 3, idSequence52,
        cursorContext53);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat55 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader56 = null;
    int int57 = relationshipGroupRecordFormat55.getRecordSize(storeHeader56);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord58 = relationshipGroupRecordFormat55.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat59 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader60 = null;
    int int61 = relationshipGroupRecordFormat59.getRecordSize(storeHeader60);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat62 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long63 = relationshipGroupHighLimitRecordFormat62.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat64 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord65 = null;
    long long66 = relationshipGroupHighLimitRecordFormat64.getNextRecordReference(
        relationshipGroupRecord65);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord67 = relationshipGroupHighLimitRecordFormat64.newRecord();
    org.neo4j.internal.id.IdSequence idSequence69 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext70 = null;
    relationshipGroupHighLimitRecordFormat62.prepare(relationshipGroupRecord67, (int) (byte) 1,
        idSequence69, cursorContext70);
    org.neo4j.internal.id.IdSequence idSequence73 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext74 = null;
    relationshipGroupRecordFormat59.prepare(relationshipGroupRecord67, 0, idSequence73,
        cursorContext74);
    long long76 = relationshipGroupRecordFormat55.getNextRecordReference(relationshipGroupRecord67);
    org.neo4j.io.pagecache.PageCursor pageCursor77 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad78 = null;
    try {
      relationshipGroupHighLimitRecordFormat0.read(relationshipGroupRecord67, pageCursor77,
          recordLoad78, 128, (-1));
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord5);
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord13);
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1125899906842623L + "'",
        long19 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord23);
    org.junit.Assert.assertTrue("'" + int30 + "' != '" + 32 + "'", int30 == 32);
    org.junit.Assert.assertNotNull(relationshipGroupRecord31);
    org.junit.Assert.assertTrue("'" + int34 + "' != '" + 32 + "'", int34 == 32);
    org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1125899906842623L + "'",
        long36 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord40);
    org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
    org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
    org.junit.Assert.assertTrue("'" + int57 + "' != '" + 32 + "'", int57 == 32);
    org.junit.Assert.assertNotNull(relationshipGroupRecord58);
    org.junit.Assert.assertTrue("'" + int61 + "' != '" + 32 + "'", int61 == 32);
    org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1125899906842623L + "'",
        long63 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord67);
    org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-1L) + "'", long76 == (-1L));
  }

  @Test
  public void test0684() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0684");
    }
    org.neo4j.io.pagecache.PageCursor pageCursor1 = null;
    try {
      io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.enoForPa(73L,
          pageCursor1);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test0685() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0685");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod((long) 3,
        0L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 3L + "'", long2 == 3L);
  }

  @Test
  public void test0686() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0686");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod(138L, 249L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 251L + "'", long2 == 251L);
  }

  @Test
  public void test0687() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0687");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord2 = propertyRecordFormat1.newRecord();
    long long3 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord2);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader4 = null;
    int int5 = propertyOneByteHeaderRecordFormat0.getRecordSize(storeHeader4);
    int int8 = propertyOneByteHeaderRecordFormat0.getPageSize(0, (int) (short) 10);
    try {
      int int11 = propertyOneByteHeaderRecordFormat0.getPageSize((int) ' ', 0);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.ArithmeticException; message: / by zero");
    } catch (java.lang.ArithmeticException e) {
    }
    org.junit.Assert.assertNotNull(propertyRecord2);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 48 + "'", int5 == 48);
    org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
  }

  @Test
  public void test0688() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0688");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord2 = relationshipRecordFormat1.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord3 = relationshipRecordFormat1.newRecord();
    org.neo4j.internal.id.IdSequence idSequence5 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext6 = null;
    relationshipRecordFormat0.prepare(relationshipRecord3, 100, idSequence5, cursorContext6);
    int int10 = relationshipRecordFormat0.getPageSize(0, 3);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord11 = relationshipRecordFormat0.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord12 = relationshipRecordFormat0.newRecord();
    org.neo4j.io.pagecache.PageCursor pageCursor13 = null;
    try {
      boolean boolean14 = relationshipRecordFormat0.isInUse(pageCursor13);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(relationshipRecord2);
    org.junit.Assert.assertNotNull(relationshipRecord3);
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord11);
    org.junit.Assert.assertNotNull(relationshipRecord12);
  }

  @Test
  public void test0689() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0689");
    }
    int int1 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.leg(
        (long) '#');
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 3 + "'", int1 == 3);
  }

  @Test
  public void test0690() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0690");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = relationshipGroupRecordFormat0.getRecordSize(storeHeader1);
    long long3 = relationshipGroupRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord5 = null;
    long long6 = relationshipGroupHighLimitRecordFormat4.getNextRecordReference(
        relationshipGroupRecord5);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord7 = relationshipGroupHighLimitRecordFormat4.newRecord();
    org.neo4j.internal.id.IdSequence idSequence9 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext10 = null;
    relationshipGroupRecordFormat0.prepare(relationshipGroupRecord7, 128, idSequence9,
        cursorContext10);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader12 = null;
    int int13 = relationshipGroupRecordFormat0.getRecordSize(storeHeader12);
    org.neo4j.io.pagecache.PageCursor pageCursor14 = null;
    try {
      boolean boolean15 = relationshipGroupRecordFormat0.isInUse(pageCursor14);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 32 + "'", int2 == 32);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1125899906842623L + "'",
        long3 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord7);
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 32 + "'", int13 == 32);
  }

  @Test
  public void test0691() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0691");
    }
    long long2 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.toable(96L,
        (long) 1);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 97L + "'", long2 == 97L);
  }

  @Test
  public void test0692() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0692");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord1 = propertyRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader3 = null;
    int int4 = propertyRecordFormat2.getRecordSize(storeHeader3);
    long long5 = propertyRecordFormat2.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat6 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord8 = propertyRecordFormat7.newRecord();
    long long9 = propertyOneByteHeaderRecordFormat6.getNextRecordReference(propertyRecord8);
    org.neo4j.internal.id.IdSequence idSequence11 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext12 = null;
    propertyRecordFormat2.prepare(propertyRecord8, 0, idSequence11, cursorContext12);
    long long14 = propertyRecordFormat0.getNextRecordReference(propertyRecord8);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader16 = null;
    int int17 = propertyRecordFormat15.getRecordSize(storeHeader16);
    int int20 = propertyRecordFormat15.getPageSize((int) (byte) -1, 128);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat21 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long22 = propertyOneByteHeaderRecordFormat21.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord23 = propertyOneByteHeaderRecordFormat21.newRecord();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord24 = propertyOneByteHeaderRecordFormat21.newRecord();
    long long25 = propertyRecordFormat15.getNextRecordReference(propertyRecord24);
    long long26 = propertyRecordFormat0.getNextRecordReference(propertyRecord24);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader27 = null;
    int int28 = propertyRecordFormat0.getRecordSize(storeHeader27);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord29 = propertyRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat30 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat31 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord32 = propertyRecordFormat31.newRecord();
    long long33 = propertyOneByteHeaderRecordFormat30.getNextRecordReference(propertyRecord32);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat34 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long35 = propertyOneByteHeaderRecordFormat34.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat36 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat37 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord38 = propertyRecordFormat37.newRecord();
    long long39 = propertyOneByteHeaderRecordFormat36.getNextRecordReference(propertyRecord38);
    long long40 = propertyOneByteHeaderRecordFormat34.getNextRecordReference(propertyRecord38);
    long long41 = propertyOneByteHeaderRecordFormat30.getNextRecordReference(propertyRecord38);
    org.neo4j.io.pagecache.PageCursor pageCursor42 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad43 = null;
    try {
      propertyRecordFormat0.read(propertyRecord38, pageCursor42, recordLoad43, (int) '4', 30);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(propertyRecord1);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 48 + "'", int4 == 48);
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1125899906842623L + "'",
        long5 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord8);
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    org.junit.Assert.assertTrue("'" + int17 + "' != '" + 48 + "'", int17 == 48);
    org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1125899906842623L + "'",
        long22 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord23);
    org.junit.Assert.assertNotNull(propertyRecord24);
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
    org.junit.Assert.assertTrue("'" + int28 + "' != '" + 48 + "'", int28 == 48);
    org.junit.Assert.assertNotNull(propertyRecord29);
    org.junit.Assert.assertNotNull(propertyRecord32);
    org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1125899906842623L + "'",
        long35 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord38);
    org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
    org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
    org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
  }

  @Test
  public void test0693() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0693");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v306_0.relationship();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray2 = v306_0.capabilities();
    java.lang.String str3 = v306_0.introductionVersion();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat4 = v306_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat5 = v306_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat6 = v306_0.node();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(capabilityArray2);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "3.0.6" + "'", str3, "3.0.6");
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat4);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat5);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat6);
  }

  @Test
  public void test0694() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0694");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    int int3 = relationshipGroupRecordFormat0.getPageSize((int) 'a', (int) (short) 100);
    long long4 = relationshipGroupRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord5 = relationshipGroupRecordFormat0.newRecord();
    int int8 = relationshipGroupRecordFormat0.getPageSize((int) (byte) 0, 8);
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1125899906842623L + "'",
        long4 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipGroupRecord5);
    org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
  }

  @Test
  public void test0695() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0695");
    }
    org.neo4j.io.pagecache.PageCursor pageCursor1 = null;
    try {
      io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.enoForPa(65L,
          pageCursor1);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test0696() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0696");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord2 = propertyRecordFormat1.newRecord();
    long long3 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord2);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long5 = propertyOneByteHeaderRecordFormat4.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat6 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord8 = propertyRecordFormat7.newRecord();
    long long9 = propertyOneByteHeaderRecordFormat6.getNextRecordReference(propertyRecord8);
    long long10 = propertyOneByteHeaderRecordFormat4.getNextRecordReference(propertyRecord8);
    long long11 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord8);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader13 = null;
    int int14 = propertyRecordFormat12.getRecordSize(storeHeader13);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl15 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats16 = highLimitFactoryDefaultImpl15.newInstance();
    boolean boolean17 = propertyRecordFormat12.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl15);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat19 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean20 = propertyRecordFormat12.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord21 = propertyRecordFormat12.newRecord();
    long long22 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord21);
    int int23 = propertyOneByteHeaderRecordFormat0.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat24 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long25 = propertyOneByteHeaderRecordFormat24.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord26 = propertyOneByteHeaderRecordFormat24.newRecord();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord27 = propertyOneByteHeaderRecordFormat24.newRecord();
    org.neo4j.io.pagecache.PageCursor pageCursor28 = null;
    try {
      propertyOneByteHeaderRecordFormat0.write(propertyRecord27, pageCursor28, (int) (byte) 1, 32);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(propertyRecord2);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1125899906842623L + "'",
        long5 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord8);
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    org.junit.Assert.assertTrue("'" + int14 + "' != '" + 48 + "'", int14 == 48);
    org.junit.Assert.assertNotNull(recordFormats16);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    org.junit.Assert.assertNotNull(propertyRecord21);
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
    org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1125899906842623L + "'",
        long25 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord26);
    org.junit.Assert.assertNotNull(propertyRecord27);
  }

  @Test
  public void test0697() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0697");
    }
    java.util.function.Function<org.neo4j.kernel.impl.store.StoreHeader, java.lang.Integer> storeHeaderFunction1 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.fixedRecordSize(
        (int) (byte) 1);
    org.junit.Assert.assertNotNull(storeHeaderFunction1);
  }

  @Test
  public void test0698() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0698");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl6 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean8 = recordFormatDynamicRecordImpl6.equals((java.lang.Object) 100.0f);
    int int11 = recordFormatDynamicRecordImpl6.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord12 = recordFormatDynamicRecordImpl6.newRecord();
    int int15 = recordFormatDynamicRecordImpl6.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord16 = recordFormatDynamicRecordImpl6.newRecord();
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord17 = recordFormatDynamicRecordImpl6.newRecord();
    org.neo4j.internal.id.IdSequence idSequence19 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext20 = null;
    recordFormatDynamicRecordImpl0.prepare(dynamicRecord17, 10, idSequence19, cursorContext20);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl22 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean24 = recordFormatDynamicRecordImpl22.equals((java.lang.Object) 100.0f);
    long long25 = recordFormatDynamicRecordImpl22.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl26 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean28 = recordFormatDynamicRecordImpl26.equals((java.lang.Object) 100.0f);
    int int31 = recordFormatDynamicRecordImpl26.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord32 = null;
    org.neo4j.internal.id.IdSequence idSequence34 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext35 = null;
    recordFormatDynamicRecordImpl26.prepare(dynamicRecord32, (int) (byte) -1, idSequence34,
        cursorContext35);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl37 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean39 = recordFormatDynamicRecordImpl37.equals((java.lang.Object) 100.0f);
    int int42 = recordFormatDynamicRecordImpl37.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord43 = recordFormatDynamicRecordImpl37.newRecord();
    long long44 = recordFormatDynamicRecordImpl26.getNextRecordReference(dynamicRecord43);
    org.neo4j.internal.id.IdSequence idSequence46 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext47 = null;
    recordFormatDynamicRecordImpl22.prepare(dynamicRecord43, (int) (short) 10, idSequence46,
        cursorContext47);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl49 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean51 = recordFormatDynamicRecordImpl49.equals((java.lang.Object) 100.0f);
    long long52 = recordFormatDynamicRecordImpl49.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl53 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean55 = recordFormatDynamicRecordImpl53.equals((java.lang.Object) 100.0f);
    int int58 = recordFormatDynamicRecordImpl53.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord59 = null;
    org.neo4j.internal.id.IdSequence idSequence61 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext62 = null;
    recordFormatDynamicRecordImpl53.prepare(dynamicRecord59, (int) (byte) -1, idSequence61,
        cursorContext62);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl64 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean66 = recordFormatDynamicRecordImpl64.equals((java.lang.Object) 100.0f);
    int int69 = recordFormatDynamicRecordImpl64.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord70 = recordFormatDynamicRecordImpl64.newRecord();
    long long71 = recordFormatDynamicRecordImpl53.getNextRecordReference(dynamicRecord70);
    org.neo4j.internal.id.IdSequence idSequence73 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext74 = null;
    recordFormatDynamicRecordImpl49.prepare(dynamicRecord70, (int) (short) 10, idSequence73,
        cursorContext74);
    long long76 = recordFormatDynamicRecordImpl22.getNextRecordReference(dynamicRecord70);
    org.neo4j.internal.id.IdSequence idSequence78 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext79 = null;
    recordFormatDynamicRecordImpl0.prepare(dynamicRecord70, 10, idSequence78, cursorContext79);
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    org.junit.Assert.assertTrue("'" + int11 + "' != '" + 16 + "'", int11 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord12);
    org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord16);
    org.junit.Assert.assertNotNull(dynamicRecord17);
    org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1125899906842623L + "'",
        long25 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    org.junit.Assert.assertTrue("'" + int31 + "' != '" + 16 + "'", int31 == 16);
    org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    org.junit.Assert.assertTrue("'" + int42 + "' != '" + 16 + "'", int42 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord43);
    org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1125899906842623L + "'",
        long52 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    org.junit.Assert.assertTrue("'" + int58 + "' != '" + 16 + "'", int58 == 16);
    org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    org.junit.Assert.assertTrue("'" + int69 + "' != '" + 16 + "'", int69 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord70);
    org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-1L) + "'", long71 == (-1L));
    org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-1L) + "'", long76 == (-1L));
  }

  @Test
  public void test0699() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0699");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v310_0.relationship();
    java.lang.String str2 = v310_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormats[] recordFormatsArray3 = v310_0.compatibleVersionsForRollingUpgrade();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat4 = v310_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat5 = v310_0.propertyKeyToken();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_1_0" + "'", str2,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(recordFormatsArray3);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat4);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat5);
  }

  @Test
  public void test0700() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0700");
    }
    io.github.onograph.internal.batchimport.EnterpriseBatchImporterFactory enterpriseBatchImporterFactory0 = new io.github.onograph.internal.batchimport.EnterpriseBatchImporterFactory();
    org.neo4j.io.layout.DatabaseLayout databaseLayout1 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction2 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer3 = null;
    org.neo4j.internal.batchimport.Configuration configuration4 = null;
    org.neo4j.logging.internal.LogService logService5 = null;
    org.neo4j.internal.batchimport.staging.ExecutionMonitor executionMonitor6 = null;
    org.neo4j.internal.batchimport.AdditionalInitialIds additionalInitialIds7 = null;
    org.neo4j.configuration.Config config8 = null;
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat9 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord10 = null;
    long long11 = nodeRecordFormat9.getNextRecordReference(nodeRecord10);
    int int12 = nodeRecordFormat9.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_13 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_14 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat15 = v300_14.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat16 = v300_14.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType17 = null;
    boolean boolean18 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_13,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_14, capabilityType17);
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_19 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat20 = v306_19.node();
    org.neo4j.storageengine.api.format.Capability capability21 = null;
    boolean boolean22 = v306_19.hasCapability(capability21);
    org.neo4j.storageengine.api.format.CapabilityType capabilityType23 = null;
    boolean boolean24 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_14,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_19, capabilityType23);
    boolean boolean25 = nodeRecordFormat9.equals((java.lang.Object) v306_19);
    org.neo4j.internal.batchimport.ImportLogic.Monitor monitor26 = null;
    org.neo4j.scheduler.JobScheduler jobScheduler27 = null;
    org.neo4j.internal.batchimport.input.Collector collector28 = null;
    org.neo4j.storageengine.api.LogFilesInitializer logFilesInitializer29 = null;
    org.neo4j.internal.batchimport.IndexImporterFactory indexImporterFactory30 = null;
    org.neo4j.memory.MemoryTracker memoryTracker31 = null;
    try {
      org.neo4j.internal.batchimport.BatchImporter batchImporter32 = enterpriseBatchImporterFactory0.instantiate(
          databaseLayout1, fileSystemAbstraction2, pageCacheTracer3, configuration4, logService5,
          executionMonitor6, additionalInitialIds7, config8,
          (org.neo4j.kernel.impl.store.format.RecordFormats) v306_19, monitor26, jobScheduler27,
          collector28, logFilesInitializer29, indexImporterFactory30, memoryTracker31);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat15);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat16);
    org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat20);
    org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
  }

  @Test
  public void test0701() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0701");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long2 = relationshipGroupHighLimitRecordFormat1.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord4 = null;
    long long5 = relationshipGroupHighLimitRecordFormat3.getNextRecordReference(
        relationshipGroupRecord4);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord6 = relationshipGroupHighLimitRecordFormat3.newRecord();
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    relationshipGroupHighLimitRecordFormat1.prepare(relationshipGroupRecord6, (int) (byte) 1,
        idSequence8, cursorContext9);
    long long11 = relationshipGroupHighLimitRecordFormat0.getNextRecordReference(
        relationshipGroupRecord6);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long13 = relationshipGroupHighLimitRecordFormat12.getMaxId();
    long long14 = relationshipGroupHighLimitRecordFormat12.getMaxId();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord15 = relationshipGroupHighLimitRecordFormat12.newRecord();
    org.neo4j.internal.id.IdSequence idSequence17 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext18 = null;
    relationshipGroupHighLimitRecordFormat0.prepare(relationshipGroupRecord15, 3, idSequence17,
        cursorContext18);
    int int20 = relationshipGroupHighLimitRecordFormat0.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat21 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long22 = relationshipGroupHighLimitRecordFormat21.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat23 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord24 = null;
    long long25 = relationshipGroupHighLimitRecordFormat23.getNextRecordReference(
        relationshipGroupRecord24);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord26 = relationshipGroupHighLimitRecordFormat23.newRecord();
    org.neo4j.internal.id.IdSequence idSequence28 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext29 = null;
    relationshipGroupHighLimitRecordFormat21.prepare(relationshipGroupRecord26, 0, idSequence28,
        cursorContext29);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord31 = relationshipGroupHighLimitRecordFormat21.newRecord();
    org.neo4j.io.pagecache.PageCursor pageCursor32 = null;
    try {
      relationshipGroupHighLimitRecordFormat0.write(relationshipGroupRecord31, pageCursor32,
          (int) '4', 8);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1125899906842623L + "'",
        long2 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord6);
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1125899906842623L + "'",
        long13 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1125899906842623L + "'",
        long14 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipGroupRecord15);
    org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1125899906842623L + "'",
        long22 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord26);
    org.junit.Assert.assertNotNull(relationshipGroupRecord31);
  }

  @Test
  public void test0702() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0702");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat1 = v306_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat2 = v306_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat3 = v306_0.property();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily4 = v306_0.getFormatFamily();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily5 = v306_0.getFormatFamily();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat6 = v306_0.relationshipTypeToken();
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat1);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat2);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat3);
    org.junit.Assert.assertTrue(
        "'" + formatFamily4 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily4.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertTrue(
        "'" + formatFamily5 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily5.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat6);
  }

  @Test
  public void test0703() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0703");
    }
    long long2 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.torete(116L,
        (long) 8);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-108L) + "'", long2 == (-108L));
  }

  @Test
  public void test0704() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0704");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = propertyRecordFormat0.getRecordSize(storeHeader1);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl3 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats4 = highLimitFactoryDefaultImpl3.newInstance();
    boolean boolean5 = propertyRecordFormat0.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl3);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean8 = propertyRecordFormat0.equals((java.lang.Object) (short) 100);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat9 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord10 = propertyRecordFormat9.newRecord();
    long long11 = propertyRecordFormat0.getNextRecordReference(propertyRecord10);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long13 = propertyOneByteHeaderRecordFormat12.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord14 = propertyOneByteHeaderRecordFormat12.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long16 = propertyOneByteHeaderRecordFormat15.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord17 = propertyOneByteHeaderRecordFormat15.newRecord();
    long long18 = propertyOneByteHeaderRecordFormat12.getNextRecordReference(propertyRecord17);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader19 = null;
    int int20 = propertyOneByteHeaderRecordFormat12.getRecordSize(storeHeader19);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat21 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord22 = propertyRecordFormat21.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat23 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader24 = null;
    int int25 = propertyRecordFormat23.getRecordSize(storeHeader24);
    long long26 = propertyRecordFormat23.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat27 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat28 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord29 = propertyRecordFormat28.newRecord();
    long long30 = propertyOneByteHeaderRecordFormat27.getNextRecordReference(propertyRecord29);
    org.neo4j.internal.id.IdSequence idSequence32 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext33 = null;
    propertyRecordFormat23.prepare(propertyRecord29, 0, idSequence32, cursorContext33);
    long long35 = propertyRecordFormat21.getNextRecordReference(propertyRecord29);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat36 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader37 = null;
    int int38 = propertyRecordFormat36.getRecordSize(storeHeader37);
    int int41 = propertyRecordFormat36.getPageSize((int) (byte) -1, 128);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat42 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long43 = propertyOneByteHeaderRecordFormat42.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord44 = propertyOneByteHeaderRecordFormat42.newRecord();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord45 = propertyOneByteHeaderRecordFormat42.newRecord();
    long long46 = propertyRecordFormat36.getNextRecordReference(propertyRecord45);
    long long47 = propertyRecordFormat21.getNextRecordReference(propertyRecord45);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat48 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long49 = propertyOneByteHeaderRecordFormat48.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat50 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat51 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord52 = propertyRecordFormat51.newRecord();
    long long53 = propertyOneByteHeaderRecordFormat50.getNextRecordReference(propertyRecord52);
    long long54 = propertyOneByteHeaderRecordFormat48.getNextRecordReference(propertyRecord52);
    long long55 = propertyRecordFormat21.getNextRecordReference(propertyRecord52);
    long long56 = propertyOneByteHeaderRecordFormat12.getNextRecordReference(propertyRecord52);
    org.neo4j.io.pagecache.PageCursor pageCursor57 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad58 = null;
    try {
      propertyRecordFormat0.read(propertyRecord52, pageCursor57, recordLoad58, 8, (int) (short) 10);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    org.junit.Assert.assertNotNull(recordFormats4);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    org.junit.Assert.assertNotNull(propertyRecord10);
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1125899906842623L + "'",
        long13 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord14);
    org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1125899906842623L + "'",
        long16 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord17);
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    org.junit.Assert.assertTrue("'" + int20 + "' != '" + 48 + "'", int20 == 48);
    org.junit.Assert.assertNotNull(propertyRecord22);
    org.junit.Assert.assertTrue("'" + int25 + "' != '" + 48 + "'", int25 == 48);
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1125899906842623L + "'",
        long26 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord29);
    org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
    org.junit.Assert.assertTrue("'" + int38 + "' != '" + 48 + "'", int38 == 48);
    org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1125899906842623L + "'",
        long43 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord44);
    org.junit.Assert.assertNotNull(propertyRecord45);
    org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
    org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
    org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1125899906842623L + "'",
        long49 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord52);
    org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-1L) + "'", long53 == (-1L));
    org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-1L) + "'", long54 == (-1L));
    org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
    org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-1L) + "'", long56 == (-1L));
  }

  @Test
  public void test0705() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0705");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord1 = null;
    org.neo4j.internal.id.IdSequence idSequence3 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext4 = null;
    propertyRecordFormat0.prepare(propertyRecord1, (int) (short) -1, idSequence3, cursorContext4);
    int int8 = propertyRecordFormat0.getPageSize(1, (int) (short) 100);
    org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
  }

  @Test
  public void test0706() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0706");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long1 = relationshipGroupHighLimitRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord3 = null;
    long long4 = relationshipGroupHighLimitRecordFormat2.getNextRecordReference(
        relationshipGroupRecord3);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord5 = relationshipGroupHighLimitRecordFormat2.newRecord();
    org.neo4j.internal.id.IdSequence idSequence7 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext8 = null;
    relationshipGroupHighLimitRecordFormat0.prepare(relationshipGroupRecord5, (int) (byte) 1,
        idSequence7, cursorContext8);
    int int10 = relationshipGroupHighLimitRecordFormat0.getRecordHeaderSize();
    int int13 = relationshipGroupHighLimitRecordFormat0.getPageSize(3, (int) (byte) 100);
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord5);
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
  }

  @Test
  public void test0707() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0707");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord1 = propertyRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader3 = null;
    int int4 = propertyRecordFormat2.getRecordSize(storeHeader3);
    long long5 = propertyRecordFormat2.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat6 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord8 = propertyRecordFormat7.newRecord();
    long long9 = propertyOneByteHeaderRecordFormat6.getNextRecordReference(propertyRecord8);
    org.neo4j.internal.id.IdSequence idSequence11 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext12 = null;
    propertyRecordFormat2.prepare(propertyRecord8, 0, idSequence11, cursorContext12);
    long long14 = propertyRecordFormat0.getNextRecordReference(propertyRecord8);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader16 = null;
    int int17 = propertyRecordFormat15.getRecordSize(storeHeader16);
    int int20 = propertyRecordFormat15.getPageSize((int) (byte) -1, 128);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat21 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long22 = propertyOneByteHeaderRecordFormat21.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord23 = propertyOneByteHeaderRecordFormat21.newRecord();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord24 = propertyOneByteHeaderRecordFormat21.newRecord();
    long long25 = propertyRecordFormat15.getNextRecordReference(propertyRecord24);
    long long26 = propertyRecordFormat0.getNextRecordReference(propertyRecord24);
    long long27 = propertyRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat28 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord29 = null;
    org.neo4j.internal.id.IdSequence idSequence31 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext32 = null;
    propertyRecordFormat28.prepare(propertyRecord29, (int) (short) -1, idSequence31,
        cursorContext32);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord34 = propertyRecordFormat28.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat35 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat36 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord37 = propertyRecordFormat36.newRecord();
    long long38 = propertyOneByteHeaderRecordFormat35.getNextRecordReference(propertyRecord37);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader39 = null;
    int int40 = propertyOneByteHeaderRecordFormat35.getRecordSize(storeHeader39);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat41 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long42 = propertyOneByteHeaderRecordFormat41.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat43 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat44 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord45 = propertyRecordFormat44.newRecord();
    long long46 = propertyOneByteHeaderRecordFormat43.getNextRecordReference(propertyRecord45);
    long long47 = propertyOneByteHeaderRecordFormat41.getNextRecordReference(propertyRecord45);
    org.neo4j.internal.id.IdSequence idSequence49 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext50 = null;
    propertyOneByteHeaderRecordFormat35.prepare(propertyRecord45, 64, idSequence49,
        cursorContext50);
    long long52 = propertyRecordFormat28.getNextRecordReference(propertyRecord45);
    org.neo4j.io.pagecache.PageCursor pageCursor53 = null;
    try {
      propertyRecordFormat0.write(propertyRecord45, pageCursor53, 12, 35);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(propertyRecord1);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 48 + "'", int4 == 48);
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1125899906842623L + "'",
        long5 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord8);
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    org.junit.Assert.assertTrue("'" + int17 + "' != '" + 48 + "'", int17 == 48);
    org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1125899906842623L + "'",
        long22 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord23);
    org.junit.Assert.assertNotNull(propertyRecord24);
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
    org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1125899906842623L + "'",
        long27 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord34);
    org.junit.Assert.assertNotNull(propertyRecord37);
    org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
    org.junit.Assert.assertTrue("'" + int40 + "' != '" + 48 + "'", int40 == 48);
    org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1125899906842623L + "'",
        long42 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord45);
    org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
    org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
    org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
  }

  @Test
  public void test0708() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0708");
    }
    java.util.function.Function<org.neo4j.kernel.impl.store.StoreHeader, java.lang.Integer> storeHeaderFunction1 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.fixedRecordSize(
        (int) '#');
    org.junit.Assert.assertNotNull(storeHeaderFunction1);
  }

  @Test
  public void test0709() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0709");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat1 = v306_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat2 = v306_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat3 = v306_0.property();
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_4 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat5 = v310_4.relationship();
    java.lang.String str6 = v310_4.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat7 = v310_4.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat8 = v310_4.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat9 = v310_4.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat10 = v310_4.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat11 = v310_4.relationshipTypeToken();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long13 = propertyOneByteHeaderRecordFormat12.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat14 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord16 = propertyRecordFormat15.newRecord();
    long long17 = propertyOneByteHeaderRecordFormat14.getNextRecordReference(propertyRecord16);
    long long18 = propertyOneByteHeaderRecordFormat12.getNextRecordReference(propertyRecord16);
    boolean boolean19 = v310_4.equals((java.lang.Object) propertyRecord16);
    org.neo4j.storageengine.api.format.CapabilityType capabilityType20 = null;
    boolean boolean21 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v310_4, capabilityType20);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat1);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat2);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat3);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat5);
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "high_limitV3_1_0" + "'", str6,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat7);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat8);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat9);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat10);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat11);
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1125899906842623L + "'",
        long13 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord16);
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
  }

  @Test
  public void test0710() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0710");
    }
    java.util.function.Function<org.neo4j.kernel.impl.store.StoreHeader, java.lang.Integer> storeHeaderFunction1 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.fixedRecordSize(
        2);
    org.junit.Assert.assertNotNull(storeHeaderFunction1);
  }

  @Test
  public void test0711() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0711");
    }
    java.util.function.Function<org.neo4j.kernel.impl.store.StoreHeader, java.lang.Integer> storeHeaderFunction1 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.fixedRecordSize(
        (int) '#');
    org.junit.Assert.assertNotNull(storeHeaderFunction1);
  }

  @Test
  public void test0712() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0712");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = propertyRecordFormat0.getRecordSize(storeHeader1);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl3 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats4 = highLimitFactoryDefaultImpl3.newInstance();
    boolean boolean5 = propertyRecordFormat0.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl3);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean8 = propertyRecordFormat0.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord9 = null;
    org.neo4j.internal.id.IdSequence idSequence11 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext12 = null;
    propertyRecordFormat0.prepare(propertyRecord9, (int) (short) 0, idSequence11, cursorContext12);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat14 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord15 = propertyRecordFormat14.newRecord();
    org.neo4j.internal.id.IdSequence idSequence17 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext18 = null;
    propertyRecordFormat0.prepare(propertyRecord15, 52, idSequence17, cursorContext18);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader20 = null;
    int int21 = propertyRecordFormat0.getRecordSize(storeHeader20);
    int int24 = propertyRecordFormat0.getPageSize((-1), (int) (short) 1);
    int int27 = propertyRecordFormat0.getPageSize(8, (int) (short) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat28 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long29 = propertyOneByteHeaderRecordFormat28.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord30 = propertyOneByteHeaderRecordFormat28.newRecord();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord31 = propertyOneByteHeaderRecordFormat28.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat32 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader33 = null;
    int int34 = propertyRecordFormat32.getRecordSize(storeHeader33);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl35 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats36 = highLimitFactoryDefaultImpl35.newInstance();
    boolean boolean37 = propertyRecordFormat32.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl35);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat39 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean40 = propertyRecordFormat32.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord41 = null;
    org.neo4j.internal.id.IdSequence idSequence43 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext44 = null;
    propertyRecordFormat32.prepare(propertyRecord41, (int) (short) 0, idSequence43,
        cursorContext44);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat46 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord47 = propertyRecordFormat46.newRecord();
    org.neo4j.internal.id.IdSequence idSequence49 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext50 = null;
    propertyRecordFormat32.prepare(propertyRecord47, 52, idSequence49, cursorContext50);
    long long52 = propertyOneByteHeaderRecordFormat28.getNextRecordReference(propertyRecord47);
    org.neo4j.io.pagecache.PageCursor pageCursor53 = null;
    try {
      propertyRecordFormat0.write(propertyRecord47, pageCursor53, 128, (int) '4');
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    org.junit.Assert.assertNotNull(recordFormats4);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    org.junit.Assert.assertNotNull(propertyRecord15);
    org.junit.Assert.assertTrue("'" + int21 + "' != '" + 48 + "'", int21 == 48);
    org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1125899906842623L + "'",
        long29 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord30);
    org.junit.Assert.assertNotNull(propertyRecord31);
    org.junit.Assert.assertTrue("'" + int34 + "' != '" + 48 + "'", int34 == 48);
    org.junit.Assert.assertNotNull(recordFormats36);
    org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    org.junit.Assert.assertNotNull(propertyRecord47);
    org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
  }

  @Test
  public void test0713() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0713");
    }
    java.util.function.Function<org.neo4j.kernel.impl.store.StoreHeader, java.lang.Integer> storeHeaderFunction1 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.fixedRecordSize(
        24);
    org.junit.Assert.assertNotNull(storeHeaderFunction1);
  }

  @Test
  public void test0714() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0714");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = recordFormatDynamicRecordImpl0.newRecord();
    int int9 = recordFormatDynamicRecordImpl0.getPageSize(48, 35);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl10 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean12 = recordFormatDynamicRecordImpl10.equals((java.lang.Object) 100.0f);
    int int15 = recordFormatDynamicRecordImpl10.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord16 = recordFormatDynamicRecordImpl10.newRecord();
    long long17 = recordFormatDynamicRecordImpl0.getNextRecordReference(dynamicRecord16);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl18 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean20 = recordFormatDynamicRecordImpl18.equals((java.lang.Object) 100.0f);
    int int23 = recordFormatDynamicRecordImpl18.getPageSize(16, (-1));
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl24 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    int int27 = recordFormatDynamicRecordImpl24.getPageSize(24, 8);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl28 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean30 = recordFormatDynamicRecordImpl28.equals((java.lang.Object) 100.0f);
    int int33 = recordFormatDynamicRecordImpl28.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord34 = recordFormatDynamicRecordImpl28.newRecord();
    long long35 = recordFormatDynamicRecordImpl24.getNextRecordReference(dynamicRecord34);
    org.neo4j.internal.id.IdSequence idSequence37 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext38 = null;
    recordFormatDynamicRecordImpl18.prepare(dynamicRecord34, 10, idSequence37, cursorContext38);
    org.neo4j.internal.id.IdSequence idSequence41 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext42 = null;
    recordFormatDynamicRecordImpl0.prepare(dynamicRecord34, 35, idSequence41, cursorContext42);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader44 = null;
    try {
      int int45 = recordFormatDynamicRecordImpl0.getRecordSize(storeHeader44);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord6);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    org.junit.Assert.assertTrue("'" + int15 + "' != '" + 16 + "'", int15 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord16);
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    org.junit.Assert.assertTrue("'" + int23 + "' != '" + 16 + "'", int23 == 16);
    org.junit.Assert.assertTrue("'" + int27 + "' != '" + 24 + "'", int27 == 24);
    org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    org.junit.Assert.assertTrue("'" + int33 + "' != '" + 16 + "'", int33 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord34);
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
  }

  @Test
  public void test0715() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0715");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(0, (int) (byte) 100);
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
  }

  @Test
  public void test0716() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0716");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord1 = propertyRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader3 = null;
    int int4 = propertyRecordFormat2.getRecordSize(storeHeader3);
    long long5 = propertyRecordFormat2.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat6 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord8 = propertyRecordFormat7.newRecord();
    long long9 = propertyOneByteHeaderRecordFormat6.getNextRecordReference(propertyRecord8);
    org.neo4j.internal.id.IdSequence idSequence11 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext12 = null;
    propertyRecordFormat2.prepare(propertyRecord8, 0, idSequence11, cursorContext12);
    long long14 = propertyRecordFormat0.getNextRecordReference(propertyRecord8);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader16 = null;
    int int17 = propertyRecordFormat15.getRecordSize(storeHeader16);
    int int20 = propertyRecordFormat15.getPageSize((int) (byte) -1, 128);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat21 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long22 = propertyOneByteHeaderRecordFormat21.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord23 = propertyOneByteHeaderRecordFormat21.newRecord();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord24 = propertyOneByteHeaderRecordFormat21.newRecord();
    long long25 = propertyRecordFormat15.getNextRecordReference(propertyRecord24);
    long long26 = propertyRecordFormat0.getNextRecordReference(propertyRecord24);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat27 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat28 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord29 = propertyRecordFormat28.newRecord();
    long long30 = propertyOneByteHeaderRecordFormat27.getNextRecordReference(propertyRecord29);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat31 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long32 = propertyOneByteHeaderRecordFormat31.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat33 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat34 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord35 = propertyRecordFormat34.newRecord();
    long long36 = propertyOneByteHeaderRecordFormat33.getNextRecordReference(propertyRecord35);
    long long37 = propertyOneByteHeaderRecordFormat31.getNextRecordReference(propertyRecord35);
    long long38 = propertyOneByteHeaderRecordFormat27.getNextRecordReference(propertyRecord35);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat39 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader40 = null;
    int int41 = propertyRecordFormat39.getRecordSize(storeHeader40);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl42 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats43 = highLimitFactoryDefaultImpl42.newInstance();
    boolean boolean44 = propertyRecordFormat39.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl42);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat46 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean47 = propertyRecordFormat39.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord48 = propertyRecordFormat39.newRecord();
    long long49 = propertyOneByteHeaderRecordFormat27.getNextRecordReference(propertyRecord48);
    org.neo4j.io.pagecache.PageCursor pageCursor50 = null;
    try {
      propertyRecordFormat0.write(propertyRecord48, pageCursor50, 10, (int) 'a');
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(propertyRecord1);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 48 + "'", int4 == 48);
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1125899906842623L + "'",
        long5 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord8);
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    org.junit.Assert.assertTrue("'" + int17 + "' != '" + 48 + "'", int17 == 48);
    org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1125899906842623L + "'",
        long22 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord23);
    org.junit.Assert.assertNotNull(propertyRecord24);
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord29);
    org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
    org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1125899906842623L + "'",
        long32 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord35);
    org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
    org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
    org.junit.Assert.assertTrue("'" + int41 + "' != '" + 48 + "'", int41 == 48);
    org.junit.Assert.assertNotNull(recordFormats43);
    org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    org.junit.Assert.assertNotNull(propertyRecord48);
    org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
  }

  @Test
  public void test0717() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0717");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v300_0.relationship();
    java.lang.String str2 = v300_0.introductionVersion();
    int int3 = v300_0.generation();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat4 = v300_0.relationshipTypeToken();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "3.0.0" + "'", str2, "3.0.0");
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat4);
  }

  @Test
  public void test0718() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0718");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord1 = propertyRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader3 = null;
    int int4 = propertyRecordFormat2.getRecordSize(storeHeader3);
    long long5 = propertyRecordFormat2.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat6 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord8 = propertyRecordFormat7.newRecord();
    long long9 = propertyOneByteHeaderRecordFormat6.getNextRecordReference(propertyRecord8);
    org.neo4j.internal.id.IdSequence idSequence11 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext12 = null;
    propertyRecordFormat2.prepare(propertyRecord8, 0, idSequence11, cursorContext12);
    long long14 = propertyRecordFormat0.getNextRecordReference(propertyRecord8);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader16 = null;
    int int17 = propertyRecordFormat15.getRecordSize(storeHeader16);
    int int20 = propertyRecordFormat15.getPageSize((int) (byte) -1, 128);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat21 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long22 = propertyOneByteHeaderRecordFormat21.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord23 = propertyOneByteHeaderRecordFormat21.newRecord();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord24 = propertyOneByteHeaderRecordFormat21.newRecord();
    long long25 = propertyRecordFormat15.getNextRecordReference(propertyRecord24);
    long long26 = propertyRecordFormat0.getNextRecordReference(propertyRecord24);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat27 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long28 = propertyOneByteHeaderRecordFormat27.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat29 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat30 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord31 = propertyRecordFormat30.newRecord();
    long long32 = propertyOneByteHeaderRecordFormat29.getNextRecordReference(propertyRecord31);
    long long33 = propertyOneByteHeaderRecordFormat27.getNextRecordReference(propertyRecord31);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat34 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat35 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord36 = propertyRecordFormat35.newRecord();
    long long37 = propertyOneByteHeaderRecordFormat34.getNextRecordReference(propertyRecord36);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat38 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat39 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord40 = propertyRecordFormat39.newRecord();
    long long41 = propertyOneByteHeaderRecordFormat38.getNextRecordReference(propertyRecord40);
    long long42 = propertyOneByteHeaderRecordFormat34.getNextRecordReference(propertyRecord40);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat43 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long44 = propertyOneByteHeaderRecordFormat43.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord45 = propertyOneByteHeaderRecordFormat43.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat46 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long47 = propertyOneByteHeaderRecordFormat46.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord48 = propertyOneByteHeaderRecordFormat46.newRecord();
    long long49 = propertyOneByteHeaderRecordFormat43.getNextRecordReference(propertyRecord48);
    org.neo4j.internal.id.IdSequence idSequence51 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext52 = null;
    propertyOneByteHeaderRecordFormat34.prepare(propertyRecord48, (int) (byte) -1, idSequence51,
        cursorContext52);
    long long54 = propertyOneByteHeaderRecordFormat27.getNextRecordReference(propertyRecord48);
    org.neo4j.io.pagecache.PageCursor pageCursor55 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad56 = null;
    try {
      propertyRecordFormat0.read(propertyRecord48, pageCursor55, recordLoad56, (int) (short) -1,
          (int) (short) 100);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(propertyRecord1);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 48 + "'", int4 == 48);
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1125899906842623L + "'",
        long5 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord8);
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    org.junit.Assert.assertTrue("'" + int17 + "' != '" + 48 + "'", int17 == 48);
    org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1125899906842623L + "'",
        long22 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord23);
    org.junit.Assert.assertNotNull(propertyRecord24);
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
    org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1125899906842623L + "'",
        long28 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord31);
    org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
    org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord36);
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord40);
    org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
    org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
    org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1125899906842623L + "'",
        long44 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord45);
    org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1125899906842623L + "'",
        long47 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord48);
    org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
    org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-1L) + "'", long54 == (-1L));
  }

  @Test
  public void test0719() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0719");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat1 = v320_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat2 = v320_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat3 = v320_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat4 = v320_0.property();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily5 = v320_0.getFormatFamily();
    org.neo4j.storageengine.api.format.Capability capability6 = null;
    boolean boolean7 = v320_0.hasCapability(capability6);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat8 = v320_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat9 = v320_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat10 = v320_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat11 = v320_0.relationshipGroup();
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat1);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat2);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat3);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat4);
    org.junit.Assert.assertTrue(
        "'" + formatFamily5 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily5.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat8);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat9);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat10);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat11);
  }

  @Test
  public void test0720() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0720");
    }
    java.util.function.Function<org.neo4j.kernel.impl.store.StoreHeader, java.lang.Integer> storeHeaderFunction1 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.fixedRecordSize(
        35);
    java.lang.Class<?> wildcardClass2 = storeHeaderFunction1.getClass();
    org.junit.Assert.assertNotNull(storeHeaderFunction1);
    org.junit.Assert.assertNotNull(wildcardClass2);
  }

  @Test
  public void test0721() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0721");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.NodeRecordFormat nodeRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord1 = nodeRecordFormat0.newRecord();
    org.neo4j.io.pagecache.PageCursor pageCursor2 = null;
    try {
      boolean boolean3 = nodeRecordFormat0.isInUse(pageCursor2);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(nodeRecord1);
  }

  @Test
  public void test0722() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0722");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.FactoryHighLimitDefaultImpl factoryHighLimitDefaultImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.FactoryHighLimitDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats1 = factoryHighLimitDefaultImpl0.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats2 = factoryHighLimitDefaultImpl0.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats3 = factoryHighLimitDefaultImpl0.newInstance();
    java.lang.String str4 = factoryHighLimitDefaultImpl0.getName();
    org.junit.Assert.assertNotNull(recordFormats1);
    org.junit.Assert.assertNotNull(recordFormats2);
    org.junit.Assert.assertNotNull(recordFormats3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "high_limitV3_0_0" + "'", str4,
        "high_limitV3_0_0");
  }

  @Test
  public void test0723() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0723");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = recordFormatDynamicRecordImpl0.newRecord();
    int int9 = recordFormatDynamicRecordImpl0.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord10 = recordFormatDynamicRecordImpl0.newRecord();
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord11 = recordFormatDynamicRecordImpl0.newRecord();
    int int14 = recordFormatDynamicRecordImpl0.getPageSize(24, (int) (byte) 100);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl15 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean17 = recordFormatDynamicRecordImpl15.equals((java.lang.Object) 100.0f);
    int int20 = recordFormatDynamicRecordImpl15.getPageSize(16, (-1));
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl21 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean23 = recordFormatDynamicRecordImpl21.equals((java.lang.Object) 100.0f);
    int int26 = recordFormatDynamicRecordImpl21.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord27 = recordFormatDynamicRecordImpl21.newRecord();
    int int30 = recordFormatDynamicRecordImpl21.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord31 = recordFormatDynamicRecordImpl21.newRecord();
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord32 = recordFormatDynamicRecordImpl21.newRecord();
    org.neo4j.internal.id.IdSequence idSequence34 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext35 = null;
    recordFormatDynamicRecordImpl15.prepare(dynamicRecord32, 10, idSequence34, cursorContext35);
    org.neo4j.io.pagecache.PageCursor pageCursor37 = null;
    try {
      recordFormatDynamicRecordImpl0.write(dynamicRecord32, pageCursor37, 4, (int) '4');
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord6);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord10);
    org.junit.Assert.assertNotNull(dynamicRecord11);
    org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16);
    org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    org.junit.Assert.assertTrue("'" + int26 + "' != '" + 16 + "'", int26 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord27);
    org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord31);
    org.junit.Assert.assertNotNull(dynamicRecord32);
  }

  @Test
  public void test0724() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0724");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = propertyRecordFormat0.getRecordSize(storeHeader1);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl3 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats4 = highLimitFactoryDefaultImpl3.newInstance();
    boolean boolean5 = propertyRecordFormat0.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl3);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader6 = null;
    int int7 = propertyRecordFormat0.getRecordSize(storeHeader6);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat8 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long9 = propertyOneByteHeaderRecordFormat8.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord10 = propertyOneByteHeaderRecordFormat8.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat11 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long12 = propertyOneByteHeaderRecordFormat11.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord13 = propertyOneByteHeaderRecordFormat11.newRecord();
    long long14 = propertyOneByteHeaderRecordFormat8.getNextRecordReference(propertyRecord13);
    org.neo4j.io.pagecache.PageCursor pageCursor15 = null;
    try {
      propertyRecordFormat0.write(propertyRecord13, pageCursor15, 128, 0);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    org.junit.Assert.assertNotNull(recordFormats4);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    org.junit.Assert.assertTrue("'" + int7 + "' != '" + 48 + "'", int7 == 48);
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1125899906842623L + "'",
        long9 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord10);
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1125899906842623L + "'",
        long12 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord13);
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
  }

  @Test
  public void test0725() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0725");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord1 = null;
    org.neo4j.internal.id.IdSequence idSequence3 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext4 = null;
    propertyRecordFormat0.prepare(propertyRecord1, (int) (short) -1, idSequence3, cursorContext4);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat6 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long7 = propertyOneByteHeaderRecordFormat6.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord8 = propertyOneByteHeaderRecordFormat6.newRecord();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord9 = propertyOneByteHeaderRecordFormat6.newRecord();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord10 = propertyOneByteHeaderRecordFormat6.newRecord();
    org.neo4j.io.pagecache.PageCursor pageCursor11 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad12 = null;
    try {
      propertyRecordFormat0.read(propertyRecord10, pageCursor11, recordLoad12, (int) (byte) 10, 64);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1125899906842623L + "'",
        long7 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord8);
    org.junit.Assert.assertNotNull(propertyRecord9);
    org.junit.Assert.assertNotNull(propertyRecord10);
  }

  @Test
  public void test0726() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0726");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = recordFormatDynamicRecordImpl0.newRecord();
    int int9 = recordFormatDynamicRecordImpl0.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord10 = recordFormatDynamicRecordImpl0.newRecord();
    long long11 = recordFormatDynamicRecordImpl0.getMaxId();
    int int14 = recordFormatDynamicRecordImpl0.getPageSize(1, 50);
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord6);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord10);
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1125899906842623L + "'",
        long11 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
  }

  @Test
  public void test0727() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0727");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (short) 100);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord4 = relationshipRecordFormat3.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord5 = relationshipRecordFormat3.newRecord();
    org.neo4j.internal.id.IdSequence idSequence7 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext8 = null;
    relationshipRecordFormat2.prepare(relationshipRecord5, 100, idSequence7, cursorContext8);
    int int12 = relationshipRecordFormat2.getPageSize(0, 3);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord13 = relationshipRecordFormat2.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat17 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord18 = relationshipHighLimitRecordFormat17.newRecord();
    org.neo4j.internal.id.IdSequence idSequence20 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext21 = null;
    relationshipHighLimitRecordFormat15.prepare(relationshipRecord18, (int) 'a', idSequence20,
        cursorContext21);
    org.neo4j.internal.id.IdSequence idSequence24 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext25 = null;
    relationshipRecordFormat2.prepare(relationshipRecord18, 3, idSequence24, cursorContext25);
    org.neo4j.io.pagecache.PageCursor pageCursor27 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad28 = null;
    try {
      relationshipHighLimitRecordFormat1.read(relationshipRecord18, pageCursor27, recordLoad28,
          (int) (byte) -1, (int) (byte) -1);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(relationshipRecord4);
    org.junit.Assert.assertNotNull(relationshipRecord5);
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord13);
    org.junit.Assert.assertNotNull(relationshipRecord18);
  }

  @Test
  public void test0728() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0728");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod(1L, (-37L));
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-37L) + "'", long2 == (-37L));
  }

  @Test
  public void test0729() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0729");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    org.neo4j.storageengine.api.format.Capability[] capabilityArray6 = v306_0.capabilities();
    org.neo4j.kernel.impl.store.format.RecordFormats[] recordFormatsArray7 = v306_0.compatibleVersionsForRollingUpgrade();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat8 = v306_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat9 = v306_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat10 = v306_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat11 = v306_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat12 = v306_0.node();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(capabilityArray6);
    org.junit.Assert.assertNotNull(recordFormatsArray7);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat8);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat9);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat10);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat11);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat12);
  }

  @Test
  public void test0730() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0730");
    }
    int int1 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.leg((long) 64);
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 3 + "'", int1 == 3);
  }

  @Test
  public void test0731() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0731");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord3 = relationshipRecordFormat2.newRecord();
    long long4 = relationshipHighLimitRecordFormat1.getNextRecordReference(relationshipRecord3);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord6 = relationshipRecordFormat5.newRecord();
    int int7 = relationshipRecordFormat5.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat8 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat9 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord10 = relationshipRecordFormat9.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord11 = relationshipRecordFormat9.newRecord();
    org.neo4j.internal.id.IdSequence idSequence13 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext14 = null;
    relationshipRecordFormat8.prepare(relationshipRecord11, 100, idSequence13, cursorContext14);
    long long16 = relationshipRecordFormat5.getNextRecordReference(relationshipRecord11);
    long long17 = relationshipHighLimitRecordFormat1.getNextRecordReference(relationshipRecord11);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat18 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord19 = relationshipRecordFormat18.newRecord();
    int int20 = relationshipRecordFormat18.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat21 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat22 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord23 = relationshipRecordFormat22.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord24 = relationshipRecordFormat22.newRecord();
    org.neo4j.internal.id.IdSequence idSequence26 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext27 = null;
    relationshipRecordFormat21.prepare(relationshipRecord24, 100, idSequence26, cursorContext27);
    long long29 = relationshipRecordFormat18.getNextRecordReference(relationshipRecord24);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat30 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat31 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord32 = relationshipRecordFormat31.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord33 = relationshipRecordFormat31.newRecord();
    org.neo4j.internal.id.IdSequence idSequence35 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext36 = null;
    relationshipRecordFormat30.prepare(relationshipRecord33, 100, idSequence35, cursorContext36);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat39 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord40 = relationshipHighLimitRecordFormat39.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat42 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord43 = relationshipHighLimitRecordFormat42.newRecord();
    org.neo4j.internal.id.IdSequence idSequence45 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext46 = null;
    relationshipHighLimitRecordFormat39.prepare(relationshipRecord43, (int) (short) 1, idSequence45,
        cursorContext46);
    org.neo4j.internal.id.IdSequence idSequence49 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext50 = null;
    relationshipRecordFormat30.prepare(relationshipRecord43, 24, idSequence49, cursorContext50);
    long long52 = relationshipRecordFormat18.getNextRecordReference(relationshipRecord43);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat54 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord55 = relationshipHighLimitRecordFormat54.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat57 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord58 = relationshipHighLimitRecordFormat57.newRecord();
    org.neo4j.internal.id.IdSequence idSequence60 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext61 = null;
    relationshipHighLimitRecordFormat54.prepare(relationshipRecord58, (int) (short) 1, idSequence60,
        cursorContext61);
    org.neo4j.internal.id.IdSequence idSequence64 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext65 = null;
    relationshipRecordFormat18.prepare(relationshipRecord58, 12, idSequence64, cursorContext65);
    org.neo4j.io.pagecache.PageCursor pageCursor67 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad68 = null;
    try {
      relationshipHighLimitRecordFormat1.read(relationshipRecord58, pageCursor67, recordLoad68, 2,
          1);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(relationshipRecord3);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord6);
    org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord10);
    org.junit.Assert.assertNotNull(relationshipRecord11);
    org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord19);
    org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord23);
    org.junit.Assert.assertNotNull(relationshipRecord24);
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord32);
    org.junit.Assert.assertNotNull(relationshipRecord33);
    org.junit.Assert.assertNotNull(relationshipRecord40);
    org.junit.Assert.assertNotNull(relationshipRecord43);
    org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord55);
    org.junit.Assert.assertNotNull(relationshipRecord58);
  }

  @Test
  public void test0732() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0732");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v310_0.relationship();
    java.lang.String str2 = v310_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat3 = v310_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat4 = v310_0.node();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray5 = v310_0.capabilities();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat6 = v310_0.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat7 = v310_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat8 = v310_0.relationshipGroup();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily9 = v310_0.getFormatFamily();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_1_0" + "'", str2,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat3);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat4);
    org.junit.Assert.assertNotNull(capabilityArray5);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat6);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat7);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat8);
    org.junit.Assert.assertTrue(
        "'" + formatFamily9 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily9.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
  }

  @Test
  public void test0733() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0733");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = propertyRecordFormat0.getRecordSize(storeHeader1);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl3 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats4 = highLimitFactoryDefaultImpl3.newInstance();
    boolean boolean5 = propertyRecordFormat0.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl3);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean8 = propertyRecordFormat0.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord9 = null;
    org.neo4j.internal.id.IdSequence idSequence11 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext12 = null;
    propertyRecordFormat0.prepare(propertyRecord9, (int) (short) 0, idSequence11, cursorContext12);
    boolean boolean15 = propertyRecordFormat0.equals((java.lang.Object) "3.0.6");
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat16 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader17 = null;
    int int18 = propertyRecordFormat16.getRecordSize(storeHeader17);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl19 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats20 = highLimitFactoryDefaultImpl19.newInstance();
    boolean boolean21 = propertyRecordFormat16.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl19);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat23 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean24 = propertyRecordFormat16.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord25 = propertyRecordFormat16.newRecord();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader26 = null;
    int int27 = propertyRecordFormat16.getRecordSize(storeHeader26);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat28 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat29 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord30 = propertyRecordFormat29.newRecord();
    long long31 = propertyOneByteHeaderRecordFormat28.getNextRecordReference(propertyRecord30);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat32 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat33 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord34 = propertyRecordFormat33.newRecord();
    long long35 = propertyOneByteHeaderRecordFormat32.getNextRecordReference(propertyRecord34);
    long long36 = propertyOneByteHeaderRecordFormat28.getNextRecordReference(propertyRecord34);
    org.neo4j.internal.id.IdSequence idSequence38 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext39 = null;
    propertyRecordFormat16.prepare(propertyRecord34, 99, idSequence38, cursorContext39);
    org.neo4j.io.pagecache.PageCursor pageCursor41 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad42 = null;
    try {
      propertyRecordFormat0.read(propertyRecord34, pageCursor41, recordLoad42, 1, (int) (byte) 100);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    org.junit.Assert.assertNotNull(recordFormats4);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    org.junit.Assert.assertTrue("'" + int18 + "' != '" + 48 + "'", int18 == 48);
    org.junit.Assert.assertNotNull(recordFormats20);
    org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    org.junit.Assert.assertNotNull(propertyRecord25);
    org.junit.Assert.assertTrue("'" + int27 + "' != '" + 48 + "'", int27 == 48);
    org.junit.Assert.assertNotNull(propertyRecord30);
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord34);
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
    org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
  }

  @Test
  public void test0734() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0734");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.FactoryHighLimitDefaultImpl factoryHighLimitDefaultImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.FactoryHighLimitDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats1 = factoryHighLimitDefaultImpl0.newInstance();
    java.lang.String str2 = factoryHighLimitDefaultImpl0.getName();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats3 = factoryHighLimitDefaultImpl0.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats4 = factoryHighLimitDefaultImpl0.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats5 = factoryHighLimitDefaultImpl0.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats6 = factoryHighLimitDefaultImpl0.newInstance();
    java.lang.String str7 = factoryHighLimitDefaultImpl0.getName();
    org.junit.Assert.assertNotNull(recordFormats1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_0_0" + "'", str2,
        "high_limitV3_0_0");
    org.junit.Assert.assertNotNull(recordFormats3);
    org.junit.Assert.assertNotNull(recordFormats4);
    org.junit.Assert.assertNotNull(recordFormats5);
    org.junit.Assert.assertNotNull(recordFormats6);
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "high_limitV3_0_0" + "'", str7,
        "high_limitV3_0_0");
  }

  @Test
  public void test0735() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0735");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = recordFormatDynamicRecordImpl0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl7 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean9 = recordFormatDynamicRecordImpl7.equals((java.lang.Object) 100.0f);
    int int12 = recordFormatDynamicRecordImpl7.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord13 = recordFormatDynamicRecordImpl7.newRecord();
    long long14 = recordFormatDynamicRecordImpl0.getNextRecordReference(dynamicRecord13);
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_15 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat16 = v320_15.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat17 = v320_15.relationshipGroup();
    boolean boolean18 = recordFormatDynamicRecordImpl0.equals(
        (java.lang.Object) relationshipGroupRecordRecordFormat17);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl19 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean21 = recordFormatDynamicRecordImpl19.equals((java.lang.Object) 100.0f);
    int int24 = recordFormatDynamicRecordImpl19.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord25 = recordFormatDynamicRecordImpl19.newRecord();
    int int28 = recordFormatDynamicRecordImpl19.getPageSize(48, 35);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl29 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean31 = recordFormatDynamicRecordImpl29.equals((java.lang.Object) 100.0f);
    int int34 = recordFormatDynamicRecordImpl29.getPageSize(16, (-1));
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl35 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    int int38 = recordFormatDynamicRecordImpl35.getPageSize(24, 8);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl39 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean41 = recordFormatDynamicRecordImpl39.equals((java.lang.Object) 100.0f);
    int int44 = recordFormatDynamicRecordImpl39.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord45 = recordFormatDynamicRecordImpl39.newRecord();
    long long46 = recordFormatDynamicRecordImpl35.getNextRecordReference(dynamicRecord45);
    org.neo4j.internal.id.IdSequence idSequence48 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext49 = null;
    recordFormatDynamicRecordImpl29.prepare(dynamicRecord45, 10, idSequence48, cursorContext49);
    org.neo4j.internal.id.IdSequence idSequence52 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext53 = null;
    recordFormatDynamicRecordImpl19.prepare(dynamicRecord45, (int) (byte) 1, idSequence52,
        cursorContext53);
    long long55 = recordFormatDynamicRecordImpl0.getNextRecordReference(dynamicRecord45);
    org.neo4j.io.pagecache.PageCursor pageCursor56 = null;
    try {
      boolean boolean57 = recordFormatDynamicRecordImpl0.isInUse(pageCursor56);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord6);
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 16 + "'", int12 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord13);
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat16);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat17);
    org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    org.junit.Assert.assertTrue("'" + int24 + "' != '" + 16 + "'", int24 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord25);
    org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
    org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    org.junit.Assert.assertTrue("'" + int34 + "' != '" + 16 + "'", int34 == 16);
    org.junit.Assert.assertTrue("'" + int38 + "' != '" + 24 + "'", int38 == 24);
    org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    org.junit.Assert.assertTrue("'" + int44 + "' != '" + 16 + "'", int44 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord45);
    org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
    org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
  }

  @Test
  public void test0736() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0736");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = propertyRecordFormat0.getRecordSize(storeHeader1);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl3 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats4 = highLimitFactoryDefaultImpl3.newInstance();
    boolean boolean5 = propertyRecordFormat0.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl3);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean8 = propertyRecordFormat0.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord9 = null;
    org.neo4j.internal.id.IdSequence idSequence11 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext12 = null;
    propertyRecordFormat0.prepare(propertyRecord9, (int) (short) 0, idSequence11, cursorContext12);
    boolean boolean15 = propertyRecordFormat0.equals((java.lang.Object) 12);
    long long16 = propertyRecordFormat0.getMaxId();
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    org.junit.Assert.assertNotNull(recordFormats4);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1125899906842623L + "'",
        long16 == 1125899906842623L);
  }

  @Test
  public void test0737() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0737");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = propertyRecordFormat0.getRecordSize(storeHeader1);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader3 = null;
    int int4 = propertyRecordFormat0.getRecordSize(storeHeader3);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long6 = propertyOneByteHeaderRecordFormat5.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat8 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord9 = propertyRecordFormat8.newRecord();
    long long10 = propertyOneByteHeaderRecordFormat7.getNextRecordReference(propertyRecord9);
    long long11 = propertyOneByteHeaderRecordFormat5.getNextRecordReference(propertyRecord9);
    int int14 = propertyOneByteHeaderRecordFormat5.getPageSize(64, (int) (short) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord16 = propertyRecordFormat15.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat17 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader18 = null;
    int int19 = propertyRecordFormat17.getRecordSize(storeHeader18);
    long long20 = propertyRecordFormat17.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat21 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat22 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord23 = propertyRecordFormat22.newRecord();
    long long24 = propertyOneByteHeaderRecordFormat21.getNextRecordReference(propertyRecord23);
    org.neo4j.internal.id.IdSequence idSequence26 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext27 = null;
    propertyRecordFormat17.prepare(propertyRecord23, 0, idSequence26, cursorContext27);
    long long29 = propertyRecordFormat15.getNextRecordReference(propertyRecord23);
    org.neo4j.internal.id.IdSequence idSequence31 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext32 = null;
    propertyOneByteHeaderRecordFormat5.prepare(propertyRecord23, (int) (short) 0, idSequence31,
        cursorContext32);
    org.neo4j.io.pagecache.PageCursor pageCursor34 = null;
    try {
      propertyRecordFormat0.write(propertyRecord23, pageCursor34, 128, (int) 'a');
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 48 + "'", int4 == 48);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1125899906842623L + "'",
        long6 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord9);
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    org.junit.Assert.assertTrue("'" + int14 + "' != '" + 64 + "'", int14 == 64);
    org.junit.Assert.assertNotNull(propertyRecord16);
    org.junit.Assert.assertTrue("'" + int19 + "' != '" + 48 + "'", int19 == 48);
    org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1125899906842623L + "'",
        long20 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord23);
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
  }

  @Test
  public void test0738() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0738");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        8);
  }

  @Test
  public void test0739() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0739");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = recordFormatDynamicRecordImpl0.newRecord();
    int int9 = recordFormatDynamicRecordImpl0.getPageSize(48, 35);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat10 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord11 = propertyRecordFormat10.newRecord();
    boolean boolean12 = recordFormatDynamicRecordImpl0.equals(
        (java.lang.Object) propertyRecordFormat10);
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord6);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    org.junit.Assert.assertNotNull(propertyRecord11);
    org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
  }

  @Test
  public void test0740() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0740");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long1 = propertyOneByteHeaderRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord4 = propertyRecordFormat3.newRecord();
    long long5 = propertyOneByteHeaderRecordFormat2.getNextRecordReference(propertyRecord4);
    long long6 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord4);
    int int9 = propertyOneByteHeaderRecordFormat0.getPageSize(64, (int) (short) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat10 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord11 = propertyRecordFormat10.newRecord();
    long long12 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord11);
    int int13 = propertyOneByteHeaderRecordFormat0.getRecordHeaderSize();
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord4);
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 64 + "'", int9 == 64);
    org.junit.Assert.assertNotNull(propertyRecord11);
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
  }

  @Test
  public void test0741() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0741");
    }
    io.github.onograph.internal.batchimport.EnterpriseBatchImporterFactory enterpriseBatchImporterFactory0 = new io.github.onograph.internal.batchimport.EnterpriseBatchImporterFactory();
    org.neo4j.io.layout.DatabaseLayout databaseLayout1 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction2 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer3 = null;
    org.neo4j.internal.batchimport.Configuration configuration4 = null;
    org.neo4j.logging.internal.LogService logService5 = null;
    org.neo4j.internal.batchimport.staging.ExecutionMonitor executionMonitor6 = null;
    org.neo4j.internal.batchimport.AdditionalInitialIds additionalInitialIds7 = null;
    org.neo4j.configuration.Config config8 = null;
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat9 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord10 = null;
    long long11 = nodeRecordFormat9.getNextRecordReference(nodeRecord10);
    int int12 = nodeRecordFormat9.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader13 = null;
    int int14 = nodeRecordFormat9.getRecordSize(storeHeader13);
    int int17 = nodeRecordFormat9.getPageSize((int) '4', (int) (short) 1);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord18 = nodeRecordFormat9.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_19 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat20 = v306_19.relationship();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray21 = v306_19.capabilities();
    java.lang.String str22 = v306_19.introductionVersion();
    boolean boolean23 = nodeRecordFormat9.equals((java.lang.Object) v306_19);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_24 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily25 = v300_24.getFormatFamily();
    boolean boolean26 = v306_19.equals((java.lang.Object) formatFamily25);
    org.neo4j.internal.batchimport.ImportLogic.Monitor monitor27 = null;
    org.neo4j.scheduler.JobScheduler jobScheduler28 = null;
    org.neo4j.internal.batchimport.input.Collector collector29 = null;
    org.neo4j.storageengine.api.LogFilesInitializer logFilesInitializer30 = null;
    org.neo4j.internal.batchimport.IndexImporterFactory indexImporterFactory31 = null;
    org.neo4j.memory.MemoryTracker memoryTracker32 = null;
    try {
      org.neo4j.internal.batchimport.BatchImporter batchImporter33 = enterpriseBatchImporterFactory0.instantiate(
          databaseLayout1, fileSystemAbstraction2, pageCacheTracer3, configuration4, logService5,
          executionMonitor6, additionalInitialIds7, config8,
          (org.neo4j.kernel.impl.store.format.RecordFormats) v306_19, monitor27, jobScheduler28,
          collector29, logFilesInitializer30, indexImporterFactory31, memoryTracker32);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    org.junit.Assert.assertTrue("'" + int14 + "' != '" + 16 + "'", int14 == 16);
    org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
    org.junit.Assert.assertNotNull(nodeRecord18);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat20);
    org.junit.Assert.assertNotNull(capabilityArray21);
    org.junit.Assert.assertEquals("'" + str22 + "' != '" + "3.0.6" + "'", str22, "3.0.6");
    org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    org.junit.Assert.assertTrue(
        "'" + formatFamily25 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily25.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
  }

  @Test
  public void test0742() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0742");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v306_0.relationship();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray2 = v306_0.capabilities();
    java.lang.String str3 = v306_0.introductionVersion();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat4 = v306_0.relationshipGroup();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat5 = v306_0.node();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(capabilityArray2);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "3.0.6" + "'", str3, "3.0.6");
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat4);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat5);
  }

  @Test
  public void test0743() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0743");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    int int1 = recordFormatDynamicRecordImpl0.getRecordHeaderSize();
    int int2 = recordFormatDynamicRecordImpl0.getRecordHeaderSize();
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 12 + "'", int1 == 12);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 12 + "'", int2 == 12);
  }

  @Test
  public void test0744() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0744");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod(
        (long) (byte) 10, (-108L));
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-98L) + "'", long2 == (-98L));
  }

  @Test
  public void test0745() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0745");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat1 = v320_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat2 = v320_0.schema();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily3 = v320_0.getFormatFamily();
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat1);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat2);
    org.junit.Assert.assertTrue(
        "'" + formatFamily3 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily3.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
  }

  @Test
  public void test0746() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0746");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) '4');
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord2 = relationshipHighLimitRecordFormat1.newRecord();
    org.neo4j.io.pagecache.PageCursor pageCursor3 = null;
    try {
      boolean boolean4 = relationshipHighLimitRecordFormat1.isInUse(pageCursor3);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(relationshipRecord2);
  }

  @Test
  public void test0747() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0747");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v300_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat2 = v300_0.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat3 = v300_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat4 = v300_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat5 = v300_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat6 = v300_0.relationshipGroup();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat3);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat4);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat5);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat6);
  }

  @Test
  public void test0748() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0748");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord2 = propertyRecordFormat1.newRecord();
    long long3 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord2);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord6 = propertyRecordFormat5.newRecord();
    long long7 = propertyOneByteHeaderRecordFormat4.getNextRecordReference(propertyRecord6);
    long long8 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord6);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat9 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat10 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord11 = propertyRecordFormat10.newRecord();
    long long12 = propertyOneByteHeaderRecordFormat9.getNextRecordReference(propertyRecord11);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat13 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat14 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord15 = propertyRecordFormat14.newRecord();
    long long16 = propertyOneByteHeaderRecordFormat13.getNextRecordReference(propertyRecord15);
    long long17 = propertyOneByteHeaderRecordFormat9.getNextRecordReference(propertyRecord15);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat18 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long19 = propertyOneByteHeaderRecordFormat18.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord20 = propertyOneByteHeaderRecordFormat18.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat21 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long22 = propertyOneByteHeaderRecordFormat21.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord23 = propertyOneByteHeaderRecordFormat21.newRecord();
    long long24 = propertyOneByteHeaderRecordFormat18.getNextRecordReference(propertyRecord23);
    org.neo4j.internal.id.IdSequence idSequence26 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext27 = null;
    propertyOneByteHeaderRecordFormat9.prepare(propertyRecord23, (int) (byte) -1, idSequence26,
        cursorContext27);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat29 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord30 = propertyOneByteHeaderRecordFormat29.newRecord();
    long long31 = propertyOneByteHeaderRecordFormat9.getNextRecordReference(propertyRecord30);
    org.neo4j.io.pagecache.PageCursor pageCursor32 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad33 = null;
    try {
      propertyOneByteHeaderRecordFormat0.read(propertyRecord30, pageCursor32, recordLoad33,
          (int) '#', 4);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(propertyRecord2);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord6);
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
    org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord11);
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord15);
    org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1125899906842623L + "'",
        long19 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord20);
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1125899906842623L + "'",
        long22 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord23);
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord30);
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
  }

  @Test
  public void test0749() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0749");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v300_0.relationship();
    java.lang.String str2 = v300_0.introductionVersion();
    int int3 = v300_0.generation();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat4 = v300_0.relationshipGroup();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat5 = v300_0.labelToken();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "3.0.0" + "'", str2, "3.0.0");
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat4);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat5);
  }

  @Test
  public void test0750() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0750");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = recordFormatDynamicRecordImpl0.newRecord();
    int int9 = recordFormatDynamicRecordImpl0.getPageSize(48, 35);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl10 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean12 = recordFormatDynamicRecordImpl10.equals((java.lang.Object) 100.0f);
    int int15 = recordFormatDynamicRecordImpl10.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord16 = recordFormatDynamicRecordImpl10.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl17 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean19 = recordFormatDynamicRecordImpl17.equals((java.lang.Object) 100.0f);
    int int22 = recordFormatDynamicRecordImpl17.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord23 = recordFormatDynamicRecordImpl17.newRecord();
    long long24 = recordFormatDynamicRecordImpl10.getNextRecordReference(dynamicRecord23);
    int int25 = recordFormatDynamicRecordImpl10.getRecordHeaderSize();
    int int26 = recordFormatDynamicRecordImpl10.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord27 = null;
    org.neo4j.internal.id.IdSequence idSequence29 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext30 = null;
    recordFormatDynamicRecordImpl10.prepare(dynamicRecord27, (int) (byte) 100, idSequence29,
        cursorContext30);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord32 = recordFormatDynamicRecordImpl10.newRecord();
    long long33 = recordFormatDynamicRecordImpl0.getNextRecordReference(dynamicRecord32);
    org.neo4j.io.pagecache.PageCursor pageCursor34 = null;
    try {
      boolean boolean35 = recordFormatDynamicRecordImpl0.isInUse(pageCursor34);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord6);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    org.junit.Assert.assertTrue("'" + int15 + "' != '" + 16 + "'", int15 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord16);
    org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    org.junit.Assert.assertTrue("'" + int22 + "' != '" + 16 + "'", int22 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord23);
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
    org.junit.Assert.assertTrue("'" + int25 + "' != '" + 12 + "'", int25 == 12);
    org.junit.Assert.assertTrue("'" + int26 + "' != '" + 12 + "'", int26 == 12);
    org.junit.Assert.assertNotNull(dynamicRecord32);
    org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
  }

  @Test
  public void test0751() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0751");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat1 = v310_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat2 = v310_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat3 = v310_0.labelToken();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat1);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat3);
  }

  @Test
  public void test0752() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0752");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod((long) 35,
        15L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 47L + "'", long2 == 47L);
  }

  @Test
  public void test0753() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0753");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v306_0.relationship();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray2 = v306_0.capabilities();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat3 = v306_0.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat4 = v306_0.relationshipGroup();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(capabilityArray2);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat3);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat4);
  }

  @Test
  public void test0754() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0754");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord5 = relationshipRecordFormat4.newRecord();
    long long6 = relationshipHighLimitRecordFormat3.getNextRecordReference(relationshipRecord5);
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord5, (int) (byte) 10, idSequence8,
        cursorContext9);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord13 = relationshipHighLimitRecordFormat12.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord16 = relationshipHighLimitRecordFormat15.newRecord();
    org.neo4j.internal.id.IdSequence idSequence18 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext19 = null;
    relationshipHighLimitRecordFormat12.prepare(relationshipRecord16, (int) (short) 1, idSequence18,
        cursorContext19);
    long long21 = relationshipHighLimitRecordFormat1.getNextRecordReference(relationshipRecord16);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord22 = relationshipHighLimitRecordFormat1.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord23 = relationshipHighLimitRecordFormat1.newRecord();
    int int26 = relationshipHighLimitRecordFormat1.getPageSize(16, (int) (short) 10);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader27 = null;
    int int28 = relationshipHighLimitRecordFormat1.getRecordSize(storeHeader27);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat29 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord30 = relationshipHighLimitRecordFormat29.newRecord();
    org.neo4j.io.pagecache.PageCursor pageCursor31 = null;
    try {
      relationshipHighLimitRecordFormat1.write(relationshipRecord30, pageCursor31, 99, 0);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(relationshipRecord5);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord13);
    org.junit.Assert.assertNotNull(relationshipRecord16);
    org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord22);
    org.junit.Assert.assertNotNull(relationshipRecord23);
    org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
    org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    org.junit.Assert.assertNotNull(relationshipRecord30);
  }

  @Test
  public void test0755() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0755");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod((long) 30,
        52L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 62L + "'", long2 == 62L);
  }

  @Test
  public void test0756() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0756");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v306_0.relationship();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray2 = v306_0.capabilities();
    java.lang.String str3 = v306_0.introductionVersion();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat4 = v306_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat5 = v306_0.node();
    java.lang.Class<?> wildcardClass6 = v306_0.getClass();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(capabilityArray2);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "3.0.6" + "'", str3, "3.0.6");
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat4);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat5);
    org.junit.Assert.assertNotNull(wildcardClass6);
  }

  @Test
  public void test0757() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0757");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl6 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    int int9 = recordFormatDynamicRecordImpl6.getPageSize(24, 8);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl10 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean12 = recordFormatDynamicRecordImpl10.equals((java.lang.Object) 100.0f);
    int int15 = recordFormatDynamicRecordImpl10.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord16 = recordFormatDynamicRecordImpl10.newRecord();
    long long17 = recordFormatDynamicRecordImpl6.getNextRecordReference(dynamicRecord16);
    org.neo4j.internal.id.IdSequence idSequence19 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext20 = null;
    recordFormatDynamicRecordImpl0.prepare(dynamicRecord16, 10, idSequence19, cursorContext20);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat22 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat23 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord24 = propertyRecordFormat23.newRecord();
    long long25 = propertyOneByteHeaderRecordFormat22.getNextRecordReference(propertyRecord24);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat26 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat27 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord28 = propertyRecordFormat27.newRecord();
    long long29 = propertyOneByteHeaderRecordFormat26.getNextRecordReference(propertyRecord28);
    long long30 = propertyOneByteHeaderRecordFormat22.getNextRecordReference(propertyRecord28);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat31 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long32 = propertyOneByteHeaderRecordFormat31.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord33 = propertyOneByteHeaderRecordFormat31.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat34 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long35 = propertyOneByteHeaderRecordFormat34.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord36 = propertyOneByteHeaderRecordFormat34.newRecord();
    long long37 = propertyOneByteHeaderRecordFormat31.getNextRecordReference(propertyRecord36);
    org.neo4j.internal.id.IdSequence idSequence39 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext40 = null;
    propertyOneByteHeaderRecordFormat22.prepare(propertyRecord36, (int) (byte) -1, idSequence39,
        cursorContext40);
    boolean boolean42 = recordFormatDynamicRecordImpl0.equals(
        (java.lang.Object) propertyOneByteHeaderRecordFormat22);
    long long43 = recordFormatDynamicRecordImpl0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl44 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean46 = recordFormatDynamicRecordImpl44.equals((java.lang.Object) 100.0f);
    int int49 = recordFormatDynamicRecordImpl44.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord50 = recordFormatDynamicRecordImpl44.newRecord();
    int int53 = recordFormatDynamicRecordImpl44.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord54 = recordFormatDynamicRecordImpl44.newRecord();
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord55 = recordFormatDynamicRecordImpl44.newRecord();
    long long56 = recordFormatDynamicRecordImpl0.getNextRecordReference(dynamicRecord55);
    int int57 = recordFormatDynamicRecordImpl0.getRecordHeaderSize();
    java.lang.Class<?> wildcardClass58 = recordFormatDynamicRecordImpl0.getClass();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 24 + "'", int9 == 24);
    org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    org.junit.Assert.assertTrue("'" + int15 + "' != '" + 16 + "'", int15 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord16);
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord24);
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord28);
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
    org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
    org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1125899906842623L + "'",
        long32 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord33);
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1125899906842623L + "'",
        long35 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord36);
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1125899906842623L + "'",
        long43 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    org.junit.Assert.assertTrue("'" + int49 + "' != '" + 16 + "'", int49 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord50);
    org.junit.Assert.assertTrue("'" + int53 + "' != '" + 35 + "'", int53 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord54);
    org.junit.Assert.assertNotNull(dynamicRecord55);
    org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-1L) + "'", long56 == (-1L));
    org.junit.Assert.assertTrue("'" + int57 + "' != '" + 12 + "'", int57 == 12);
    org.junit.Assert.assertNotNull(wildcardClass58);
  }

  @Test
  public void test0758() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0758");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord2 = propertyRecordFormat1.newRecord();
    long long3 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord2);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader4 = null;
    int int5 = propertyOneByteHeaderRecordFormat0.getRecordSize(storeHeader4);
    int int8 = propertyOneByteHeaderRecordFormat0.getPageSize(0, (int) (short) 10);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat9 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord10 = propertyRecordFormat9.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat11 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader12 = null;
    int int13 = propertyRecordFormat11.getRecordSize(storeHeader12);
    long long14 = propertyRecordFormat11.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat16 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord17 = propertyRecordFormat16.newRecord();
    long long18 = propertyOneByteHeaderRecordFormat15.getNextRecordReference(propertyRecord17);
    org.neo4j.internal.id.IdSequence idSequence20 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext21 = null;
    propertyRecordFormat11.prepare(propertyRecord17, 0, idSequence20, cursorContext21);
    long long23 = propertyRecordFormat9.getNextRecordReference(propertyRecord17);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord24 = propertyRecordFormat9.newRecord();
    org.neo4j.io.pagecache.PageCursor pageCursor25 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad26 = null;
    try {
      propertyOneByteHeaderRecordFormat0.read(propertyRecord24, pageCursor25, recordLoad26, 52,
          (int) (byte) 0);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(propertyRecord2);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 48 + "'", int5 == 48);
    org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    org.junit.Assert.assertNotNull(propertyRecord10);
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 48 + "'", int13 == 48);
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1125899906842623L + "'",
        long14 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord17);
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord24);
  }

  @Test
  public void test0759() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0759");
    }
    java.util.function.Function<org.neo4j.kernel.impl.store.StoreHeader, java.lang.Integer> storeHeaderFunction1 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.fixedRecordSize(
        128);
    org.junit.Assert.assertNotNull(storeHeaderFunction1);
  }

  @Test
  public void test0760() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0760");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl6 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean8 = recordFormatDynamicRecordImpl6.equals((java.lang.Object) 100.0f);
    int int11 = recordFormatDynamicRecordImpl6.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord12 = recordFormatDynamicRecordImpl6.newRecord();
    int int15 = recordFormatDynamicRecordImpl6.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord16 = recordFormatDynamicRecordImpl6.newRecord();
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord17 = recordFormatDynamicRecordImpl6.newRecord();
    org.neo4j.internal.id.IdSequence idSequence19 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext20 = null;
    recordFormatDynamicRecordImpl0.prepare(dynamicRecord17, 10, idSequence19, cursorContext20);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat22 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader23 = null;
    int int24 = propertyRecordFormat22.getRecordSize(storeHeader23);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl25 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats26 = highLimitFactoryDefaultImpl25.newInstance();
    boolean boolean27 = propertyRecordFormat22.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl25);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat29 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean30 = propertyRecordFormat22.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord31 = propertyRecordFormat22.newRecord();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader32 = null;
    int int33 = propertyRecordFormat22.getRecordSize(storeHeader32);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat34 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat35 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord36 = propertyRecordFormat35.newRecord();
    long long37 = propertyOneByteHeaderRecordFormat34.getNextRecordReference(propertyRecord36);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat38 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat39 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord40 = propertyRecordFormat39.newRecord();
    long long41 = propertyOneByteHeaderRecordFormat38.getNextRecordReference(propertyRecord40);
    long long42 = propertyOneByteHeaderRecordFormat34.getNextRecordReference(propertyRecord40);
    org.neo4j.internal.id.IdSequence idSequence44 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext45 = null;
    propertyRecordFormat22.prepare(propertyRecord40, 99, idSequence44, cursorContext45);
    boolean boolean47 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) idSequence44);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord48 = null;
    org.neo4j.io.pagecache.PageCursor pageCursor49 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad50 = null;
    try {
      recordFormatDynamicRecordImpl0.read(dynamicRecord48, pageCursor49, recordLoad50, 16, 24);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    org.junit.Assert.assertTrue("'" + int11 + "' != '" + 16 + "'", int11 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord12);
    org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord16);
    org.junit.Assert.assertNotNull(dynamicRecord17);
    org.junit.Assert.assertTrue("'" + int24 + "' != '" + 48 + "'", int24 == 48);
    org.junit.Assert.assertNotNull(recordFormats26);
    org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    org.junit.Assert.assertNotNull(propertyRecord31);
    org.junit.Assert.assertTrue("'" + int33 + "' != '" + 48 + "'", int33 == 48);
    org.junit.Assert.assertNotNull(propertyRecord36);
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord40);
    org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
    org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
  }

  @Test
  public void test0761() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0761");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord1 = propertyRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_2 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat3 = v310_2.relationship();
    java.lang.String str4 = v310_2.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat5 = v310_2.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat6 = v310_2.node();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray7 = v310_2.capabilities();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat8 = v310_2.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat9 = v310_2.node();
    boolean boolean10 = propertyRecordFormat0.equals((java.lang.Object) v310_2);
    int int11 = propertyRecordFormat0.getRecordHeaderSize();
    org.junit.Assert.assertNotNull(propertyRecord1);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "high_limitV3_1_0" + "'", str4,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat5);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat6);
    org.junit.Assert.assertNotNull(capabilityArray7);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat8);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat9);
    org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
  }

  @Test
  public void test0762() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0762");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord1 = propertyRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader3 = null;
    int int4 = propertyRecordFormat2.getRecordSize(storeHeader3);
    long long5 = propertyRecordFormat2.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat6 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord8 = propertyRecordFormat7.newRecord();
    long long9 = propertyOneByteHeaderRecordFormat6.getNextRecordReference(propertyRecord8);
    org.neo4j.internal.id.IdSequence idSequence11 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext12 = null;
    propertyRecordFormat2.prepare(propertyRecord8, 0, idSequence11, cursorContext12);
    long long14 = propertyRecordFormat0.getNextRecordReference(propertyRecord8);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader16 = null;
    int int17 = propertyRecordFormat15.getRecordSize(storeHeader16);
    int int20 = propertyRecordFormat15.getPageSize((int) (byte) -1, 128);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat21 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long22 = propertyOneByteHeaderRecordFormat21.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord23 = propertyOneByteHeaderRecordFormat21.newRecord();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord24 = propertyOneByteHeaderRecordFormat21.newRecord();
    long long25 = propertyRecordFormat15.getNextRecordReference(propertyRecord24);
    long long26 = propertyRecordFormat0.getNextRecordReference(propertyRecord24);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat27 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader28 = null;
    int int29 = propertyRecordFormat27.getRecordSize(storeHeader28);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl30 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats31 = highLimitFactoryDefaultImpl30.newInstance();
    boolean boolean32 = propertyRecordFormat27.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl30);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat34 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean35 = propertyRecordFormat27.equals((java.lang.Object) (short) 100);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat36 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord37 = propertyRecordFormat36.newRecord();
    long long38 = propertyRecordFormat27.getNextRecordReference(propertyRecord37);
    org.neo4j.io.pagecache.PageCursor pageCursor39 = null;
    try {
      propertyRecordFormat0.write(propertyRecord37, pageCursor39, 100, (int) (short) 100);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(propertyRecord1);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 48 + "'", int4 == 48);
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1125899906842623L + "'",
        long5 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord8);
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    org.junit.Assert.assertTrue("'" + int17 + "' != '" + 48 + "'", int17 == 48);
    org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1125899906842623L + "'",
        long22 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord23);
    org.junit.Assert.assertNotNull(propertyRecord24);
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
    org.junit.Assert.assertTrue("'" + int29 + "' != '" + 48 + "'", int29 == 48);
    org.junit.Assert.assertNotNull(recordFormats31);
    org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    org.junit.Assert.assertNotNull(propertyRecord37);
    org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
  }

  @Test
  public void test0763() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0763");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord1 = null;
    long long2 = nodeRecordFormat0.getNextRecordReference(nodeRecord1);
    int int3 = nodeRecordFormat0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader4 = null;
    int int5 = nodeRecordFormat0.getRecordSize(storeHeader4);
    int int8 = nodeRecordFormat0.getPageSize((int) '4', (int) (short) 1);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord9 = nodeRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_10 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat11 = v306_10.relationship();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray12 = v306_10.capabilities();
    java.lang.String str13 = v306_10.introductionVersion();
    boolean boolean14 = nodeRecordFormat0.equals((java.lang.Object) v306_10);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader15 = null;
    int int16 = nodeRecordFormat0.getRecordSize(storeHeader15);
    int int17 = nodeRecordFormat0.getRecordHeaderSize();
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
    org.junit.Assert.assertNotNull(nodeRecord9);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat11);
    org.junit.Assert.assertNotNull(capabilityArray12);
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "3.0.6" + "'", str13, "3.0.6");
    org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16 + "'", int16 == 16);
    org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
  }

  @Test
  public void test0764() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0764");
    }
    int int1 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.leg(24L);
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 3 + "'", int1 == 3);
  }

  @Test
  public void test0765() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0765");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_6 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat7 = v310_6.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat8 = v310_6.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat9 = v310_6.labelToken();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType10 = null;
    boolean boolean11 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v310_6, capabilityType10);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat12 = v300_1.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat13 = v300_1.relationshipTypeToken();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat7);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat8);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat9);
    org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat12);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat13);
  }

  @Test
  public void test0766() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0766");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord1 = null;
    long long2 = nodeRecordFormat0.getNextRecordReference(nodeRecord1);
    int int3 = nodeRecordFormat0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader4 = null;
    int int5 = nodeRecordFormat0.getRecordSize(storeHeader4);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord6 = nodeRecordFormat0.newRecord();
    int int9 = nodeRecordFormat0.getPageSize((int) (short) 0, 4);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader10 = null;
    int int11 = nodeRecordFormat0.getRecordSize(storeHeader10);
    long long12 = nodeRecordFormat0.getMaxId();
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(nodeRecord6);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    org.junit.Assert.assertTrue("'" + int11 + "' != '" + 16 + "'", int11 == 16);
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1125899906842623L + "'",
        long12 == 1125899906842623L);
  }

  @Test
  public void test0767() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0767");
    }
    java.util.function.Function<org.neo4j.kernel.impl.store.StoreHeader, java.lang.Integer> storeHeaderFunction1 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.fixedRecordSize(
        24);
    org.junit.Assert.assertNotNull(storeHeaderFunction1);
  }

  @Test
  public void test0768() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0768");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long1 = relationshipGroupHighLimitRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord3 = null;
    long long4 = relationshipGroupHighLimitRecordFormat2.getNextRecordReference(
        relationshipGroupRecord3);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord5 = relationshipGroupHighLimitRecordFormat2.newRecord();
    org.neo4j.internal.id.IdSequence idSequence7 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext8 = null;
    relationshipGroupHighLimitRecordFormat0.prepare(relationshipGroupRecord5, (int) (byte) 1,
        idSequence7, cursorContext8);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat10 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long11 = relationshipGroupHighLimitRecordFormat10.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord13 = null;
    long long14 = relationshipGroupHighLimitRecordFormat12.getNextRecordReference(
        relationshipGroupRecord13);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord15 = relationshipGroupHighLimitRecordFormat12.newRecord();
    org.neo4j.internal.id.IdSequence idSequence17 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext18 = null;
    relationshipGroupHighLimitRecordFormat10.prepare(relationshipGroupRecord15, (int) (byte) 1,
        idSequence17, cursorContext18);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat20 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord21 = null;
    long long22 = relationshipGroupHighLimitRecordFormat20.getNextRecordReference(
        relationshipGroupRecord21);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord23 = relationshipGroupHighLimitRecordFormat20.newRecord();
    org.neo4j.internal.id.IdSequence idSequence25 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext26 = null;
    relationshipGroupHighLimitRecordFormat10.prepare(relationshipGroupRecord23, 0, idSequence25,
        cursorContext26);
    org.neo4j.internal.id.IdSequence idSequence29 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext30 = null;
    relationshipGroupHighLimitRecordFormat0.prepare(relationshipGroupRecord23, 128, idSequence29,
        cursorContext30);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader32 = null;
    int int33 = relationshipGroupHighLimitRecordFormat0.getRecordSize(storeHeader32);
    int int34 = relationshipGroupHighLimitRecordFormat0.getRecordHeaderSize();
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord5);
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1125899906842623L + "'",
        long11 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord15);
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord23);
    org.junit.Assert.assertTrue("'" + int33 + "' != '" + 32 + "'", int33 == 32);
    org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
  }

  @Test
  public void test0769() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0769");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat1 = v300_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat2 = v300_0.property();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily3 = v300_0.getFormatFamily();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat4 = v300_0.relationship();
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat1);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat2);
    org.junit.Assert.assertTrue(
        "'" + formatFamily3 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily3.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat4);
  }

  @Test
  public void test0770() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0770");
    }
    org.neo4j.io.pagecache.PageCursor pageCursor1 = null;
    try {
      io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.enoForPa(3L,
          pageCursor1);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test0771() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0771");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v320_0.relationship();
    java.lang.String str2 = v320_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat3 = v320_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat4 = v320_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat5 = v320_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat6 = v320_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat7 = v320_0.propertyKeyToken();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_2_0" + "'", str2,
        "high_limitV3_2_0");
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat3);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat4);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat5);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat6);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat7);
  }

  @Test
  public void test0772() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0772");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.FactoryHighLimitDefaultImpl factoryHighLimitDefaultImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.FactoryHighLimitDefaultImpl();
    java.lang.String str1 = factoryHighLimitDefaultImpl0.getName();
    java.lang.String str2 = factoryHighLimitDefaultImpl0.getName();
    java.lang.String str3 = factoryHighLimitDefaultImpl0.getName();
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "high_limitV3_1_0" + "'", str1,
        "high_limitV3_1_0");
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_1_0" + "'", str2,
        "high_limitV3_1_0");
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "high_limitV3_1_0" + "'", str3,
        "high_limitV3_1_0");
  }

  @Test
  public void test0773() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0773");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod((-39L),
        139L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-37L) + "'", long2 == (-37L));
  }

  @Test
  public void test0774() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0774");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat1 = v300_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat2 = v300_0.schema();
    java.lang.String str3 = v300_0.storeVersion();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat4 = v300_0.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat5 = v300_0.relationshipGroup();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat6 = v300_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat7 = v300_0.relationship();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat1);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat2);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "vE.H.0" + "'", str3, "vE.H.0");
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat4);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat5);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat6);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat7);
  }

  @Test
  public void test0775() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0775");
    }
    org.neo4j.io.pagecache.PageCursor pageCursor1 = null;
    try {
      io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.enoForPa((-5L),
          pageCursor1);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test0776() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0776");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = recordFormatDynamicRecordImpl0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl7 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean9 = recordFormatDynamicRecordImpl7.equals((java.lang.Object) 100.0f);
    int int12 = recordFormatDynamicRecordImpl7.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord13 = recordFormatDynamicRecordImpl7.newRecord();
    long long14 = recordFormatDynamicRecordImpl0.getNextRecordReference(dynamicRecord13);
    int int15 = recordFormatDynamicRecordImpl0.getRecordHeaderSize();
    int int16 = recordFormatDynamicRecordImpl0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord17 = recordFormatDynamicRecordImpl0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl18 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean20 = recordFormatDynamicRecordImpl18.equals((java.lang.Object) 100.0f);
    int int23 = recordFormatDynamicRecordImpl18.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord24 = recordFormatDynamicRecordImpl18.newRecord();
    int int27 = recordFormatDynamicRecordImpl18.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord28 = recordFormatDynamicRecordImpl18.newRecord();
    int int31 = recordFormatDynamicRecordImpl18.getPageSize((int) '4', (int) (short) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_32 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat33 = v320_32.relationship();
    boolean boolean34 = recordFormatDynamicRecordImpl18.equals((java.lang.Object) v320_32);
    int int37 = recordFormatDynamicRecordImpl18.getPageSize(16, 8);
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_38 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat39 = v310_38.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat40 = v310_38.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat41 = v310_38.labelToken();
    boolean boolean42 = recordFormatDynamicRecordImpl18.equals((java.lang.Object) v310_38);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl43 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean45 = recordFormatDynamicRecordImpl43.equals((java.lang.Object) 100.0f);
    int int48 = recordFormatDynamicRecordImpl43.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord49 = recordFormatDynamicRecordImpl43.newRecord();
    int int52 = recordFormatDynamicRecordImpl43.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord53 = recordFormatDynamicRecordImpl43.newRecord();
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord54 = recordFormatDynamicRecordImpl43.newRecord();
    org.neo4j.internal.id.IdSequence idSequence56 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext57 = null;
    recordFormatDynamicRecordImpl18.prepare(dynamicRecord54, 35, idSequence56, cursorContext57);
    org.neo4j.internal.id.IdSequence idSequence60 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext61 = null;
    recordFormatDynamicRecordImpl0.prepare(dynamicRecord54, 32, idSequence60, cursorContext61);
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord6);
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 16 + "'", int12 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord13);
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    org.junit.Assert.assertTrue("'" + int15 + "' != '" + 12 + "'", int15 == 12);
    org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
    org.junit.Assert.assertNotNull(dynamicRecord17);
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    org.junit.Assert.assertTrue("'" + int23 + "' != '" + 16 + "'", int23 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord24);
    org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord28);
    org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat33);
    org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    org.junit.Assert.assertTrue("'" + int37 + "' != '" + 16 + "'", int37 == 16);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat39);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat40);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat41);
    org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    org.junit.Assert.assertTrue("'" + int48 + "' != '" + 16 + "'", int48 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord49);
    org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord53);
    org.junit.Assert.assertNotNull(dynamicRecord54);
  }

  @Test
  public void test0777() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0777");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_6 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat7 = v306_6.node();
    org.neo4j.storageengine.api.format.Capability capability8 = null;
    boolean boolean9 = v306_6.hasCapability(capability8);
    org.neo4j.storageengine.api.format.CapabilityType capabilityType10 = null;
    boolean boolean11 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_6, capabilityType10);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat12 = v306_6.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat13 = v306_6.dynamic();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat7);
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat12);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat13);
  }

  @Test
  public void test0778() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0778");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = relationshipGroupRecordFormat0.getRecordSize(storeHeader1);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord3 = relationshipGroupRecordFormat0.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord4 = relationshipGroupRecordFormat0.newRecord();
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 32 + "'", int2 == 32);
    org.junit.Assert.assertNotNull(relationshipGroupRecord3);
    org.junit.Assert.assertNotNull(relationshipGroupRecord4);
  }

  @Test
  public void test0779() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0779");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 10);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord3 = null;
    long long4 = nodeRecordFormat2.getNextRecordReference(nodeRecord3);
    int int5 = nodeRecordFormat2.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader6 = null;
    int int7 = nodeRecordFormat2.getRecordSize(storeHeader6);
    int int10 = nodeRecordFormat2.getPageSize((int) '4', (int) (short) 1);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord11 = nodeRecordFormat2.newRecord();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader12 = null;
    int int13 = nodeRecordFormat2.getRecordSize(storeHeader12);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.NodeRecordFormat nodeRecordFormat14 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord15 = nodeRecordFormat14.newRecord();
    long long16 = nodeRecordFormat2.getNextRecordReference(nodeRecord15);
    int int17 = nodeHighLimitRecordFormat1.rerdtlgForRE(nodeRecord15);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
    org.junit.Assert.assertNotNull(nodeRecord11);
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
    org.junit.Assert.assertNotNull(nodeRecord15);
    org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
  }

  @Test
  public void test0780() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0780");
    }
    org.neo4j.internal.batchimport.AdditionalInitialIds additionalInitialIds0 = null;
    org.neo4j.internal.batchimport.input.Collector collector1 = null;
    org.neo4j.internal.batchimport.Configuration configuration2 = null;
    org.neo4j.configuration.Config config3 = null;
    org.neo4j.io.layout.DatabaseLayout databaseLayout4 = null;
    org.neo4j.internal.batchimport.staging.ExecutionMonitor executionMonitor5 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.internal.batchimport.IndexImporterFactory indexImporterFactory7 = null;
    org.neo4j.scheduler.JobScheduler jobScheduler8 = null;
    org.neo4j.storageengine.api.LogFilesInitializer logFilesInitializer9 = null;
    org.neo4j.logging.internal.LogService logService10 = null;
    org.neo4j.memory.MemoryTracker memoryTracker11 = null;
    org.neo4j.internal.batchimport.ImportLogic.Monitor monitor12 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer13 = null;
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_14 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat15 = v306_14.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat16 = v306_14.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat17 = v306_14.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat18 = v306_14.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat19 = v306_14.property();
    java.lang.String str20 = v306_14.toString();
    try {
      io.github.onograph.internal.batchimport.EnterpriseBatchImporter enterpriseBatchImporter21 = new io.github.onograph.internal.batchimport.EnterpriseBatchImporter(
          additionalInitialIds0, collector1, configuration2, config3, databaseLayout4,
          executionMonitor5, fileSystemAbstraction6, indexImporterFactory7, jobScheduler8,
          logFilesInitializer9, logService10, memoryTracker11, monitor12, pageCacheTracer13,
          (org.neo4j.kernel.impl.store.format.RecordFormats) v306_14);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat15);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat16);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat17);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat18);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat19);
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "RecordFormat:V306[vE.H.0b]" + "'",
        str20, "RecordFormat:V306[vE.H.0b]");
  }

  @Test
  public void test0781() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0781");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    int int1 = nodeRecordFormat0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord2 = nodeRecordFormat0.newRecord();
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    org.junit.Assert.assertNotNull(nodeRecord2);
  }

  @Test
  public void test0782() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0782");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = recordFormatDynamicRecordImpl0.newRecord();
    int int9 = recordFormatDynamicRecordImpl0.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord10 = recordFormatDynamicRecordImpl0.newRecord();
    int int13 = recordFormatDynamicRecordImpl0.getPageSize((int) '4', (int) (short) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_14 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat15 = v320_14.relationship();
    boolean boolean16 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) v320_14);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat17 = v320_14.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat18 = v320_14.propertyKeyToken();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord6);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord10);
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat15);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat17);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat18);
  }

  @Test
  public void test0783() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0783");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v306_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat2 = v306_0.schema();
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_3 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat4 = v310_3.relationship();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType5 = null;
    boolean boolean6 = v306_0.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v310_3, capabilityType5);
    java.lang.String str7 = v310_3.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat8 = v310_3.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat9 = v310_3.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat10 = v310_3.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat11 = v310_3.dynamic();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat2);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat4);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "high_limitV3_1_0" + "'", str7,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat8);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat9);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat10);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat11);
  }

  @Test
  public void test0784() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0784");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = recordFormatDynamicRecordImpl0.newRecord();
    int int9 = recordFormatDynamicRecordImpl0.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord10 = recordFormatDynamicRecordImpl0.newRecord();
    long long11 = recordFormatDynamicRecordImpl0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl12 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean14 = recordFormatDynamicRecordImpl12.equals((java.lang.Object) 100.0f);
    int int17 = recordFormatDynamicRecordImpl12.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord18 = recordFormatDynamicRecordImpl12.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl19 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean21 = recordFormatDynamicRecordImpl19.equals((java.lang.Object) 100.0f);
    int int24 = recordFormatDynamicRecordImpl19.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord25 = recordFormatDynamicRecordImpl19.newRecord();
    long long26 = recordFormatDynamicRecordImpl12.getNextRecordReference(dynamicRecord25);
    org.neo4j.internal.id.IdSequence idSequence28 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext29 = null;
    recordFormatDynamicRecordImpl0.prepare(dynamicRecord25, 128, idSequence28, cursorContext29);
    int int33 = recordFormatDynamicRecordImpl0.getPageSize(50, 128);
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord6);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord10);
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1125899906842623L + "'",
        long11 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    org.junit.Assert.assertTrue("'" + int17 + "' != '" + 16 + "'", int17 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord18);
    org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    org.junit.Assert.assertTrue("'" + int24 + "' != '" + 16 + "'", int24 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord25);
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
    org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
  }

  @Test
  public void test0785() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0785");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord1 = null;
    org.neo4j.internal.id.IdSequence idSequence3 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext4 = null;
    propertyRecordFormat0.prepare(propertyRecord1, (int) (short) -1, idSequence3, cursorContext4);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord6 = propertyRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat8 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord9 = propertyRecordFormat8.newRecord();
    long long10 = propertyOneByteHeaderRecordFormat7.getNextRecordReference(propertyRecord9);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader11 = null;
    int int12 = propertyOneByteHeaderRecordFormat7.getRecordSize(storeHeader11);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat13 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long14 = propertyOneByteHeaderRecordFormat13.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat16 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord17 = propertyRecordFormat16.newRecord();
    long long18 = propertyOneByteHeaderRecordFormat15.getNextRecordReference(propertyRecord17);
    long long19 = propertyOneByteHeaderRecordFormat13.getNextRecordReference(propertyRecord17);
    org.neo4j.internal.id.IdSequence idSequence21 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext22 = null;
    propertyOneByteHeaderRecordFormat7.prepare(propertyRecord17, 64, idSequence21, cursorContext22);
    long long24 = propertyRecordFormat0.getNextRecordReference(propertyRecord17);
    boolean boolean26 = propertyRecordFormat0.equals((java.lang.Object) 100);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat27 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader28 = null;
    int int29 = propertyRecordFormat27.getRecordSize(storeHeader28);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl30 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats31 = highLimitFactoryDefaultImpl30.newInstance();
    boolean boolean32 = propertyRecordFormat27.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl30);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat34 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean35 = propertyRecordFormat27.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord36 = propertyRecordFormat27.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat37 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader38 = null;
    int int39 = propertyRecordFormat37.getRecordSize(storeHeader38);
    long long40 = propertyRecordFormat37.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat41 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat42 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord43 = propertyRecordFormat42.newRecord();
    long long44 = propertyOneByteHeaderRecordFormat41.getNextRecordReference(propertyRecord43);
    org.neo4j.internal.id.IdSequence idSequence46 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext47 = null;
    propertyRecordFormat37.prepare(propertyRecord43, 0, idSequence46, cursorContext47);
    org.neo4j.internal.id.IdSequence idSequence50 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext51 = null;
    propertyRecordFormat27.prepare(propertyRecord43, 0, idSequence50, cursorContext51);
    long long53 = propertyRecordFormat0.getNextRecordReference(propertyRecord43);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat54 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader55 = null;
    int int56 = propertyRecordFormat54.getRecordSize(storeHeader55);
    long long57 = propertyRecordFormat54.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum highLimitEncEnum58 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8;
    boolean boolean59 = propertyRecordFormat54.equals((java.lang.Object) highLimitEncEnum58);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord60 = null;
    org.neo4j.internal.id.IdSequence idSequence62 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext63 = null;
    propertyRecordFormat54.prepare(propertyRecord60, 128, idSequence62, cursorContext63);
    long long65 = propertyRecordFormat54.getMaxId();
    boolean boolean66 = propertyRecordFormat0.equals((java.lang.Object) long65);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord67 = propertyRecordFormat0.newRecord();
    org.junit.Assert.assertNotNull(propertyRecord6);
    org.junit.Assert.assertNotNull(propertyRecord9);
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 48 + "'", int12 == 48);
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1125899906842623L + "'",
        long14 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord17);
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    org.junit.Assert.assertTrue("'" + int29 + "' != '" + 48 + "'", int29 == 48);
    org.junit.Assert.assertNotNull(recordFormats31);
    org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    org.junit.Assert.assertNotNull(propertyRecord36);
    org.junit.Assert.assertTrue("'" + int39 + "' != '" + 48 + "'", int39 == 48);
    org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1125899906842623L + "'",
        long40 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord43);
    org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
    org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-1L) + "'", long53 == (-1L));
    org.junit.Assert.assertTrue("'" + int56 + "' != '" + 48 + "'", int56 == 48);
    org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1125899906842623L + "'",
        long57 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + highLimitEncEnum58 + "' != '"
            + io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8 + "'",
        highLimitEncEnum58.equals(
            io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8));
    org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1125899906842623L + "'",
        long65 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    org.junit.Assert.assertNotNull(propertyRecord67);
  }

  @Test
  public void test0786() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0786");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord2 = relationshipRecordFormat1.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord3 = relationshipRecordFormat1.newRecord();
    org.neo4j.internal.id.IdSequence idSequence5 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext6 = null;
    relationshipRecordFormat0.prepare(relationshipRecord3, 100, idSequence5, cursorContext6);
    int int10 = relationshipRecordFormat0.getPageSize(0, 3);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord11 = relationshipRecordFormat0.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord12 = relationshipRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_13 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat14 = v320_13.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat15 = v320_13.labelToken();
    boolean boolean16 = relationshipRecordFormat0.equals((java.lang.Object) v320_13);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat17 = v320_13.node();
    org.junit.Assert.assertNotNull(relationshipRecord2);
    org.junit.Assert.assertNotNull(relationshipRecord3);
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord11);
    org.junit.Assert.assertNotNull(relationshipRecord12);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat14);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat15);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat17);
  }

  @Test
  public void test0787() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0787");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    java.lang.String str1 = highLimitFactoryDefaultImpl0.getName();
    java.lang.String str2 = highLimitFactoryDefaultImpl0.getName();
    java.lang.String str3 = highLimitFactoryDefaultImpl0.getName();
    java.lang.String str4 = highLimitFactoryDefaultImpl0.getName();
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "high_limitV4_0_0" + "'", str1,
        "high_limitV4_0_0");
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV4_0_0" + "'", str2,
        "high_limitV4_0_0");
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "high_limitV4_0_0" + "'", str3,
        "high_limitV4_0_0");
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "high_limitV4_0_0" + "'", str4,
        "high_limitV4_0_0");
  }

  @Test
  public void test0788() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0788");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat1 = v306_0.node();
    org.neo4j.storageengine.api.format.Capability capability2 = null;
    boolean boolean3 = v306_0.hasCapability(capability2);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat4 = v306_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat5 = v306_0.relationshipGroup();
    java.lang.String str6 = v306_0.name();
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat1);
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat4);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat5);
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "high_limitV3_0_6" + "'", str6,
        "high_limitV3_0_6");
  }

  @Test
  public void test0789() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0789");
    }
    org.neo4j.internal.batchimport.AdditionalInitialIds additionalInitialIds0 = null;
    org.neo4j.internal.batchimport.input.Collector collector1 = null;
    org.neo4j.internal.batchimport.Configuration configuration2 = null;
    org.neo4j.configuration.Config config3 = null;
    org.neo4j.io.layout.DatabaseLayout databaseLayout4 = null;
    org.neo4j.internal.batchimport.staging.ExecutionMonitor executionMonitor5 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.internal.batchimport.IndexImporterFactory indexImporterFactory7 = null;
    org.neo4j.scheduler.JobScheduler jobScheduler8 = null;
    org.neo4j.storageengine.api.LogFilesInitializer logFilesInitializer9 = null;
    org.neo4j.logging.internal.LogService logService10 = null;
    org.neo4j.memory.MemoryTracker memoryTracker11 = null;
    org.neo4j.internal.batchimport.ImportLogic.Monitor monitor12 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer13 = null;
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_14 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat15 = v310_14.relationship();
    java.lang.String str16 = v310_14.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat17 = v310_14.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat18 = v310_14.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat19 = v310_14.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat20 = v310_14.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat21 = v310_14.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat22 = v310_14.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat23 = v310_14.dynamic();
    try {
      io.github.onograph.internal.batchimport.EnterpriseBatchImporter enterpriseBatchImporter24 = new io.github.onograph.internal.batchimport.EnterpriseBatchImporter(
          additionalInitialIds0, collector1, configuration2, config3, databaseLayout4,
          executionMonitor5, fileSystemAbstraction6, indexImporterFactory7, jobScheduler8,
          logFilesInitializer9, logService10, memoryTracker11, monitor12, pageCacheTracer13,
          (org.neo4j.kernel.impl.store.format.RecordFormats) v310_14);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat15);
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "high_limitV3_1_0" + "'", str16,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat17);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat18);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat19);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat20);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat21);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat22);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat23);
  }

  @Test
  public void test0790() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0790");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod(117L,
        (long) 52);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 117L + "'", long2 == 117L);
  }

  @Test
  public void test0791() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0791");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v300_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat2 = v300_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat3 = v300_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat4 = v300_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat5 = v300_0.relationshipGroup();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat2);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat3);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat4);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat5);
  }

  @Test
  public void test0792() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0792");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v320_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat2 = v320_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat3 = v320_0.node();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat3);
  }

  @Test
  public void test0793() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0793");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord5 = relationshipRecordFormat4.newRecord();
    long long6 = relationshipHighLimitRecordFormat3.getNextRecordReference(relationshipRecord5);
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord5, (int) (byte) 10, idSequence8,
        cursorContext9);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord13 = relationshipHighLimitRecordFormat12.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord16 = relationshipHighLimitRecordFormat15.newRecord();
    org.neo4j.internal.id.IdSequence idSequence18 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext19 = null;
    relationshipHighLimitRecordFormat12.prepare(relationshipRecord16, (int) (short) 1, idSequence18,
        cursorContext19);
    long long21 = relationshipHighLimitRecordFormat1.getNextRecordReference(relationshipRecord16);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord22 = relationshipHighLimitRecordFormat1.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord23 = relationshipHighLimitRecordFormat1.newRecord();
    int int26 = relationshipHighLimitRecordFormat1.getPageSize(16, (int) (short) 10);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat27 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord28 = relationshipHighLimitRecordFormat27.newRecord();
    org.neo4j.io.pagecache.PageCursor pageCursor29 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad30 = null;
    try {
      relationshipHighLimitRecordFormat1.read(relationshipRecord28, pageCursor29, recordLoad30, 64,
          100);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(relationshipRecord5);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord13);
    org.junit.Assert.assertNotNull(relationshipRecord16);
    org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord22);
    org.junit.Assert.assertNotNull(relationshipRecord23);
    org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
    org.junit.Assert.assertNotNull(relationshipRecord28);
  }

  @Test
  public void test0794() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0794");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.FactoryHighLimitRecordFormatsImpl factoryHighLimitRecordFormatsImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.FactoryHighLimitRecordFormatsImpl();
    java.lang.String str1 = factoryHighLimitRecordFormatsImpl0.getName();
    java.lang.String str2 = factoryHighLimitRecordFormatsImpl0.getName();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats3 = factoryHighLimitRecordFormatsImpl0.newInstance();
    java.lang.String str4 = factoryHighLimitRecordFormatsImpl0.getName();
    java.lang.String str5 = factoryHighLimitRecordFormatsImpl0.getName();
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "high_limit" + "'", str1, "high_limit");
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limit" + "'", str2, "high_limit");
    org.junit.Assert.assertNotNull(recordFormats3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "high_limit" + "'", str4, "high_limit");
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "high_limit" + "'", str5, "high_limit");
  }

  @Test
  public void test0795() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0795");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord5 = relationshipRecordFormat4.newRecord();
    long long6 = relationshipHighLimitRecordFormat3.getNextRecordReference(relationshipRecord5);
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord5, (int) (byte) 10, idSequence8,
        cursorContext9);
    long long11 = relationshipHighLimitRecordFormat1.getMaxId();
    int int12 = relationshipHighLimitRecordFormat1.getRecordHeaderSize();
    org.junit.Assert.assertNotNull(relationshipRecord5);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1125899906842623L + "'",
        long11 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
  }

  @Test
  public void test0796() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0796");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord1 = null;
    long long2 = nodeRecordFormat0.getNextRecordReference(nodeRecord1);
    int int3 = nodeRecordFormat0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader4 = null;
    int int5 = nodeRecordFormat0.getRecordSize(storeHeader4);
    int int8 = nodeRecordFormat0.getPageSize((int) '4', (int) (short) 1);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord9 = nodeRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_10 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat11 = v306_10.relationship();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray12 = v306_10.capabilities();
    java.lang.String str13 = v306_10.introductionVersion();
    boolean boolean14 = nodeRecordFormat0.equals((java.lang.Object) v306_10);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_15 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily16 = v300_15.getFormatFamily();
    boolean boolean17 = v306_10.equals((java.lang.Object) formatFamily16);
    java.lang.String str18 = v306_10.toString();
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_19 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat20 = v310_19.labelToken();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType21 = null;
    boolean boolean22 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_10,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v310_19, capabilityType21);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.MetaDataRecord> metaDataRecordRecordFormat23 = v310_19.metaData();
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
    org.junit.Assert.assertNotNull(nodeRecord9);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat11);
    org.junit.Assert.assertNotNull(capabilityArray12);
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "3.0.6" + "'", str13, "3.0.6");
    org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    org.junit.Assert.assertTrue(
        "'" + formatFamily16 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily16.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "RecordFormat:V306[vE.H.0b]" + "'",
        str18, "RecordFormat:V306[vE.H.0b]");
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat20);
    org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    org.junit.Assert.assertNotNull(metaDataRecordRecordFormat23);
  }

  @Test
  public void test0797() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0797");
    }
    java.util.function.Function<org.neo4j.kernel.impl.store.StoreHeader, java.lang.Integer> storeHeaderFunction1 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.fixedRecordSize(
        3);
    org.junit.Assert.assertNotNull(storeHeaderFunction1);
  }

  @Test
  public void test0798() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0798");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat1 = v310_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat2 = v310_0.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat3 = v310_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat4 = v310_0.relationshipGroup();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray5 = v310_0.capabilities();
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat1);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat3);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat4);
    org.junit.Assert.assertNotNull(capabilityArray5);
  }

  @Test
  public void test0799() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0799");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat1 = v320_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat2 = v320_0.schema();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat3 = v320_0.property();
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat1);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat2);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat3);
  }

  @Test
  public void test0800() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0800");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long1 = propertyOneByteHeaderRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord2 = propertyOneByteHeaderRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader4 = null;
    int int5 = propertyRecordFormat3.getRecordSize(storeHeader4);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl6 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats7 = highLimitFactoryDefaultImpl6.newInstance();
    boolean boolean8 = propertyRecordFormat3.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl6);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat10 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean11 = propertyRecordFormat3.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord12 = null;
    org.neo4j.internal.id.IdSequence idSequence14 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext15 = null;
    propertyRecordFormat3.prepare(propertyRecord12, (int) (short) 0, idSequence14, cursorContext15);
    boolean boolean18 = propertyRecordFormat3.equals((java.lang.Object) "3.0.6");
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat19 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader20 = null;
    int int21 = propertyRecordFormat19.getRecordSize(storeHeader20);
    int int24 = propertyRecordFormat19.getPageSize((int) (byte) -1, 128);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat25 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long26 = propertyOneByteHeaderRecordFormat25.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord27 = propertyOneByteHeaderRecordFormat25.newRecord();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord28 = propertyOneByteHeaderRecordFormat25.newRecord();
    long long29 = propertyRecordFormat19.getNextRecordReference(propertyRecord28);
    long long30 = propertyRecordFormat3.getNextRecordReference(propertyRecord28);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat31 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long32 = relationshipGroupHighLimitRecordFormat31.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat33 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord34 = null;
    long long35 = relationshipGroupHighLimitRecordFormat33.getNextRecordReference(
        relationshipGroupRecord34);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord36 = relationshipGroupHighLimitRecordFormat33.newRecord();
    org.neo4j.internal.id.IdSequence idSequence38 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext39 = null;
    relationshipGroupHighLimitRecordFormat31.prepare(relationshipGroupRecord36, (int) (byte) 1,
        idSequence38, cursorContext39);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat41 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord42 = null;
    long long43 = relationshipGroupHighLimitRecordFormat41.getNextRecordReference(
        relationshipGroupRecord42);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord44 = relationshipGroupHighLimitRecordFormat41.newRecord();
    org.neo4j.internal.id.IdSequence idSequence46 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext47 = null;
    relationshipGroupHighLimitRecordFormat31.prepare(relationshipGroupRecord44, 0, idSequence46,
        cursorContext47);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord49 = relationshipGroupHighLimitRecordFormat31.newRecord();
    boolean boolean50 = propertyRecordFormat3.equals(
        (java.lang.Object) relationshipGroupHighLimitRecordFormat31);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord51 = propertyRecordFormat3.newRecord();
    org.neo4j.internal.id.IdSequence idSequence53 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext54 = null;
    propertyOneByteHeaderRecordFormat0.prepare(propertyRecord51, (int) 'a', idSequence53,
        cursorContext54);
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord2);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 48 + "'", int5 == 48);
    org.junit.Assert.assertNotNull(recordFormats7);
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    org.junit.Assert.assertTrue("'" + int21 + "' != '" + 48 + "'", int21 == 48);
    org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1125899906842623L + "'",
        long26 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord27);
    org.junit.Assert.assertNotNull(propertyRecord28);
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
    org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
    org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1125899906842623L + "'",
        long32 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord36);
    org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord44);
    org.junit.Assert.assertNotNull(relationshipGroupRecord49);
    org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    org.junit.Assert.assertNotNull(propertyRecord51);
  }

  @Test
  public void test0801() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0801");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v310_0.relationship();
    java.lang.String str2 = v310_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat3 = v310_0.relationshipTypeToken();
    java.lang.String str4 = v310_0.toString();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat5 = v310_0.labelToken();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_1_0" + "'", str2,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "RecordFormat:V310[vE.H.2]" + "'", str4,
        "RecordFormat:V310[vE.H.2]");
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat5);
  }

  @Test
  public void test0802() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0802");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord1 = null;
    long long2 = nodeRecordFormat0.getNextRecordReference(nodeRecord1);
    int int3 = nodeRecordFormat0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader4 = null;
    int int5 = nodeRecordFormat0.getRecordSize(storeHeader4);
    int int8 = nodeRecordFormat0.getPageSize((int) '4', (int) (short) 1);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord9 = nodeRecordFormat0.newRecord();
    int int12 = nodeRecordFormat0.getPageSize(32, (int) 'a');
    int int15 = nodeRecordFormat0.getPageSize(1, 32);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader16 = null;
    int int17 = nodeRecordFormat0.getRecordSize(storeHeader16);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
    org.junit.Assert.assertNotNull(nodeRecord9);
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    org.junit.Assert.assertTrue("'" + int17 + "' != '" + 16 + "'", int17 == 16);
  }

  @Test
  public void test0803() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0803");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v300_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat2 = v300_0.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat3 = v300_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat4 = v300_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat5 = v300_0.labelToken();
    java.lang.String str6 = v300_0.name();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily7 = v300_0.getFormatFamily();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat3);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat4);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat5);
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "high_limitV3_0_0" + "'", str6,
        "high_limitV3_0_0");
    org.junit.Assert.assertTrue(
        "'" + formatFamily7 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily7.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
  }

  @Test
  public void test0804() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0804");
    }
    long long2 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.toable(
        (long) 48, 96L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 144L + "'", long2 == 144L);
  }

  @Test
  public void test0805() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0805");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord2 = propertyRecordFormat1.newRecord();
    long long3 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord2);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader4 = null;
    int int5 = propertyOneByteHeaderRecordFormat0.getRecordSize(storeHeader4);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat6 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long7 = propertyOneByteHeaderRecordFormat6.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat8 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat9 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord10 = propertyRecordFormat9.newRecord();
    long long11 = propertyOneByteHeaderRecordFormat8.getNextRecordReference(propertyRecord10);
    long long12 = propertyOneByteHeaderRecordFormat6.getNextRecordReference(propertyRecord10);
    org.neo4j.internal.id.IdSequence idSequence14 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext15 = null;
    propertyOneByteHeaderRecordFormat0.prepare(propertyRecord10, 64, idSequence14, cursorContext15);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat18 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat19 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord20 = relationshipRecordFormat19.newRecord();
    long long21 = relationshipHighLimitRecordFormat18.getNextRecordReference(relationshipRecord20);
    boolean boolean22 = propertyOneByteHeaderRecordFormat0.equals((java.lang.Object) long21);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat23 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long24 = propertyOneByteHeaderRecordFormat23.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord25 = propertyOneByteHeaderRecordFormat23.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat26 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long27 = propertyOneByteHeaderRecordFormat26.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord28 = propertyOneByteHeaderRecordFormat26.newRecord();
    long long29 = propertyOneByteHeaderRecordFormat23.getNextRecordReference(propertyRecord28);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader30 = null;
    int int31 = propertyOneByteHeaderRecordFormat23.getRecordSize(storeHeader30);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat32 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord33 = propertyRecordFormat32.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat34 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader35 = null;
    int int36 = propertyRecordFormat34.getRecordSize(storeHeader35);
    long long37 = propertyRecordFormat34.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat38 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat39 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord40 = propertyRecordFormat39.newRecord();
    long long41 = propertyOneByteHeaderRecordFormat38.getNextRecordReference(propertyRecord40);
    org.neo4j.internal.id.IdSequence idSequence43 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext44 = null;
    propertyRecordFormat34.prepare(propertyRecord40, 0, idSequence43, cursorContext44);
    long long46 = propertyRecordFormat32.getNextRecordReference(propertyRecord40);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat47 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader48 = null;
    int int49 = propertyRecordFormat47.getRecordSize(storeHeader48);
    int int52 = propertyRecordFormat47.getPageSize((int) (byte) -1, 128);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat53 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long54 = propertyOneByteHeaderRecordFormat53.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord55 = propertyOneByteHeaderRecordFormat53.newRecord();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord56 = propertyOneByteHeaderRecordFormat53.newRecord();
    long long57 = propertyRecordFormat47.getNextRecordReference(propertyRecord56);
    long long58 = propertyRecordFormat32.getNextRecordReference(propertyRecord56);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat59 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long60 = propertyOneByteHeaderRecordFormat59.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat61 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat62 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord63 = propertyRecordFormat62.newRecord();
    long long64 = propertyOneByteHeaderRecordFormat61.getNextRecordReference(propertyRecord63);
    long long65 = propertyOneByteHeaderRecordFormat59.getNextRecordReference(propertyRecord63);
    long long66 = propertyRecordFormat32.getNextRecordReference(propertyRecord63);
    long long67 = propertyOneByteHeaderRecordFormat23.getNextRecordReference(propertyRecord63);
    org.neo4j.io.pagecache.PageCursor pageCursor68 = null;
    try {
      propertyOneByteHeaderRecordFormat0.write(propertyRecord63, pageCursor68, 1, 52);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(propertyRecord2);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 48 + "'", int5 == 48);
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1125899906842623L + "'",
        long7 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord10);
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord20);
    org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1125899906842623L + "'",
        long24 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord25);
    org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1125899906842623L + "'",
        long27 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord28);
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
    org.junit.Assert.assertTrue("'" + int31 + "' != '" + 48 + "'", int31 == 48);
    org.junit.Assert.assertNotNull(propertyRecord33);
    org.junit.Assert.assertTrue("'" + int36 + "' != '" + 48 + "'", int36 == 48);
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1125899906842623L + "'",
        long37 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord40);
    org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
    org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
    org.junit.Assert.assertTrue("'" + int49 + "' != '" + 48 + "'", int49 == 48);
    org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1125899906842623L + "'",
        long54 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord55);
    org.junit.Assert.assertNotNull(propertyRecord56);
    org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
    org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-1L) + "'", long58 == (-1L));
    org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1125899906842623L + "'",
        long60 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord63);
    org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-1L) + "'", long64 == (-1L));
    org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
    org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
    org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-1L) + "'", long67 == (-1L));
  }

  @Test
  public void test0806() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0806");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v306_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat2 = v306_0.schema();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat3 = v306_0.relationshipGroup();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat2);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat3);
  }

  @Test
  public void test0807() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0807");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord1 = null;
    long long2 = nodeRecordFormat0.getNextRecordReference(nodeRecord1);
    int int3 = nodeRecordFormat0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader4 = null;
    int int5 = nodeRecordFormat0.getRecordSize(storeHeader4);
    int int8 = nodeRecordFormat0.getPageSize((int) '4', (int) (short) 1);
    int int9 = nodeRecordFormat0.getRecordHeaderSize();
    org.neo4j.io.pagecache.PageCursor pageCursor10 = null;
    try {
      boolean boolean11 = nodeRecordFormat0.isInUse(pageCursor10);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
  }

  @Test
  public void test0808() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0808");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        35);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord3 = relationshipRecordFormat2.newRecord();
    int int4 = relationshipRecordFormat2.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat6 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord7 = relationshipRecordFormat6.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord8 = relationshipRecordFormat6.newRecord();
    org.neo4j.internal.id.IdSequence idSequence10 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext11 = null;
    relationshipRecordFormat5.prepare(relationshipRecord8, 100, idSequence10, cursorContext11);
    long long13 = relationshipRecordFormat2.getNextRecordReference(relationshipRecord8);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat14 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord16 = relationshipRecordFormat15.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord17 = relationshipRecordFormat15.newRecord();
    org.neo4j.internal.id.IdSequence idSequence19 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext20 = null;
    relationshipRecordFormat14.prepare(relationshipRecord17, 100, idSequence19, cursorContext20);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat23 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord24 = relationshipHighLimitRecordFormat23.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat26 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord27 = relationshipHighLimitRecordFormat26.newRecord();
    org.neo4j.internal.id.IdSequence idSequence29 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext30 = null;
    relationshipHighLimitRecordFormat23.prepare(relationshipRecord27, (int) (short) 1, idSequence29,
        cursorContext30);
    org.neo4j.internal.id.IdSequence idSequence33 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext34 = null;
    relationshipRecordFormat14.prepare(relationshipRecord27, 24, idSequence33, cursorContext34);
    long long36 = relationshipRecordFormat2.getNextRecordReference(relationshipRecord27);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat38 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord39 = relationshipHighLimitRecordFormat38.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat41 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord42 = relationshipHighLimitRecordFormat41.newRecord();
    org.neo4j.internal.id.IdSequence idSequence44 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext45 = null;
    relationshipHighLimitRecordFormat38.prepare(relationshipRecord42, (int) (short) 1, idSequence44,
        cursorContext45);
    org.neo4j.internal.id.IdSequence idSequence48 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext49 = null;
    relationshipRecordFormat2.prepare(relationshipRecord42, 12, idSequence48, cursorContext49);
    boolean boolean51 = nodeHighLimitRecordFormat1.equals((java.lang.Object) cursorContext49);
    org.junit.Assert.assertNotNull(relationshipRecord3);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord7);
    org.junit.Assert.assertNotNull(relationshipRecord8);
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord16);
    org.junit.Assert.assertNotNull(relationshipRecord17);
    org.junit.Assert.assertNotNull(relationshipRecord24);
    org.junit.Assert.assertNotNull(relationshipRecord27);
    org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord39);
    org.junit.Assert.assertNotNull(relationshipRecord42);
    org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
  }

  @Test
  public void test0809() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0809");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord1 = null;
    long long2 = relationshipGroupHighLimitRecordFormat0.getNextRecordReference(
        relationshipGroupRecord1);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord3 = relationshipGroupHighLimitRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader5 = null;
    int int6 = relationshipGroupRecordFormat4.getRecordSize(storeHeader5);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long8 = relationshipGroupHighLimitRecordFormat7.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat9 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord10 = null;
    long long11 = relationshipGroupHighLimitRecordFormat9.getNextRecordReference(
        relationshipGroupRecord10);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord12 = relationshipGroupHighLimitRecordFormat9.newRecord();
    org.neo4j.internal.id.IdSequence idSequence14 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext15 = null;
    relationshipGroupHighLimitRecordFormat7.prepare(relationshipGroupRecord12, (int) (byte) 1,
        idSequence14, cursorContext15);
    org.neo4j.internal.id.IdSequence idSequence18 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext19 = null;
    relationshipGroupRecordFormat4.prepare(relationshipGroupRecord12, 0, idSequence18,
        cursorContext19);
    org.neo4j.internal.id.IdSequence idSequence22 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext23 = null;
    relationshipGroupHighLimitRecordFormat0.prepare(relationshipGroupRecord12, (int) '4',
        idSequence22, cursorContext23);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat25 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long26 = relationshipGroupHighLimitRecordFormat25.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat27 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord28 = null;
    long long29 = relationshipGroupHighLimitRecordFormat27.getNextRecordReference(
        relationshipGroupRecord28);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord30 = relationshipGroupHighLimitRecordFormat27.newRecord();
    org.neo4j.internal.id.IdSequence idSequence32 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext33 = null;
    relationshipGroupHighLimitRecordFormat25.prepare(relationshipGroupRecord30, (int) (byte) 1,
        idSequence32, cursorContext33);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat35 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord36 = null;
    long long37 = relationshipGroupHighLimitRecordFormat35.getNextRecordReference(
        relationshipGroupRecord36);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord38 = relationshipGroupHighLimitRecordFormat35.newRecord();
    org.neo4j.internal.id.IdSequence idSequence40 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext41 = null;
    relationshipGroupHighLimitRecordFormat25.prepare(relationshipGroupRecord38, 0, idSequence40,
        cursorContext41);
    org.neo4j.io.pagecache.PageCursor pageCursor43 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad44 = null;
    try {
      relationshipGroupHighLimitRecordFormat0.read(relationshipGroupRecord38, pageCursor43,
          recordLoad44, 24, 96);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord3);
    org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
    org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1125899906842623L + "'",
        long8 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord12);
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1125899906842623L + "'",
        long26 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord30);
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord38);
  }

  @Test
  public void test0810() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0810");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.storageengine.api.format.Capability capability1 = null;
    boolean boolean2 = v310_0.hasCapability(capability1);
    int int3 = v310_0.generation();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat4 = v310_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat5 = v310_0.relationshipGroup();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat4);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat5);
  }

  @Test
  public void test0811() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0811");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat1 = v320_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat2 = v320_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat3 = v320_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.MetaDataRecord> metaDataRecordRecordFormat4 = v320_0.metaData();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat5 = v320_0.node();
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat1);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat2);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat3);
    org.junit.Assert.assertNotNull(metaDataRecordRecordFormat4);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat5);
  }

  @Test
  public void test0812() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0812");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat1 = v310_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat2 = v310_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat3 = v310_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat4 = v310_0.dynamic();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat1);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat3);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat4);
  }

  @Test
  public void test0813() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0813");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.FactoryHighLimitRecordFormatsImpl factoryHighLimitRecordFormatsImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.FactoryHighLimitRecordFormatsImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats1 = factoryHighLimitRecordFormatsImpl0.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats2 = factoryHighLimitRecordFormatsImpl0.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats3 = factoryHighLimitRecordFormatsImpl0.newInstance();
    org.junit.Assert.assertNotNull(recordFormats1);
    org.junit.Assert.assertNotNull(recordFormats2);
    org.junit.Assert.assertNotNull(recordFormats3);
  }

  @Test
  public void test0814() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0814");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod(31L,
        (long) (short) 10);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 31L + "'", long2 == 31L);
  }

  @Test
  public void test0815() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0815");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.FactoryHighLimitDefaultImpl factoryHighLimitDefaultImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.FactoryHighLimitDefaultImpl();
    java.lang.String str1 = factoryHighLimitDefaultImpl0.getName();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats2 = factoryHighLimitDefaultImpl0.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats3 = factoryHighLimitDefaultImpl0.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats4 = factoryHighLimitDefaultImpl0.newInstance();
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "high_limitV3_4_0" + "'", str1,
        "high_limitV3_4_0");
    org.junit.Assert.assertNotNull(recordFormats2);
    org.junit.Assert.assertNotNull(recordFormats3);
    org.junit.Assert.assertNotNull(recordFormats4);
  }

  @Test
  public void test0816() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0816");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod((long) 3,
        (long) 32);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 35L + "'", long2 == 35L);
  }

  @Test
  public void test0817() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0817");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long2 = relationshipGroupHighLimitRecordFormat1.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord4 = null;
    long long5 = relationshipGroupHighLimitRecordFormat3.getNextRecordReference(
        relationshipGroupRecord4);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord6 = relationshipGroupHighLimitRecordFormat3.newRecord();
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    relationshipGroupHighLimitRecordFormat1.prepare(relationshipGroupRecord6, (int) (byte) 1,
        idSequence8, cursorContext9);
    long long11 = relationshipGroupHighLimitRecordFormat0.getNextRecordReference(
        relationshipGroupRecord6);
    org.neo4j.io.pagecache.PageCursor pageCursor12 = null;
    try {
      boolean boolean13 = relationshipGroupHighLimitRecordFormat0.isInUse(pageCursor12);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1125899906842623L + "'",
        long2 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord6);
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
  }

  @Test
  public void test0818() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0818");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = propertyRecordFormat0.getRecordSize(storeHeader1);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader3 = null;
    int int4 = propertyRecordFormat0.getRecordSize(storeHeader3);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl5 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean7 = recordFormatDynamicRecordImpl5.equals((java.lang.Object) 100.0f);
    int int10 = recordFormatDynamicRecordImpl5.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord11 = recordFormatDynamicRecordImpl5.newRecord();
    int int14 = recordFormatDynamicRecordImpl5.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord15 = recordFormatDynamicRecordImpl5.newRecord();
    int int18 = recordFormatDynamicRecordImpl5.getPageSize((int) '4', (int) (short) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_19 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat20 = v320_19.relationship();
    boolean boolean21 = recordFormatDynamicRecordImpl5.equals((java.lang.Object) v320_19);
    boolean boolean22 = propertyRecordFormat0.equals(
        (java.lang.Object) recordFormatDynamicRecordImpl5);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl23 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean25 = recordFormatDynamicRecordImpl23.equals((java.lang.Object) 100.0f);
    int int28 = recordFormatDynamicRecordImpl23.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord29 = recordFormatDynamicRecordImpl23.newRecord();
    int int32 = recordFormatDynamicRecordImpl23.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord33 = recordFormatDynamicRecordImpl23.newRecord();
    int int36 = recordFormatDynamicRecordImpl23.getPageSize((int) '4', (int) (short) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_37 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat38 = v320_37.relationship();
    boolean boolean39 = recordFormatDynamicRecordImpl23.equals((java.lang.Object) v320_37);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord40 = recordFormatDynamicRecordImpl23.newRecord();
    long long41 = recordFormatDynamicRecordImpl5.getNextRecordReference(dynamicRecord40);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 48 + "'", int4 == 48);
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord11);
    org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord15);
    org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat20);
    org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    org.junit.Assert.assertTrue("'" + int28 + "' != '" + 16 + "'", int28 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord29);
    org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord33);
    org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat38);
    org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    org.junit.Assert.assertNotNull(dynamicRecord40);
    org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
  }

  @Test
  public void test0819() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0819");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v310_0.relationship();
    java.lang.String str2 = v310_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat3 = v310_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat4 = v310_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat5 = v310_0.relationshipGroup();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_1_0" + "'", str2,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat3);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat4);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat5);
  }

  @Test
  public void test0820() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0820");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord2 = relationshipHighLimitRecordFormat1.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord5 = relationshipHighLimitRecordFormat4.newRecord();
    org.neo4j.internal.id.IdSequence idSequence7 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext8 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord5, (int) (short) 1, idSequence7,
        cursorContext8);
    int int10 = relationshipHighLimitRecordFormat1.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord11 = relationshipHighLimitRecordFormat1.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat13 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat16 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord17 = relationshipRecordFormat16.newRecord();
    long long18 = relationshipHighLimitRecordFormat15.getNextRecordReference(relationshipRecord17);
    org.neo4j.internal.id.IdSequence idSequence20 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext21 = null;
    relationshipHighLimitRecordFormat13.prepare(relationshipRecord17, (int) (byte) 10, idSequence20,
        cursorContext21);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat24 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord25 = relationshipHighLimitRecordFormat24.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat27 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord28 = relationshipHighLimitRecordFormat27.newRecord();
    org.neo4j.internal.id.IdSequence idSequence30 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext31 = null;
    relationshipHighLimitRecordFormat24.prepare(relationshipRecord28, (int) (short) 1, idSequence30,
        cursorContext31);
    long long33 = relationshipHighLimitRecordFormat13.getNextRecordReference(relationshipRecord28);
    org.neo4j.io.pagecache.PageCursor pageCursor34 = null;
    try {
      relationshipHighLimitRecordFormat1.write(relationshipRecord28, pageCursor34, 99,
          (int) (short) 1);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(relationshipRecord2);
    org.junit.Assert.assertNotNull(relationshipRecord5);
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord11);
    org.junit.Assert.assertNotNull(relationshipRecord17);
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord25);
    org.junit.Assert.assertNotNull(relationshipRecord28);
    org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
  }

  @Test
  public void test0821() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0821");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord1 = relationshipRecordFormat0.newRecord();
    int int2 = relationshipRecordFormat0.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord5 = relationshipRecordFormat4.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord6 = relationshipRecordFormat4.newRecord();
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    relationshipRecordFormat3.prepare(relationshipRecord6, 100, idSequence8, cursorContext9);
    long long11 = relationshipRecordFormat0.getNextRecordReference(relationshipRecord6);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord13 = relationshipRecordFormat12.newRecord();
    int int14 = relationshipRecordFormat12.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat16 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord17 = relationshipRecordFormat16.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord18 = relationshipRecordFormat16.newRecord();
    org.neo4j.internal.id.IdSequence idSequence20 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext21 = null;
    relationshipRecordFormat15.prepare(relationshipRecord18, 100, idSequence20, cursorContext21);
    long long23 = relationshipRecordFormat12.getNextRecordReference(relationshipRecord18);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat24 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat25 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord26 = relationshipRecordFormat25.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord27 = relationshipRecordFormat25.newRecord();
    org.neo4j.internal.id.IdSequence idSequence29 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext30 = null;
    relationshipRecordFormat24.prepare(relationshipRecord27, 100, idSequence29, cursorContext30);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat33 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord34 = relationshipHighLimitRecordFormat33.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat36 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord37 = relationshipHighLimitRecordFormat36.newRecord();
    org.neo4j.internal.id.IdSequence idSequence39 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext40 = null;
    relationshipHighLimitRecordFormat33.prepare(relationshipRecord37, (int) (short) 1, idSequence39,
        cursorContext40);
    org.neo4j.internal.id.IdSequence idSequence43 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext44 = null;
    relationshipRecordFormat24.prepare(relationshipRecord37, 24, idSequence43, cursorContext44);
    long long46 = relationshipRecordFormat12.getNextRecordReference(relationshipRecord37);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat48 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord49 = relationshipHighLimitRecordFormat48.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat51 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord52 = relationshipHighLimitRecordFormat51.newRecord();
    org.neo4j.internal.id.IdSequence idSequence54 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext55 = null;
    relationshipHighLimitRecordFormat48.prepare(relationshipRecord52, (int) (short) 1, idSequence54,
        cursorContext55);
    org.neo4j.internal.id.IdSequence idSequence58 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext59 = null;
    relationshipRecordFormat12.prepare(relationshipRecord52, 12, idSequence58, cursorContext59);
    org.neo4j.internal.id.IdSequence idSequence62 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext63 = null;
    relationshipRecordFormat0.prepare(relationshipRecord52, 8, idSequence62, cursorContext63);
    long long65 = relationshipRecordFormat0.getMaxId();
    org.junit.Assert.assertNotNull(relationshipRecord1);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord5);
    org.junit.Assert.assertNotNull(relationshipRecord6);
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord13);
    org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord17);
    org.junit.Assert.assertNotNull(relationshipRecord18);
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord26);
    org.junit.Assert.assertNotNull(relationshipRecord27);
    org.junit.Assert.assertNotNull(relationshipRecord34);
    org.junit.Assert.assertNotNull(relationshipRecord37);
    org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord49);
    org.junit.Assert.assertNotNull(relationshipRecord52);
    org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1125899906842623L + "'",
        long65 == 1125899906842623L);
  }

  @Test
  public void test0822() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0822");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = propertyRecordFormat0.getRecordSize(storeHeader1);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader3 = null;
    int int4 = propertyRecordFormat0.getRecordSize(storeHeader3);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl5 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean7 = recordFormatDynamicRecordImpl5.equals((java.lang.Object) 100.0f);
    int int10 = recordFormatDynamicRecordImpl5.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord11 = recordFormatDynamicRecordImpl5.newRecord();
    int int14 = recordFormatDynamicRecordImpl5.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord15 = recordFormatDynamicRecordImpl5.newRecord();
    int int18 = recordFormatDynamicRecordImpl5.getPageSize((int) '4', (int) (short) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_19 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat20 = v320_19.relationship();
    boolean boolean21 = recordFormatDynamicRecordImpl5.equals((java.lang.Object) v320_19);
    boolean boolean22 = propertyRecordFormat0.equals(
        (java.lang.Object) recordFormatDynamicRecordImpl5);
    long long23 = propertyRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat24 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat25 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord26 = propertyRecordFormat25.newRecord();
    long long27 = propertyOneByteHeaderRecordFormat24.getNextRecordReference(propertyRecord26);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader28 = null;
    int int29 = propertyOneByteHeaderRecordFormat24.getRecordSize(storeHeader28);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat30 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long31 = propertyOneByteHeaderRecordFormat30.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat32 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat33 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord34 = propertyRecordFormat33.newRecord();
    long long35 = propertyOneByteHeaderRecordFormat32.getNextRecordReference(propertyRecord34);
    long long36 = propertyOneByteHeaderRecordFormat30.getNextRecordReference(propertyRecord34);
    org.neo4j.internal.id.IdSequence idSequence38 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext39 = null;
    propertyOneByteHeaderRecordFormat24.prepare(propertyRecord34, 64, idSequence38,
        cursorContext39);
    org.neo4j.internal.id.IdSequence idSequence42 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext43 = null;
    propertyRecordFormat0.prepare(propertyRecord34, 0, idSequence42, cursorContext43);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 48 + "'", int4 == 48);
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord11);
    org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord15);
    org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat20);
    org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1125899906842623L + "'",
        long23 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord26);
    org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
    org.junit.Assert.assertTrue("'" + int29 + "' != '" + 48 + "'", int29 == 48);
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1125899906842623L + "'",
        long31 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord34);
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
    org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
  }

  @Test
  public void test0823() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0823");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = propertyRecordFormat0.getRecordSize(storeHeader1);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader3 = null;
    int int4 = propertyRecordFormat0.getRecordSize(storeHeader3);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl5 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean7 = recordFormatDynamicRecordImpl5.equals((java.lang.Object) 100.0f);
    int int10 = recordFormatDynamicRecordImpl5.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord11 = recordFormatDynamicRecordImpl5.newRecord();
    int int14 = recordFormatDynamicRecordImpl5.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord15 = recordFormatDynamicRecordImpl5.newRecord();
    int int18 = recordFormatDynamicRecordImpl5.getPageSize((int) '4', (int) (short) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_19 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat20 = v320_19.relationship();
    boolean boolean21 = recordFormatDynamicRecordImpl5.equals((java.lang.Object) v320_19);
    boolean boolean22 = propertyRecordFormat0.equals(
        (java.lang.Object) recordFormatDynamicRecordImpl5);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl23 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean25 = recordFormatDynamicRecordImpl23.equals((java.lang.Object) 100.0f);
    int int28 = recordFormatDynamicRecordImpl23.getPageSize(16, (-1));
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl29 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    int int32 = recordFormatDynamicRecordImpl29.getPageSize(24, 8);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl33 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean35 = recordFormatDynamicRecordImpl33.equals((java.lang.Object) 100.0f);
    int int38 = recordFormatDynamicRecordImpl33.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord39 = recordFormatDynamicRecordImpl33.newRecord();
    long long40 = recordFormatDynamicRecordImpl29.getNextRecordReference(dynamicRecord39);
    org.neo4j.internal.id.IdSequence idSequence42 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext43 = null;
    recordFormatDynamicRecordImpl23.prepare(dynamicRecord39, 10, idSequence42, cursorContext43);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat45 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat46 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord47 = propertyRecordFormat46.newRecord();
    long long48 = propertyOneByteHeaderRecordFormat45.getNextRecordReference(propertyRecord47);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat49 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat50 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord51 = propertyRecordFormat50.newRecord();
    long long52 = propertyOneByteHeaderRecordFormat49.getNextRecordReference(propertyRecord51);
    long long53 = propertyOneByteHeaderRecordFormat45.getNextRecordReference(propertyRecord51);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat54 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long55 = propertyOneByteHeaderRecordFormat54.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord56 = propertyOneByteHeaderRecordFormat54.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat57 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long58 = propertyOneByteHeaderRecordFormat57.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord59 = propertyOneByteHeaderRecordFormat57.newRecord();
    long long60 = propertyOneByteHeaderRecordFormat54.getNextRecordReference(propertyRecord59);
    org.neo4j.internal.id.IdSequence idSequence62 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext63 = null;
    propertyOneByteHeaderRecordFormat45.prepare(propertyRecord59, (int) (byte) -1, idSequence62,
        cursorContext63);
    boolean boolean65 = recordFormatDynamicRecordImpl23.equals(
        (java.lang.Object) propertyOneByteHeaderRecordFormat45);
    int int68 = propertyOneByteHeaderRecordFormat45.getPageSize((int) 'a', 52);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord69 = propertyOneByteHeaderRecordFormat45.newRecord();
    org.neo4j.io.pagecache.PageCursor pageCursor70 = null;
    try {
      propertyRecordFormat0.write(propertyRecord69, pageCursor70, 8, (int) '#');
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 48 + "'", int4 == 48);
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord11);
    org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord15);
    org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat20);
    org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    org.junit.Assert.assertTrue("'" + int28 + "' != '" + 16 + "'", int28 == 16);
    org.junit.Assert.assertTrue("'" + int32 + "' != '" + 24 + "'", int32 == 24);
    org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    org.junit.Assert.assertTrue("'" + int38 + "' != '" + 16 + "'", int38 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord39);
    org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord47);
    org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord51);
    org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
    org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-1L) + "'", long53 == (-1L));
    org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1125899906842623L + "'",
        long55 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord56);
    org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1125899906842623L + "'",
        long58 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord59);
    org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-1L) + "'", long60 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    org.junit.Assert.assertTrue("'" + int68 + "' != '" + 52 + "'", int68 == 52);
    org.junit.Assert.assertNotNull(propertyRecord69);
  }

  @Test
  public void test0824() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0824");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = propertyRecordFormat0.getRecordSize(storeHeader1);
    long long3 = propertyRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum highLimitEncEnum4 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8;
    boolean boolean5 = propertyRecordFormat0.equals((java.lang.Object) highLimitEncEnum4);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord6 = null;
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    propertyRecordFormat0.prepare(propertyRecord6, 128, idSequence8, cursorContext9);
    long long11 = propertyRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader12 = null;
    int int13 = propertyRecordFormat0.getRecordSize(storeHeader12);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1125899906842623L + "'",
        long3 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + highLimitEncEnum4 + "' != '"
            + io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8 + "'",
        highLimitEncEnum4.equals(
            io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8));
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1125899906842623L + "'",
        long11 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 48 + "'", int13 == 48);
  }

  @Test
  public void test0825() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0825");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl6 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    int int9 = recordFormatDynamicRecordImpl6.getPageSize(24, 8);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl10 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean12 = recordFormatDynamicRecordImpl10.equals((java.lang.Object) 100.0f);
    int int15 = recordFormatDynamicRecordImpl10.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord16 = recordFormatDynamicRecordImpl10.newRecord();
    long long17 = recordFormatDynamicRecordImpl6.getNextRecordReference(dynamicRecord16);
    org.neo4j.internal.id.IdSequence idSequence19 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext20 = null;
    recordFormatDynamicRecordImpl0.prepare(dynamicRecord16, 10, idSequence19, cursorContext20);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat22 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat23 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord24 = propertyRecordFormat23.newRecord();
    long long25 = propertyOneByteHeaderRecordFormat22.getNextRecordReference(propertyRecord24);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat26 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat27 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord28 = propertyRecordFormat27.newRecord();
    long long29 = propertyOneByteHeaderRecordFormat26.getNextRecordReference(propertyRecord28);
    long long30 = propertyOneByteHeaderRecordFormat22.getNextRecordReference(propertyRecord28);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat31 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long32 = propertyOneByteHeaderRecordFormat31.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord33 = propertyOneByteHeaderRecordFormat31.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat34 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long35 = propertyOneByteHeaderRecordFormat34.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord36 = propertyOneByteHeaderRecordFormat34.newRecord();
    long long37 = propertyOneByteHeaderRecordFormat31.getNextRecordReference(propertyRecord36);
    org.neo4j.internal.id.IdSequence idSequence39 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext40 = null;
    propertyOneByteHeaderRecordFormat22.prepare(propertyRecord36, (int) (byte) -1, idSequence39,
        cursorContext40);
    boolean boolean42 = recordFormatDynamicRecordImpl0.equals(
        (java.lang.Object) propertyOneByteHeaderRecordFormat22);
    int int45 = propertyOneByteHeaderRecordFormat22.getPageSize((int) 'a', 52);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord46 = propertyOneByteHeaderRecordFormat22.newRecord();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord47 = null;
    org.neo4j.io.pagecache.PageCursor pageCursor48 = null;
    try {
      propertyOneByteHeaderRecordFormat22.write(propertyRecord47, pageCursor48, (int) (byte) -1,
          52);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 24 + "'", int9 == 24);
    org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    org.junit.Assert.assertTrue("'" + int15 + "' != '" + 16 + "'", int15 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord16);
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord24);
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord28);
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
    org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
    org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1125899906842623L + "'",
        long32 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord33);
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1125899906842623L + "'",
        long35 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord36);
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
    org.junit.Assert.assertNotNull(propertyRecord46);
  }

  @Test
  public void test0826() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0826");
    }
    java.util.function.Function<org.neo4j.kernel.impl.store.StoreHeader, java.lang.Integer> storeHeaderFunction1 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.fixedRecordSize(
        0);
    org.junit.Assert.assertNotNull(storeHeaderFunction1);
  }

  @Test
  public void test0827() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0827");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord1 = propertyRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader3 = null;
    int int4 = propertyRecordFormat2.getRecordSize(storeHeader3);
    long long5 = propertyRecordFormat2.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat6 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord8 = propertyRecordFormat7.newRecord();
    long long9 = propertyOneByteHeaderRecordFormat6.getNextRecordReference(propertyRecord8);
    org.neo4j.internal.id.IdSequence idSequence11 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext12 = null;
    propertyRecordFormat2.prepare(propertyRecord8, 0, idSequence11, cursorContext12);
    long long14 = propertyRecordFormat0.getNextRecordReference(propertyRecord8);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader16 = null;
    int int17 = propertyRecordFormat15.getRecordSize(storeHeader16);
    long long18 = propertyRecordFormat15.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum highLimitEncEnum19 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8;
    boolean boolean20 = propertyRecordFormat15.equals((java.lang.Object) highLimitEncEnum19);
    long long21 = propertyRecordFormat15.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord22 = propertyRecordFormat15.newRecord();
    org.neo4j.io.pagecache.PageCursor pageCursor23 = null;
    try {
      propertyRecordFormat0.write(propertyRecord22, pageCursor23, 50, 24);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(propertyRecord1);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 48 + "'", int4 == 48);
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1125899906842623L + "'",
        long5 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord8);
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    org.junit.Assert.assertTrue("'" + int17 + "' != '" + 48 + "'", int17 == 48);
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1125899906842623L + "'",
        long18 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + highLimitEncEnum19 + "' != '"
            + io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8 + "'",
        highLimitEncEnum19.equals(
            io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8));
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1125899906842623L + "'",
        long21 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord22);
  }

  @Test
  public void test0828() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0828");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v306_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat2 = v306_0.schema();
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_3 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat4 = v310_3.relationship();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType5 = null;
    boolean boolean6 = v306_0.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v310_3, capabilityType5);
    java.lang.String str7 = v310_3.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat8 = v310_3.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat9 = v310_3.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat10 = v310_3.propertyKeyToken();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat2);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat4);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "high_limitV3_1_0" + "'", str7,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat8);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat9);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat10);
  }

  @Test
  public void test0829() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0829");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v306_0.relationship();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray2 = v306_0.capabilities();
    java.lang.String str3 = v306_0.introductionVersion();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat4 = v306_0.labelToken();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily5 = v306_0.getFormatFamily();
    java.lang.String str6 = v306_0.name();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(capabilityArray2);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "3.0.6" + "'", str3, "3.0.6");
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat4);
    org.junit.Assert.assertTrue(
        "'" + formatFamily5 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily5.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "high_limitV3_0_6" + "'", str6,
        "high_limitV3_0_6");
  }

  @Test
  public void test0830() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0830");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats1 = highLimitFactoryDefaultImpl0.newInstance();
    java.lang.String str2 = highLimitFactoryDefaultImpl0.getName();
    java.lang.String str3 = highLimitFactoryDefaultImpl0.getName();
    org.junit.Assert.assertNotNull(recordFormats1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV4_0_0" + "'", str2,
        "high_limitV4_0_0");
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "high_limitV4_0_0" + "'", str3,
        "high_limitV4_0_0");
  }

  @Test
  public void test0831() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0831");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.FactoryHighLimitDefaultImpl factoryHighLimitDefaultImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.FactoryHighLimitDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats1 = factoryHighLimitDefaultImpl0.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats2 = factoryHighLimitDefaultImpl0.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats3 = factoryHighLimitDefaultImpl0.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats4 = factoryHighLimitDefaultImpl0.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats5 = factoryHighLimitDefaultImpl0.newInstance();
    org.junit.Assert.assertNotNull(recordFormats1);
    org.junit.Assert.assertNotNull(recordFormats2);
    org.junit.Assert.assertNotNull(recordFormats3);
    org.junit.Assert.assertNotNull(recordFormats4);
    org.junit.Assert.assertNotNull(recordFormats5);
  }

  @Test
  public void test0832() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0832");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord2 = propertyRecordFormat1.newRecord();
    long long3 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord2);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_4 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat5 = v300_4.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat6 = v300_4.relationshipTypeToken();
    java.lang.String str7 = v300_4.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat8 = v300_4.property();
    boolean boolean9 = propertyOneByteHeaderRecordFormat0.equals((java.lang.Object) v300_4);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat10 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long11 = propertyOneByteHeaderRecordFormat10.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat13 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord14 = propertyRecordFormat13.newRecord();
    long long15 = propertyOneByteHeaderRecordFormat12.getNextRecordReference(propertyRecord14);
    long long16 = propertyOneByteHeaderRecordFormat10.getNextRecordReference(propertyRecord14);
    org.neo4j.io.pagecache.PageCursor pageCursor17 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad18 = null;
    try {
      propertyOneByteHeaderRecordFormat0.read(propertyRecord14, pageCursor17, recordLoad18,
          (int) (short) 1, 128);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(propertyRecord2);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat5);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat6);
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "high_limitV3_0_0" + "'", str7,
        "high_limitV3_0_0");
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat8);
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1125899906842623L + "'",
        long11 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord14);
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
    org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
  }

  @Test
  public void test0833() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0833");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord1 = propertyRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader3 = null;
    int int4 = propertyRecordFormat2.getRecordSize(storeHeader3);
    long long5 = propertyRecordFormat2.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat6 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord8 = propertyRecordFormat7.newRecord();
    long long9 = propertyOneByteHeaderRecordFormat6.getNextRecordReference(propertyRecord8);
    org.neo4j.internal.id.IdSequence idSequence11 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext12 = null;
    propertyRecordFormat2.prepare(propertyRecord8, 0, idSequence11, cursorContext12);
    long long14 = propertyRecordFormat0.getNextRecordReference(propertyRecord8);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader16 = null;
    int int17 = propertyRecordFormat15.getRecordSize(storeHeader16);
    int int20 = propertyRecordFormat15.getPageSize((int) (byte) -1, 128);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat21 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long22 = propertyOneByteHeaderRecordFormat21.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord23 = propertyOneByteHeaderRecordFormat21.newRecord();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord24 = propertyOneByteHeaderRecordFormat21.newRecord();
    long long25 = propertyRecordFormat15.getNextRecordReference(propertyRecord24);
    long long26 = propertyRecordFormat0.getNextRecordReference(propertyRecord24);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader27 = null;
    int int28 = propertyRecordFormat0.getRecordSize(storeHeader27);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord29 = propertyRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat30 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat31 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord32 = propertyRecordFormat31.newRecord();
    long long33 = propertyOneByteHeaderRecordFormat30.getNextRecordReference(propertyRecord32);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat34 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat35 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord36 = propertyRecordFormat35.newRecord();
    long long37 = propertyOneByteHeaderRecordFormat34.getNextRecordReference(propertyRecord36);
    long long38 = propertyOneByteHeaderRecordFormat30.getNextRecordReference(propertyRecord36);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat39 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long40 = propertyOneByteHeaderRecordFormat39.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord41 = propertyOneByteHeaderRecordFormat39.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat42 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long43 = propertyOneByteHeaderRecordFormat42.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord44 = propertyOneByteHeaderRecordFormat42.newRecord();
    long long45 = propertyOneByteHeaderRecordFormat39.getNextRecordReference(propertyRecord44);
    org.neo4j.internal.id.IdSequence idSequence47 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext48 = null;
    propertyOneByteHeaderRecordFormat30.prepare(propertyRecord44, (int) (byte) -1, idSequence47,
        cursorContext48);
    org.neo4j.internal.id.IdSequence idSequence51 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext52 = null;
    propertyRecordFormat0.prepare(propertyRecord44, 0, idSequence51, cursorContext52);
    org.junit.Assert.assertNotNull(propertyRecord1);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 48 + "'", int4 == 48);
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1125899906842623L + "'",
        long5 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord8);
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    org.junit.Assert.assertTrue("'" + int17 + "' != '" + 48 + "'", int17 == 48);
    org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1125899906842623L + "'",
        long22 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord23);
    org.junit.Assert.assertNotNull(propertyRecord24);
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
    org.junit.Assert.assertTrue("'" + int28 + "' != '" + 48 + "'", int28 == 48);
    org.junit.Assert.assertNotNull(propertyRecord29);
    org.junit.Assert.assertNotNull(propertyRecord32);
    org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord36);
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
    org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
    org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1125899906842623L + "'",
        long40 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord41);
    org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1125899906842623L + "'",
        long43 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord44);
    org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
  }

  @Test
  public void test0834() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0834");
    }
    int int1 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.leg(54L);
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 3 + "'", int1 == 3);
  }

  @Test
  public void test0835() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0835");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    int int5 = relationshipGroupRecordFormat2.getPageSize((int) 'a', (int) (short) 100);
    long long6 = relationshipGroupRecordFormat2.getMaxId();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord7 = relationshipGroupRecordFormat2.newRecord();
    org.neo4j.io.pagecache.PageCursor pageCursor8 = null;
    try {
      relationshipGroupHighLimitRecordFormat1.write(relationshipGroupRecord7, pageCursor8, 0,
          (int) (byte) 100);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1125899906842623L + "'",
        long6 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipGroupRecord7);
  }

  @Test
  public void test0836() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0836");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = recordFormatDynamicRecordImpl0.newRecord();
    int int9 = recordFormatDynamicRecordImpl0.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord10 = recordFormatDynamicRecordImpl0.newRecord();
    int int13 = recordFormatDynamicRecordImpl0.getPageSize((int) '4', (int) (short) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_14 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat15 = v320_14.relationship();
    boolean boolean16 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) v320_14);
    int int19 = recordFormatDynamicRecordImpl0.getPageSize(16, 8);
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_20 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat21 = v310_20.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat22 = v310_20.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat23 = v310_20.labelToken();
    boolean boolean24 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) v310_20);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader25 = null;
    try {
      int int26 = recordFormatDynamicRecordImpl0.getRecordSize(storeHeader25);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord6);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord10);
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat15);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    org.junit.Assert.assertTrue("'" + int19 + "' != '" + 16 + "'", int19 == 16);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat21);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat22);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat23);
    org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
  }

  @Test
  public void test0837() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0837");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = propertyRecordFormat0.getRecordSize(storeHeader1);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader3 = null;
    int int4 = propertyRecordFormat0.getRecordSize(storeHeader3);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl5 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean7 = recordFormatDynamicRecordImpl5.equals((java.lang.Object) 100.0f);
    int int10 = recordFormatDynamicRecordImpl5.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord11 = recordFormatDynamicRecordImpl5.newRecord();
    int int14 = recordFormatDynamicRecordImpl5.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord15 = recordFormatDynamicRecordImpl5.newRecord();
    int int18 = recordFormatDynamicRecordImpl5.getPageSize((int) '4', (int) (short) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_19 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat20 = v320_19.relationship();
    boolean boolean21 = recordFormatDynamicRecordImpl5.equals((java.lang.Object) v320_19);
    boolean boolean22 = propertyRecordFormat0.equals(
        (java.lang.Object) recordFormatDynamicRecordImpl5);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat23 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader24 = null;
    int int25 = propertyRecordFormat23.getRecordSize(storeHeader24);
    long long26 = propertyRecordFormat23.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum highLimitEncEnum27 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8;
    boolean boolean28 = propertyRecordFormat23.equals((java.lang.Object) highLimitEncEnum27);
    long long29 = propertyRecordFormat23.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord30 = propertyRecordFormat23.newRecord();
    org.neo4j.io.pagecache.PageCursor pageCursor31 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad32 = null;
    try {
      propertyRecordFormat0.read(propertyRecord30, pageCursor31, recordLoad32, (int) (short) 0, 52);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 48 + "'", int4 == 48);
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord11);
    org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord15);
    org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat20);
    org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    org.junit.Assert.assertTrue("'" + int25 + "' != '" + 48 + "'", int25 == 48);
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1125899906842623L + "'",
        long26 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + highLimitEncEnum27 + "' != '"
            + io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8 + "'",
        highLimitEncEnum27.equals(
            io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8));
    org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1125899906842623L + "'",
        long29 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord30);
  }

  @Test
  public void test0838() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0838");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord1 = null;
    long long2 = nodeRecordFormat0.getNextRecordReference(nodeRecord1);
    int int3 = nodeRecordFormat0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader4 = null;
    int int5 = nodeRecordFormat0.getRecordSize(storeHeader4);
    int int8 = nodeRecordFormat0.getPageSize((int) '4', (int) (short) 1);
    int int9 = nodeRecordFormat0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord10 = null;
    try {
      int int11 = nodeRecordFormat0.rerdtlgForRE(nodeRecord10);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
  }

  @Test
  public void test0839() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0839");
    }
    long long2 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.torete(31L,
        0L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-31L) + "'", long2 == (-31L));
  }

  @Test
  public void test0840() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0840");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        2);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord3 = relationshipGroupHighLimitRecordFormat2.newRecord();
    org.neo4j.internal.id.IdSequence idSequence5 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext6 = null;
    relationshipGroupHighLimitRecordFormat0.prepare(relationshipGroupRecord3, 10, idSequence5,
        cursorContext6);
    org.junit.Assert.assertNotNull(relationshipGroupRecord3);
  }

  @Test
  public void test0841() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0841");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_2 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat3 = v306_2.node();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily4 = v306_2.getFormatFamily();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily5 = v306_2.getFormatFamily();
    boolean boolean6 = nodeHighLimitRecordFormat1.equals((java.lang.Object) v306_2);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat8 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 1);
    int int11 = nodeHighLimitRecordFormat8.getPageSize(48, (int) '#');
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord12 = nodeHighLimitRecordFormat8.newRecord();
    org.neo4j.io.pagecache.PageCursor pageCursor13 = null;
    try {
      nodeHighLimitRecordFormat1.write(nodeRecord12, pageCursor13, 24, (int) (short) 100);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat3);
    org.junit.Assert.assertTrue(
        "'" + formatFamily4 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily4.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertTrue(
        "'" + formatFamily5 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily5.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
    org.junit.Assert.assertNotNull(nodeRecord12);
  }

  @Test
  public void test0842() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0842");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = recordFormatDynamicRecordImpl0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl7 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean9 = recordFormatDynamicRecordImpl7.equals((java.lang.Object) 100.0f);
    int int12 = recordFormatDynamicRecordImpl7.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord13 = recordFormatDynamicRecordImpl7.newRecord();
    long long14 = recordFormatDynamicRecordImpl0.getNextRecordReference(dynamicRecord13);
    int int15 = recordFormatDynamicRecordImpl0.getRecordHeaderSize();
    int int16 = recordFormatDynamicRecordImpl0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord17 = null;
    org.neo4j.internal.id.IdSequence idSequence19 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext20 = null;
    recordFormatDynamicRecordImpl0.prepare(dynamicRecord17, (int) (byte) 100, idSequence19,
        cursorContext20);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl22 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean24 = recordFormatDynamicRecordImpl22.equals((java.lang.Object) 100.0f);
    int int27 = recordFormatDynamicRecordImpl22.getPageSize(16, (-1));
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl28 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    int int31 = recordFormatDynamicRecordImpl28.getPageSize(24, 8);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl32 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean34 = recordFormatDynamicRecordImpl32.equals((java.lang.Object) 100.0f);
    int int37 = recordFormatDynamicRecordImpl32.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord38 = recordFormatDynamicRecordImpl32.newRecord();
    long long39 = recordFormatDynamicRecordImpl28.getNextRecordReference(dynamicRecord38);
    org.neo4j.internal.id.IdSequence idSequence41 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext42 = null;
    recordFormatDynamicRecordImpl22.prepare(dynamicRecord38, 10, idSequence41, cursorContext42);
    org.neo4j.internal.id.IdSequence idSequence45 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext46 = null;
    recordFormatDynamicRecordImpl0.prepare(dynamicRecord38, 12, idSequence45, cursorContext46);
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_48 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat49 = v320_48.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat50 = v320_48.labelToken();
    boolean boolean51 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) v320_48);
    org.neo4j.storageengine.api.format.Capability capability52 = null;
    boolean boolean53 = v320_48.hasCapability(capability52);
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord6);
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 16 + "'", int12 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord13);
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    org.junit.Assert.assertTrue("'" + int15 + "' != '" + 12 + "'", int15 == 12);
    org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
    org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    org.junit.Assert.assertTrue("'" + int27 + "' != '" + 16 + "'", int27 == 16);
    org.junit.Assert.assertTrue("'" + int31 + "' != '" + 24 + "'", int31 == 24);
    org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    org.junit.Assert.assertTrue("'" + int37 + "' != '" + 16 + "'", int37 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord38);
    org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat49);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat50);
    org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
  }

  @Test
  public void test0843() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0843");
    }
    java.util.function.Function<org.neo4j.kernel.impl.store.StoreHeader, java.lang.Integer> storeHeaderFunction1 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.fixedRecordSize(
        100);
    org.junit.Assert.assertNotNull(storeHeaderFunction1);
  }

  @Test
  public void test0844() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0844");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord1 = propertyRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader3 = null;
    int int4 = propertyRecordFormat2.getRecordSize(storeHeader3);
    long long5 = propertyRecordFormat2.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat6 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord8 = propertyRecordFormat7.newRecord();
    long long9 = propertyOneByteHeaderRecordFormat6.getNextRecordReference(propertyRecord8);
    org.neo4j.internal.id.IdSequence idSequence11 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext12 = null;
    propertyRecordFormat2.prepare(propertyRecord8, 0, idSequence11, cursorContext12);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat14 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader15 = null;
    int int16 = propertyRecordFormat14.getRecordSize(storeHeader15);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl17 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats18 = highLimitFactoryDefaultImpl17.newInstance();
    boolean boolean19 = propertyRecordFormat14.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl17);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat21 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean22 = propertyRecordFormat14.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord23 = null;
    org.neo4j.internal.id.IdSequence idSequence25 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext26 = null;
    propertyRecordFormat14.prepare(propertyRecord23, (int) (short) 0, idSequence25,
        cursorContext26);
    boolean boolean29 = propertyRecordFormat14.equals((java.lang.Object) "3.0.6");
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat30 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader31 = null;
    int int32 = propertyRecordFormat30.getRecordSize(storeHeader31);
    int int35 = propertyRecordFormat30.getPageSize((int) (byte) -1, 128);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat36 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long37 = propertyOneByteHeaderRecordFormat36.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord38 = propertyOneByteHeaderRecordFormat36.newRecord();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord39 = propertyOneByteHeaderRecordFormat36.newRecord();
    long long40 = propertyRecordFormat30.getNextRecordReference(propertyRecord39);
    long long41 = propertyRecordFormat14.getNextRecordReference(propertyRecord39);
    long long42 = propertyRecordFormat2.getNextRecordReference(propertyRecord39);
    long long43 = propertyRecordFormat0.getNextRecordReference(propertyRecord39);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat44 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat45 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord46 = propertyRecordFormat45.newRecord();
    long long47 = propertyOneByteHeaderRecordFormat44.getNextRecordReference(propertyRecord46);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader48 = null;
    int int49 = propertyOneByteHeaderRecordFormat44.getRecordSize(storeHeader48);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat50 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long51 = propertyOneByteHeaderRecordFormat50.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat52 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat53 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord54 = propertyRecordFormat53.newRecord();
    long long55 = propertyOneByteHeaderRecordFormat52.getNextRecordReference(propertyRecord54);
    long long56 = propertyOneByteHeaderRecordFormat50.getNextRecordReference(propertyRecord54);
    org.neo4j.internal.id.IdSequence idSequence58 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext59 = null;
    propertyOneByteHeaderRecordFormat44.prepare(propertyRecord54, 64, idSequence58,
        cursorContext59);
    org.neo4j.io.pagecache.PageCursor pageCursor61 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad62 = null;
    try {
      propertyRecordFormat0.read(propertyRecord54, pageCursor61, recordLoad62, (int) '4', 30);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(propertyRecord1);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 48 + "'", int4 == 48);
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1125899906842623L + "'",
        long5 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord8);
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    org.junit.Assert.assertTrue("'" + int16 + "' != '" + 48 + "'", int16 == 48);
    org.junit.Assert.assertNotNull(recordFormats18);
    org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    org.junit.Assert.assertTrue("'" + int32 + "' != '" + 48 + "'", int32 == 48);
    org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1125899906842623L + "'",
        long37 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord38);
    org.junit.Assert.assertNotNull(propertyRecord39);
    org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
    org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
    org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
    org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord46);
    org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
    org.junit.Assert.assertTrue("'" + int49 + "' != '" + 48 + "'", int49 == 48);
    org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1125899906842623L + "'",
        long51 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord54);
    org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
    org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-1L) + "'", long56 == (-1L));
  }

  @Test
  public void test0845() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0845");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord5 = relationshipRecordFormat4.newRecord();
    long long6 = relationshipHighLimitRecordFormat3.getNextRecordReference(relationshipRecord5);
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord5, (int) (byte) 10, idSequence8,
        cursorContext9);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat11 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader12 = null;
    int int13 = relationshipRecordFormat11.getRecordSize(storeHeader12);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat16 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord17 = relationshipRecordFormat16.newRecord();
    long long18 = relationshipHighLimitRecordFormat15.getNextRecordReference(relationshipRecord17);
    org.neo4j.internal.id.IdSequence idSequence20 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext21 = null;
    relationshipRecordFormat11.prepare(relationshipRecord17, 3, idSequence20, cursorContext21);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord23 = relationshipRecordFormat11.newRecord();
    long long24 = relationshipHighLimitRecordFormat1.getNextRecordReference(relationshipRecord23);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader25 = null;
    int int26 = relationshipHighLimitRecordFormat1.getRecordSize(storeHeader25);
    org.junit.Assert.assertNotNull(relationshipRecord5);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 32 + "'", int13 == 32);
    org.junit.Assert.assertNotNull(relationshipRecord17);
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord23);
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
    org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
  }

  @Test
  public void test0846() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0846");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod((long) 2,
        (long) 0);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 2L + "'", long2 == 2L);
  }

  @Test
  public void test0847() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0847");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.storageengine.api.format.Capability capability1 = null;
    boolean boolean2 = v310_0.hasCapability(capability1);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat3 = v310_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat4 = v310_0.node();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray5 = v310_0.capabilities();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.MetaDataRecord> metaDataRecordRecordFormat6 = v310_0.metaData();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat3);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat4);
    org.junit.Assert.assertNotNull(capabilityArray5);
    org.junit.Assert.assertNotNull(metaDataRecordRecordFormat6);
  }

  @Test
  public void test0848() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0848");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        0);
    long long2 = relationshipGroupHighLimitRecordFormat1.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long4 = relationshipGroupHighLimitRecordFormat3.getMaxId();
    long long5 = relationshipGroupHighLimitRecordFormat3.getMaxId();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord6 = relationshipGroupHighLimitRecordFormat3.newRecord();
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    relationshipGroupHighLimitRecordFormat1.prepare(relationshipGroupRecord6, (int) (short) 0,
        idSequence8, cursorContext9);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader11 = null;
    int int12 = relationshipGroupHighLimitRecordFormat1.getRecordSize(storeHeader11);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat13 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord14 = null;
    long long15 = relationshipGroupHighLimitRecordFormat13.getNextRecordReference(
        relationshipGroupRecord14);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord16 = relationshipGroupHighLimitRecordFormat13.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat17 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader18 = null;
    int int19 = relationshipGroupRecordFormat17.getRecordSize(storeHeader18);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat20 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long21 = relationshipGroupHighLimitRecordFormat20.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat22 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord23 = null;
    long long24 = relationshipGroupHighLimitRecordFormat22.getNextRecordReference(
        relationshipGroupRecord23);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord25 = relationshipGroupHighLimitRecordFormat22.newRecord();
    org.neo4j.internal.id.IdSequence idSequence27 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext28 = null;
    relationshipGroupHighLimitRecordFormat20.prepare(relationshipGroupRecord25, (int) (byte) 1,
        idSequence27, cursorContext28);
    org.neo4j.internal.id.IdSequence idSequence31 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext32 = null;
    relationshipGroupRecordFormat17.prepare(relationshipGroupRecord25, 0, idSequence31,
        cursorContext32);
    org.neo4j.internal.id.IdSequence idSequence35 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext36 = null;
    relationshipGroupHighLimitRecordFormat13.prepare(relationshipGroupRecord25, (int) '4',
        idSequence35, cursorContext36);
    org.neo4j.internal.id.IdSequence idSequence39 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext40 = null;
    relationshipGroupHighLimitRecordFormat1.prepare(relationshipGroupRecord25, (int) (byte) 0,
        idSequence39, cursorContext40);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat43 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        0);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat44 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long45 = relationshipGroupHighLimitRecordFormat44.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat46 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord47 = null;
    long long48 = relationshipGroupHighLimitRecordFormat46.getNextRecordReference(
        relationshipGroupRecord47);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord49 = relationshipGroupHighLimitRecordFormat46.newRecord();
    org.neo4j.internal.id.IdSequence idSequence51 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext52 = null;
    relationshipGroupHighLimitRecordFormat44.prepare(relationshipGroupRecord49, (int) (byte) 1,
        idSequence51, cursorContext52);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat54 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long55 = relationshipGroupHighLimitRecordFormat54.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat56 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord57 = null;
    long long58 = relationshipGroupHighLimitRecordFormat56.getNextRecordReference(
        relationshipGroupRecord57);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord59 = relationshipGroupHighLimitRecordFormat56.newRecord();
    org.neo4j.internal.id.IdSequence idSequence61 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext62 = null;
    relationshipGroupHighLimitRecordFormat54.prepare(relationshipGroupRecord59, (int) (byte) 1,
        idSequence61, cursorContext62);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat64 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord65 = null;
    long long66 = relationshipGroupHighLimitRecordFormat64.getNextRecordReference(
        relationshipGroupRecord65);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord67 = relationshipGroupHighLimitRecordFormat64.newRecord();
    org.neo4j.internal.id.IdSequence idSequence69 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext70 = null;
    relationshipGroupHighLimitRecordFormat54.prepare(relationshipGroupRecord67, 0, idSequence69,
        cursorContext70);
    org.neo4j.internal.id.IdSequence idSequence73 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext74 = null;
    relationshipGroupHighLimitRecordFormat44.prepare(relationshipGroupRecord67, 128, idSequence73,
        cursorContext74);
    org.neo4j.internal.id.IdSequence idSequence77 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext78 = null;
    relationshipGroupHighLimitRecordFormat43.prepare(relationshipGroupRecord67, 16, idSequence77,
        cursorContext78);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat80 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader81 = null;
    int int82 = relationshipGroupRecordFormat80.getRecordSize(storeHeader81);
    long long83 = relationshipGroupRecordFormat80.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat84 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord85 = null;
    long long86 = relationshipGroupHighLimitRecordFormat84.getNextRecordReference(
        relationshipGroupRecord85);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord87 = relationshipGroupHighLimitRecordFormat84.newRecord();
    org.neo4j.internal.id.IdSequence idSequence89 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext90 = null;
    relationshipGroupRecordFormat80.prepare(relationshipGroupRecord87, 128, idSequence89,
        cursorContext90);
    long long92 = relationshipGroupHighLimitRecordFormat43.getNextRecordReference(
        relationshipGroupRecord87);
    org.neo4j.io.pagecache.PageCursor pageCursor93 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad94 = null;
    try {
      relationshipGroupHighLimitRecordFormat1.read(relationshipGroupRecord87, pageCursor93,
          recordLoad94, (-1), (int) (byte) 1);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1125899906842623L + "'",
        long2 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1125899906842623L + "'",
        long4 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1125899906842623L + "'",
        long5 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipGroupRecord6);
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord16);
    org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
    org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1125899906842623L + "'",
        long21 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord25);
    org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1125899906842623L + "'",
        long45 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord49);
    org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1125899906842623L + "'",
        long55 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-1L) + "'", long58 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord59);
    org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord67);
    org.junit.Assert.assertTrue("'" + int82 + "' != '" + 32 + "'", int82 == 32);
    org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1125899906842623L + "'",
        long83 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long86 + "' != '" + (-1L) + "'", long86 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord87);
    org.junit.Assert.assertTrue("'" + long92 + "' != '" + (-1L) + "'", long92 == (-1L));
  }

  @Test
  public void test0849() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0849");
    }
    int int1 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.leg((-39L));
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 3 + "'", int1 == 3);
  }

  @Test
  public void test0850() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0850");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    long long3 = recordFormatDynamicRecordImpl0.getMaxId();
    int int6 = recordFormatDynamicRecordImpl0.getPageSize(64, 48);
    int int9 = recordFormatDynamicRecordImpl0.getPageSize(10, (int) (short) 100);
    int int10 = recordFormatDynamicRecordImpl0.getRecordHeaderSize();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1125899906842623L + "'",
        long3 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int6 + "' != '" + 48 + "'", int6 == 48);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 12 + "'", int10 == 12);
  }

  @Test
  public void test0851() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0851");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        16);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader2 = null;
    int int3 = relationshipHighLimitRecordFormat1.getRecordSize(storeHeader2);
    org.neo4j.io.pagecache.PageCursor pageCursor4 = null;
    try {
      boolean boolean5 = relationshipHighLimitRecordFormat1.isInUse(pageCursor4);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
  }

  @Test
  public void test0852() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0852");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_2 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat3 = v300_2.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat4 = v300_2.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType5 = null;
    boolean boolean6 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_1,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_2, capabilityType5);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat7 = v300_2.relationship();
    boolean boolean8 = relationshipGroupRecordFormat0.equals(
        (java.lang.Object) relationshipRecordRecordFormat7);
    int int9 = relationshipGroupRecordFormat0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord10 = relationshipGroupRecordFormat0.newRecord();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat3);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat4);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat7);
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    org.junit.Assert.assertNotNull(relationshipGroupRecord10);
  }

  @Test
  public void test0853() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0853");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = propertyRecordFormat0.getRecordSize(storeHeader1);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl3 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats4 = highLimitFactoryDefaultImpl3.newInstance();
    boolean boolean5 = propertyRecordFormat0.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl3);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean8 = propertyRecordFormat0.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord9 = propertyRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat10 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat11 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord12 = propertyRecordFormat11.newRecord();
    long long13 = propertyOneByteHeaderRecordFormat10.getNextRecordReference(propertyRecord12);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat14 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long15 = propertyOneByteHeaderRecordFormat14.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat16 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat17 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord18 = propertyRecordFormat17.newRecord();
    long long19 = propertyOneByteHeaderRecordFormat16.getNextRecordReference(propertyRecord18);
    long long20 = propertyOneByteHeaderRecordFormat14.getNextRecordReference(propertyRecord18);
    long long21 = propertyOneByteHeaderRecordFormat10.getNextRecordReference(propertyRecord18);
    org.neo4j.io.pagecache.PageCursor pageCursor22 = null;
    try {
      propertyRecordFormat0.write(propertyRecord18, pageCursor22, 4, (int) 'a');
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    org.junit.Assert.assertNotNull(recordFormats4);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    org.junit.Assert.assertNotNull(propertyRecord9);
    org.junit.Assert.assertNotNull(propertyRecord12);
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1125899906842623L + "'",
        long15 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord18);
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
    org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
    org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
  }

  @Test
  public void test0854() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0854");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v310_0.relationship();
    java.lang.String str2 = v310_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat3 = v310_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat4 = v310_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat5 = v310_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat6 = v310_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat7 = v310_0.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat8 = v310_0.propertyKeyToken();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_1_0" + "'", str2,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat3);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat4);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat5);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat6);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat7);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat8);
  }

  @Test
  public void test0855() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0855");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.storageengine.api.format.Capability capability1 = null;
    boolean boolean2 = v310_0.hasCapability(capability1);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat3 = v310_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats4 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitRecordFormats.RCD_FMXS;
    org.neo4j.storageengine.api.format.CapabilityType capabilityType5 = null;
    boolean boolean6 = v310_0.hasCompatibleCapabilities(recordFormats4, capabilityType5);
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_7 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat8 = v306_7.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat9 = v306_7.labelToken();
    boolean boolean11 = v306_7.equals((java.lang.Object) 64);
    org.neo4j.storageengine.api.format.CapabilityType capabilityType12 = null;
    boolean boolean13 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        recordFormats4, (org.neo4j.kernel.impl.store.format.RecordFormats) v306_7,
        capabilityType12);
    int int14 = v306_7.generation();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat3);
    org.junit.Assert.assertNotNull(recordFormats4);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat8);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat9);
    org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
  }

  @Test
  public void test0856() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0856");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        (int) 'a');
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        0);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long5 = relationshipGroupHighLimitRecordFormat4.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat6 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord7 = null;
    long long8 = relationshipGroupHighLimitRecordFormat6.getNextRecordReference(
        relationshipGroupRecord7);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord9 = relationshipGroupHighLimitRecordFormat6.newRecord();
    org.neo4j.internal.id.IdSequence idSequence11 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext12 = null;
    relationshipGroupHighLimitRecordFormat4.prepare(relationshipGroupRecord9, (int) (byte) 1,
        idSequence11, cursorContext12);
    org.neo4j.internal.id.IdSequence idSequence15 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext16 = null;
    relationshipGroupHighLimitRecordFormat3.prepare(relationshipGroupRecord9, 10, idSequence15,
        cursorContext16);
    org.neo4j.io.pagecache.PageCursor pageCursor18 = null;
    try {
      relationshipGroupHighLimitRecordFormat1.write(relationshipGroupRecord9, pageCursor18,
          (int) (short) 100, 12);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1125899906842623L + "'",
        long5 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord9);
  }

  @Test
  public void test0857() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0857");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod((long) 32,
        (long) (short) 1);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 33L + "'", long2 == 33L);
  }

  @Test
  public void test0858() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0858");
    }
    org.neo4j.io.pagecache.PageCursor pageCursor1 = null;
    try {
      io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.enoForPa(96L,
          pageCursor1);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test0859() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0859");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.NodeRecordFormat nodeRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.NodeRecordFormat();
    long long1 = nodeRecordFormat0.getMaxId();
    int int2 = nodeRecordFormat0.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.NodeRecordFormat nodeRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.NodeRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord5 = null;
    long long6 = nodeRecordFormat4.getNextRecordReference(nodeRecord5);
    int int7 = nodeRecordFormat4.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader8 = null;
    int int9 = nodeRecordFormat4.getRecordSize(storeHeader8);
    int int12 = nodeRecordFormat4.getPageSize((int) '4', (int) (short) 1);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord13 = nodeRecordFormat4.newRecord();
    int int14 = nodeRecordFormat3.rerdtlgForRE(nodeRecord13);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord15 = nodeRecordFormat3.newRecord();
    int int16 = nodeRecordFormat0.rerdtlgForRE(nodeRecord15);
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16 + "'", int9 == 16);
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
    org.junit.Assert.assertNotNull(nodeRecord13);
    org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    org.junit.Assert.assertNotNull(nodeRecord15);
    org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
  }

  @Test
  public void test0860() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0860");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat1 = v310_0.labelToken();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily2 = v310_0.getFormatFamily();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat3 = v310_0.relationshipGroup();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat1);
    org.junit.Assert.assertTrue(
        "'" + formatFamily2 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily2.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat3);
  }

  @Test
  public void test0861() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0861");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl6 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    int int9 = recordFormatDynamicRecordImpl6.getPageSize(24, 8);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl10 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean12 = recordFormatDynamicRecordImpl10.equals((java.lang.Object) 100.0f);
    int int15 = recordFormatDynamicRecordImpl10.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord16 = recordFormatDynamicRecordImpl10.newRecord();
    long long17 = recordFormatDynamicRecordImpl6.getNextRecordReference(dynamicRecord16);
    org.neo4j.internal.id.IdSequence idSequence19 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext20 = null;
    recordFormatDynamicRecordImpl0.prepare(dynamicRecord16, 10, idSequence19, cursorContext20);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat22 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat23 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord24 = propertyRecordFormat23.newRecord();
    long long25 = propertyOneByteHeaderRecordFormat22.getNextRecordReference(propertyRecord24);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat26 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat27 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord28 = propertyRecordFormat27.newRecord();
    long long29 = propertyOneByteHeaderRecordFormat26.getNextRecordReference(propertyRecord28);
    long long30 = propertyOneByteHeaderRecordFormat22.getNextRecordReference(propertyRecord28);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat31 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long32 = propertyOneByteHeaderRecordFormat31.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord33 = propertyOneByteHeaderRecordFormat31.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat34 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long35 = propertyOneByteHeaderRecordFormat34.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord36 = propertyOneByteHeaderRecordFormat34.newRecord();
    long long37 = propertyOneByteHeaderRecordFormat31.getNextRecordReference(propertyRecord36);
    org.neo4j.internal.id.IdSequence idSequence39 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext40 = null;
    propertyOneByteHeaderRecordFormat22.prepare(propertyRecord36, (int) (byte) -1, idSequence39,
        cursorContext40);
    boolean boolean42 = recordFormatDynamicRecordImpl0.equals(
        (java.lang.Object) propertyOneByteHeaderRecordFormat22);
    int int43 = recordFormatDynamicRecordImpl0.getRecordHeaderSize();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 24 + "'", int9 == 24);
    org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    org.junit.Assert.assertTrue("'" + int15 + "' != '" + 16 + "'", int15 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord16);
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord24);
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord28);
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
    org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
    org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1125899906842623L + "'",
        long32 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord33);
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1125899906842623L + "'",
        long35 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord36);
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    org.junit.Assert.assertTrue("'" + int43 + "' != '" + 12 + "'", int43 == 12);
  }

  @Test
  public void test0862() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0862");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord5 = relationshipRecordFormat4.newRecord();
    long long6 = relationshipHighLimitRecordFormat3.getNextRecordReference(relationshipRecord5);
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord5, (int) (byte) 10, idSequence8,
        cursorContext9);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat11 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader12 = null;
    int int13 = relationshipRecordFormat11.getRecordSize(storeHeader12);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat16 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord17 = relationshipRecordFormat16.newRecord();
    long long18 = relationshipHighLimitRecordFormat15.getNextRecordReference(relationshipRecord17);
    org.neo4j.internal.id.IdSequence idSequence20 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext21 = null;
    relationshipRecordFormat11.prepare(relationshipRecord17, 3, idSequence20, cursorContext21);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord23 = relationshipRecordFormat11.newRecord();
    long long24 = relationshipHighLimitRecordFormat1.getNextRecordReference(relationshipRecord23);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat25 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord26 = relationshipRecordFormat25.newRecord();
    int int27 = relationshipRecordFormat25.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat28 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat29 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord30 = relationshipRecordFormat29.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord31 = relationshipRecordFormat29.newRecord();
    org.neo4j.internal.id.IdSequence idSequence33 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext34 = null;
    relationshipRecordFormat28.prepare(relationshipRecord31, 100, idSequence33, cursorContext34);
    long long36 = relationshipRecordFormat25.getNextRecordReference(relationshipRecord31);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader37 = null;
    int int38 = relationshipRecordFormat25.getRecordSize(storeHeader37);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord39 = relationshipRecordFormat25.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord40 = relationshipRecordFormat25.newRecord();
    org.neo4j.io.pagecache.PageCursor pageCursor41 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad42 = null;
    try {
      relationshipHighLimitRecordFormat1.read(relationshipRecord40, pageCursor41, recordLoad42,
          (int) (byte) -1, (int) '4');
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(relationshipRecord5);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 32 + "'", int13 == 32);
    org.junit.Assert.assertNotNull(relationshipRecord17);
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord23);
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord26);
    org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord30);
    org.junit.Assert.assertNotNull(relationshipRecord31);
    org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
    org.junit.Assert.assertTrue("'" + int38 + "' != '" + 32 + "'", int38 == 32);
    org.junit.Assert.assertNotNull(relationshipRecord39);
    org.junit.Assert.assertNotNull(relationshipRecord40);
  }

  @Test
  public void test0863() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0863");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = recordFormatDynamicRecordImpl0.newRecord();
    int int9 = recordFormatDynamicRecordImpl0.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord10 = recordFormatDynamicRecordImpl0.newRecord();
    long long11 = recordFormatDynamicRecordImpl0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl12 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean14 = recordFormatDynamicRecordImpl12.equals((java.lang.Object) 100.0f);
    int int17 = recordFormatDynamicRecordImpl12.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord18 = recordFormatDynamicRecordImpl12.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl19 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean21 = recordFormatDynamicRecordImpl19.equals((java.lang.Object) 100.0f);
    int int24 = recordFormatDynamicRecordImpl19.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord25 = recordFormatDynamicRecordImpl19.newRecord();
    long long26 = recordFormatDynamicRecordImpl12.getNextRecordReference(dynamicRecord25);
    org.neo4j.internal.id.IdSequence idSequence28 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext29 = null;
    recordFormatDynamicRecordImpl0.prepare(dynamicRecord25, 128, idSequence28, cursorContext29);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl31 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean33 = recordFormatDynamicRecordImpl31.equals((java.lang.Object) 100.0f);
    long long34 = recordFormatDynamicRecordImpl31.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl35 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean37 = recordFormatDynamicRecordImpl35.equals((java.lang.Object) 100.0f);
    int int40 = recordFormatDynamicRecordImpl35.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord41 = null;
    org.neo4j.internal.id.IdSequence idSequence43 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext44 = null;
    recordFormatDynamicRecordImpl35.prepare(dynamicRecord41, (int) (byte) -1, idSequence43,
        cursorContext44);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl46 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean48 = recordFormatDynamicRecordImpl46.equals((java.lang.Object) 100.0f);
    int int51 = recordFormatDynamicRecordImpl46.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord52 = recordFormatDynamicRecordImpl46.newRecord();
    long long53 = recordFormatDynamicRecordImpl35.getNextRecordReference(dynamicRecord52);
    org.neo4j.internal.id.IdSequence idSequence55 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext56 = null;
    recordFormatDynamicRecordImpl31.prepare(dynamicRecord52, (int) (short) 10, idSequence55,
        cursorContext56);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl58 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean60 = recordFormatDynamicRecordImpl58.equals((java.lang.Object) 100.0f);
    long long61 = recordFormatDynamicRecordImpl58.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl62 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean64 = recordFormatDynamicRecordImpl62.equals((java.lang.Object) 100.0f);
    int int67 = recordFormatDynamicRecordImpl62.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord68 = null;
    org.neo4j.internal.id.IdSequence idSequence70 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext71 = null;
    recordFormatDynamicRecordImpl62.prepare(dynamicRecord68, (int) (byte) -1, idSequence70,
        cursorContext71);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl73 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean75 = recordFormatDynamicRecordImpl73.equals((java.lang.Object) 100.0f);
    int int78 = recordFormatDynamicRecordImpl73.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord79 = recordFormatDynamicRecordImpl73.newRecord();
    long long80 = recordFormatDynamicRecordImpl62.getNextRecordReference(dynamicRecord79);
    org.neo4j.internal.id.IdSequence idSequence82 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext83 = null;
    recordFormatDynamicRecordImpl58.prepare(dynamicRecord79, (int) (short) 10, idSequence82,
        cursorContext83);
    long long85 = recordFormatDynamicRecordImpl31.getNextRecordReference(dynamicRecord79);
    org.neo4j.internal.id.IdSequence idSequence87 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext88 = null;
    recordFormatDynamicRecordImpl0.prepare(dynamicRecord79, (int) '#', idSequence87,
        cursorContext88);
    org.neo4j.io.pagecache.PageCursor pageCursor90 = null;
    try {
      boolean boolean91 = recordFormatDynamicRecordImpl0.isInUse(pageCursor90);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord6);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord10);
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1125899906842623L + "'",
        long11 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    org.junit.Assert.assertTrue("'" + int17 + "' != '" + 16 + "'", int17 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord18);
    org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    org.junit.Assert.assertTrue("'" + int24 + "' != '" + 16 + "'", int24 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord25);
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1125899906842623L + "'",
        long34 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    org.junit.Assert.assertTrue("'" + int40 + "' != '" + 16 + "'", int40 == 16);
    org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    org.junit.Assert.assertTrue("'" + int51 + "' != '" + 16 + "'", int51 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord52);
    org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-1L) + "'", long53 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1125899906842623L + "'",
        long61 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    org.junit.Assert.assertTrue("'" + int67 + "' != '" + 16 + "'", int67 == 16);
    org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    org.junit.Assert.assertTrue("'" + int78 + "' != '" + 16 + "'", int78 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord79);
    org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-1L) + "'", long80 == (-1L));
    org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-1L) + "'", long85 == (-1L));
  }

  @Test
  public void test0864() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0864");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        0);
    long long2 = relationshipGroupHighLimitRecordFormat1.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long5 = relationshipGroupHighLimitRecordFormat4.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat6 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord7 = null;
    long long8 = relationshipGroupHighLimitRecordFormat6.getNextRecordReference(
        relationshipGroupRecord7);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord9 = relationshipGroupHighLimitRecordFormat6.newRecord();
    org.neo4j.internal.id.IdSequence idSequence11 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext12 = null;
    relationshipGroupHighLimitRecordFormat4.prepare(relationshipGroupRecord9, (int) (byte) 1,
        idSequence11, cursorContext12);
    long long14 = relationshipGroupHighLimitRecordFormat3.getNextRecordReference(
        relationshipGroupRecord9);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long16 = relationshipGroupHighLimitRecordFormat15.getMaxId();
    long long17 = relationshipGroupHighLimitRecordFormat15.getMaxId();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord18 = relationshipGroupHighLimitRecordFormat15.newRecord();
    org.neo4j.internal.id.IdSequence idSequence20 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext21 = null;
    relationshipGroupHighLimitRecordFormat3.prepare(relationshipGroupRecord18, 3, idSequence20,
        cursorContext21);
    long long23 = relationshipGroupHighLimitRecordFormat1.getNextRecordReference(
        relationshipGroupRecord18);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord24 = relationshipGroupHighLimitRecordFormat1.newRecord();
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1125899906842623L + "'",
        long2 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1125899906842623L + "'",
        long5 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord9);
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1125899906842623L + "'",
        long16 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1125899906842623L + "'",
        long17 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipGroupRecord18);
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord24);
  }

  @Test
  public void test0865() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0865");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = propertyRecordFormat0.getRecordSize(storeHeader1);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl3 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats4 = highLimitFactoryDefaultImpl3.newInstance();
    boolean boolean5 = propertyRecordFormat0.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl3);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean8 = propertyRecordFormat0.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord9 = null;
    org.neo4j.internal.id.IdSequence idSequence11 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext12 = null;
    propertyRecordFormat0.prepare(propertyRecord9, (int) (short) 0, idSequence11, cursorContext12);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat14 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord15 = propertyRecordFormat14.newRecord();
    org.neo4j.internal.id.IdSequence idSequence17 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext18 = null;
    propertyRecordFormat0.prepare(propertyRecord15, 52, idSequence17, cursorContext18);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader20 = null;
    int int21 = propertyRecordFormat0.getRecordSize(storeHeader20);
    int int24 = propertyRecordFormat0.getPageSize((-1), (int) (short) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat25 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long26 = propertyOneByteHeaderRecordFormat25.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord27 = propertyOneByteHeaderRecordFormat25.newRecord();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord28 = propertyOneByteHeaderRecordFormat25.newRecord();
    int int31 = propertyOneByteHeaderRecordFormat25.getPageSize(1, 128);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat32 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long33 = propertyOneByteHeaderRecordFormat32.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat34 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat35 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord36 = propertyRecordFormat35.newRecord();
    long long37 = propertyOneByteHeaderRecordFormat34.getNextRecordReference(propertyRecord36);
    long long38 = propertyOneByteHeaderRecordFormat32.getNextRecordReference(propertyRecord36);
    int int41 = propertyOneByteHeaderRecordFormat32.getPageSize(64, (int) (short) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat42 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord43 = propertyRecordFormat42.newRecord();
    long long44 = propertyOneByteHeaderRecordFormat32.getNextRecordReference(propertyRecord43);
    long long45 = propertyOneByteHeaderRecordFormat25.getNextRecordReference(propertyRecord43);
    org.neo4j.io.pagecache.PageCursor pageCursor46 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad47 = null;
    try {
      propertyRecordFormat0.read(propertyRecord43, pageCursor46, recordLoad47, 0, 30);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    org.junit.Assert.assertNotNull(recordFormats4);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    org.junit.Assert.assertNotNull(propertyRecord15);
    org.junit.Assert.assertTrue("'" + int21 + "' != '" + 48 + "'", int21 == 48);
    org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1125899906842623L + "'",
        long26 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord27);
    org.junit.Assert.assertNotNull(propertyRecord28);
    org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1125899906842623L + "'",
        long33 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord36);
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
    org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
    org.junit.Assert.assertTrue("'" + int41 + "' != '" + 64 + "'", int41 == 64);
    org.junit.Assert.assertNotNull(propertyRecord43);
    org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
    org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
  }

  @Test
  public void test0866() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0866");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord2 = relationshipHighLimitRecordFormat1.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord5 = relationshipHighLimitRecordFormat4.newRecord();
    org.neo4j.internal.id.IdSequence idSequence7 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext8 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord5, (int) (short) 1, idSequence7,
        cursorContext8);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat11 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord12 = relationshipHighLimitRecordFormat11.newRecord();
    org.neo4j.internal.id.IdSequence idSequence14 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext15 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord12, (int) (short) 1, idSequence14,
        cursorContext15);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat17 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord18 = null;
    long long19 = nodeRecordFormat17.getNextRecordReference(nodeRecord18);
    int int20 = nodeRecordFormat17.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader21 = null;
    int int22 = nodeRecordFormat17.getRecordSize(storeHeader21);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader23 = null;
    int int24 = nodeRecordFormat17.getRecordSize(storeHeader23);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord25 = null;
    long long26 = nodeRecordFormat17.getNextRecordReference(nodeRecord25);
    boolean boolean27 = relationshipHighLimitRecordFormat1.equals(
        (java.lang.Object) nodeRecordFormat17);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat29 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord30 = relationshipHighLimitRecordFormat29.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat32 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord33 = relationshipHighLimitRecordFormat32.newRecord();
    org.neo4j.internal.id.IdSequence idSequence35 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext36 = null;
    relationshipHighLimitRecordFormat29.prepare(relationshipRecord33, (int) (short) 1, idSequence35,
        cursorContext36);
    int int38 = relationshipHighLimitRecordFormat29.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat40 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) '4');
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord41 = relationshipHighLimitRecordFormat40.newRecord();
    long long42 = relationshipHighLimitRecordFormat29.getNextRecordReference(relationshipRecord41);
    org.neo4j.io.pagecache.PageCursor pageCursor43 = null;
    try {
      relationshipHighLimitRecordFormat1.write(relationshipRecord41, pageCursor43, 35, 0);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(relationshipRecord2);
    org.junit.Assert.assertNotNull(relationshipRecord5);
    org.junit.Assert.assertNotNull(relationshipRecord12);
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
    org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    org.junit.Assert.assertTrue("'" + int22 + "' != '" + 16 + "'", int22 == 16);
    org.junit.Assert.assertTrue("'" + int24 + "' != '" + 16 + "'", int24 == 16);
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    org.junit.Assert.assertNotNull(relationshipRecord30);
    org.junit.Assert.assertNotNull(relationshipRecord33);
    org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord41);
    org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
  }

  @Test
  public void test0867() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0867");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.storageengine.api.format.Capability capability1 = null;
    boolean boolean2 = v310_0.hasCapability(capability1);
    int int3 = v310_0.generation();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily4 = v310_0.getFormatFamily();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat5 = v310_0.node();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily6 = v310_0.getFormatFamily();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
    org.junit.Assert.assertTrue(
        "'" + formatFamily4 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily4.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat5);
    org.junit.Assert.assertTrue(
        "'" + formatFamily6 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily6.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
  }

  @Test
  public void test0868() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0868");
    }
    org.neo4j.io.pagecache.PageCursor pageCursor1 = null;
    try {
      io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.enoForPa(254L,
          pageCursor1);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test0869() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0869");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long1 = propertyOneByteHeaderRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord2 = propertyOneByteHeaderRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long4 = propertyOneByteHeaderRecordFormat3.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord5 = propertyOneByteHeaderRecordFormat3.newRecord();
    long long6 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord5);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord8 = null;
    org.neo4j.internal.id.IdSequence idSequence10 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext11 = null;
    propertyRecordFormat7.prepare(propertyRecord8, (int) (short) -1, idSequence10, cursorContext11);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord13 = propertyRecordFormat7.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat14 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord16 = propertyRecordFormat15.newRecord();
    long long17 = propertyOneByteHeaderRecordFormat14.getNextRecordReference(propertyRecord16);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader18 = null;
    int int19 = propertyOneByteHeaderRecordFormat14.getRecordSize(storeHeader18);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat20 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long21 = propertyOneByteHeaderRecordFormat20.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat22 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat23 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord24 = propertyRecordFormat23.newRecord();
    long long25 = propertyOneByteHeaderRecordFormat22.getNextRecordReference(propertyRecord24);
    long long26 = propertyOneByteHeaderRecordFormat20.getNextRecordReference(propertyRecord24);
    org.neo4j.internal.id.IdSequence idSequence28 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext29 = null;
    propertyOneByteHeaderRecordFormat14.prepare(propertyRecord24, 64, idSequence28,
        cursorContext29);
    long long31 = propertyRecordFormat7.getNextRecordReference(propertyRecord24);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat32 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader33 = null;
    int int34 = propertyRecordFormat32.getRecordSize(storeHeader33);
    long long35 = propertyRecordFormat32.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum highLimitEncEnum36 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8;
    boolean boolean37 = propertyRecordFormat32.equals((java.lang.Object) highLimitEncEnum36);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord38 = null;
    org.neo4j.internal.id.IdSequence idSequence40 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext41 = null;
    propertyRecordFormat32.prepare(propertyRecord38, 128, idSequence40, cursorContext41);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat43 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat44 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord45 = propertyRecordFormat44.newRecord();
    long long46 = propertyOneByteHeaderRecordFormat43.getNextRecordReference(propertyRecord45);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat47 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat48 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord49 = propertyRecordFormat48.newRecord();
    long long50 = propertyOneByteHeaderRecordFormat47.getNextRecordReference(propertyRecord49);
    long long51 = propertyOneByteHeaderRecordFormat43.getNextRecordReference(propertyRecord49);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat52 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long53 = propertyOneByteHeaderRecordFormat52.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord54 = propertyOneByteHeaderRecordFormat52.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat55 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long56 = propertyOneByteHeaderRecordFormat55.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord57 = propertyOneByteHeaderRecordFormat55.newRecord();
    long long58 = propertyOneByteHeaderRecordFormat52.getNextRecordReference(propertyRecord57);
    org.neo4j.internal.id.IdSequence idSequence60 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext61 = null;
    propertyOneByteHeaderRecordFormat43.prepare(propertyRecord57, (int) (byte) -1, idSequence60,
        cursorContext61);
    long long63 = propertyRecordFormat32.getNextRecordReference(propertyRecord57);
    long long64 = propertyRecordFormat7.getNextRecordReference(propertyRecord57);
    org.neo4j.io.pagecache.PageCursor pageCursor65 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad66 = null;
    try {
      propertyOneByteHeaderRecordFormat0.read(propertyRecord57, pageCursor65, recordLoad66, (-1),
          (int) (byte) 0);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord2);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1125899906842623L + "'",
        long4 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord5);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord13);
    org.junit.Assert.assertNotNull(propertyRecord16);
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    org.junit.Assert.assertTrue("'" + int19 + "' != '" + 48 + "'", int19 == 48);
    org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1125899906842623L + "'",
        long21 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord24);
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
    org.junit.Assert.assertTrue("'" + int34 + "' != '" + 48 + "'", int34 == 48);
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1125899906842623L + "'",
        long35 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + highLimitEncEnum36 + "' != '"
            + io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8 + "'",
        highLimitEncEnum36.equals(
            io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8));
    org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    org.junit.Assert.assertNotNull(propertyRecord45);
    org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord49);
    org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
    org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
    org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1125899906842623L + "'",
        long53 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord54);
    org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1125899906842623L + "'",
        long56 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord57);
    org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-1L) + "'", long58 == (-1L));
    org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
    org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-1L) + "'", long64 == (-1L));
  }

  @Test
  public void test0870() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0870");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat1 = v310_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat2 = v310_0.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat3 = v310_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat4 = v310_0.relationshipGroup();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat5 = v310_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat6 = v310_0.labelToken();
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat1);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat3);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat4);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat5);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat6);
  }

  @Test
  public void test0871() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0871");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod(123L, 334L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 383L + "'", long2 == 383L);
  }

  @Test
  public void test0872() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0872");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long1 = propertyOneByteHeaderRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl2 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean4 = recordFormatDynamicRecordImpl2.equals((java.lang.Object) 100.0f);
    int int7 = recordFormatDynamicRecordImpl2.getPageSize(16, (-1));
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl8 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    int int11 = recordFormatDynamicRecordImpl8.getPageSize(24, 8);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl12 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean14 = recordFormatDynamicRecordImpl12.equals((java.lang.Object) 100.0f);
    int int17 = recordFormatDynamicRecordImpl12.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord18 = recordFormatDynamicRecordImpl12.newRecord();
    long long19 = recordFormatDynamicRecordImpl8.getNextRecordReference(dynamicRecord18);
    org.neo4j.internal.id.IdSequence idSequence21 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext22 = null;
    recordFormatDynamicRecordImpl2.prepare(dynamicRecord18, 10, idSequence21, cursorContext22);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat24 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat25 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord26 = propertyRecordFormat25.newRecord();
    long long27 = propertyOneByteHeaderRecordFormat24.getNextRecordReference(propertyRecord26);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat28 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat29 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord30 = propertyRecordFormat29.newRecord();
    long long31 = propertyOneByteHeaderRecordFormat28.getNextRecordReference(propertyRecord30);
    long long32 = propertyOneByteHeaderRecordFormat24.getNextRecordReference(propertyRecord30);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat33 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long34 = propertyOneByteHeaderRecordFormat33.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord35 = propertyOneByteHeaderRecordFormat33.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat36 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long37 = propertyOneByteHeaderRecordFormat36.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord38 = propertyOneByteHeaderRecordFormat36.newRecord();
    long long39 = propertyOneByteHeaderRecordFormat33.getNextRecordReference(propertyRecord38);
    org.neo4j.internal.id.IdSequence idSequence41 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext42 = null;
    propertyOneByteHeaderRecordFormat24.prepare(propertyRecord38, (int) (byte) -1, idSequence41,
        cursorContext42);
    boolean boolean44 = recordFormatDynamicRecordImpl2.equals(
        (java.lang.Object) propertyOneByteHeaderRecordFormat24);
    int int47 = propertyOneByteHeaderRecordFormat24.getPageSize((int) 'a', 52);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord48 = propertyOneByteHeaderRecordFormat24.newRecord();
    org.neo4j.io.pagecache.PageCursor pageCursor49 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad50 = null;
    try {
      propertyOneByteHeaderRecordFormat0.read(propertyRecord48, pageCursor49, recordLoad50,
          (int) '#', 16);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
    org.junit.Assert.assertTrue("'" + int11 + "' != '" + 24 + "'", int11 == 24);
    org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    org.junit.Assert.assertTrue("'" + int17 + "' != '" + 16 + "'", int17 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord18);
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord26);
    org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord30);
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
    org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
    org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1125899906842623L + "'",
        long34 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord35);
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1125899906842623L + "'",
        long37 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord38);
    org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
    org.junit.Assert.assertNotNull(propertyRecord48);
  }

  @Test
  public void test0873() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0873");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = propertyRecordFormat0.getRecordSize(storeHeader1);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader3 = null;
    int int4 = propertyRecordFormat0.getRecordSize(storeHeader3);
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_5 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat6 = v310_5.relationship();
    java.lang.String str7 = v310_5.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat8 = v310_5.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily9 = v310_5.getFormatFamily();
    boolean boolean10 = propertyRecordFormat0.equals((java.lang.Object) v310_5);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 48 + "'", int4 == 48);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat6);
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "high_limitV3_1_0" + "'", str7,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat8);
    org.junit.Assert.assertTrue(
        "'" + formatFamily9 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily9.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
  }

  @Test
  public void test0874() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0874");
    }
    java.util.function.Function<org.neo4j.kernel.impl.store.StoreHeader, java.lang.Integer> storeHeaderFunction1 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.fixedRecordSize(
        100);
    org.junit.Assert.assertNotNull(storeHeaderFunction1);
  }

  @Test
  public void test0875() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0875");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v306_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat2 = v306_0.schema();
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_3 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat4 = v310_3.relationship();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType5 = null;
    boolean boolean6 = v306_0.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v310_3, capabilityType5);
    java.lang.String str7 = v310_3.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat8 = v310_3.relationship();
    java.lang.String str9 = v310_3.name();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily10 = v310_3.getFormatFamily();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat2);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat4);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "high_limitV3_1_0" + "'", str7,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat8);
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "high_limitV3_1_0" + "'", str9,
        "high_limitV3_1_0");
    org.junit.Assert.assertTrue(
        "'" + formatFamily10 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily10.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
  }

  @Test
  public void test0876() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0876");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        24);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader2 = null;
    int int3 = relationshipGroupHighLimitRecordFormat1.getRecordSize(storeHeader2);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    int int7 = relationshipGroupRecordFormat4.getPageSize((int) 'a', (int) (short) 100);
    long long8 = relationshipGroupRecordFormat4.getMaxId();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord9 = relationshipGroupRecordFormat4.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord10 = relationshipGroupRecordFormat4.newRecord();
    org.neo4j.io.pagecache.PageCursor pageCursor11 = null;
    try {
      relationshipGroupHighLimitRecordFormat1.write(relationshipGroupRecord10, pageCursor11, 16,
          (int) (short) 100);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 24 + "'", int3 == 24);
    org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1125899906842623L + "'",
        long8 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipGroupRecord9);
    org.junit.Assert.assertNotNull(relationshipGroupRecord10);
  }

  @Test
  public void test0877() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0877");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        (-1));
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord3 = null;
    long long4 = relationshipGroupHighLimitRecordFormat2.getNextRecordReference(
        relationshipGroupRecord3);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord5 = relationshipGroupHighLimitRecordFormat2.newRecord();
    long long6 = relationshipGroupHighLimitRecordFormat1.getNextRecordReference(
        relationshipGroupRecord5);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord5);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
  }

  @Test
  public void test0878() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0878");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v310_0.relationship();
    java.lang.String str2 = v310_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat3 = v310_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat4 = v310_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat5 = v310_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat6 = v310_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat7 = v310_0.propertyKeyToken();
    java.lang.String str8 = v310_0.name();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_1_0" + "'", str2,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat3);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat4);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat5);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat6);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat7);
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "high_limitV3_1_0" + "'", str8,
        "high_limitV3_1_0");
  }

  @Test
  public void test0879() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0879");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    int int1 = v300_0.generation();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat2 = v300_0.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat3 = v300_0.propertyKeyToken();
    java.lang.String str4 = v300_0.name();
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "high_limitV3_0_0" + "'", str4,
        "high_limitV3_0_0");
  }

  @Test
  public void test0880() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0880");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    org.neo4j.storageengine.api.format.Capability[] capabilityArray6 = v306_0.capabilities();
    org.neo4j.kernel.impl.store.format.RecordFormats[] recordFormatsArray7 = v306_0.compatibleVersionsForRollingUpgrade();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat8 = v306_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat9 = v306_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat10 = v306_0.dynamic();
    java.lang.String str11 = v306_0.name();
    java.lang.String str12 = v306_0.name();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(capabilityArray6);
    org.junit.Assert.assertNotNull(recordFormatsArray7);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat8);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat9);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat10);
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "high_limitV3_0_6" + "'", str11,
        "high_limitV3_0_6");
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "high_limitV3_0_6" + "'", str12,
        "high_limitV3_0_6");
  }

  @Test
  public void test0881() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0881");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    long long1 = relationshipRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader2 = null;
    int int3 = relationshipRecordFormat0.getRecordSize(storeHeader2);
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 32 + "'", int3 == 32);
  }

  @Test
  public void test0882() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0882");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord2 = propertyRecordFormat1.newRecord();
    long long3 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord2);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_4 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat5 = v300_4.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat6 = v300_4.relationshipTypeToken();
    java.lang.String str7 = v300_4.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat8 = v300_4.property();
    boolean boolean9 = propertyOneByteHeaderRecordFormat0.equals((java.lang.Object) v300_4);
    try {
      int int12 = propertyOneByteHeaderRecordFormat0.getPageSize(50, (int) (short) 0);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.ArithmeticException; message: / by zero");
    } catch (java.lang.ArithmeticException e) {
    }
    org.junit.Assert.assertNotNull(propertyRecord2);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat5);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat6);
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "high_limitV3_0_0" + "'", str7,
        "high_limitV3_0_0");
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat8);
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
  }

  @Test
  public void test0883() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0883");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = null;
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    recordFormatDynamicRecordImpl0.prepare(dynamicRecord6, (int) (byte) -1, idSequence8,
        cursorContext9);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl11 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean13 = recordFormatDynamicRecordImpl11.equals((java.lang.Object) 100.0f);
    int int16 = recordFormatDynamicRecordImpl11.getPageSize(16, (-1));
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl17 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean19 = recordFormatDynamicRecordImpl17.equals((java.lang.Object) 100.0f);
    int int22 = recordFormatDynamicRecordImpl17.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord23 = recordFormatDynamicRecordImpl17.newRecord();
    int int26 = recordFormatDynamicRecordImpl17.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord27 = recordFormatDynamicRecordImpl17.newRecord();
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord28 = recordFormatDynamicRecordImpl17.newRecord();
    org.neo4j.internal.id.IdSequence idSequence30 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext31 = null;
    recordFormatDynamicRecordImpl11.prepare(dynamicRecord28, 10, idSequence30, cursorContext31);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord33 = recordFormatDynamicRecordImpl11.newRecord();
    org.neo4j.internal.id.IdSequence idSequence35 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext36 = null;
    recordFormatDynamicRecordImpl0.prepare(dynamicRecord33, (int) '4', idSequence35,
        cursorContext36);
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16 + "'", int16 == 16);
    org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    org.junit.Assert.assertTrue("'" + int22 + "' != '" + 16 + "'", int22 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord23);
    org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord27);
    org.junit.Assert.assertNotNull(dynamicRecord28);
    org.junit.Assert.assertNotNull(dynamicRecord33);
  }

  @Test
  public void test0884() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0884");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = relationshipRecordFormat0.getRecordSize(storeHeader1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord6 = relationshipRecordFormat5.newRecord();
    long long7 = relationshipHighLimitRecordFormat4.getNextRecordReference(relationshipRecord6);
    org.neo4j.internal.id.IdSequence idSequence9 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext10 = null;
    relationshipRecordFormat0.prepare(relationshipRecord6, 3, idSequence9, cursorContext10);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord12 = relationshipRecordFormat0.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord13 = relationshipRecordFormat0.newRecord();
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 32 + "'", int2 == 32);
    org.junit.Assert.assertNotNull(relationshipRecord6);
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord12);
    org.junit.Assert.assertNotNull(relationshipRecord13);
  }

  @Test
  public void test0885() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0885");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord1 = relationshipRecordFormat0.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord2 = relationshipRecordFormat0.newRecord();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader3 = null;
    int int4 = relationshipRecordFormat0.getRecordSize(storeHeader3);
    long long5 = relationshipRecordFormat0.getMaxId();
    int int6 = relationshipRecordFormat0.getRecordHeaderSize();
    org.junit.Assert.assertNotNull(relationshipRecord1);
    org.junit.Assert.assertNotNull(relationshipRecord2);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1125899906842623L + "'",
        long5 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
  }

  @Test
  public void test0886() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0886");
    }
    io.github.onograph.internal.batchimport.EnterpriseBatchImporterFactory enterpriseBatchImporterFactory0 = new io.github.onograph.internal.batchimport.EnterpriseBatchImporterFactory();
    java.lang.String str1 = enterpriseBatchImporterFactory0.getName();
    org.neo4j.io.layout.DatabaseLayout databaseLayout2 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction3 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer4 = null;
    org.neo4j.internal.batchimport.Configuration configuration5 = null;
    org.neo4j.logging.internal.LogService logService6 = null;
    org.neo4j.internal.batchimport.staging.ExecutionMonitor executionMonitor7 = null;
    org.neo4j.internal.batchimport.AdditionalInitialIds additionalInitialIds8 = null;
    org.neo4j.configuration.Config config9 = null;
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_10 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_11 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat12 = v300_11.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat13 = v300_11.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType14 = null;
    boolean boolean15 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_10,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_11, capabilityType14);
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_16 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat17 = v306_16.node();
    org.neo4j.storageengine.api.format.Capability capability18 = null;
    boolean boolean19 = v306_16.hasCapability(capability18);
    org.neo4j.storageengine.api.format.CapabilityType capabilityType20 = null;
    boolean boolean21 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_11,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_16, capabilityType20);
    org.neo4j.kernel.impl.store.format.RecordFormats[] recordFormatsArray22 = v306_16.compatibleVersionsForRollingUpgrade();
    java.lang.String str23 = v306_16.introductionVersion();
    org.neo4j.internal.batchimport.ImportLogic.Monitor monitor24 = null;
    org.neo4j.scheduler.JobScheduler jobScheduler25 = null;
    org.neo4j.internal.batchimport.input.Collector collector26 = null;
    org.neo4j.storageengine.api.LogFilesInitializer logFilesInitializer27 = null;
    org.neo4j.internal.batchimport.IndexImporterFactory indexImporterFactory28 = null;
    org.neo4j.memory.MemoryTracker memoryTracker29 = null;
    try {
      org.neo4j.internal.batchimport.BatchImporter batchImporter30 = enterpriseBatchImporterFactory0.instantiate(
          databaseLayout2, fileSystemAbstraction3, pageCacheTracer4, configuration5, logService6,
          executionMonitor7, additionalInitialIds8, config9,
          (org.neo4j.kernel.impl.store.format.RecordFormats) v306_16, monitor24, jobScheduler25,
          collector26, logFilesInitializer27, indexImporterFactory28, memoryTracker29);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "restartable" + "'", str1, "restartable");
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat12);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat13);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat17);
    org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    org.junit.Assert.assertNotNull(recordFormatsArray22);
    org.junit.Assert.assertEquals("'" + str23 + "' != '" + "3.0.6" + "'", str23, "3.0.6");
  }

  @Test
  public void test0887() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0887");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod((long) 100,
        139L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 239L + "'", long2 == 239L);
  }

  @Test
  public void test0888() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0888");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long2 = relationshipGroupHighLimitRecordFormat1.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord4 = null;
    long long5 = relationshipGroupHighLimitRecordFormat3.getNextRecordReference(
        relationshipGroupRecord4);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord6 = relationshipGroupHighLimitRecordFormat3.newRecord();
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    relationshipGroupHighLimitRecordFormat1.prepare(relationshipGroupRecord6, (int) (byte) 1,
        idSequence8, cursorContext9);
    long long11 = relationshipGroupHighLimitRecordFormat0.getNextRecordReference(
        relationshipGroupRecord6);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long13 = relationshipGroupHighLimitRecordFormat12.getMaxId();
    long long14 = relationshipGroupHighLimitRecordFormat12.getMaxId();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord15 = relationshipGroupHighLimitRecordFormat12.newRecord();
    org.neo4j.internal.id.IdSequence idSequence17 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext18 = null;
    relationshipGroupHighLimitRecordFormat0.prepare(relationshipGroupRecord15, 3, idSequence17,
        cursorContext18);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat20 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long21 = relationshipGroupHighLimitRecordFormat20.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat22 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord23 = null;
    long long24 = relationshipGroupHighLimitRecordFormat22.getNextRecordReference(
        relationshipGroupRecord23);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord25 = relationshipGroupHighLimitRecordFormat22.newRecord();
    org.neo4j.internal.id.IdSequence idSequence27 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext28 = null;
    relationshipGroupHighLimitRecordFormat20.prepare(relationshipGroupRecord25, (int) (byte) 1,
        idSequence27, cursorContext28);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat30 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long31 = relationshipGroupHighLimitRecordFormat30.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat32 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord33 = null;
    long long34 = relationshipGroupHighLimitRecordFormat32.getNextRecordReference(
        relationshipGroupRecord33);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord35 = relationshipGroupHighLimitRecordFormat32.newRecord();
    org.neo4j.internal.id.IdSequence idSequence37 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext38 = null;
    relationshipGroupHighLimitRecordFormat30.prepare(relationshipGroupRecord35, (int) (byte) 1,
        idSequence37, cursorContext38);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat40 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord41 = null;
    long long42 = relationshipGroupHighLimitRecordFormat40.getNextRecordReference(
        relationshipGroupRecord41);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord43 = relationshipGroupHighLimitRecordFormat40.newRecord();
    org.neo4j.internal.id.IdSequence idSequence45 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext46 = null;
    relationshipGroupHighLimitRecordFormat30.prepare(relationshipGroupRecord43, 0, idSequence45,
        cursorContext46);
    org.neo4j.internal.id.IdSequence idSequence49 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext50 = null;
    relationshipGroupHighLimitRecordFormat20.prepare(relationshipGroupRecord43, 128, idSequence49,
        cursorContext50);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat52 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long53 = relationshipGroupHighLimitRecordFormat52.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat54 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord55 = null;
    long long56 = relationshipGroupHighLimitRecordFormat54.getNextRecordReference(
        relationshipGroupRecord55);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord57 = relationshipGroupHighLimitRecordFormat54.newRecord();
    org.neo4j.internal.id.IdSequence idSequence59 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext60 = null;
    relationshipGroupHighLimitRecordFormat52.prepare(relationshipGroupRecord57, (int) (byte) 1,
        idSequence59, cursorContext60);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat62 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord63 = null;
    long long64 = relationshipGroupHighLimitRecordFormat62.getNextRecordReference(
        relationshipGroupRecord63);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord65 = relationshipGroupHighLimitRecordFormat62.newRecord();
    org.neo4j.internal.id.IdSequence idSequence67 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext68 = null;
    relationshipGroupHighLimitRecordFormat52.prepare(relationshipGroupRecord65, 0, idSequence67,
        cursorContext68);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord70 = relationshipGroupHighLimitRecordFormat52.newRecord();
    org.neo4j.internal.id.IdSequence idSequence72 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext73 = null;
    relationshipGroupHighLimitRecordFormat20.prepare(relationshipGroupRecord70, 8, idSequence72,
        cursorContext73);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat75 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader76 = null;
    int int77 = relationshipGroupRecordFormat75.getRecordSize(storeHeader76);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat78 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long79 = relationshipGroupHighLimitRecordFormat78.getMaxId();
    long long80 = relationshipGroupHighLimitRecordFormat78.getMaxId();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord81 = relationshipGroupHighLimitRecordFormat78.newRecord();
    org.neo4j.internal.id.IdSequence idSequence83 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext84 = null;
    relationshipGroupRecordFormat75.prepare(relationshipGroupRecord81, 4, idSequence83,
        cursorContext84);
    org.neo4j.internal.id.IdSequence idSequence87 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext88 = null;
    relationshipGroupHighLimitRecordFormat20.prepare(relationshipGroupRecord81, (int) (byte) 1,
        idSequence87, cursorContext88);
    org.neo4j.internal.id.IdSequence idSequence91 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext92 = null;
    relationshipGroupHighLimitRecordFormat0.prepare(relationshipGroupRecord81, 100, idSequence91,
        cursorContext92);
    org.neo4j.io.pagecache.PageCursor pageCursor94 = null;
    try {
      boolean boolean95 = relationshipGroupHighLimitRecordFormat0.isInUse(pageCursor94);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1125899906842623L + "'",
        long2 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord6);
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1125899906842623L + "'",
        long13 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1125899906842623L + "'",
        long14 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipGroupRecord15);
    org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1125899906842623L + "'",
        long21 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord25);
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1125899906842623L + "'",
        long31 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord35);
    org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord43);
    org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1125899906842623L + "'",
        long53 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-1L) + "'", long56 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord57);
    org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-1L) + "'", long64 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord65);
    org.junit.Assert.assertNotNull(relationshipGroupRecord70);
    org.junit.Assert.assertTrue("'" + int77 + "' != '" + 32 + "'", int77 == 32);
    org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1125899906842623L + "'",
        long79 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1125899906842623L + "'",
        long80 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipGroupRecord81);
  }

  @Test
  public void test0889() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0889");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.FactoryHighLimitDefaultImpl factoryHighLimitDefaultImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.FactoryHighLimitDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats1 = factoryHighLimitDefaultImpl0.newInstance();
    java.lang.String str2 = factoryHighLimitDefaultImpl0.getName();
    java.lang.String str3 = factoryHighLimitDefaultImpl0.getName();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats4 = factoryHighLimitDefaultImpl0.newInstance();
    java.lang.String str5 = factoryHighLimitDefaultImpl0.getName();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats6 = factoryHighLimitDefaultImpl0.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats7 = factoryHighLimitDefaultImpl0.newInstance();
    org.junit.Assert.assertNotNull(recordFormats1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_4_0" + "'", str2,
        "high_limitV3_4_0");
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "high_limitV3_4_0" + "'", str3,
        "high_limitV3_4_0");
    org.junit.Assert.assertNotNull(recordFormats4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "high_limitV3_4_0" + "'", str5,
        "high_limitV3_4_0");
    org.junit.Assert.assertNotNull(recordFormats6);
    org.junit.Assert.assertNotNull(recordFormats7);
  }

  @Test
  public void test0890() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0890");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long2 = relationshipGroupHighLimitRecordFormat1.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord4 = null;
    long long5 = relationshipGroupHighLimitRecordFormat3.getNextRecordReference(
        relationshipGroupRecord4);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord6 = relationshipGroupHighLimitRecordFormat3.newRecord();
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    relationshipGroupHighLimitRecordFormat1.prepare(relationshipGroupRecord6, (int) (byte) 1,
        idSequence8, cursorContext9);
    long long11 = relationshipGroupHighLimitRecordFormat0.getNextRecordReference(
        relationshipGroupRecord6);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader12 = null;
    int int13 = relationshipGroupHighLimitRecordFormat0.getRecordSize(storeHeader12);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat14 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long15 = relationshipGroupHighLimitRecordFormat14.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat16 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord17 = null;
    long long18 = relationshipGroupHighLimitRecordFormat16.getNextRecordReference(
        relationshipGroupRecord17);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord19 = relationshipGroupHighLimitRecordFormat16.newRecord();
    org.neo4j.internal.id.IdSequence idSequence21 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext22 = null;
    relationshipGroupHighLimitRecordFormat14.prepare(relationshipGroupRecord19, 0, idSequence21,
        cursorContext22);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl24 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean26 = recordFormatDynamicRecordImpl24.equals((java.lang.Object) 100.0f);
    int int29 = recordFormatDynamicRecordImpl24.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord30 = recordFormatDynamicRecordImpl24.newRecord();
    boolean boolean31 = relationshipGroupHighLimitRecordFormat14.equals(
        (java.lang.Object) recordFormatDynamicRecordImpl24);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat32 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader33 = null;
    int int34 = relationshipGroupRecordFormat32.getRecordSize(storeHeader33);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord35 = relationshipGroupRecordFormat32.newRecord();
    org.neo4j.internal.id.IdSequence idSequence37 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext38 = null;
    relationshipGroupHighLimitRecordFormat14.prepare(relationshipGroupRecord35, (int) (short) 0,
        idSequence37, cursorContext38);
    org.neo4j.io.pagecache.PageCursor pageCursor40 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad41 = null;
    try {
      relationshipGroupHighLimitRecordFormat0.read(relationshipGroupRecord35, pageCursor40,
          recordLoad41, (int) (byte) 1, 48);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1125899906842623L + "'",
        long2 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord6);
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 32 + "'", int13 == 32);
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1125899906842623L + "'",
        long15 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord19);
    org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    org.junit.Assert.assertTrue("'" + int29 + "' != '" + 16 + "'", int29 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord30);
    org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    org.junit.Assert.assertTrue("'" + int34 + "' != '" + 32 + "'", int34 == 32);
    org.junit.Assert.assertNotNull(relationshipGroupRecord35);
  }

  @Test
  public void test0891() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0891");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat1 = v320_0.labelToken();
    java.lang.String str2 = v320_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat3 = v320_0.property();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_2_0" + "'", str2,
        "high_limitV3_2_0");
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat3);
  }

  @Test
  public void test0892() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0892");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord5 = relationshipRecordFormat4.newRecord();
    long long6 = relationshipHighLimitRecordFormat3.getNextRecordReference(relationshipRecord5);
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord5, (int) (byte) 10, idSequence8,
        cursorContext9);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat14 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord16 = relationshipRecordFormat15.newRecord();
    long long17 = relationshipHighLimitRecordFormat14.getNextRecordReference(relationshipRecord16);
    org.neo4j.internal.id.IdSequence idSequence19 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext20 = null;
    relationshipHighLimitRecordFormat12.prepare(relationshipRecord16, (int) (byte) 10, idSequence19,
        cursorContext20);
    long long22 = relationshipHighLimitRecordFormat1.getNextRecordReference(relationshipRecord16);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord23 = relationshipHighLimitRecordFormat1.newRecord();
    int int24 = relationshipHighLimitRecordFormat1.getRecordHeaderSize();
    org.junit.Assert.assertNotNull(relationshipRecord5);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord16);
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord23);
    org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
  }

  @Test
  public void test0893() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0893");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord1 = null;
    long long2 = nodeRecordFormat0.getNextRecordReference(nodeRecord1);
    int int3 = nodeRecordFormat0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader4 = null;
    int int5 = nodeRecordFormat0.getRecordSize(storeHeader4);
    int int8 = nodeRecordFormat0.getPageSize((int) '4', (int) (short) 1);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord9 = nodeRecordFormat0.newRecord();
    int int12 = nodeRecordFormat0.getPageSize(32, (int) 'a');
    int int15 = nodeRecordFormat0.getPageSize(1, 32);
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_16 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat17 = v306_16.node();
    org.neo4j.storageengine.api.format.Capability capability18 = null;
    boolean boolean19 = v306_16.hasCapability(capability18);
    org.neo4j.storageengine.api.format.Capability capability20 = null;
    boolean boolean21 = v306_16.hasCapability(capability20);
    boolean boolean22 = nodeRecordFormat0.equals((java.lang.Object) v306_16);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat23 = v306_16.node();
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
    org.junit.Assert.assertNotNull(nodeRecord9);
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat17);
    org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat23);
  }

  @Test
  public void test0894() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0894");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v300_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat2 = v300_0.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat3 = v300_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.MetaDataRecord> metaDataRecordRecordFormat4 = v300_0.metaData();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.MetaDataRecord> metaDataRecordRecordFormat5 = v300_0.metaData();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat6 = v300_0.dynamic();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat3);
    org.junit.Assert.assertNotNull(metaDataRecordRecordFormat4);
    org.junit.Assert.assertNotNull(metaDataRecordRecordFormat5);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat6);
  }

  @Test
  public void test0895() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0895");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord1 = null;
    long long2 = nodeRecordFormat0.getNextRecordReference(nodeRecord1);
    int int3 = nodeRecordFormat0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader4 = null;
    int int5 = nodeRecordFormat0.getRecordSize(storeHeader4);
    int int8 = nodeRecordFormat0.getPageSize((int) '4', (int) (short) 1);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord9 = nodeRecordFormat0.newRecord();
    int int12 = nodeRecordFormat0.getPageSize(32, (int) 'a');
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord13 = nodeRecordFormat0.newRecord();
    int int14 = nodeRecordFormat0.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_15 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat16 = v320_15.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat17 = v320_15.relationshipGroup();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat18 = v320_15.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat19 = v320_15.property();
    boolean boolean20 = nodeRecordFormat0.equals((java.lang.Object) propertyRecordRecordFormat19);
    org.neo4j.io.pagecache.PageCursor pageCursor21 = null;
    try {
      boolean boolean22 = nodeRecordFormat0.isInUse(pageCursor21);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
    org.junit.Assert.assertNotNull(nodeRecord9);
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    org.junit.Assert.assertNotNull(nodeRecord13);
    org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat16);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat17);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat18);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat19);
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
  }

  @Test
  public void test0896() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0896");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = recordFormatDynamicRecordImpl0.newRecord();
    int int9 = recordFormatDynamicRecordImpl0.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord10 = recordFormatDynamicRecordImpl0.newRecord();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader11 = null;
    try {
      int int12 = recordFormatDynamicRecordImpl0.getRecordSize(storeHeader11);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord6);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord10);
  }

  @Test
  public void test0897() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0897");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat1 = v320_0.dynamic();
    org.neo4j.storageengine.api.format.Capability capability2 = null;
    boolean boolean3 = v320_0.hasCapability(capability2);
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_4 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat5 = v320_4.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat6 = v320_4.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat7 = v320_4.property();
    java.lang.String str8 = v320_4.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat9 = v320_4.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat10 = v320_4.labelToken();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType11 = null;
    boolean boolean12 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v320_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v320_4, capabilityType11);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat1);
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat5);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat6);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat7);
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "high_limitV3_2_0" + "'", str8,
        "high_limitV3_2_0");
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat9);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat10);
    org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
  }

  @Test
  public void test0898() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0898");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod((long) 52,
        (long) 12);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 60L + "'", long2 == 60L);
  }

  @Test
  public void test0899() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0899");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v306_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat2 = v306_0.schema();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat3 = v306_0.labelToken();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily4 = v306_0.getFormatFamily();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat5 = v306_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat6 = v306_0.relationshipTypeToken();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat2);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat3);
    org.junit.Assert.assertTrue(
        "'" + formatFamily4 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily4.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat5);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat6);
  }

  @Test
  public void test0900() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0900");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord5 = relationshipRecordFormat4.newRecord();
    long long6 = relationshipHighLimitRecordFormat3.getNextRecordReference(relationshipRecord5);
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord5, (int) (byte) 10, idSequence8,
        cursorContext9);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord13 = relationshipHighLimitRecordFormat12.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord16 = relationshipHighLimitRecordFormat15.newRecord();
    org.neo4j.internal.id.IdSequence idSequence18 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext19 = null;
    relationshipHighLimitRecordFormat12.prepare(relationshipRecord16, (int) (short) 1, idSequence18,
        cursorContext19);
    long long21 = relationshipHighLimitRecordFormat1.getNextRecordReference(relationshipRecord16);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord22 = relationshipHighLimitRecordFormat1.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord23 = relationshipHighLimitRecordFormat1.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord24 = relationshipHighLimitRecordFormat1.newRecord();
    org.junit.Assert.assertNotNull(relationshipRecord5);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord13);
    org.junit.Assert.assertNotNull(relationshipRecord16);
    org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord22);
    org.junit.Assert.assertNotNull(relationshipRecord23);
    org.junit.Assert.assertNotNull(relationshipRecord24);
  }

  @Test
  public void test0901() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0901");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord1 = null;
    long long2 = nodeRecordFormat0.getNextRecordReference(nodeRecord1);
    int int3 = nodeRecordFormat0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader4 = null;
    int int5 = nodeRecordFormat0.getRecordSize(storeHeader4);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat6 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord7 = null;
    long long8 = nodeRecordFormat6.getNextRecordReference(nodeRecord7);
    int int9 = nodeRecordFormat6.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader10 = null;
    int int11 = nodeRecordFormat6.getRecordSize(storeHeader10);
    int int14 = nodeRecordFormat6.getPageSize((int) '4', (int) (short) 1);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord15 = nodeRecordFormat6.newRecord();
    long long16 = nodeRecordFormat0.getNextRecordReference(nodeRecord15);
    long long17 = nodeRecordFormat0.getMaxId();
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    org.junit.Assert.assertTrue("'" + int11 + "' != '" + 16 + "'", int11 == 16);
    org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
    org.junit.Assert.assertNotNull(nodeRecord15);
    org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1125899906842623L + "'",
        long17 == 1125899906842623L);
  }

  @Test
  public void test0902() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0902");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = relationshipGroupRecordFormat0.getRecordSize(storeHeader1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader4 = null;
    int int5 = propertyRecordFormat3.getRecordSize(storeHeader4);
    long long6 = propertyRecordFormat3.getMaxId();
    boolean boolean7 = relationshipGroupRecordFormat0.equals((java.lang.Object) long6);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat8 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader9 = null;
    int int10 = relationshipGroupRecordFormat8.getRecordSize(storeHeader9);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat11 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long12 = relationshipGroupHighLimitRecordFormat11.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat13 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord14 = null;
    long long15 = relationshipGroupHighLimitRecordFormat13.getNextRecordReference(
        relationshipGroupRecord14);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord16 = relationshipGroupHighLimitRecordFormat13.newRecord();
    org.neo4j.internal.id.IdSequence idSequence18 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext19 = null;
    relationshipGroupHighLimitRecordFormat11.prepare(relationshipGroupRecord16, 0, idSequence18,
        cursorContext19);
    long long21 = relationshipGroupRecordFormat8.getNextRecordReference(relationshipGroupRecord16);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat22 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader23 = null;
    int int24 = relationshipGroupRecordFormat22.getRecordSize(storeHeader23);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat25 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long26 = relationshipGroupHighLimitRecordFormat25.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat27 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord28 = null;
    long long29 = relationshipGroupHighLimitRecordFormat27.getNextRecordReference(
        relationshipGroupRecord28);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord30 = relationshipGroupHighLimitRecordFormat27.newRecord();
    org.neo4j.internal.id.IdSequence idSequence32 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext33 = null;
    relationshipGroupHighLimitRecordFormat25.prepare(relationshipGroupRecord30, 0, idSequence32,
        cursorContext33);
    long long35 = relationshipGroupRecordFormat22.getNextRecordReference(relationshipGroupRecord30);
    org.neo4j.internal.id.IdSequence idSequence37 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext38 = null;
    relationshipGroupRecordFormat8.prepare(relationshipGroupRecord30, (int) '#', idSequence37,
        cursorContext38);
    long long40 = relationshipGroupRecordFormat0.getNextRecordReference(relationshipGroupRecord30);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 32 + "'", int2 == 32);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 48 + "'", int5 == 48);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1125899906842623L + "'",
        long6 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1125899906842623L + "'",
        long12 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord16);
    org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
    org.junit.Assert.assertTrue("'" + int24 + "' != '" + 32 + "'", int24 == 32);
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1125899906842623L + "'",
        long26 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord30);
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
    org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
  }

  @Test
  public void test0903() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0903");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat1 = v306_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat2 = v306_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat3 = v306_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.MetaDataRecord> metaDataRecordRecordFormat4 = v306_0.metaData();
    java.lang.String str5 = v306_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat6 = v306_0.relationshipTypeToken();
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat1);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat2);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat3);
    org.junit.Assert.assertNotNull(metaDataRecordRecordFormat4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "high_limitV3_0_6" + "'", str5,
        "high_limitV3_0_6");
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat6);
  }

  @Test
  public void test0904() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0904");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod((long) 64,
        99L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 99L + "'", long2 == 99L);
  }

  @Test
  public void test0905() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0905");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = propertyRecordFormat0.getRecordSize(storeHeader1);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl3 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats4 = highLimitFactoryDefaultImpl3.newInstance();
    boolean boolean5 = propertyRecordFormat0.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl3);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean8 = propertyRecordFormat0.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord9 = null;
    org.neo4j.internal.id.IdSequence idSequence11 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext12 = null;
    propertyRecordFormat0.prepare(propertyRecord9, (int) (short) 0, idSequence11, cursorContext12);
    boolean boolean15 = propertyRecordFormat0.equals((java.lang.Object) "3.0.6");
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat16 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader17 = null;
    int int18 = propertyRecordFormat16.getRecordSize(storeHeader17);
    int int21 = propertyRecordFormat16.getPageSize((int) (byte) -1, 128);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat22 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long23 = propertyOneByteHeaderRecordFormat22.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord24 = propertyOneByteHeaderRecordFormat22.newRecord();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord25 = propertyOneByteHeaderRecordFormat22.newRecord();
    long long26 = propertyRecordFormat16.getNextRecordReference(propertyRecord25);
    long long27 = propertyRecordFormat0.getNextRecordReference(propertyRecord25);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat28 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long29 = relationshipGroupHighLimitRecordFormat28.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat30 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord31 = null;
    long long32 = relationshipGroupHighLimitRecordFormat30.getNextRecordReference(
        relationshipGroupRecord31);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord33 = relationshipGroupHighLimitRecordFormat30.newRecord();
    org.neo4j.internal.id.IdSequence idSequence35 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext36 = null;
    relationshipGroupHighLimitRecordFormat28.prepare(relationshipGroupRecord33, (int) (byte) 1,
        idSequence35, cursorContext36);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat38 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord39 = null;
    long long40 = relationshipGroupHighLimitRecordFormat38.getNextRecordReference(
        relationshipGroupRecord39);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord41 = relationshipGroupHighLimitRecordFormat38.newRecord();
    org.neo4j.internal.id.IdSequence idSequence43 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext44 = null;
    relationshipGroupHighLimitRecordFormat28.prepare(relationshipGroupRecord41, 0, idSequence43,
        cursorContext44);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord46 = relationshipGroupHighLimitRecordFormat28.newRecord();
    boolean boolean47 = propertyRecordFormat0.equals(
        (java.lang.Object) relationshipGroupHighLimitRecordFormat28);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord48 = propertyRecordFormat0.newRecord();
    int int49 = propertyRecordFormat0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord50 = propertyRecordFormat0.newRecord();
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    org.junit.Assert.assertNotNull(recordFormats4);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    org.junit.Assert.assertTrue("'" + int18 + "' != '" + 48 + "'", int18 == 48);
    org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1125899906842623L + "'",
        long23 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord24);
    org.junit.Assert.assertNotNull(propertyRecord25);
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
    org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1125899906842623L + "'",
        long29 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord33);
    org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord41);
    org.junit.Assert.assertNotNull(relationshipGroupRecord46);
    org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    org.junit.Assert.assertNotNull(propertyRecord48);
    org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    org.junit.Assert.assertNotNull(propertyRecord50);
  }

  @Test
  public void test0906() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0906");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord1 = relationshipRecordFormat0.newRecord();
    int int2 = relationshipRecordFormat0.getRecordHeaderSize();
    int int5 = relationshipRecordFormat0.getPageSize(4, (int) '#');
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) '4');
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat9 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat11 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord12 = relationshipHighLimitRecordFormat11.newRecord();
    org.neo4j.internal.id.IdSequence idSequence14 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext15 = null;
    relationshipHighLimitRecordFormat9.prepare(relationshipRecord12, (int) 'a', idSequence14,
        cursorContext15);
    org.neo4j.internal.id.IdSequence idSequence18 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext19 = null;
    relationshipHighLimitRecordFormat7.prepare(relationshipRecord12, 10, idSequence18,
        cursorContext19);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord21 = relationshipHighLimitRecordFormat7.newRecord();
    org.neo4j.internal.id.IdSequence idSequence23 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext24 = null;
    relationshipRecordFormat0.prepare(relationshipRecord21, 52, idSequence23, cursorContext24);
    org.junit.Assert.assertNotNull(relationshipRecord1);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord12);
    org.junit.Assert.assertNotNull(relationshipRecord21);
  }

  @Test
  public void test0907() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0907");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.FactoryHighLimitRecordFormatsImpl factoryHighLimitRecordFormatsImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.FactoryHighLimitRecordFormatsImpl();
    java.lang.String str1 = factoryHighLimitRecordFormatsImpl0.getName();
    java.lang.String str2 = factoryHighLimitRecordFormatsImpl0.getName();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats3 = factoryHighLimitRecordFormatsImpl0.newInstance();
    java.lang.String str4 = factoryHighLimitRecordFormatsImpl0.getName();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats5 = factoryHighLimitRecordFormatsImpl0.newInstance();
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "high_limit" + "'", str1, "high_limit");
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limit" + "'", str2, "high_limit");
    org.junit.Assert.assertNotNull(recordFormats3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "high_limit" + "'", str4, "high_limit");
    org.junit.Assert.assertNotNull(recordFormats5);
  }

  @Test
  public void test0908() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0908");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.FactoryHighLimitDefaultImpl factoryHighLimitDefaultImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.FactoryHighLimitDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats1 = factoryHighLimitDefaultImpl0.newInstance();
    java.lang.String str2 = factoryHighLimitDefaultImpl0.getName();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats3 = factoryHighLimitDefaultImpl0.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats4 = factoryHighLimitDefaultImpl0.newInstance();
    java.lang.String str5 = factoryHighLimitDefaultImpl0.getName();
    org.junit.Assert.assertNotNull(recordFormats1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_0_0" + "'", str2,
        "high_limitV3_0_0");
    org.junit.Assert.assertNotNull(recordFormats3);
    org.junit.Assert.assertNotNull(recordFormats4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "high_limitV3_0_0" + "'", str5,
        "high_limitV3_0_0");
  }

  @Test
  public void test0909() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0909");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long1 = propertyOneByteHeaderRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord4 = propertyRecordFormat3.newRecord();
    long long5 = propertyOneByteHeaderRecordFormat2.getNextRecordReference(propertyRecord4);
    long long6 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord4);
    int int9 = propertyOneByteHeaderRecordFormat0.getPageSize(64, (int) (short) 1);
    java.util.function.Function<org.neo4j.kernel.impl.store.StoreHeader, java.lang.Integer> storeHeaderFunction11 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.fixedRecordSize(
        99);
    boolean boolean12 = propertyOneByteHeaderRecordFormat0.equals(
        (java.lang.Object) storeHeaderFunction11);
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord4);
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 64 + "'", int9 == 64);
    org.junit.Assert.assertNotNull(storeHeaderFunction11);
    org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
  }

  @Test
  public void test0910() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0910");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        50);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat6 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord7 = relationshipRecordFormat6.newRecord();
    long long8 = relationshipHighLimitRecordFormat5.getNextRecordReference(relationshipRecord7);
    org.neo4j.internal.id.IdSequence idSequence10 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext11 = null;
    relationshipHighLimitRecordFormat3.prepare(relationshipRecord7, (int) (byte) 10, idSequence10,
        cursorContext11);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat14 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat16 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat17 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord18 = relationshipRecordFormat17.newRecord();
    long long19 = relationshipHighLimitRecordFormat16.getNextRecordReference(relationshipRecord18);
    org.neo4j.internal.id.IdSequence idSequence21 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext22 = null;
    relationshipHighLimitRecordFormat14.prepare(relationshipRecord18, (int) (byte) 10, idSequence21,
        cursorContext22);
    long long24 = relationshipHighLimitRecordFormat3.getNextRecordReference(relationshipRecord18);
    org.neo4j.io.pagecache.PageCursor pageCursor25 = null;
    try {
      relationshipHighLimitRecordFormat1.write(relationshipRecord18, pageCursor25, 0, 0);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(relationshipRecord7);
    org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord18);
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
  }

  @Test
  public void test0911() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0911");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.FactoryHighLimitDefaultImpl factoryHighLimitDefaultImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.FactoryHighLimitDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats1 = factoryHighLimitDefaultImpl0.newInstance();
    java.lang.String str2 = factoryHighLimitDefaultImpl0.getName();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats3 = factoryHighLimitDefaultImpl0.newInstance();
    java.lang.String str4 = factoryHighLimitDefaultImpl0.getName();
    org.junit.Assert.assertNotNull(recordFormats1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_0_0" + "'", str2,
        "high_limitV3_0_0");
    org.junit.Assert.assertNotNull(recordFormats3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "high_limitV3_0_0" + "'", str4,
        "high_limitV3_0_0");
  }

  @Test
  public void test0912() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0912");
    }
    long long2 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.torete(0L,
        249L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 249L + "'", long2 == 249L);
  }

  @Test
  public void test0913() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0913");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v306_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat2 = v306_0.schema();
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_3 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat4 = v310_3.relationship();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType5 = null;
    boolean boolean6 = v306_0.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v310_3, capabilityType5);
    java.lang.String str7 = v310_3.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat8 = v310_3.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat9 = v310_3.relationshipGroup();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat10 = v310_3.labelToken();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat2);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat4);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "high_limitV3_1_0" + "'", str7,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat8);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat9);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat10);
  }

  @Test
  public void test0914() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0914");
    }
    org.neo4j.internal.batchimport.AdditionalInitialIds additionalInitialIds0 = null;
    org.neo4j.internal.batchimport.input.Collector collector1 = null;
    org.neo4j.internal.batchimport.Configuration configuration2 = null;
    org.neo4j.configuration.Config config3 = null;
    org.neo4j.io.layout.DatabaseLayout databaseLayout4 = null;
    org.neo4j.internal.batchimport.staging.ExecutionMonitor executionMonitor5 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.internal.batchimport.IndexImporterFactory indexImporterFactory7 = null;
    org.neo4j.scheduler.JobScheduler jobScheduler8 = null;
    org.neo4j.storageengine.api.LogFilesInitializer logFilesInitializer9 = null;
    org.neo4j.logging.internal.LogService logService10 = null;
    org.neo4j.memory.MemoryTracker memoryTracker11 = null;
    org.neo4j.internal.batchimport.ImportLogic.Monitor monitor12 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer13 = null;
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_14 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat15 = v306_14.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat16 = v306_14.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat17 = v306_14.property();
    org.neo4j.storageengine.api.format.Capability capability18 = null;
    boolean boolean19 = v306_14.hasCapability(capability18);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat20 = v306_14.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat21 = v306_14.relationship();
    try {
      io.github.onograph.internal.batchimport.EnterpriseBatchImporter enterpriseBatchImporter22 = new io.github.onograph.internal.batchimport.EnterpriseBatchImporter(
          additionalInitialIds0, collector1, configuration2, config3, databaseLayout4,
          executionMonitor5, fileSystemAbstraction6, indexImporterFactory7, jobScheduler8,
          logFilesInitializer9, logService10, memoryTracker11, monitor12, pageCacheTracer13,
          (org.neo4j.kernel.impl.store.format.RecordFormats) v306_14);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat15);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat16);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat17);
    org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat20);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat21);
  }

  @Test
  public void test0915() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0915");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        50);
    try {
      int int4 = nodeHighLimitRecordFormat1.getPageSize(8, 0);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.ArithmeticException; message: / by zero");
    } catch (java.lang.ArithmeticException e) {
    }
  }

  @Test
  public void test0916() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0916");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod(11L, 0L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 11L + "'", long2 == 11L);
  }

  @Test
  public void test0917() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0917");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat1 = v300_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat2 = v300_0.relationship();
    int int3 = v300_0.generation();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat4 = v300_0.schema();
    java.lang.String str5 = v300_0.storeVersion();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat1);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat2);
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "vE.H.0" + "'", str5, "vE.H.0");
  }

  @Test
  public void test0918() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0918");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = propertyRecordFormat0.getRecordSize(storeHeader1);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl3 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats4 = highLimitFactoryDefaultImpl3.newInstance();
    boolean boolean5 = propertyRecordFormat0.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl3);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean8 = propertyRecordFormat0.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord9 = null;
    org.neo4j.internal.id.IdSequence idSequence11 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext12 = null;
    propertyRecordFormat0.prepare(propertyRecord9, (int) (short) 0, idSequence11, cursorContext12);
    boolean boolean15 = propertyRecordFormat0.equals((java.lang.Object) "3.0.6");
    boolean boolean17 = propertyRecordFormat0.equals((java.lang.Object) 128);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    org.junit.Assert.assertNotNull(recordFormats4);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
  }

  @Test
  public void test0919() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0919");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord2 = relationshipRecordFormat1.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord3 = relationshipRecordFormat1.newRecord();
    org.neo4j.internal.id.IdSequence idSequence5 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext6 = null;
    relationshipRecordFormat0.prepare(relationshipRecord3, 100, idSequence5, cursorContext6);
    int int10 = relationshipRecordFormat0.getPageSize(0, 3);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord11 = relationshipRecordFormat0.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord12 = relationshipRecordFormat0.newRecord();
    long long13 = relationshipRecordFormat0.getMaxId();
    org.junit.Assert.assertNotNull(relationshipRecord2);
    org.junit.Assert.assertNotNull(relationshipRecord3);
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord11);
    org.junit.Assert.assertNotNull(relationshipRecord12);
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1125899906842623L + "'",
        long13 == 1125899906842623L);
  }

  @Test
  public void test0920() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0920");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat6 = v300_1.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat7 = v300_1.relationship();
    java.lang.String str8 = v300_1.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat9 = v300_1.relationship();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat6);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat7);
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "high_limitV3_0_0" + "'", str8,
        "high_limitV3_0_0");
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat9);
  }

  @Test
  public void test0921() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0921");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.storageengine.api.format.Capability capability1 = null;
    boolean boolean2 = v310_0.hasCapability(capability1);
    int int3 = v310_0.generation();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat4 = v310_0.propertyKeyToken();
    java.lang.String str5 = v310_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat6 = v310_0.node();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "high_limitV3_1_0" + "'", str5,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat6);
  }

  @Test
  public void test0922() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0922");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long1 = propertyOneByteHeaderRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord2 = propertyOneByteHeaderRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long4 = propertyOneByteHeaderRecordFormat3.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord5 = propertyOneByteHeaderRecordFormat3.newRecord();
    long long6 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord5);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader7 = null;
    int int8 = propertyOneByteHeaderRecordFormat0.getRecordSize(storeHeader7);
    long long9 = propertyOneByteHeaderRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader10 = null;
    int int11 = propertyOneByteHeaderRecordFormat0.getRecordSize(storeHeader10);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord13 = null;
    org.neo4j.internal.id.IdSequence idSequence15 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext16 = null;
    propertyRecordFormat12.prepare(propertyRecord13, (int) (short) -1, idSequence15,
        cursorContext16);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord18 = propertyRecordFormat12.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat19 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat20 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord21 = propertyRecordFormat20.newRecord();
    long long22 = propertyOneByteHeaderRecordFormat19.getNextRecordReference(propertyRecord21);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader23 = null;
    int int24 = propertyOneByteHeaderRecordFormat19.getRecordSize(storeHeader23);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat25 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long26 = propertyOneByteHeaderRecordFormat25.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat27 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat28 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord29 = propertyRecordFormat28.newRecord();
    long long30 = propertyOneByteHeaderRecordFormat27.getNextRecordReference(propertyRecord29);
    long long31 = propertyOneByteHeaderRecordFormat25.getNextRecordReference(propertyRecord29);
    org.neo4j.internal.id.IdSequence idSequence33 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext34 = null;
    propertyOneByteHeaderRecordFormat19.prepare(propertyRecord29, 64, idSequence33,
        cursorContext34);
    long long36 = propertyRecordFormat12.getNextRecordReference(propertyRecord29);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord37 = propertyRecordFormat12.newRecord();
    long long38 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord37);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat39 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord40 = null;
    org.neo4j.internal.id.IdSequence idSequence42 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext43 = null;
    propertyRecordFormat39.prepare(propertyRecord40, (int) (short) -1, idSequence42,
        cursorContext43);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord45 = propertyRecordFormat39.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat46 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat47 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord48 = propertyRecordFormat47.newRecord();
    long long49 = propertyOneByteHeaderRecordFormat46.getNextRecordReference(propertyRecord48);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader50 = null;
    int int51 = propertyOneByteHeaderRecordFormat46.getRecordSize(storeHeader50);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat52 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long53 = propertyOneByteHeaderRecordFormat52.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat54 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat55 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord56 = propertyRecordFormat55.newRecord();
    long long57 = propertyOneByteHeaderRecordFormat54.getNextRecordReference(propertyRecord56);
    long long58 = propertyOneByteHeaderRecordFormat52.getNextRecordReference(propertyRecord56);
    org.neo4j.internal.id.IdSequence idSequence60 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext61 = null;
    propertyOneByteHeaderRecordFormat46.prepare(propertyRecord56, 64, idSequence60,
        cursorContext61);
    long long63 = propertyRecordFormat39.getNextRecordReference(propertyRecord56);
    org.neo4j.io.pagecache.PageCursor pageCursor64 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad65 = null;
    try {
      propertyOneByteHeaderRecordFormat0.read(propertyRecord56, pageCursor64, recordLoad65, 8, 12);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord2);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1125899906842623L + "'",
        long4 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord5);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    org.junit.Assert.assertTrue("'" + int8 + "' != '" + 48 + "'", int8 == 48);
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1125899906842623L + "'",
        long9 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int11 + "' != '" + 48 + "'", int11 == 48);
    org.junit.Assert.assertNotNull(propertyRecord18);
    org.junit.Assert.assertNotNull(propertyRecord21);
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
    org.junit.Assert.assertTrue("'" + int24 + "' != '" + 48 + "'", int24 == 48);
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1125899906842623L + "'",
        long26 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord29);
    org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
    org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord37);
    org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord45);
    org.junit.Assert.assertNotNull(propertyRecord48);
    org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
    org.junit.Assert.assertTrue("'" + int51 + "' != '" + 48 + "'", int51 == 48);
    org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1125899906842623L + "'",
        long53 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord56);
    org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
    org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-1L) + "'", long58 == (-1L));
    org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
  }

  @Test
  public void test0923() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0923");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        96);
  }

  @Test
  public void test0924() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0924");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat6 = v300_1.schema();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat7 = v300_1.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat8 = v300_1.dynamic();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat6);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat7);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat8);
  }

  @Test
  public void test0925() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0925");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat();
    long long1 = nodeHighLimitRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord2 = nodeHighLimitRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 1);
    int int7 = nodeHighLimitRecordFormat4.getPageSize(48, (int) '#');
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord8 = nodeHighLimitRecordFormat4.newRecord();
    int int9 = nodeHighLimitRecordFormat0.rerdtlgForRE(nodeRecord8);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord10 = nodeHighLimitRecordFormat0.newRecord();
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertNotNull(nodeRecord2);
    org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
    org.junit.Assert.assertNotNull(nodeRecord8);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    org.junit.Assert.assertNotNull(nodeRecord10);
  }

  @Test
  public void test0926() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0926");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat1 = v320_0.dynamic();
    java.lang.String str2 = v320_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat3 = v320_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat4 = v320_0.node();
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_2_0" + "'", str2,
        "high_limitV3_2_0");
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat3);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat4);
  }

  @Test
  public void test0927() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0927");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        35);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord3 = null;
    long long4 = nodeRecordFormat2.getNextRecordReference(nodeRecord3);
    int int5 = nodeRecordFormat2.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader6 = null;
    int int7 = nodeRecordFormat2.getRecordSize(storeHeader6);
    int int10 = nodeRecordFormat2.getPageSize((int) '4', (int) (short) 1);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord11 = nodeRecordFormat2.newRecord();
    org.neo4j.io.pagecache.PageCursor pageCursor12 = null;
    try {
      nodeHighLimitRecordFormat1.write(nodeRecord11, pageCursor12, 3, 10);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
    org.junit.Assert.assertNotNull(nodeRecord11);
  }

  @Test
  public void test0928() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0928");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long1 = propertyOneByteHeaderRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord2 = propertyOneByteHeaderRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long4 = propertyOneByteHeaderRecordFormat3.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord5 = propertyOneByteHeaderRecordFormat3.newRecord();
    long long6 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord5);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader7 = null;
    int int8 = propertyOneByteHeaderRecordFormat0.getRecordSize(storeHeader7);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat9 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord10 = propertyRecordFormat9.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat11 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader12 = null;
    int int13 = propertyRecordFormat11.getRecordSize(storeHeader12);
    long long14 = propertyRecordFormat11.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat16 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord17 = propertyRecordFormat16.newRecord();
    long long18 = propertyOneByteHeaderRecordFormat15.getNextRecordReference(propertyRecord17);
    org.neo4j.internal.id.IdSequence idSequence20 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext21 = null;
    propertyRecordFormat11.prepare(propertyRecord17, 0, idSequence20, cursorContext21);
    long long23 = propertyRecordFormat9.getNextRecordReference(propertyRecord17);
    long long24 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord17);
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord2);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1125899906842623L + "'",
        long4 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord5);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    org.junit.Assert.assertTrue("'" + int8 + "' != '" + 48 + "'", int8 == 48);
    org.junit.Assert.assertNotNull(propertyRecord10);
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 48 + "'", int13 == 48);
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1125899906842623L + "'",
        long14 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord17);
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
  }

  @Test
  public void test0929() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0929");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) '4');
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord2 = relationshipHighLimitRecordFormat1.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord3 = relationshipHighLimitRecordFormat1.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord5 = relationshipRecordFormat4.newRecord();
    org.neo4j.io.pagecache.PageCursor pageCursor6 = null;
    try {
      relationshipHighLimitRecordFormat1.write(relationshipRecord5, pageCursor6, (int) (short) 0,
          4);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(relationshipRecord2);
    org.junit.Assert.assertNotNull(relationshipRecord3);
    org.junit.Assert.assertNotNull(relationshipRecord5);
  }

  @Test
  public void test0930() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0930");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long1 = propertyOneByteHeaderRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord2 = propertyOneByteHeaderRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long4 = propertyOneByteHeaderRecordFormat3.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord5 = propertyOneByteHeaderRecordFormat3.newRecord();
    long long6 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord5);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader7 = null;
    int int8 = propertyOneByteHeaderRecordFormat0.getRecordSize(storeHeader7);
    long long9 = propertyOneByteHeaderRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader10 = null;
    int int11 = propertyOneByteHeaderRecordFormat0.getRecordSize(storeHeader10);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord13 = null;
    org.neo4j.internal.id.IdSequence idSequence15 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext16 = null;
    propertyRecordFormat12.prepare(propertyRecord13, (int) (short) -1, idSequence15,
        cursorContext16);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord18 = propertyRecordFormat12.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat19 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat20 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord21 = propertyRecordFormat20.newRecord();
    long long22 = propertyOneByteHeaderRecordFormat19.getNextRecordReference(propertyRecord21);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader23 = null;
    int int24 = propertyOneByteHeaderRecordFormat19.getRecordSize(storeHeader23);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat25 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long26 = propertyOneByteHeaderRecordFormat25.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat27 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat28 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord29 = propertyRecordFormat28.newRecord();
    long long30 = propertyOneByteHeaderRecordFormat27.getNextRecordReference(propertyRecord29);
    long long31 = propertyOneByteHeaderRecordFormat25.getNextRecordReference(propertyRecord29);
    org.neo4j.internal.id.IdSequence idSequence33 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext34 = null;
    propertyOneByteHeaderRecordFormat19.prepare(propertyRecord29, 64, idSequence33,
        cursorContext34);
    long long36 = propertyRecordFormat12.getNextRecordReference(propertyRecord29);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord37 = propertyRecordFormat12.newRecord();
    long long38 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord37);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat39 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader40 = null;
    int int41 = propertyRecordFormat39.getRecordSize(storeHeader40);
    int int44 = propertyRecordFormat39.getPageSize((int) (byte) -1, 128);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat45 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long46 = propertyOneByteHeaderRecordFormat45.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord47 = propertyOneByteHeaderRecordFormat45.newRecord();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord48 = propertyOneByteHeaderRecordFormat45.newRecord();
    long long49 = propertyRecordFormat39.getNextRecordReference(propertyRecord48);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat50 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord51 = propertyRecordFormat50.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat52 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader53 = null;
    int int54 = propertyRecordFormat52.getRecordSize(storeHeader53);
    long long55 = propertyRecordFormat52.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat56 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat57 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord58 = propertyRecordFormat57.newRecord();
    long long59 = propertyOneByteHeaderRecordFormat56.getNextRecordReference(propertyRecord58);
    org.neo4j.internal.id.IdSequence idSequence61 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext62 = null;
    propertyRecordFormat52.prepare(propertyRecord58, 0, idSequence61, cursorContext62);
    long long64 = propertyRecordFormat50.getNextRecordReference(propertyRecord58);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat65 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader66 = null;
    int int67 = propertyRecordFormat65.getRecordSize(storeHeader66);
    int int70 = propertyRecordFormat65.getPageSize((int) (byte) -1, 128);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat71 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long72 = propertyOneByteHeaderRecordFormat71.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord73 = propertyOneByteHeaderRecordFormat71.newRecord();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord74 = propertyOneByteHeaderRecordFormat71.newRecord();
    long long75 = propertyRecordFormat65.getNextRecordReference(propertyRecord74);
    long long76 = propertyRecordFormat50.getNextRecordReference(propertyRecord74);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat77 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long78 = propertyOneByteHeaderRecordFormat77.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat79 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat80 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord81 = propertyRecordFormat80.newRecord();
    long long82 = propertyOneByteHeaderRecordFormat79.getNextRecordReference(propertyRecord81);
    long long83 = propertyOneByteHeaderRecordFormat77.getNextRecordReference(propertyRecord81);
    long long84 = propertyRecordFormat50.getNextRecordReference(propertyRecord81);
    long long85 = propertyRecordFormat39.getNextRecordReference(propertyRecord81);
    long long86 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord81);
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord2);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1125899906842623L + "'",
        long4 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord5);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    org.junit.Assert.assertTrue("'" + int8 + "' != '" + 48 + "'", int8 == 48);
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1125899906842623L + "'",
        long9 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int11 + "' != '" + 48 + "'", int11 == 48);
    org.junit.Assert.assertNotNull(propertyRecord18);
    org.junit.Assert.assertNotNull(propertyRecord21);
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
    org.junit.Assert.assertTrue("'" + int24 + "' != '" + 48 + "'", int24 == 48);
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1125899906842623L + "'",
        long26 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord29);
    org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
    org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord37);
    org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
    org.junit.Assert.assertTrue("'" + int41 + "' != '" + 48 + "'", int41 == 48);
    org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1125899906842623L + "'",
        long46 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord47);
    org.junit.Assert.assertNotNull(propertyRecord48);
    org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord51);
    org.junit.Assert.assertTrue("'" + int54 + "' != '" + 48 + "'", int54 == 48);
    org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1125899906842623L + "'",
        long55 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord58);
    org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-1L) + "'", long59 == (-1L));
    org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-1L) + "'", long64 == (-1L));
    org.junit.Assert.assertTrue("'" + int67 + "' != '" + 48 + "'", int67 == 48);
    org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1125899906842623L + "'",
        long72 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord73);
    org.junit.Assert.assertNotNull(propertyRecord74);
    org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-1L) + "'", long75 == (-1L));
    org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-1L) + "'", long76 == (-1L));
    org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1125899906842623L + "'",
        long78 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord81);
    org.junit.Assert.assertTrue("'" + long82 + "' != '" + (-1L) + "'", long82 == (-1L));
    org.junit.Assert.assertTrue("'" + long83 + "' != '" + (-1L) + "'", long83 == (-1L));
    org.junit.Assert.assertTrue("'" + long84 + "' != '" + (-1L) + "'", long84 == (-1L));
    org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-1L) + "'", long85 == (-1L));
    org.junit.Assert.assertTrue("'" + long86 + "' != '" + (-1L) + "'", long86 == (-1L));
  }

  @Test
  public void test0931() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0931");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = recordFormatDynamicRecordImpl0.newRecord();
    int int9 = recordFormatDynamicRecordImpl0.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord10 = recordFormatDynamicRecordImpl0.newRecord();
    long long11 = recordFormatDynamicRecordImpl0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl12 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean14 = recordFormatDynamicRecordImpl12.equals((java.lang.Object) 100.0f);
    int int17 = recordFormatDynamicRecordImpl12.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord18 = recordFormatDynamicRecordImpl12.newRecord();
    int int21 = recordFormatDynamicRecordImpl12.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord22 = recordFormatDynamicRecordImpl12.newRecord();
    org.neo4j.internal.id.IdSequence idSequence24 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext25 = null;
    recordFormatDynamicRecordImpl0.prepare(dynamicRecord22, (int) (short) -1, idSequence24,
        cursorContext25);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat27 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat28 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long29 = relationshipGroupHighLimitRecordFormat28.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat30 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord31 = null;
    long long32 = relationshipGroupHighLimitRecordFormat30.getNextRecordReference(
        relationshipGroupRecord31);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord33 = relationshipGroupHighLimitRecordFormat30.newRecord();
    org.neo4j.internal.id.IdSequence idSequence35 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext36 = null;
    relationshipGroupHighLimitRecordFormat28.prepare(relationshipGroupRecord33, (int) (byte) 1,
        idSequence35, cursorContext36);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat38 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader39 = null;
    int int40 = relationshipGroupRecordFormat38.getRecordSize(storeHeader39);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat41 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long42 = relationshipGroupHighLimitRecordFormat41.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat43 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord44 = null;
    long long45 = relationshipGroupHighLimitRecordFormat43.getNextRecordReference(
        relationshipGroupRecord44);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord46 = relationshipGroupHighLimitRecordFormat43.newRecord();
    org.neo4j.internal.id.IdSequence idSequence48 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext49 = null;
    relationshipGroupHighLimitRecordFormat41.prepare(relationshipGroupRecord46, 0, idSequence48,
        cursorContext49);
    long long51 = relationshipGroupRecordFormat38.getNextRecordReference(relationshipGroupRecord46);
    long long52 = relationshipGroupHighLimitRecordFormat28.getNextRecordReference(
        relationshipGroupRecord46);
    org.neo4j.internal.id.IdSequence idSequence54 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext55 = null;
    relationshipGroupRecordFormat27.prepare(relationshipGroupRecord46, 35, idSequence54,
        cursorContext55);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord57 = relationshipGroupRecordFormat27.newRecord();
    boolean boolean58 = recordFormatDynamicRecordImpl0.equals(
        (java.lang.Object) relationshipGroupRecordFormat27);
    int int59 = relationshipGroupRecordFormat27.getRecordHeaderSize();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord6);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord10);
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1125899906842623L + "'",
        long11 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    org.junit.Assert.assertTrue("'" + int17 + "' != '" + 16 + "'", int17 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord18);
    org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord22);
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1125899906842623L + "'",
        long29 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord33);
    org.junit.Assert.assertTrue("'" + int40 + "' != '" + 32 + "'", int40 == 32);
    org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1125899906842623L + "'",
        long42 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord46);
    org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
    org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord57);
    org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
  }

  @Test
  public void test0932() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0932");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord2 = relationshipHighLimitRecordFormat1.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader4 = null;
    int int5 = relationshipRecordFormat3.getRecordSize(storeHeader4);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat8 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord9 = relationshipRecordFormat8.newRecord();
    long long10 = relationshipHighLimitRecordFormat7.getNextRecordReference(relationshipRecord9);
    org.neo4j.internal.id.IdSequence idSequence12 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext13 = null;
    relationshipRecordFormat3.prepare(relationshipRecord9, 3, idSequence12, cursorContext13);
    org.neo4j.internal.id.IdSequence idSequence16 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext17 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord9, 0, idSequence16,
        cursorContext17);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader19 = null;
    int int20 = relationshipHighLimitRecordFormat1.getRecordSize(storeHeader19);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_21 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat22 = v300_21.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat23 = v300_21.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat24 = v300_21.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat25 = v300_21.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat26 = v300_21.labelToken();
    java.lang.String str27 = v300_21.name();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray28 = v300_21.capabilities();
    boolean boolean29 = relationshipHighLimitRecordFormat1.equals(
        (java.lang.Object) capabilityArray28);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat30 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat31 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord32 = relationshipRecordFormat31.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord33 = relationshipRecordFormat31.newRecord();
    org.neo4j.internal.id.IdSequence idSequence35 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext36 = null;
    relationshipRecordFormat30.prepare(relationshipRecord33, 100, idSequence35, cursorContext36);
    int int40 = relationshipRecordFormat30.getPageSize(0, 3);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord41 = relationshipRecordFormat30.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat43 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat45 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord46 = relationshipHighLimitRecordFormat45.newRecord();
    org.neo4j.internal.id.IdSequence idSequence48 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext49 = null;
    relationshipHighLimitRecordFormat43.prepare(relationshipRecord46, (int) 'a', idSequence48,
        cursorContext49);
    org.neo4j.internal.id.IdSequence idSequence52 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext53 = null;
    relationshipRecordFormat30.prepare(relationshipRecord46, 3, idSequence52, cursorContext53);
    org.neo4j.internal.id.IdSequence idSequence56 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext57 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord46, (int) (byte) 100, idSequence56,
        cursorContext57);
    org.junit.Assert.assertNotNull(relationshipRecord2);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
    org.junit.Assert.assertNotNull(relationshipRecord9);
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat22);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat23);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat24);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat25);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat26);
    org.junit.Assert.assertEquals("'" + str27 + "' != '" + "high_limitV3_0_0" + "'", str27,
        "high_limitV3_0_0");
    org.junit.Assert.assertNotNull(capabilityArray28);
    org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    org.junit.Assert.assertNotNull(relationshipRecord32);
    org.junit.Assert.assertNotNull(relationshipRecord33);
    org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord41);
    org.junit.Assert.assertNotNull(relationshipRecord46);
  }

  @Test
  public void test0933() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0933");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat1 = v320_0.dynamic();
    java.lang.String str2 = v320_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat3 = v320_0.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat4 = v320_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily5 = v320_0.getFormatFamily();
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_2_0" + "'", str2,
        "high_limitV3_2_0");
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat3);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat4);
    org.junit.Assert.assertTrue(
        "'" + formatFamily5 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily5.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
  }

  @Test
  public void test0934() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0934");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.FactoryHighLimitDefaultImpl factoryHighLimitDefaultImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.FactoryHighLimitDefaultImpl();
    java.lang.String str1 = factoryHighLimitDefaultImpl0.getName();
    java.lang.String str2 = factoryHighLimitDefaultImpl0.getName();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats3 = factoryHighLimitDefaultImpl0.newInstance();
    java.lang.String str4 = factoryHighLimitDefaultImpl0.getName();
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "high_limitV3_1_0" + "'", str1,
        "high_limitV3_1_0");
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_1_0" + "'", str2,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(recordFormats3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "high_limitV3_1_0" + "'", str4,
        "high_limitV3_1_0");
  }

  @Test
  public void test0935() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0935");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord2 = relationshipHighLimitRecordFormat1.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord5 = relationshipHighLimitRecordFormat4.newRecord();
    org.neo4j.internal.id.IdSequence idSequence7 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext8 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord5, (int) (short) 1, idSequence7,
        cursorContext8);
    int int10 = relationshipHighLimitRecordFormat1.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) '4');
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord13 = relationshipHighLimitRecordFormat12.newRecord();
    long long14 = relationshipHighLimitRecordFormat1.getNextRecordReference(relationshipRecord13);
    int int17 = relationshipHighLimitRecordFormat1.getPageSize(128, 2);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord18 = relationshipHighLimitRecordFormat1.newRecord();
    org.junit.Assert.assertNotNull(relationshipRecord2);
    org.junit.Assert.assertNotNull(relationshipRecord5);
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord13);
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    org.junit.Assert.assertTrue("'" + int17 + "' != '" + 128 + "'", int17 == 128);
    org.junit.Assert.assertNotNull(relationshipRecord18);
  }

  @Test
  public void test0936() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0936");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod((long) 64,
        0L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 64L + "'", long2 == 64L);
  }

  @Test
  public void test0937() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0937");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat1 = v320_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat2 = v320_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat3 = v320_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat4 = v320_0.property();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily5 = v320_0.getFormatFamily();
    org.neo4j.storageengine.api.format.Capability capability6 = null;
    boolean boolean7 = v320_0.hasCapability(capability6);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat8 = v320_0.propertyKeyToken();
    int int9 = v320_0.generation();
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat1);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat2);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat3);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat4);
    org.junit.Assert.assertTrue(
        "'" + formatFamily5 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily5.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat8);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
  }

  @Test
  public void test0938() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0938");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    int int1 = nodeRecordFormat0.getRecordHeaderSize();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.NodeRecordFormat nodeRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.NodeRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord4 = null;
    long long5 = nodeRecordFormat3.getNextRecordReference(nodeRecord4);
    int int6 = nodeRecordFormat3.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader7 = null;
    int int8 = nodeRecordFormat3.getRecordSize(storeHeader7);
    int int11 = nodeRecordFormat3.getPageSize((int) '4', (int) (short) 1);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord12 = nodeRecordFormat3.newRecord();
    int int13 = nodeRecordFormat2.rerdtlgForRE(nodeRecord12);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord14 = nodeRecordFormat2.newRecord();
    int int15 = nodeRecordFormat0.rerdtlgForRE(nodeRecord14);
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_16 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat17 = v320_16.dynamic();
    java.lang.String str18 = v320_16.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat19 = v320_16.relationshipTypeToken();
    java.lang.String str20 = v320_16.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat21 = v320_16.relationshipGroup();
    boolean boolean22 = nodeRecordFormat0.equals((java.lang.Object) v320_16);
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
    org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    org.junit.Assert.assertTrue("'" + int8 + "' != '" + 16 + "'", int8 == 16);
    org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
    org.junit.Assert.assertNotNull(nodeRecord12);
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    org.junit.Assert.assertNotNull(nodeRecord14);
    org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat17);
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "high_limitV3_2_0" + "'", str18,
        "high_limitV3_2_0");
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat19);
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "high_limitV3_2_0" + "'", str20,
        "high_limitV3_2_0");
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat21);
    org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
  }

  @Test
  public void test0939() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0939");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = propertyRecordFormat0.getRecordSize(storeHeader1);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader3 = null;
    int int4 = propertyRecordFormat0.getRecordSize(storeHeader3);
    int int5 = propertyRecordFormat0.getRecordHeaderSize();
    long long6 = propertyRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader7 = null;
    int int8 = propertyRecordFormat0.getRecordSize(storeHeader7);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 48 + "'", int4 == 48);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1125899906842623L + "'",
        long6 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int8 + "' != '" + 48 + "'", int8 == 48);
  }

  @Test
  public void test0940() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0940");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat1 = v320_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat2 = v320_0.relationshipTypeToken();
    java.lang.String str3 = v320_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat4 = v320_0.propertyKeyToken();
    java.lang.String str5 = v320_0.toString();
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat1);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat2);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "high_limitV3_2_0" + "'", str3,
        "high_limitV3_2_0");
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "RecordFormat:V320[vE.H.3]" + "'", str5,
        "RecordFormat:V320[vE.H.3]");
  }

  @Test
  public void test0941() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0941");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_6 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat7 = v306_6.node();
    org.neo4j.storageengine.api.format.Capability capability8 = null;
    boolean boolean9 = v306_6.hasCapability(capability8);
    org.neo4j.storageengine.api.format.CapabilityType capabilityType10 = null;
    boolean boolean11 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_6, capabilityType10);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat12 = v306_6.node();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat7);
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat12);
  }

  @Test
  public void test0942() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0942");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord1 = propertyRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader3 = null;
    int int4 = propertyRecordFormat2.getRecordSize(storeHeader3);
    long long5 = propertyRecordFormat2.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat6 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord8 = propertyRecordFormat7.newRecord();
    long long9 = propertyOneByteHeaderRecordFormat6.getNextRecordReference(propertyRecord8);
    org.neo4j.internal.id.IdSequence idSequence11 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext12 = null;
    propertyRecordFormat2.prepare(propertyRecord8, 0, idSequence11, cursorContext12);
    long long14 = propertyRecordFormat0.getNextRecordReference(propertyRecord8);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader16 = null;
    int int17 = propertyRecordFormat15.getRecordSize(storeHeader16);
    int int20 = propertyRecordFormat15.getPageSize((int) (byte) -1, 128);
    long long21 = propertyRecordFormat15.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat22 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord23 = propertyOneByteHeaderRecordFormat22.newRecord();
    long long24 = propertyRecordFormat15.getNextRecordReference(propertyRecord23);
    org.neo4j.io.pagecache.PageCursor pageCursor25 = null;
    try {
      propertyRecordFormat0.write(propertyRecord23, pageCursor25, (int) '4', (int) (byte) 10);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(propertyRecord1);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 48 + "'", int4 == 48);
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1125899906842623L + "'",
        long5 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord8);
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    org.junit.Assert.assertTrue("'" + int17 + "' != '" + 48 + "'", int17 == 48);
    org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1125899906842623L + "'",
        long21 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord23);
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
  }

  @Test
  public void test0943() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0943");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat1 = v320_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat2 = v320_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat3 = v320_0.property();
    java.lang.String str4 = v320_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat5 = v320_0.dynamic();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily6 = v320_0.getFormatFamily();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat7 = v320_0.relationshipGroup();
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat1);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat2);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "high_limitV3_2_0" + "'", str4,
        "high_limitV3_2_0");
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat5);
    org.junit.Assert.assertTrue(
        "'" + formatFamily6 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily6.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat7);
  }

  @Test
  public void test0944() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0944");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    org.neo4j.storageengine.api.format.Capability[] capabilityArray6 = v306_0.capabilities();
    org.neo4j.kernel.impl.store.format.RecordFormats[] recordFormatsArray7 = v306_0.compatibleVersionsForRollingUpgrade();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat8 = v306_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat9 = v306_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat10 = v306_0.schema();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.MetaDataRecord> metaDataRecordRecordFormat11 = v306_0.metaData();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat12 = v306_0.relationshipGroup();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(capabilityArray6);
    org.junit.Assert.assertNotNull(recordFormatsArray7);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat8);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat9);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat10);
    org.junit.Assert.assertNotNull(metaDataRecordRecordFormat11);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat12);
  }

  @Test
  public void test0945() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0945");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl6 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean8 = recordFormatDynamicRecordImpl6.equals((java.lang.Object) 100.0f);
    int int11 = recordFormatDynamicRecordImpl6.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord12 = recordFormatDynamicRecordImpl6.newRecord();
    int int15 = recordFormatDynamicRecordImpl6.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord16 = recordFormatDynamicRecordImpl6.newRecord();
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord17 = recordFormatDynamicRecordImpl6.newRecord();
    org.neo4j.internal.id.IdSequence idSequence19 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext20 = null;
    recordFormatDynamicRecordImpl0.prepare(dynamicRecord17, 10, idSequence19, cursorContext20);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat22 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader23 = null;
    int int24 = propertyRecordFormat22.getRecordSize(storeHeader23);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl25 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats26 = highLimitFactoryDefaultImpl25.newInstance();
    boolean boolean27 = propertyRecordFormat22.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl25);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat29 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean30 = propertyRecordFormat22.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord31 = propertyRecordFormat22.newRecord();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader32 = null;
    int int33 = propertyRecordFormat22.getRecordSize(storeHeader32);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat34 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat35 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord36 = propertyRecordFormat35.newRecord();
    long long37 = propertyOneByteHeaderRecordFormat34.getNextRecordReference(propertyRecord36);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat38 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat39 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord40 = propertyRecordFormat39.newRecord();
    long long41 = propertyOneByteHeaderRecordFormat38.getNextRecordReference(propertyRecord40);
    long long42 = propertyOneByteHeaderRecordFormat34.getNextRecordReference(propertyRecord40);
    org.neo4j.internal.id.IdSequence idSequence44 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext45 = null;
    propertyRecordFormat22.prepare(propertyRecord40, 99, idSequence44, cursorContext45);
    boolean boolean47 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) idSequence44);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl48 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    java.lang.String str49 = highLimitFactoryDefaultImpl48.getName();
    boolean boolean50 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) str49);
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    org.junit.Assert.assertTrue("'" + int11 + "' != '" + 16 + "'", int11 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord12);
    org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord16);
    org.junit.Assert.assertNotNull(dynamicRecord17);
    org.junit.Assert.assertTrue("'" + int24 + "' != '" + 48 + "'", int24 == 48);
    org.junit.Assert.assertNotNull(recordFormats26);
    org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    org.junit.Assert.assertNotNull(propertyRecord31);
    org.junit.Assert.assertTrue("'" + int33 + "' != '" + 48 + "'", int33 == 48);
    org.junit.Assert.assertNotNull(propertyRecord36);
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord40);
    org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
    org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    org.junit.Assert.assertEquals("'" + str49 + "' != '" + "high_limitV4_0_0" + "'", str49,
        "high_limitV4_0_0");
    org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
  }

  @Test
  public void test0946() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0946");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat6 = v300_1.relationship();
    boolean boolean8 = v300_1.equals((java.lang.Object) 24);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat9 = v300_1.schema();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat10 = v300_1.dynamic();
    int int11 = v300_1.generation();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat6);
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat9);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat10);
    org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
  }

  @Test
  public void test0947() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0947");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = propertyRecordFormat0.getRecordSize(storeHeader1);
    int int5 = propertyRecordFormat0.getPageSize((int) (byte) -1, 128);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat6 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long7 = propertyOneByteHeaderRecordFormat6.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord8 = propertyOneByteHeaderRecordFormat6.newRecord();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord9 = propertyOneByteHeaderRecordFormat6.newRecord();
    long long10 = propertyRecordFormat0.getNextRecordReference(propertyRecord9);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat11 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader12 = null;
    int int13 = propertyRecordFormat11.getRecordSize(storeHeader12);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl14 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats15 = highLimitFactoryDefaultImpl14.newInstance();
    boolean boolean16 = propertyRecordFormat11.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl14);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat18 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean19 = propertyRecordFormat11.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord20 = null;
    org.neo4j.internal.id.IdSequence idSequence22 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext23 = null;
    propertyRecordFormat11.prepare(propertyRecord20, (int) (short) 0, idSequence22,
        cursorContext23);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat25 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord26 = propertyRecordFormat25.newRecord();
    org.neo4j.internal.id.IdSequence idSequence28 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext29 = null;
    propertyRecordFormat11.prepare(propertyRecord26, 52, idSequence28, cursorContext29);
    org.neo4j.io.pagecache.PageCursor pageCursor31 = null;
    try {
      propertyRecordFormat0.write(propertyRecord26, pageCursor31, (int) '4', 99);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1125899906842623L + "'",
        long7 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord8);
    org.junit.Assert.assertNotNull(propertyRecord9);
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 48 + "'", int13 == 48);
    org.junit.Assert.assertNotNull(recordFormats15);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    org.junit.Assert.assertNotNull(propertyRecord26);
  }

  @Test
  public void test0948() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0948");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    org.neo4j.storageengine.api.format.Capability[] capabilityArray6 = v306_0.capabilities();
    org.neo4j.kernel.impl.store.format.RecordFormats[] recordFormatsArray7 = v306_0.compatibleVersionsForRollingUpgrade();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat8 = v306_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat9 = v306_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat10 = v306_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat11 = v306_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat12 = v306_0.relationship();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(capabilityArray6);
    org.junit.Assert.assertNotNull(recordFormatsArray7);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat8);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat9);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat10);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat11);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat12);
  }

  @Test
  public void test0949() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0949");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat nodeRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.NodeRecordFormat();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord1 = null;
    long long2 = nodeRecordFormat0.getNextRecordReference(nodeRecord1);
    int int3 = nodeRecordFormat0.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader4 = null;
    int int5 = nodeRecordFormat0.getRecordSize(storeHeader4);
    int int8 = nodeRecordFormat0.getPageSize((int) '4', (int) (short) 1);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord9 = nodeRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_10 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat11 = v306_10.relationship();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray12 = v306_10.capabilities();
    java.lang.String str13 = v306_10.introductionVersion();
    boolean boolean14 = nodeRecordFormat0.equals((java.lang.Object) v306_10);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_15 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily16 = v300_15.getFormatFamily();
    boolean boolean17 = v306_10.equals((java.lang.Object) formatFamily16);
    java.lang.String str18 = v306_10.toString();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat19 = v306_10.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat20 = v306_10.relationshipGroup();
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
    org.junit.Assert.assertNotNull(nodeRecord9);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat11);
    org.junit.Assert.assertNotNull(capabilityArray12);
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "3.0.6" + "'", str13, "3.0.6");
    org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    org.junit.Assert.assertTrue(
        "'" + formatFamily16 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily16.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "RecordFormat:V306[vE.H.0b]" + "'",
        str18, "RecordFormat:V306[vE.H.0b]");
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat19);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat20);
  }

  @Test
  public void test0950() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0950");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod(26L, 144L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 154L + "'", long2 == 154L);
  }

  @Test
  public void test0951() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0951");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.FactoryHighLimitDefaultImpl factoryHighLimitDefaultImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.FactoryHighLimitDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats1 = factoryHighLimitDefaultImpl0.newInstance();
    java.lang.String str2 = factoryHighLimitDefaultImpl0.getName();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats3 = factoryHighLimitDefaultImpl0.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats[] recordFormatsArray4 = recordFormats3.compatibleVersionsForRollingUpgrade();
    org.junit.Assert.assertNotNull(recordFormats1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_0_6" + "'", str2,
        "high_limitV3_0_6");
    org.junit.Assert.assertNotNull(recordFormats3);
    org.junit.Assert.assertNotNull(recordFormatsArray4);
  }

  @Test
  public void test0952() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0952");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl3 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean5 = recordFormatDynamicRecordImpl3.equals((java.lang.Object) 100.0f);
    int int8 = recordFormatDynamicRecordImpl3.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord9 = recordFormatDynamicRecordImpl3.newRecord();
    int int12 = recordFormatDynamicRecordImpl3.getPageSize(48, 35);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl13 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean15 = recordFormatDynamicRecordImpl13.equals((java.lang.Object) 100.0f);
    int int18 = recordFormatDynamicRecordImpl13.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord19 = recordFormatDynamicRecordImpl13.newRecord();
    long long20 = recordFormatDynamicRecordImpl3.getNextRecordReference(dynamicRecord19);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl21 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean23 = recordFormatDynamicRecordImpl21.equals((java.lang.Object) 100.0f);
    int int26 = recordFormatDynamicRecordImpl21.getPageSize(16, (-1));
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl27 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    int int30 = recordFormatDynamicRecordImpl27.getPageSize(24, 8);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl31 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean33 = recordFormatDynamicRecordImpl31.equals((java.lang.Object) 100.0f);
    int int36 = recordFormatDynamicRecordImpl31.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord37 = recordFormatDynamicRecordImpl31.newRecord();
    long long38 = recordFormatDynamicRecordImpl27.getNextRecordReference(dynamicRecord37);
    org.neo4j.internal.id.IdSequence idSequence40 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext41 = null;
    recordFormatDynamicRecordImpl21.prepare(dynamicRecord37, 10, idSequence40, cursorContext41);
    org.neo4j.internal.id.IdSequence idSequence44 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext45 = null;
    recordFormatDynamicRecordImpl3.prepare(dynamicRecord37, 35, idSequence44, cursorContext45);
    org.neo4j.io.pagecache.PageCursor pageCursor47 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad48 = null;
    try {
      recordFormatDynamicRecordImpl0.read(dynamicRecord37, pageCursor47, recordLoad48, 30, 0);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    org.junit.Assert.assertTrue("'" + int8 + "' != '" + 16 + "'", int8 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord9);
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord19);
    org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    org.junit.Assert.assertTrue("'" + int26 + "' != '" + 16 + "'", int26 == 16);
    org.junit.Assert.assertTrue("'" + int30 + "' != '" + 24 + "'", int30 == 24);
    org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    org.junit.Assert.assertTrue("'" + int36 + "' != '" + 16 + "'", int36 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord37);
    org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
  }

  @Test
  public void test0953() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0953");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat1 = v300_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat2 = v300_0.relationship();
    int int3 = v300_0.generation();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat4 = v300_0.property();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat1);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat2);
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat4);
  }

  @Test
  public void test0954() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0954");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 1);
    int int4 = nodeHighLimitRecordFormat1.getPageSize(48, (int) '#');
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord5 = nodeHighLimitRecordFormat1.newRecord();
    int int6 = nodeHighLimitRecordFormat1.getRecordHeaderSize();
    int int9 = nodeHighLimitRecordFormat1.getPageSize(3, 1);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
    org.junit.Assert.assertNotNull(nodeRecord5);
    org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
  }

  @Test
  public void test0955() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0955");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord6 = recordFormatDynamicRecordImpl0.newRecord();
    int int9 = recordFormatDynamicRecordImpl0.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord10 = recordFormatDynamicRecordImpl0.newRecord();
    int int13 = recordFormatDynamicRecordImpl0.getPageSize((int) '4', (int) (short) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_14 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat15 = v320_14.relationship();
    boolean boolean16 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) v320_14);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord17 = recordFormatDynamicRecordImpl0.newRecord();
    int int20 = recordFormatDynamicRecordImpl0.getPageSize((int) (byte) 100, 4);
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord6);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord10);
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat15);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    org.junit.Assert.assertNotNull(dynamicRecord17);
    org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
  }

  @Test
  public void test0956() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0956");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long1 = relationshipGroupHighLimitRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord3 = null;
    long long4 = relationshipGroupHighLimitRecordFormat2.getNextRecordReference(
        relationshipGroupRecord3);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord5 = relationshipGroupHighLimitRecordFormat2.newRecord();
    org.neo4j.internal.id.IdSequence idSequence7 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext8 = null;
    relationshipGroupHighLimitRecordFormat0.prepare(relationshipGroupRecord5, (int) (byte) 1,
        idSequence7, cursorContext8);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat10 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader11 = null;
    int int12 = relationshipGroupRecordFormat10.getRecordSize(storeHeader11);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat13 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long14 = relationshipGroupHighLimitRecordFormat13.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord16 = null;
    long long17 = relationshipGroupHighLimitRecordFormat15.getNextRecordReference(
        relationshipGroupRecord16);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord18 = relationshipGroupHighLimitRecordFormat15.newRecord();
    org.neo4j.internal.id.IdSequence idSequence20 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext21 = null;
    relationshipGroupHighLimitRecordFormat13.prepare(relationshipGroupRecord18, 0, idSequence20,
        cursorContext21);
    long long23 = relationshipGroupRecordFormat10.getNextRecordReference(relationshipGroupRecord18);
    org.neo4j.internal.id.IdSequence idSequence25 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext26 = null;
    relationshipGroupHighLimitRecordFormat0.prepare(relationshipGroupRecord18, 10, idSequence25,
        cursorContext26);
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord5);
    org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32 + "'", int12 == 32);
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1125899906842623L + "'",
        long14 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord18);
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
  }

  @Test
  public void test0957() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0957");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod(47L,
        (long) (-1));
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
  }

  @Test
  public void test0958() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0958");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long1 = propertyOneByteHeaderRecordFormat0.getMaxId();
    org.neo4j.io.pagecache.PageCursor pageCursor2 = null;
    try {
      boolean boolean3 = propertyOneByteHeaderRecordFormat0.isInUse(pageCursor2);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
  }

  @Test
  public void test0959() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0959");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        (int) ' ');
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long3 = relationshipGroupHighLimitRecordFormat2.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord5 = null;
    long long6 = relationshipGroupHighLimitRecordFormat4.getNextRecordReference(
        relationshipGroupRecord5);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord7 = relationshipGroupHighLimitRecordFormat4.newRecord();
    org.neo4j.internal.id.IdSequence idSequence9 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext10 = null;
    relationshipGroupHighLimitRecordFormat2.prepare(relationshipGroupRecord7, (int) (byte) 1,
        idSequence9, cursorContext10);
    org.neo4j.io.pagecache.PageCursor pageCursor12 = null;
    try {
      relationshipGroupHighLimitRecordFormat1.write(relationshipGroupRecord7, pageCursor12, 24,
          (int) (byte) 0);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1125899906842623L + "'",
        long3 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord7);
  }

  @Test
  public void test0960() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0960");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long1 = relationshipGroupHighLimitRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord3 = null;
    long long4 = relationshipGroupHighLimitRecordFormat2.getNextRecordReference(
        relationshipGroupRecord3);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord5 = relationshipGroupHighLimitRecordFormat2.newRecord();
    org.neo4j.internal.id.IdSequence idSequence7 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext8 = null;
    relationshipGroupHighLimitRecordFormat0.prepare(relationshipGroupRecord5, (int) (byte) 1,
        idSequence7, cursorContext8);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat10 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord11 = null;
    long long12 = relationshipGroupHighLimitRecordFormat10.getNextRecordReference(
        relationshipGroupRecord11);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord13 = relationshipGroupHighLimitRecordFormat10.newRecord();
    org.neo4j.internal.id.IdSequence idSequence15 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext16 = null;
    relationshipGroupHighLimitRecordFormat0.prepare(relationshipGroupRecord13, 0, idSequence15,
        cursorContext16);
    long long18 = relationshipGroupHighLimitRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat19 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat20 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long21 = relationshipGroupHighLimitRecordFormat20.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat22 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord23 = null;
    long long24 = relationshipGroupHighLimitRecordFormat22.getNextRecordReference(
        relationshipGroupRecord23);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord25 = relationshipGroupHighLimitRecordFormat22.newRecord();
    org.neo4j.internal.id.IdSequence idSequence27 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext28 = null;
    relationshipGroupHighLimitRecordFormat20.prepare(relationshipGroupRecord25, (int) (byte) 1,
        idSequence27, cursorContext28);
    long long30 = relationshipGroupHighLimitRecordFormat19.getNextRecordReference(
        relationshipGroupRecord25);
    org.neo4j.io.pagecache.PageCursor pageCursor31 = null;
    try {
      relationshipGroupHighLimitRecordFormat0.write(relationshipGroupRecord25, pageCursor31,
          (int) '4', 8);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord5);
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord13);
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1125899906842623L + "'",
        long18 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1125899906842623L + "'",
        long21 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord25);
    org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
  }

  @Test
  public void test0961() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0961");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_6 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat7 = v306_6.node();
    org.neo4j.storageengine.api.format.Capability capability8 = null;
    boolean boolean9 = v306_6.hasCapability(capability8);
    org.neo4j.storageengine.api.format.CapabilityType capabilityType10 = null;
    boolean boolean11 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_6, capabilityType10);
    org.neo4j.kernel.impl.store.format.RecordFormats[] recordFormatsArray12 = v306_6.compatibleVersionsForRollingUpgrade();
    java.lang.String str13 = v306_6.introductionVersion();
    int int14 = v306_6.generation();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat7);
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    org.junit.Assert.assertNotNull(recordFormatsArray12);
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "3.0.6" + "'", str13, "3.0.6");
    org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
  }

  @Test
  public void test0962() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0962");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord1 = null;
    long long2 = relationshipGroupHighLimitRecordFormat0.getNextRecordReference(
        relationshipGroupRecord1);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord3 = relationshipGroupHighLimitRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader5 = null;
    int int6 = relationshipGroupRecordFormat4.getRecordSize(storeHeader5);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long8 = relationshipGroupHighLimitRecordFormat7.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat9 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord10 = null;
    long long11 = relationshipGroupHighLimitRecordFormat9.getNextRecordReference(
        relationshipGroupRecord10);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord12 = relationshipGroupHighLimitRecordFormat9.newRecord();
    org.neo4j.internal.id.IdSequence idSequence14 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext15 = null;
    relationshipGroupHighLimitRecordFormat7.prepare(relationshipGroupRecord12, (int) (byte) 1,
        idSequence14, cursorContext15);
    org.neo4j.internal.id.IdSequence idSequence18 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext19 = null;
    relationshipGroupRecordFormat4.prepare(relationshipGroupRecord12, 0, idSequence18,
        cursorContext19);
    org.neo4j.io.pagecache.PageCursor pageCursor21 = null;
    try {
      relationshipGroupHighLimitRecordFormat0.write(relationshipGroupRecord12, pageCursor21,
          (int) '#', (int) (byte) 10);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord3);
    org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
    org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1125899906842623L + "'",
        long8 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord12);
  }

  @Test
  public void test0963() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0963");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = propertyRecordFormat0.getRecordSize(storeHeader1);
    long long3 = propertyRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum highLimitEncEnum4 = io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8;
    boolean boolean5 = propertyRecordFormat0.equals((java.lang.Object) highLimitEncEnum4);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord6 = null;
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    propertyRecordFormat0.prepare(propertyRecord6, 128, idSequence8, cursorContext9);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat11 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord13 = propertyRecordFormat12.newRecord();
    long long14 = propertyOneByteHeaderRecordFormat11.getNextRecordReference(propertyRecord13);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat16 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord17 = propertyRecordFormat16.newRecord();
    long long18 = propertyOneByteHeaderRecordFormat15.getNextRecordReference(propertyRecord17);
    long long19 = propertyOneByteHeaderRecordFormat11.getNextRecordReference(propertyRecord17);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat20 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long21 = propertyOneByteHeaderRecordFormat20.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord22 = propertyOneByteHeaderRecordFormat20.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat23 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long24 = propertyOneByteHeaderRecordFormat23.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord25 = propertyOneByteHeaderRecordFormat23.newRecord();
    long long26 = propertyOneByteHeaderRecordFormat20.getNextRecordReference(propertyRecord25);
    org.neo4j.internal.id.IdSequence idSequence28 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext29 = null;
    propertyOneByteHeaderRecordFormat11.prepare(propertyRecord25, (int) (byte) -1, idSequence28,
        cursorContext29);
    long long31 = propertyRecordFormat0.getNextRecordReference(propertyRecord25);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat32 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord33 = null;
    org.neo4j.internal.id.IdSequence idSequence35 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext36 = null;
    propertyRecordFormat32.prepare(propertyRecord33, (int) (short) -1, idSequence35,
        cursorContext36);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord38 = propertyRecordFormat32.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat39 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat40 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord41 = propertyRecordFormat40.newRecord();
    long long42 = propertyOneByteHeaderRecordFormat39.getNextRecordReference(propertyRecord41);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader43 = null;
    int int44 = propertyOneByteHeaderRecordFormat39.getRecordSize(storeHeader43);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat45 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long46 = propertyOneByteHeaderRecordFormat45.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat47 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat48 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord49 = propertyRecordFormat48.newRecord();
    long long50 = propertyOneByteHeaderRecordFormat47.getNextRecordReference(propertyRecord49);
    long long51 = propertyOneByteHeaderRecordFormat45.getNextRecordReference(propertyRecord49);
    org.neo4j.internal.id.IdSequence idSequence53 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext54 = null;
    propertyOneByteHeaderRecordFormat39.prepare(propertyRecord49, 64, idSequence53,
        cursorContext54);
    long long56 = propertyRecordFormat32.getNextRecordReference(propertyRecord49);
    org.neo4j.io.pagecache.PageCursor pageCursor57 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad58 = null;
    try {
      propertyRecordFormat0.read(propertyRecord49, pageCursor57, recordLoad58, 1, 48);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1125899906842623L + "'",
        long3 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + highLimitEncEnum4 + "' != '"
            + io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8 + "'",
        highLimitEncEnum4.equals(
            io.github.onograph.kernel.srv.store.format.highlimit.HighLimitEncEnum.HLENC_BTX_8));
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    org.junit.Assert.assertNotNull(propertyRecord13);
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord17);
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
    org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1125899906842623L + "'",
        long21 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord22);
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1125899906842623L + "'",
        long24 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord25);
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord38);
    org.junit.Assert.assertNotNull(propertyRecord41);
    org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
    org.junit.Assert.assertTrue("'" + int44 + "' != '" + 48 + "'", int44 == 48);
    org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1125899906842623L + "'",
        long46 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord49);
    org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
    org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
    org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-1L) + "'", long56 == (-1L));
  }

  @Test
  public void test0964() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0964");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v306_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat2 = v306_0.schema();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat3 = v306_0.labelToken();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily4 = v306_0.getFormatFamily();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat5 = v306_0.property();
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_6 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.storageengine.api.format.Capability capability7 = null;
    boolean boolean8 = v310_6.hasCapability(capability7);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat9 = v310_6.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat10 = v310_6.node();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType11 = null;
    boolean boolean12 = v306_0.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v310_6, capabilityType11);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat13 = v310_6.property();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat2);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat3);
    org.junit.Assert.assertTrue(
        "'" + formatFamily4 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily4.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat5);
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat9);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat10);
    org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat13);
  }

  @Test
  public void test0965() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0965");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = propertyRecordFormat0.getRecordSize(storeHeader1);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl3 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats4 = highLimitFactoryDefaultImpl3.newInstance();
    boolean boolean5 = propertyRecordFormat0.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl3);
    java.lang.String str6 = highLimitFactoryDefaultImpl3.getName();
    java.lang.String str7 = highLimitFactoryDefaultImpl3.getName();
    java.lang.String str8 = highLimitFactoryDefaultImpl3.getName();
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    org.junit.Assert.assertNotNull(recordFormats4);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "high_limitV4_0_0" + "'", str6,
        "high_limitV4_0_0");
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "high_limitV4_0_0" + "'", str7,
        "high_limitV4_0_0");
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "high_limitV4_0_0" + "'", str8,
        "high_limitV4_0_0");
  }

  @Test
  public void test0966() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0966");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord1 = propertyRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader3 = null;
    int int4 = propertyRecordFormat2.getRecordSize(storeHeader3);
    long long5 = propertyRecordFormat2.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat6 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord8 = propertyRecordFormat7.newRecord();
    long long9 = propertyOneByteHeaderRecordFormat6.getNextRecordReference(propertyRecord8);
    org.neo4j.internal.id.IdSequence idSequence11 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext12 = null;
    propertyRecordFormat2.prepare(propertyRecord8, 0, idSequence11, cursorContext12);
    long long14 = propertyRecordFormat0.getNextRecordReference(propertyRecord8);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord15 = propertyRecordFormat0.newRecord();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader16 = null;
    int int17 = propertyRecordFormat0.getRecordSize(storeHeader16);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord18 = null;
    org.neo4j.io.pagecache.PageCursor pageCursor19 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad20 = null;
    try {
      propertyRecordFormat0.read(propertyRecord18, pageCursor19, recordLoad20, 16, 128);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(propertyRecord1);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 48 + "'", int4 == 48);
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1125899906842623L + "'",
        long5 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord8);
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord15);
    org.junit.Assert.assertTrue("'" + int17 + "' != '" + 48 + "'", int17 == 48);
  }

  @Test
  public void test0967() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0967");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl6 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean8 = recordFormatDynamicRecordImpl6.equals((java.lang.Object) 100.0f);
    int int11 = recordFormatDynamicRecordImpl6.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord12 = recordFormatDynamicRecordImpl6.newRecord();
    int int15 = recordFormatDynamicRecordImpl6.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord16 = recordFormatDynamicRecordImpl6.newRecord();
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord17 = recordFormatDynamicRecordImpl6.newRecord();
    org.neo4j.internal.id.IdSequence idSequence19 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext20 = null;
    recordFormatDynamicRecordImpl0.prepare(dynamicRecord17, 10, idSequence19, cursorContext20);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat22 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader23 = null;
    int int24 = propertyRecordFormat22.getRecordSize(storeHeader23);
    io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl highLimitFactoryDefaultImpl25 = new io.github.onograph.kernel.srv.store.format.highlimit.v400.HighLimitFactoryDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats26 = highLimitFactoryDefaultImpl25.newInstance();
    boolean boolean27 = propertyRecordFormat22.equals(
        (java.lang.Object) highLimitFactoryDefaultImpl25);
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat29 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (short) 100);
    boolean boolean30 = propertyRecordFormat22.equals((java.lang.Object) (short) 100);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord31 = propertyRecordFormat22.newRecord();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader32 = null;
    int int33 = propertyRecordFormat22.getRecordSize(storeHeader32);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat34 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat35 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord36 = propertyRecordFormat35.newRecord();
    long long37 = propertyOneByteHeaderRecordFormat34.getNextRecordReference(propertyRecord36);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat38 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat39 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord40 = propertyRecordFormat39.newRecord();
    long long41 = propertyOneByteHeaderRecordFormat38.getNextRecordReference(propertyRecord40);
    long long42 = propertyOneByteHeaderRecordFormat34.getNextRecordReference(propertyRecord40);
    org.neo4j.internal.id.IdSequence idSequence44 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext45 = null;
    propertyRecordFormat22.prepare(propertyRecord40, 99, idSequence44, cursorContext45);
    boolean boolean47 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) idSequence44);
    long long48 = recordFormatDynamicRecordImpl0.getMaxId();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    org.junit.Assert.assertTrue("'" + int11 + "' != '" + 16 + "'", int11 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord12);
    org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord16);
    org.junit.Assert.assertNotNull(dynamicRecord17);
    org.junit.Assert.assertTrue("'" + int24 + "' != '" + 48 + "'", int24 == 48);
    org.junit.Assert.assertNotNull(recordFormats26);
    org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    org.junit.Assert.assertNotNull(propertyRecord31);
    org.junit.Assert.assertTrue("'" + int33 + "' != '" + 48 + "'", int33 == 48);
    org.junit.Assert.assertNotNull(propertyRecord36);
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord40);
    org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
    org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1125899906842623L + "'",
        long48 == 1125899906842623L);
  }

  @Test
  public void test0968() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0968");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v306_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat2 = v306_0.schema();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat3 = v306_0.labelToken();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily4 = v306_0.getFormatFamily();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat5 = v306_0.labelToken();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat2);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat3);
    org.junit.Assert.assertTrue(
        "'" + formatFamily4 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily4.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat5);
  }

  @Test
  public void test0969() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0969");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat1 = v306_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat2 = v306_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat3 = v306_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.MetaDataRecord> metaDataRecordRecordFormat4 = v306_0.metaData();
    java.lang.String str5 = v306_0.name();
    int int6 = v306_0.generation();
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat1);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat2);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat3);
    org.junit.Assert.assertNotNull(metaDataRecordRecordFormat4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "high_limitV3_0_6" + "'", str5,
        "high_limitV3_0_6");
    org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
  }

  @Test
  public void test0970() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0970");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long1 = propertyOneByteHeaderRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord2 = propertyOneByteHeaderRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long4 = propertyOneByteHeaderRecordFormat3.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord5 = propertyOneByteHeaderRecordFormat3.newRecord();
    long long6 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord5);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader7 = null;
    int int8 = propertyOneByteHeaderRecordFormat0.getRecordSize(storeHeader7);
    long long9 = propertyOneByteHeaderRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader10 = null;
    int int11 = propertyOneByteHeaderRecordFormat0.getRecordSize(storeHeader10);
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord13 = null;
    org.neo4j.internal.id.IdSequence idSequence15 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext16 = null;
    propertyRecordFormat12.prepare(propertyRecord13, (int) (short) -1, idSequence15,
        cursorContext16);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord18 = propertyRecordFormat12.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat19 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat20 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord21 = propertyRecordFormat20.newRecord();
    long long22 = propertyOneByteHeaderRecordFormat19.getNextRecordReference(propertyRecord21);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader23 = null;
    int int24 = propertyOneByteHeaderRecordFormat19.getRecordSize(storeHeader23);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat25 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long26 = propertyOneByteHeaderRecordFormat25.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat27 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat28 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord29 = propertyRecordFormat28.newRecord();
    long long30 = propertyOneByteHeaderRecordFormat27.getNextRecordReference(propertyRecord29);
    long long31 = propertyOneByteHeaderRecordFormat25.getNextRecordReference(propertyRecord29);
    org.neo4j.internal.id.IdSequence idSequence33 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext34 = null;
    propertyOneByteHeaderRecordFormat19.prepare(propertyRecord29, 64, idSequence33,
        cursorContext34);
    long long36 = propertyRecordFormat12.getNextRecordReference(propertyRecord29);
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord37 = propertyRecordFormat12.newRecord();
    long long38 = propertyOneByteHeaderRecordFormat0.getNextRecordReference(propertyRecord37);
    int int41 = propertyOneByteHeaderRecordFormat0.getPageSize(0, 48);
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord2);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1125899906842623L + "'",
        long4 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord5);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    org.junit.Assert.assertTrue("'" + int8 + "' != '" + 48 + "'", int8 == 48);
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1125899906842623L + "'",
        long9 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int11 + "' != '" + 48 + "'", int11 == 48);
    org.junit.Assert.assertNotNull(propertyRecord18);
    org.junit.Assert.assertNotNull(propertyRecord21);
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
    org.junit.Assert.assertTrue("'" + int24 + "' != '" + 48 + "'", int24 == 48);
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1125899906842623L + "'",
        long26 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord29);
    org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
    org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord37);
    org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
    org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
  }

  @Test
  public void test0971() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0971");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat1 = v310_0.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat2 = v310_0.relationshipGroup();
    java.lang.String str3 = v310_0.name();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily4 = v310_0.getFormatFamily();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat1);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat2);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "high_limitV3_1_0" + "'", str3,
        "high_limitV3_1_0");
    org.junit.Assert.assertTrue(
        "'" + formatFamily4 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily4.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
  }

  @Test
  public void test0972() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0972");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        0);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long3 = relationshipGroupHighLimitRecordFormat2.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord5 = null;
    long long6 = relationshipGroupHighLimitRecordFormat4.getNextRecordReference(
        relationshipGroupRecord5);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord7 = relationshipGroupHighLimitRecordFormat4.newRecord();
    org.neo4j.internal.id.IdSequence idSequence9 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext10 = null;
    relationshipGroupHighLimitRecordFormat2.prepare(relationshipGroupRecord7, (int) (byte) 1,
        idSequence9, cursorContext10);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long13 = relationshipGroupHighLimitRecordFormat12.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat14 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord15 = null;
    long long16 = relationshipGroupHighLimitRecordFormat14.getNextRecordReference(
        relationshipGroupRecord15);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord17 = relationshipGroupHighLimitRecordFormat14.newRecord();
    org.neo4j.internal.id.IdSequence idSequence19 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext20 = null;
    relationshipGroupHighLimitRecordFormat12.prepare(relationshipGroupRecord17, (int) (byte) 1,
        idSequence19, cursorContext20);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat22 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord23 = null;
    long long24 = relationshipGroupHighLimitRecordFormat22.getNextRecordReference(
        relationshipGroupRecord23);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord25 = relationshipGroupHighLimitRecordFormat22.newRecord();
    org.neo4j.internal.id.IdSequence idSequence27 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext28 = null;
    relationshipGroupHighLimitRecordFormat12.prepare(relationshipGroupRecord25, 0, idSequence27,
        cursorContext28);
    org.neo4j.internal.id.IdSequence idSequence31 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext32 = null;
    relationshipGroupHighLimitRecordFormat2.prepare(relationshipGroupRecord25, 128, idSequence31,
        cursorContext32);
    org.neo4j.internal.id.IdSequence idSequence35 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext36 = null;
    relationshipGroupHighLimitRecordFormat1.prepare(relationshipGroupRecord25, 16, idSequence35,
        cursorContext36);
    long long38 = relationshipGroupHighLimitRecordFormat1.getMaxId();
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1125899906842623L + "'",
        long3 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord7);
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1125899906842623L + "'",
        long13 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord17);
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord25);
    org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1125899906842623L + "'",
        long38 == 1125899906842623L);
  }

  @Test
  public void test0973() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0973");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat propertyRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = propertyRecordFormat0.getRecordSize(storeHeader1);
    int int5 = propertyRecordFormat0.getPageSize((int) (byte) -1, 128);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat6 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long7 = propertyOneByteHeaderRecordFormat6.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord8 = propertyOneByteHeaderRecordFormat6.newRecord();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord9 = propertyOneByteHeaderRecordFormat6.newRecord();
    long long10 = propertyRecordFormat0.getNextRecordReference(propertyRecord9);
    org.neo4j.io.pagecache.PageCursor pageCursor11 = null;
    try {
      boolean boolean12 = propertyRecordFormat0.isInUse(pageCursor11);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1125899906842623L + "'",
        long7 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord8);
    org.junit.Assert.assertNotNull(propertyRecord9);
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
  }

  @Test
  public void test0974() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0974");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat4 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord5 = relationshipRecordFormat4.newRecord();
    long long6 = relationshipHighLimitRecordFormat3.getNextRecordReference(relationshipRecord5);
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    relationshipHighLimitRecordFormat1.prepare(relationshipRecord5, (int) (byte) 10, idSequence8,
        cursorContext9);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat12 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat14 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord16 = relationshipRecordFormat15.newRecord();
    long long17 = relationshipHighLimitRecordFormat14.getNextRecordReference(relationshipRecord16);
    org.neo4j.internal.id.IdSequence idSequence19 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext20 = null;
    relationshipHighLimitRecordFormat12.prepare(relationshipRecord16, (int) (byte) 10, idSequence19,
        cursorContext20);
    long long22 = relationshipHighLimitRecordFormat1.getNextRecordReference(relationshipRecord16);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord23 = relationshipHighLimitRecordFormat1.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_24 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat25 = v306_24.node();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily26 = v306_24.getFormatFamily();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.MetaDataRecord> metaDataRecordRecordFormat27 = v306_24.metaData();
    org.neo4j.kernel.impl.store.format.RecordFormats[] recordFormatsArray28 = v306_24.compatibleVersionsForRollingUpgrade();
    boolean boolean29 = relationshipHighLimitRecordFormat1.equals((java.lang.Object) v306_24);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat30 = v306_24.labelToken();
    org.junit.Assert.assertNotNull(relationshipRecord5);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord16);
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
    org.junit.Assert.assertNotNull(relationshipRecord23);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat25);
    org.junit.Assert.assertTrue(
        "'" + formatFamily26 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily26.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertNotNull(metaDataRecordRecordFormat27);
    org.junit.Assert.assertNotNull(recordFormatsArray28);
    org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat30);
  }

  @Test
  public void test0975() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0975");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    int int5 = recordFormatDynamicRecordImpl0.getPageSize(16, (-1));
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl6 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    int int9 = recordFormatDynamicRecordImpl6.getPageSize(24, 8);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl10 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean12 = recordFormatDynamicRecordImpl10.equals((java.lang.Object) 100.0f);
    int int15 = recordFormatDynamicRecordImpl10.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord16 = recordFormatDynamicRecordImpl10.newRecord();
    long long17 = recordFormatDynamicRecordImpl6.getNextRecordReference(dynamicRecord16);
    org.neo4j.internal.id.IdSequence idSequence19 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext20 = null;
    recordFormatDynamicRecordImpl0.prepare(dynamicRecord16, 10, idSequence19, cursorContext20);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat22 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat23 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord24 = propertyRecordFormat23.newRecord();
    long long25 = propertyOneByteHeaderRecordFormat22.getNextRecordReference(propertyRecord24);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat26 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat propertyRecordFormat27 = new io.github.onograph.kernel.srv.store.format.highlimit.v340.PropertyRecordFormat();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord28 = propertyRecordFormat27.newRecord();
    long long29 = propertyOneByteHeaderRecordFormat26.getNextRecordReference(propertyRecord28);
    long long30 = propertyOneByteHeaderRecordFormat22.getNextRecordReference(propertyRecord28);
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat31 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long32 = propertyOneByteHeaderRecordFormat31.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord33 = propertyOneByteHeaderRecordFormat31.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat propertyOneByteHeaderRecordFormat34 = new io.github.onograph.kernel.srv.store.format.highlimit.PropertyOneByteHeaderRecordFormat();
    long long35 = propertyOneByteHeaderRecordFormat34.getMaxId();
    org.neo4j.kernel.impl.store.record.PropertyRecord propertyRecord36 = propertyOneByteHeaderRecordFormat34.newRecord();
    long long37 = propertyOneByteHeaderRecordFormat31.getNextRecordReference(propertyRecord36);
    org.neo4j.internal.id.IdSequence idSequence39 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext40 = null;
    propertyOneByteHeaderRecordFormat22.prepare(propertyRecord36, (int) (byte) -1, idSequence39,
        cursorContext40);
    boolean boolean42 = recordFormatDynamicRecordImpl0.equals(
        (java.lang.Object) propertyOneByteHeaderRecordFormat22);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord43 = recordFormatDynamicRecordImpl0.newRecord();
    long long44 = recordFormatDynamicRecordImpl0.getMaxId();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 24 + "'", int9 == 24);
    org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    org.junit.Assert.assertTrue("'" + int15 + "' != '" + 16 + "'", int15 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord16);
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord24);
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
    org.junit.Assert.assertNotNull(propertyRecord28);
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
    org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
    org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1125899906842623L + "'",
        long32 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord33);
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1125899906842623L + "'",
        long35 == 1125899906842623L);
    org.junit.Assert.assertNotNull(propertyRecord36);
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    org.junit.Assert.assertNotNull(dynamicRecord43);
    org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1125899906842623L + "'",
        long44 == 1125899906842623L);
  }

  @Test
  public void test0976() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0976");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat1 = v320_0.dynamic();
    java.lang.String str2 = v320_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat3 = v320_0.relationship();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily4 = v320_0.getFormatFamily();
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_2_0" + "'", str2,
        "high_limitV3_2_0");
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat3);
    org.junit.Assert.assertTrue(
        "'" + formatFamily4 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily4.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
  }

  @Test
  public void test0977() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0977");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat(
        32);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader3 = null;
    int int4 = relationshipGroupRecordFormat2.getRecordSize(storeHeader3);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long6 = relationshipGroupHighLimitRecordFormat5.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat7 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord8 = null;
    long long9 = relationshipGroupHighLimitRecordFormat7.getNextRecordReference(
        relationshipGroupRecord8);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord10 = relationshipGroupHighLimitRecordFormat7.newRecord();
    org.neo4j.internal.id.IdSequence idSequence12 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext13 = null;
    relationshipGroupHighLimitRecordFormat5.prepare(relationshipGroupRecord10, (int) (byte) 1,
        idSequence12, cursorContext13);
    org.neo4j.internal.id.IdSequence idSequence16 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext17 = null;
    relationshipGroupRecordFormat2.prepare(relationshipGroupRecord10, 0, idSequence16,
        cursorContext17);
    org.neo4j.kernel.impl.store.StoreHeader storeHeader19 = null;
    int int20 = relationshipGroupRecordFormat2.getRecordSize(storeHeader19);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord21 = relationshipGroupRecordFormat2.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord22 = relationshipGroupRecordFormat2.newRecord();
    long long23 = relationshipGroupHighLimitRecordFormat1.getNextRecordReference(
        relationshipGroupRecord22);
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1125899906842623L + "'",
        long6 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord10);
    org.junit.Assert.assertTrue("'" + int20 + "' != '" + 32 + "'", int20 == 32);
    org.junit.Assert.assertNotNull(relationshipGroupRecord21);
    org.junit.Assert.assertNotNull(relationshipGroupRecord22);
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
  }

  @Test
  public void test0978() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0978");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v310_0.relationship();
    java.lang.String str2 = v310_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat3 = v310_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat4 = v310_0.relationshipTypeToken();
    java.lang.String str5 = v310_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat6 = v310_0.schema();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat7 = v310_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat8 = v310_0.propertyKeyToken();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_1_0" + "'", str2,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat3);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat4);
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "high_limitV3_1_0" + "'", str5,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat6);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat7);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat8);
  }

  @Test
  public void test0979() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0979");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod(0L, 2L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 2L + "'", long2 == 2L);
  }

  @Test
  public void test0980() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0980");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = relationshipGroupRecordFormat0.getRecordSize(storeHeader1);
    long long3 = relationshipGroupRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader4 = null;
    int int5 = relationshipGroupRecordFormat0.getRecordSize(storeHeader4);
    org.neo4j.io.pagecache.PageCursor pageCursor6 = null;
    try {
      boolean boolean7 = relationshipGroupRecordFormat0.isInUse(pageCursor6);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 32 + "'", int2 == 32);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1125899906842623L + "'",
        long3 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
  }

  @Test
  public void test0981() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0981");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.FactoryHighLimitDefaultImpl factoryHighLimitDefaultImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.FactoryHighLimitDefaultImpl();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats1 = factoryHighLimitDefaultImpl0.newInstance();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats2 = factoryHighLimitDefaultImpl0.newInstance();
    java.lang.String str3 = factoryHighLimitDefaultImpl0.getName();
    java.lang.String str4 = factoryHighLimitDefaultImpl0.getName();
    org.neo4j.kernel.impl.store.format.RecordFormats recordFormats5 = factoryHighLimitDefaultImpl0.newInstance();
    org.junit.Assert.assertNotNull(recordFormats1);
    org.junit.Assert.assertNotNull(recordFormats2);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "high_limitV3_0_0" + "'", str3,
        "high_limitV3_0_0");
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "high_limitV3_0_0" + "'", str4,
        "high_limitV3_0_0");
    org.junit.Assert.assertNotNull(recordFormats5);
  }

  @Test
  public void test0982() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0982");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord3 = relationshipHighLimitRecordFormat2.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat relationshipHighLimitRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipHighLimitRecordFormat(
        (int) (byte) 1);
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord6 = relationshipHighLimitRecordFormat5.newRecord();
    org.neo4j.internal.id.IdSequence idSequence8 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext9 = null;
    relationshipHighLimitRecordFormat2.prepare(relationshipRecord6, (int) (short) 1, idSequence8,
        cursorContext9);
    int int11 = relationshipHighLimitRecordFormat2.getRecordHeaderSize();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord12 = relationshipHighLimitRecordFormat2.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat13 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat14 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord15 = relationshipRecordFormat14.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord16 = relationshipRecordFormat14.newRecord();
    org.neo4j.internal.id.IdSequence idSequence18 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext19 = null;
    relationshipRecordFormat13.prepare(relationshipRecord16, 100, idSequence18, cursorContext19);
    long long21 = relationshipRecordFormat13.getMaxId();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord22 = relationshipRecordFormat13.newRecord();
    long long23 = relationshipHighLimitRecordFormat2.getNextRecordReference(relationshipRecord22);
    org.neo4j.io.pagecache.PageCursor pageCursor24 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad25 = null;
    try {
      relationshipHighLimitRecordFormat0.read(relationshipRecord22, pageCursor24, recordLoad25,
          (int) (short) 1, 0);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(relationshipRecord3);
    org.junit.Assert.assertNotNull(relationshipRecord6);
    org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    org.junit.Assert.assertNotNull(relationshipRecord12);
    org.junit.Assert.assertNotNull(relationshipRecord15);
    org.junit.Assert.assertNotNull(relationshipRecord16);
    org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1125899906842623L + "'",
        long21 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipRecord22);
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
  }

  @Test
  public void test0983() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0983");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat1 = v300_0.labelToken();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily2 = v300_0.getFormatFamily();
    org.neo4j.kernel.impl.store.format.FormatFamily formatFamily3 = v300_0.getFormatFamily();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat4 = v300_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat5 = v300_0.schema();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat1);
    org.junit.Assert.assertTrue(
        "'" + formatFamily2 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily2.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertTrue(
        "'" + formatFamily3 + "' != '" + org.neo4j.kernel.impl.store.format.FormatFamily.high_limit
            + "'",
        formatFamily3.equals(org.neo4j.kernel.impl.store.format.FormatFamily.high_limit));
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat4);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat5);
  }

  @Test
  public void test0984() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0984");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat1 = v320_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat2 = v320_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat3 = v320_0.property();
    java.lang.String str4 = v320_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat5 = v320_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat6 = v320_0.labelToken();
    java.lang.String str7 = v320_0.introductionVersion();
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat1);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat2);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat3);
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "high_limitV3_2_0" + "'", str4,
        "high_limitV3_2_0");
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat5);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat6);
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "3.2.0" + "'", str7, "3.2.0");
  }

  @Test
  public void test0985() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0985");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        12);
  }

  @Test
  public void test0986() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0986");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat2 = v300_1.labelToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat3 = v300_1.schema();
    org.neo4j.storageengine.api.format.CapabilityType capabilityType4 = null;
    boolean boolean5 = org.neo4j.kernel.impl.store.format.BaseRecordFormats.hasCompatibleCapabilities(
        (org.neo4j.kernel.impl.store.format.RecordFormats) v306_0,
        (org.neo4j.kernel.impl.store.format.RecordFormats) v300_1, capabilityType4);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat6 = v306_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat7 = v306_0.dynamic();
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat2);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat6);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat7);
  }

  @Test
  public void test0987() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0987");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat relationshipRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord2 = relationshipRecordFormat1.newRecord();
    org.neo4j.kernel.impl.store.record.RelationshipRecord relationshipRecord3 = relationshipRecordFormat1.newRecord();
    org.neo4j.internal.id.IdSequence idSequence5 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext6 = null;
    relationshipRecordFormat0.prepare(relationshipRecord3, 100, idSequence5, cursorContext6);
    int int10 = relationshipRecordFormat0.getPageSize(0, 3);
    int int11 = relationshipRecordFormat0.getRecordHeaderSize();
    org.neo4j.io.pagecache.PageCursor pageCursor12 = null;
    try {
      boolean boolean13 = relationshipRecordFormat0.isInUse(pageCursor12);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(relationshipRecord2);
    org.junit.Assert.assertNotNull(relationshipRecord3);
    org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
  }

  @Test
  public void test0988() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0988");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    int int1 = v300_0.generation();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyRecord> propertyRecordRecordFormat2 = v300_0.property();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat3 = v300_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat4 = v300_0.propertyKeyToken();
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    org.junit.Assert.assertNotNull(propertyRecordRecordFormat2);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat3);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat4);
  }

  @Test
  public void test0989() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0989");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl0 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean2 = recordFormatDynamicRecordImpl0.equals((java.lang.Object) 100.0f);
    long long3 = recordFormatDynamicRecordImpl0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl4 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean6 = recordFormatDynamicRecordImpl4.equals((java.lang.Object) 100.0f);
    int int9 = recordFormatDynamicRecordImpl4.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord10 = null;
    org.neo4j.internal.id.IdSequence idSequence12 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext13 = null;
    recordFormatDynamicRecordImpl4.prepare(dynamicRecord10, (int) (byte) -1, idSequence12,
        cursorContext13);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl15 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean17 = recordFormatDynamicRecordImpl15.equals((java.lang.Object) 100.0f);
    int int20 = recordFormatDynamicRecordImpl15.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord21 = recordFormatDynamicRecordImpl15.newRecord();
    long long22 = recordFormatDynamicRecordImpl4.getNextRecordReference(dynamicRecord21);
    org.neo4j.internal.id.IdSequence idSequence24 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext25 = null;
    recordFormatDynamicRecordImpl0.prepare(dynamicRecord21, (int) (short) 10, idSequence24,
        cursorContext25);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl27 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean29 = recordFormatDynamicRecordImpl27.equals((java.lang.Object) 100.0f);
    int int32 = recordFormatDynamicRecordImpl27.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord33 = recordFormatDynamicRecordImpl27.newRecord();
    int int36 = recordFormatDynamicRecordImpl27.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord37 = recordFormatDynamicRecordImpl27.newRecord();
    int int40 = recordFormatDynamicRecordImpl27.getPageSize((int) '4', (int) (short) 1);
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_41 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat42 = v320_41.relationship();
    boolean boolean43 = recordFormatDynamicRecordImpl27.equals((java.lang.Object) v320_41);
    int int46 = recordFormatDynamicRecordImpl27.getPageSize(16, 8);
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_47 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat48 = v310_47.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat49 = v310_47.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat50 = v310_47.labelToken();
    boolean boolean51 = recordFormatDynamicRecordImpl27.equals((java.lang.Object) v310_47);
    io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl recordFormatDynamicRecordImpl52 = new io.github.onograph.kernel.srv.store.format.highlimit.RecordFormatDynamicRecordImpl();
    boolean boolean54 = recordFormatDynamicRecordImpl52.equals((java.lang.Object) 100.0f);
    int int57 = recordFormatDynamicRecordImpl52.getPageSize(16, (-1));
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord58 = recordFormatDynamicRecordImpl52.newRecord();
    int int61 = recordFormatDynamicRecordImpl52.getPageSize(48, 35);
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord62 = recordFormatDynamicRecordImpl52.newRecord();
    org.neo4j.kernel.impl.store.record.DynamicRecord dynamicRecord63 = recordFormatDynamicRecordImpl52.newRecord();
    org.neo4j.internal.id.IdSequence idSequence65 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext66 = null;
    recordFormatDynamicRecordImpl27.prepare(dynamicRecord63, 35, idSequence65, cursorContext66);
    org.neo4j.io.pagecache.PageCursor pageCursor68 = null;
    org.neo4j.kernel.impl.store.record.RecordLoad recordLoad69 = null;
    try {
      recordFormatDynamicRecordImpl0.read(dynamicRecord63, pageCursor68, recordLoad69, (-1),
          (int) (short) 1);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1125899906842623L + "'",
        long3 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16 + "'", int9 == 16);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord21);
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
    org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    org.junit.Assert.assertTrue("'" + int32 + "' != '" + 16 + "'", int32 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord33);
    org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord37);
    org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat42);
    org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    org.junit.Assert.assertTrue("'" + int46 + "' != '" + 16 + "'", int46 == 16);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat48);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat49);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat50);
    org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    org.junit.Assert.assertTrue("'" + int57 + "' != '" + 16 + "'", int57 == 16);
    org.junit.Assert.assertNotNull(dynamicRecord58);
    org.junit.Assert.assertTrue("'" + int61 + "' != '" + 35 + "'", int61 == 35);
    org.junit.Assert.assertNotNull(dynamicRecord62);
    org.junit.Assert.assertNotNull(dynamicRecord63);
  }

  @Test
  public void test0990() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0990");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.V300 v300_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.V300();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v300_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat2 = v300_0.relationshipTypeToken();
    org.neo4j.storageengine.api.format.Capability capability3 = null;
    boolean boolean4 = v300_0.hasCapability(capability3);
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat5 = v300_0.labelToken();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat2);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat5);
  }

  @Test
  public void test0991() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0991");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v306.V306 v306_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v306.V306();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v306_0.relationship();
    org.neo4j.storageengine.api.format.Capability[] capabilityArray2 = v306_0.capabilities();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat3 = v306_0.labelToken();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertNotNull(capabilityArray2);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat3);
  }

  @Test
  public void test0992() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0992");
    }
    long long2 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.longFromIntAndMod(58L, 383L);
    org.junit.Assert.assertTrue("'" + long2 + "' != '" + 383L + "'", long2 == 383L);
  }

  @Test
  public void test0993() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0993");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat nodeHighLimitRecordFormat1 = new io.github.onograph.kernel.srv.store.format.highlimit.NodeHighLimitRecordFormat(
        (int) (byte) 100);
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord2 = nodeHighLimitRecordFormat1.newRecord();
    org.neo4j.kernel.impl.store.record.NodeRecord nodeRecord3 = nodeHighLimitRecordFormat1.newRecord();
    org.junit.Assert.assertNotNull(nodeRecord2);
    org.junit.Assert.assertNotNull(nodeRecord3);
  }

  @Test
  public void test0994() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0994");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v320.V320 v320_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v320.V320();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat1 = v320_0.dynamic();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.SchemaRecord> schemaRecordRecordFormat2 = v320_0.schema();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipGroupRecord> relationshipGroupRecordRecordFormat3 = v320_0.relationshipGroup();
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat1);
    org.junit.Assert.assertNotNull(schemaRecordRecordFormat2);
    org.junit.Assert.assertNotNull(relationshipGroupRecordRecordFormat3);
  }

  @Test
  public void test0995() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0995");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v310_0.relationship();
    java.lang.String str2 = v310_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat3 = v310_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat4 = v310_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat5 = v310_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.PropertyKeyTokenRecord> propertyKeyTokenRecordRecordFormat6 = v310_0.propertyKeyToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord> relationshipTypeTokenRecordRecordFormat7 = v310_0.relationshipTypeToken();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.LabelTokenRecord> labelTokenRecordRecordFormat8 = v310_0.labelToken();
    java.lang.String str9 = v310_0.name();
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_1_0" + "'", str2,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat3);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat4);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat5);
    org.junit.Assert.assertNotNull(propertyKeyTokenRecordRecordFormat6);
    org.junit.Assert.assertNotNull(relationshipTypeTokenRecordRecordFormat7);
    org.junit.Assert.assertNotNull(labelTokenRecordRecordFormat8);
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "high_limitV3_1_0" + "'", str9,
        "high_limitV3_1_0");
  }

  @Test
  public void test0996() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0996");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v310.V310 v310_0 = new io.github.onograph.kernel.srv.store.format.highlimit.v310.V310();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat1 = v310_0.relationship();
    java.lang.String str2 = v310_0.name();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.RelationshipRecord> relationshipRecordRecordFormat3 = v310_0.relationship();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat4 = v310_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.NodeRecord> nodeRecordRecordFormat5 = v310_0.node();
    org.neo4j.kernel.impl.store.format.RecordFormat<org.neo4j.kernel.impl.store.record.DynamicRecord> dynamicRecordRecordFormat6 = v310_0.dynamic();
    org.neo4j.storageengine.api.format.Capability capability7 = null;
    boolean boolean8 = v310_0.hasCapability(capability7);
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "high_limitV3_1_0" + "'", str2,
        "high_limitV3_1_0");
    org.junit.Assert.assertNotNull(relationshipRecordRecordFormat3);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat4);
    org.junit.Assert.assertNotNull(nodeRecordRecordFormat5);
    org.junit.Assert.assertNotNull(dynamicRecordRecordFormat6);
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
  }

  @Test
  public void test0997() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0997");
    }
    java.util.function.Function<org.neo4j.kernel.impl.store.StoreHeader, java.lang.Integer> storeHeaderFunction1 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.fixedRecordSize(
        128);
    org.junit.Assert.assertNotNull(storeHeaderFunction1);
  }

  @Test
  public void test0998() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0998");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long1 = relationshipGroupHighLimitRecordFormat0.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat2 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord3 = null;
    long long4 = relationshipGroupHighLimitRecordFormat2.getNextRecordReference(
        relationshipGroupRecord3);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord5 = relationshipGroupHighLimitRecordFormat2.newRecord();
    org.neo4j.internal.id.IdSequence idSequence7 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext8 = null;
    relationshipGroupHighLimitRecordFormat0.prepare(relationshipGroupRecord5, 0, idSequence7,
        cursorContext8);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord10 = relationshipGroupHighLimitRecordFormat0.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat11 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader12 = null;
    int int13 = relationshipGroupRecordFormat11.getRecordSize(storeHeader12);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord14 = relationshipGroupRecordFormat11.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat15 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader16 = null;
    int int17 = relationshipGroupRecordFormat15.getRecordSize(storeHeader16);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat18 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long19 = relationshipGroupHighLimitRecordFormat18.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat20 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord21 = null;
    long long22 = relationshipGroupHighLimitRecordFormat20.getNextRecordReference(
        relationshipGroupRecord21);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord23 = relationshipGroupHighLimitRecordFormat20.newRecord();
    org.neo4j.internal.id.IdSequence idSequence25 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext26 = null;
    relationshipGroupHighLimitRecordFormat18.prepare(relationshipGroupRecord23, (int) (byte) 1,
        idSequence25, cursorContext26);
    org.neo4j.internal.id.IdSequence idSequence29 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext30 = null;
    relationshipGroupRecordFormat15.prepare(relationshipGroupRecord23, 0, idSequence29,
        cursorContext30);
    long long32 = relationshipGroupRecordFormat11.getNextRecordReference(relationshipGroupRecord23);
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat33 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader34 = null;
    int int35 = relationshipGroupRecordFormat33.getRecordSize(storeHeader34);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord36 = relationshipGroupRecordFormat33.newRecord();
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat37 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader38 = null;
    int int39 = relationshipGroupRecordFormat37.getRecordSize(storeHeader38);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat40 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long41 = relationshipGroupHighLimitRecordFormat40.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat42 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord43 = null;
    long long44 = relationshipGroupHighLimitRecordFormat42.getNextRecordReference(
        relationshipGroupRecord43);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord45 = relationshipGroupHighLimitRecordFormat42.newRecord();
    org.neo4j.internal.id.IdSequence idSequence47 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext48 = null;
    relationshipGroupHighLimitRecordFormat40.prepare(relationshipGroupRecord45, (int) (byte) 1,
        idSequence47, cursorContext48);
    org.neo4j.internal.id.IdSequence idSequence51 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext52 = null;
    relationshipGroupRecordFormat37.prepare(relationshipGroupRecord45, 0, idSequence51,
        cursorContext52);
    long long54 = relationshipGroupRecordFormat33.getNextRecordReference(relationshipGroupRecord45);
    org.neo4j.internal.id.IdSequence idSequence56 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext57 = null;
    relationshipGroupRecordFormat11.prepare(relationshipGroupRecord45, 4, idSequence56,
        cursorContext57);
    org.neo4j.internal.id.IdSequence idSequence60 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext61 = null;
    relationshipGroupHighLimitRecordFormat0.prepare(relationshipGroupRecord45, (int) (short) 1,
        idSequence60, cursorContext61);
    org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1125899906842623L + "'",
        long1 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord5);
    org.junit.Assert.assertNotNull(relationshipGroupRecord10);
    org.junit.Assert.assertTrue("'" + int13 + "' != '" + 32 + "'", int13 == 32);
    org.junit.Assert.assertNotNull(relationshipGroupRecord14);
    org.junit.Assert.assertTrue("'" + int17 + "' != '" + 32 + "'", int17 == 32);
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1125899906842623L + "'",
        long19 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord23);
    org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
    org.junit.Assert.assertTrue("'" + int35 + "' != '" + 32 + "'", int35 == 32);
    org.junit.Assert.assertNotNull(relationshipGroupRecord36);
    org.junit.Assert.assertTrue("'" + int39 + "' != '" + 32 + "'", int39 == 32);
    org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1125899906842623L + "'",
        long41 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord45);
    org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-1L) + "'", long54 == (-1L));
  }

  @Test
  public void test0999() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test0999");
    }
    io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat relationshipGroupRecordFormat0 = new io.github.onograph.kernel.srv.store.format.highlimit.v300.RelationshipGroupRecordFormat();
    org.neo4j.kernel.impl.store.StoreHeader storeHeader1 = null;
    int int2 = relationshipGroupRecordFormat0.getRecordSize(storeHeader1);
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat3 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    long long4 = relationshipGroupHighLimitRecordFormat3.getMaxId();
    io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat relationshipGroupHighLimitRecordFormat5 = new io.github.onograph.kernel.srv.store.format.highlimit.RelationshipGroupHighLimitRecordFormat();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord6 = null;
    long long7 = relationshipGroupHighLimitRecordFormat5.getNextRecordReference(
        relationshipGroupRecord6);
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord8 = relationshipGroupHighLimitRecordFormat5.newRecord();
    org.neo4j.internal.id.IdSequence idSequence10 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext11 = null;
    relationshipGroupHighLimitRecordFormat3.prepare(relationshipGroupRecord8, (int) (byte) 1,
        idSequence10, cursorContext11);
    org.neo4j.internal.id.IdSequence idSequence14 = null;
    org.neo4j.io.pagecache.context.CursorContext cursorContext15 = null;
    relationshipGroupRecordFormat0.prepare(relationshipGroupRecord8, 0, idSequence14,
        cursorContext15);
    long long17 = relationshipGroupRecordFormat0.getMaxId();
    org.neo4j.kernel.impl.store.record.RelationshipGroupRecord relationshipGroupRecord18 = relationshipGroupRecordFormat0.newRecord();
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 32 + "'", int2 == 32);
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1125899906842623L + "'",
        long4 == 1125899906842623L);
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
    org.junit.Assert.assertNotNull(relationshipGroupRecord8);
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1125899906842623L + "'",
        long17 == 1125899906842623L);
    org.junit.Assert.assertNotNull(relationshipGroupRecord18);
  }

  @Test
  public void test1000() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest1.test1000");
    }
    java.util.function.Function<org.neo4j.kernel.impl.store.StoreHeader, java.lang.Integer> storeHeaderFunction1 = org.neo4j.kernel.impl.store.format.BaseRecordFormat.fixedRecordSize(
        (int) 'a');
    org.junit.Assert.assertNotNull(storeHeaderFunction1);
  }
}

