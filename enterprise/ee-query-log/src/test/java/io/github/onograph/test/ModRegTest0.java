package io.github.onograph.test;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ModRegTest0 {

  public static boolean debug = false;

  @Test
  public void test0001() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0001");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.Class<?> wildcardClass1 = queryLoggingServiceExtensionFactory0.getClass();
    org.junit.Assert.assertNotNull(wildcardClass1);
  }

  @Test
  public void test0002() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0002");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext1 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies2 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle3 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext1, queryLoggingServiceDependencies2);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test0003() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0003");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService3 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction4 = null;
    queryLoggingService3.rolcForKe(kernelTransaction4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService3.rolcForKe(kernelTransaction6, throwable7);
    boolean boolean9 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingService3);
    java.lang.Class<?> wildcardClass10 = queryLoggingService3.getClass();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertNotNull(queryLoggingService3);
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    org.junit.Assert.assertNotNull(wildcardClass10);
  }

  @Test
  public void test0004() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0004");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService3 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction4 = null;
    queryLoggingService3.rolcForKe(kernelTransaction4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService3.rolcForKe(kernelTransaction6, throwable7);
    boolean boolean9 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingService3);
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext10 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies11 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle12 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext10, queryLoggingServiceDependencies11);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertNotNull(queryLoggingService3);
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
  }

  @Test
  public void test0005() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0005");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext3 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies4 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle5 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext3, queryLoggingServiceDependencies4);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
  }

  @Test
  public void test0006() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0006");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext5 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies6 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle7 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext5, queryLoggingServiceDependencies6);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
  }

  @Test
  public void test0007() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0007");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory3 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str4 = queryLoggingServiceExtensionFactory3.toString();
    boolean boolean5 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory3);
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext6 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies7 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle8 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext6, queryLoggingServiceDependencies7);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str4 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str4, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
  }

  @Test
  public void test0008() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0008");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    java.lang.Class<?> wildcardClass9 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass9);
  }

  @Test
  public void test0009() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0009");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    java.lang.Throwable throwable5 = null;
    queryLoggingService0.faleForExTh(executingQuery4, throwable5);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery7 = null;
    java.lang.Throwable throwable8 = null;
    queryLoggingService0.faleForExTh(executingQuery7, throwable8);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery10 = null;
    queryLoggingService0.faleForExTh(executingQuery10, "hi!");
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0010() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0010");
    }
    io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl diagnosticsOfflineReportProviderQueryLoggingImpl0 = new io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction1 = null;
    org.neo4j.configuration.Config config3 = null;
    java.nio.file.Path path4 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction1, "hi!", config3,
        path4);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.configuration.Config config8 = null;
    java.nio.file.Path path9 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction6,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config8, path9);
    java.lang.Class<?> wildcardClass11 = diagnosticsOfflineReportProviderQueryLoggingImpl0.getClass();
    org.junit.Assert.assertNotNull(wildcardClass11);
  }

  @Test
  public void test0011() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0011");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str1 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.Class<?> wildcardClass2 = queryLoggingServiceExtensionFactory0.getClass();
    org.junit.Assert.assertEquals(
        "'" + str1 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str1, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(wildcardClass2);
  }

  @Test
  public void test0012() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0012");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    java.lang.Class<?> wildcardClass6 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass6);
  }

  @Test
  public void test0013() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0013");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService0.rolcForKe(kernelTransaction9, throwable10);
    java.lang.Class<?> wildcardClass12 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass12);
  }

  @Test
  public void test0014() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0014");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (short) 1);
    java.lang.String str3 = queryLoggingServiceExtensionFactory0.getName();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext4 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies5 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle6 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext4, queryLoggingServiceDependencies5);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "query-logging" + "'", str3,
        "query-logging");
  }

  @Test
  public void test0015() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0015");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    queryLoggingService0.sucsForEx(executingQuery4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.strForEx(executingQuery6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.faleForExTh(executingQuery8, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    java.lang.Throwable throwable12 = null;
    queryLoggingService0.rolcForKe(kernelTransaction11, throwable12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    java.lang.Throwable throwable15 = null;
    queryLoggingService0.rolcForKe(kernelTransaction14, throwable15);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0016() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0016");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    java.lang.String str5 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str6 = queryLoggingServiceExtensionFactory0.toString();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext7 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies8 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle9 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext7, queryLoggingServiceDependencies8);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertEquals(
        "'" + str5 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str5, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals(
        "'" + str6 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str6, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
  }

  @Test
  public void test0017() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0017");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    boolean boolean6 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) 0L);
    java.lang.String str7 = queryLoggingServiceExtensionFactory0.toString();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext8 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies9 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle10 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext8, queryLoggingServiceDependencies9);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertEquals(
        "'" + str7 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str7, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
  }

  @Test
  public void test0018() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0018");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory3 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str4 = queryLoggingServiceExtensionFactory3.toString();
    boolean boolean5 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory3);
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext6 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies7 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle8 = queryLoggingServiceExtensionFactory3.newInstance(
          extensionContext6, queryLoggingServiceDependencies7);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str4 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str4, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
  }

  @Test
  public void test0019() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0019");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.strForEx(kernelTransaction10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.faleForExTh(executingQuery12,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    java.lang.Throwable throwable16 = null;
    queryLoggingService0.faleForExTh(executingQuery15, throwable16);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0020() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0020");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (short) 1);
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext3 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies4 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle5 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext3, queryLoggingServiceDependencies4);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
  }

  @Test
  public void test0021() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0021");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery10 = null;
    queryLoggingService0.strForEx(executingQuery10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.sucsForEx(executingQuery12);
    java.lang.Class<?> wildcardClass14 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass14);
  }

  @Test
  public void test0022() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0022");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str1 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService2 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService2.rolcForKe(kernelTransaction3, throwable4);
    boolean boolean6 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) throwable4);
    java.lang.String str7 = queryLoggingServiceExtensionFactory0.getName();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext8 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies9 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle10 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext8, queryLoggingServiceDependencies9);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertEquals(
        "'" + str1 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str1, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(queryLoggingService2);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "query-logging" + "'", str7,
        "query-logging");
  }

  @Test
  public void test0023() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0023");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory3 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str4 = queryLoggingServiceExtensionFactory3.toString();
    boolean boolean5 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory3);
    boolean boolean7 = queryLoggingServiceExtensionFactory3.equals((java.lang.Object) 100.0d);
    java.lang.String str8 = queryLoggingServiceExtensionFactory3.toString();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext9 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies10 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle11 = queryLoggingServiceExtensionFactory3.newInstance(
          extensionContext9, queryLoggingServiceDependencies10);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str4 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str4, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    org.junit.Assert.assertEquals(
        "'" + str8 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str8, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
  }

  @Test
  public void test0024() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0024");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str1 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService2 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService2.rolcForKe(kernelTransaction3, throwable4);
    boolean boolean6 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) throwable4);
    java.lang.String str7 = queryLoggingServiceExtensionFactory0.toString();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext8 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies9 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle10 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext8, queryLoggingServiceDependencies9);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertEquals(
        "'" + str1 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str1, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(queryLoggingService2);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertEquals(
        "'" + str7 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str7, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
  }

  @Test
  public void test0025() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0025");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction4 = null;
    java.lang.Throwable throwable5 = null;
    queryLoggingService0.rolcForKe(kernelTransaction4, throwable5);
    java.lang.Class<?> wildcardClass7 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass7);
  }

  @Test
  public void test0026() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0026");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    java.lang.String str5 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str6 = queryLoggingServiceExtensionFactory0.getName();
    boolean boolean8 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) 0L);
    java.lang.Class<?> wildcardClass9 = queryLoggingServiceExtensionFactory0.getClass();
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertEquals(
        "'" + str5 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str5, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "query-logging" + "'", str6,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    org.junit.Assert.assertNotNull(wildcardClass9);
  }

  @Test
  public void test0027() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0027");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    queryLoggingService0.sucsForEx(executingQuery4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.strForEx(executingQuery6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.faleForExTh(executingQuery8, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    java.lang.Throwable throwable12 = null;
    queryLoggingService0.rolcForKe(kernelTransaction11, throwable12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    queryLoggingService0.strForEx(kernelTransaction14);
    java.lang.Class<?> wildcardClass16 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass16);
  }

  @Test
  public void test0028() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0028");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    boolean boolean6 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) 0L);
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext7 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies8 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle9 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext7, queryLoggingServiceDependencies8);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
  }

  @Test
  public void test0029() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0029");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str1 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str2 = queryLoggingServiceExtensionFactory0.getName();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext3 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies4 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle5 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext3, queryLoggingServiceDependencies4);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertEquals(
        "'" + str1 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str1, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "query-logging" + "'", str2,
        "query-logging");
  }

  @Test
  public void test0030() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0030");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    queryLoggingService0.faleForExTh(executingQuery3, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.faleForExTh(executingQuery6, throwable7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService0.strForEx(kernelTransaction9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    queryLoggingService0.faleForExTh(executingQuery11, "query-logging");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    queryLoggingService0.comForKe(kernelTransaction14);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0031() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0031");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory3 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str4 = queryLoggingServiceExtensionFactory3.toString();
    boolean boolean5 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory3);
    java.lang.String str6 = queryLoggingServiceExtensionFactory0.getName();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext7 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies8 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle9 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext7, queryLoggingServiceDependencies8);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str4 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str4, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "query-logging" + "'", str6,
        "query-logging");
  }

  @Test
  public void test0032() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0032");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory3 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str4 = queryLoggingServiceExtensionFactory3.toString();
    boolean boolean5 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory3);
    java.lang.String str6 = queryLoggingServiceExtensionFactory3.toString();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext7 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies8 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle9 = queryLoggingServiceExtensionFactory3.newInstance(
          extensionContext7, queryLoggingServiceDependencies8);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str4 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str4, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertEquals(
        "'" + str6 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str6, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
  }

  @Test
  public void test0033() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0033");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory3 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str4 = queryLoggingServiceExtensionFactory3.toString();
    boolean boolean5 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory3);
    java.lang.String str6 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory7 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory8 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean10 = queryLoggingServiceExtensionFactory8.equals((java.lang.Object) (-1L));
    boolean boolean11 = queryLoggingServiceExtensionFactory7.equals((java.lang.Object) boolean10);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService12 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery13 = null;
    queryLoggingService12.strForEx(executingQuery13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    java.lang.Throwable throwable16 = null;
    queryLoggingService12.faleForExTh(executingQuery15, throwable16);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction18 = null;
    queryLoggingService12.rolcForKe(kernelTransaction18);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery20 = null;
    queryLoggingService12.sucsForEx(executingQuery20);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery22 = null;
    queryLoggingService12.strForEx(executingQuery22);
    boolean boolean24 = queryLoggingServiceExtensionFactory7.equals(
        (java.lang.Object) executingQuery22);
    boolean boolean25 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory7);
    java.lang.String str26 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.Class<?> wildcardClass27 = queryLoggingServiceExtensionFactory0.getClass();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str4 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str4, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "query-logging" + "'", str6,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    org.junit.Assert.assertNotNull(queryLoggingService12);
    org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    org.junit.Assert.assertEquals("'" + str26 + "' != '" + "query-logging" + "'", str26,
        "query-logging");
    org.junit.Assert.assertNotNull(wildcardClass27);
  }

  @Test
  public void test0034() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0034");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory3 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str4 = queryLoggingServiceExtensionFactory3.toString();
    boolean boolean5 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory3);
    boolean boolean7 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1.0f));
    java.lang.String str8 = queryLoggingServiceExtensionFactory0.toString();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext9 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies10 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle11 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext9, queryLoggingServiceDependencies10);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str4 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str4, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    org.junit.Assert.assertEquals(
        "'" + str8 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str8, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
  }

  @Test
  public void test0035() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0035");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str1 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService2 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService2.rolcForKe(kernelTransaction3, throwable4);
    boolean boolean6 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) throwable4);
    java.lang.String str7 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.Class<?> wildcardClass8 = queryLoggingServiceExtensionFactory0.getClass();
    org.junit.Assert.assertEquals(
        "'" + str1 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str1, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(queryLoggingService2);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "query-logging" + "'", str7,
        "query-logging");
    org.junit.Assert.assertNotNull(wildcardClass8);
  }

  @Test
  public void test0036() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0036");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    java.lang.String str3 = queryLoggingServiceExtensionFactory0.toString();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext4 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies5 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle6 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext4, queryLoggingServiceDependencies5);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str3 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str3, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
  }

  @Test
  public void test0037() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0037");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory3 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str4 = queryLoggingServiceExtensionFactory3.toString();
    boolean boolean5 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory3);
    java.lang.String str6 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory7 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory8 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean10 = queryLoggingServiceExtensionFactory8.equals((java.lang.Object) (-1L));
    boolean boolean11 = queryLoggingServiceExtensionFactory7.equals((java.lang.Object) boolean10);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService12 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery13 = null;
    queryLoggingService12.strForEx(executingQuery13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    java.lang.Throwable throwable16 = null;
    queryLoggingService12.faleForExTh(executingQuery15, throwable16);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction18 = null;
    queryLoggingService12.rolcForKe(kernelTransaction18);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery20 = null;
    queryLoggingService12.sucsForEx(executingQuery20);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery22 = null;
    queryLoggingService12.strForEx(executingQuery22);
    boolean boolean24 = queryLoggingServiceExtensionFactory7.equals(
        (java.lang.Object) executingQuery22);
    boolean boolean25 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory7);
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext26 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies27 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle28 = queryLoggingServiceExtensionFactory7.newInstance(
          extensionContext26, queryLoggingServiceDependencies27);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str4 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str4, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "query-logging" + "'", str6,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    org.junit.Assert.assertNotNull(queryLoggingService12);
    org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
  }

  @Test
  public void test0038() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0038");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.faleForExTh(executingQuery6, "hi!");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService0.strForEx(kernelTransaction9);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0039() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0039");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory3 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str4 = queryLoggingServiceExtensionFactory3.toString();
    boolean boolean5 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory3);
    java.lang.Class<?> wildcardClass6 = queryLoggingServiceExtensionFactory0.getClass();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str4 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str4, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertNotNull(wildcardClass6);
  }

  @Test
  public void test0040() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0040");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1.0d));
    java.lang.String str3 = queryLoggingServiceExtensionFactory0.getName();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext4 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies5 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle6 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext4, queryLoggingServiceDependencies5);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "query-logging" + "'", str3,
        "query-logging");
  }

  @Test
  public void test0041() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0041");
    }
    io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl diagnosticsOfflineReportProviderQueryLoggingImpl0 = new io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction1 = null;
    org.neo4j.configuration.Config config3 = null;
    java.nio.file.Path path4 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction1, "hi!", config3,
        path4);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.configuration.Config config8 = null;
    java.nio.file.Path path9 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction6,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config8, path9);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction11 = null;
    org.neo4j.configuration.Config config13 = null;
    java.nio.file.Path path14 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction11, "hi!", config13,
        path14);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction16 = null;
    org.neo4j.configuration.Config config18 = null;
    java.nio.file.Path path19 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction16, "", config18,
        path19);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction21 = null;
    org.neo4j.configuration.Config config23 = null;
    java.nio.file.Path path24 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction21, "hi!", config23,
        path24);
    java.lang.Class<?> wildcardClass26 = diagnosticsOfflineReportProviderQueryLoggingImpl0.getClass();
    org.junit.Assert.assertNotNull(wildcardClass26);
  }

  @Test
  public void test0042() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0042");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.strForEx(kernelTransaction6);
    java.lang.Class<?> wildcardClass8 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass8);
  }

  @Test
  public void test0043() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0043");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.faleForExTh(executingQuery1,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    queryLoggingService0.faleForExTh(executingQuery4,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction7 = null;
    queryLoggingService0.strForEx(kernelTransaction7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService0.rolcForKe(kernelTransaction9);
    java.lang.Class<?> wildcardClass11 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass11);
  }

  @Test
  public void test0044() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0044");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService3 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction4 = null;
    queryLoggingService3.rolcForKe(kernelTransaction4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService3.rolcForKe(kernelTransaction6, throwable7);
    boolean boolean9 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingService3);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService10 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    queryLoggingService10.strForEx(executingQuery11);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery13 = null;
    java.lang.Throwable throwable14 = null;
    queryLoggingService10.faleForExTh(executingQuery13, throwable14);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    queryLoggingService10.rolcForKe(kernelTransaction16);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    queryLoggingService10.sucsForEx(executingQuery18);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction20 = null;
    queryLoggingService10.comForKe(kernelTransaction20);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction22 = null;
    java.lang.Throwable throwable23 = null;
    queryLoggingService10.rolcForKe(kernelTransaction22, throwable23);
    boolean boolean25 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) kernelTransaction22);
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext26 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies27 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle28 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext26, queryLoggingServiceDependencies27);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertNotNull(queryLoggingService3);
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    org.junit.Assert.assertNotNull(queryLoggingService10);
    org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
  }

  @Test
  public void test0045() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0045");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.comForKe(kernelTransaction10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.strForEx(executingQuery12);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0046() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0046");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.strForEx(kernelTransaction10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    java.lang.Throwable throwable13 = null;
    queryLoggingService0.faleForExTh(executingQuery12, throwable13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    queryLoggingService0.strForEx(kernelTransaction15);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction17 = null;
    java.lang.Throwable throwable18 = null;
    queryLoggingService0.rolcForKe(kernelTransaction17, throwable18);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery20 = null;
    queryLoggingService0.strForEx(executingQuery20);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0047() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0047");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    java.lang.String str5 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str6 = queryLoggingServiceExtensionFactory0.getName();
    boolean boolean8 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) 0L);
    java.lang.String str9 = queryLoggingServiceExtensionFactory0.toString();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext10 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies11 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle12 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext10, queryLoggingServiceDependencies11);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertEquals(
        "'" + str5 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str5, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "query-logging" + "'", str6,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    org.junit.Assert.assertEquals(
        "'" + str9 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str9, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
  }

  @Test
  public void test0048() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0048");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory3 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str4 = queryLoggingServiceExtensionFactory3.toString();
    boolean boolean5 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory3);
    java.lang.String str6 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str7 = queryLoggingServiceExtensionFactory0.getName();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext8 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies9 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle10 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext8, queryLoggingServiceDependencies9);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str4 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str4, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "query-logging" + "'", str6,
        "query-logging");
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "query-logging" + "'", str7,
        "query-logging");
  }

  @Test
  public void test0049() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0049");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory3 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str4 = queryLoggingServiceExtensionFactory3.toString();
    boolean boolean5 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory3);
    java.lang.String str6 = queryLoggingServiceExtensionFactory3.toString();
    java.lang.Class<?> wildcardClass7 = queryLoggingServiceExtensionFactory3.getClass();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str4 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str4, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertEquals(
        "'" + str6 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str6, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(wildcardClass7);
  }

  @Test
  public void test0050() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0050");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.strForEx(kernelTransaction10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    java.lang.Throwable throwable13 = null;
    queryLoggingService0.rolcForKe(kernelTransaction12, throwable13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    java.lang.Throwable throwable16 = null;
    queryLoggingService0.rolcForKe(kernelTransaction15, throwable16);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction18 = null;
    queryLoggingService0.rolcForKe(kernelTransaction18);
    java.lang.Class<?> wildcardClass20 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass20);
  }

  @Test
  public void test0051() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0051");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    queryLoggingService0.faleForExTh(executingQuery9, "");
    java.lang.Class<?> wildcardClass12 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass12);
  }

  @Test
  public void test0052() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0052");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1.0d));
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext3 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies4 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle5 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext3, queryLoggingServiceDependencies4);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
  }

  @Test
  public void test0053() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0053");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory3 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str4 = queryLoggingServiceExtensionFactory3.toString();
    boolean boolean5 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory3);
    java.lang.String str6 = queryLoggingServiceExtensionFactory3.toString();
    java.lang.String str7 = queryLoggingServiceExtensionFactory3.toString();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext8 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies9 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle10 = queryLoggingServiceExtensionFactory3.newInstance(
          extensionContext8, queryLoggingServiceDependencies9);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str4 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str4, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertEquals(
        "'" + str6 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str6, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals(
        "'" + str7 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str7, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
  }

  @Test
  public void test0054() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0054");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.strForEx(kernelTransaction10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    java.lang.Throwable throwable13 = null;
    queryLoggingService0.faleForExTh(executingQuery12, throwable13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    queryLoggingService0.strForEx(kernelTransaction15);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction17 = null;
    queryLoggingService0.rolcForKe(kernelTransaction17);
    java.lang.Class<?> wildcardClass19 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass19);
  }

  @Test
  public void test0055() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0055");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (short) 1);
    java.lang.String str3 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService4 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery5 = null;
    queryLoggingService4.strForEx(executingQuery5);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery7 = null;
    java.lang.Throwable throwable8 = null;
    queryLoggingService4.faleForExTh(executingQuery7, throwable8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    java.lang.Throwable throwable11 = null;
    queryLoggingService4.rolcForKe(kernelTransaction10, throwable11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService4.comForKe(kernelTransaction13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService4.strForEx(executingQuery15);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery17 = null;
    queryLoggingService4.strForEx(executingQuery17);
    boolean boolean19 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) executingQuery17);
    java.lang.String str20 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str21 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.Class<?> wildcardClass22 = queryLoggingServiceExtensionFactory0.getClass();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "query-logging" + "'", str3,
        "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService4);
    org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "query-logging" + "'", str20,
        "query-logging");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str21, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(wildcardClass22);
  }

  @Test
  public void test0056() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0056");
    }
    io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl diagnosticsOfflineReportProviderQueryLoggingImpl0 = new io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction1 = null;
    org.neo4j.configuration.Config config3 = null;
    java.nio.file.Path path4 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction1, "hi!", config3,
        path4);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.configuration.Config config8 = null;
    java.nio.file.Path path9 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction6,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config8, path9);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction11 = null;
    org.neo4j.configuration.Config config13 = null;
    java.nio.file.Path path14 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction11, "hi!", config13,
        path14);
    java.lang.Class<?> wildcardClass16 = diagnosticsOfflineReportProviderQueryLoggingImpl0.getClass();
    org.junit.Assert.assertNotNull(wildcardClass16);
  }

  @Test
  public void test0057() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0057");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService0.comForKe(kernelTransaction9);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    java.lang.Throwable throwable12 = null;
    queryLoggingService0.rolcForKe(kernelTransaction11, throwable12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    queryLoggingService0.faleForExTh(executingQuery14, "");
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0058() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0058");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.sucsForEx(executingQuery6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.strForEx(executingQuery8);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery10 = null;
    java.lang.Throwable throwable11 = null;
    queryLoggingService0.faleForExTh(executingQuery10, throwable11);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0059() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0059");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    java.lang.Object obj5 = new java.lang.Object();
    boolean boolean6 = queryLoggingServiceExtensionFactory0.equals(obj5);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService7 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction8 = null;
    queryLoggingService7.rolcForKe(kernelTransaction8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    java.lang.Throwable throwable11 = null;
    queryLoggingService7.rolcForKe(kernelTransaction10, throwable11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService7.rolcForKe(kernelTransaction13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService7.sucsForEx(executingQuery15);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction17 = null;
    queryLoggingService7.strForEx(kernelTransaction17);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery19 = null;
    queryLoggingService7.faleForExTh(executingQuery19,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction22 = null;
    java.lang.Throwable throwable23 = null;
    queryLoggingService7.rolcForKe(kernelTransaction22, throwable23);
    boolean boolean25 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) kernelTransaction22);
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext26 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies27 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle28 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext26, queryLoggingServiceDependencies27);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertNotNull(queryLoggingService7);
    org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
  }

  @Test
  public void test0060() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0060");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    java.lang.String str3 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.Class<?> wildcardClass4 = queryLoggingServiceExtensionFactory0.getClass();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str3 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str3, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(wildcardClass4);
  }

  @Test
  public void test0061() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0061");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory3 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str4 = queryLoggingServiceExtensionFactory3.toString();
    boolean boolean5 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory3);
    boolean boolean7 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1.0f));
    java.lang.String str8 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService9 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery10 = null;
    queryLoggingService9.strForEx(executingQuery10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    java.lang.Throwable throwable13 = null;
    queryLoggingService9.faleForExTh(executingQuery12, throwable13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    java.lang.Throwable throwable16 = null;
    queryLoggingService9.rolcForKe(kernelTransaction15, throwable16);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    queryLoggingService9.strForEx(executingQuery18);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery20 = null;
    java.lang.Throwable throwable21 = null;
    queryLoggingService9.faleForExTh(executingQuery20, throwable21);
    boolean boolean23 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) executingQuery20);
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str4 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str4, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    org.junit.Assert.assertEquals(
        "'" + str8 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str8, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(queryLoggingService9);
    org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
  }

  @Test
  public void test0062() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0062");
    }
    io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl diagnosticsOfflineReportProviderQueryLoggingImpl0 = new io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction1 = null;
    org.neo4j.configuration.Config config3 = null;
    java.nio.file.Path path4 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction1, "", config3,
        path4);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.configuration.Config config8 = null;
    java.nio.file.Path path9 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction6,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config8, path9);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction11 = null;
    org.neo4j.configuration.Config config13 = null;
    java.nio.file.Path path14 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction11, "query-logging",
        config13, path14);
    java.lang.Class<?> wildcardClass16 = diagnosticsOfflineReportProviderQueryLoggingImpl0.getClass();
    org.junit.Assert.assertNotNull(wildcardClass16);
  }

  @Test
  public void test0063() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0063");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService5 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService5.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction8 = null;
    java.lang.Throwable throwable9 = null;
    queryLoggingService5.rolcForKe(kernelTransaction8, throwable9);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    queryLoggingService5.rolcForKe(kernelTransaction11);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery13 = null;
    queryLoggingService5.sucsForEx(executingQuery13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    queryLoggingService5.strForEx(kernelTransaction15);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery17 = null;
    queryLoggingService5.faleForExTh(executingQuery17,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    boolean boolean20 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService21 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction22 = null;
    queryLoggingService21.rolcForKe(kernelTransaction22);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction24 = null;
    java.lang.Throwable throwable25 = null;
    queryLoggingService21.rolcForKe(kernelTransaction24, throwable25);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction27 = null;
    queryLoggingService21.rolcForKe(kernelTransaction27);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery29 = null;
    queryLoggingService21.sucsForEx(executingQuery29);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction31 = null;
    queryLoggingService21.strForEx(kernelTransaction31);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery33 = null;
    queryLoggingService21.faleForExTh(executingQuery33,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction36 = null;
    java.lang.Throwable throwable37 = null;
    queryLoggingService21.rolcForKe(kernelTransaction36, throwable37);
    boolean boolean39 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingService21);
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext40 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies41 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle42 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext40, queryLoggingServiceDependencies41);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertNotNull(queryLoggingService5);
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    org.junit.Assert.assertNotNull(queryLoggingService21);
    org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
  }

  @Test
  public void test0064() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0064");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.faleForExTh(executingQuery6, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService0.rolcForKe(kernelTransaction9, throwable10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    java.lang.Throwable throwable13 = null;
    queryLoggingService0.rolcForKe(kernelTransaction12, throwable13);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0065() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0065");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery10 = null;
    queryLoggingService0.faleForExTh(executingQuery10,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery13 = null;
    queryLoggingService0.faleForExTh(executingQuery13, "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0066() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0066");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1.0d));
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService3 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction4 = null;
    queryLoggingService3.rolcForKe(kernelTransaction4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService3.faleForExTh(executingQuery6, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService3.faleForExTh(executingQuery9, throwable10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    java.lang.Throwable throwable13 = null;
    queryLoggingService3.faleForExTh(executingQuery12, throwable13);
    boolean boolean15 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) executingQuery12);
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory16 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean18 = queryLoggingServiceExtensionFactory16.equals((java.lang.Object) (short) 1);
    java.lang.String str19 = queryLoggingServiceExtensionFactory16.getName();
    boolean boolean20 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory16);
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext21 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies22 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle23 = queryLoggingServiceExtensionFactory16.newInstance(
          extensionContext21, queryLoggingServiceDependencies22);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertNotNull(queryLoggingService3);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "query-logging" + "'", str19,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
  }

  @Test
  public void test0067() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0067");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    queryLoggingService0.faleForExTh(executingQuery3, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.faleForExTh(executingQuery6, throwable7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService0.strForEx(kernelTransaction9);
    java.lang.Class<?> wildcardClass11 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass11);
  }

  @Test
  public void test0068() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0068");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction4 = null;
    queryLoggingService0.comForKe(kernelTransaction4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    java.lang.Throwable throwable9 = null;
    queryLoggingService0.faleForExTh(executingQuery8, throwable9);
    java.lang.Class<?> wildcardClass11 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass11);
  }

  @Test
  public void test0069() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0069");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (short) 1);
    java.lang.String str3 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str4 = queryLoggingServiceExtensionFactory0.getName();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext5 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies6 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle7 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext5, queryLoggingServiceDependencies6);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str3 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str3, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "query-logging" + "'", str4,
        "query-logging");
  }

  @Test
  public void test0070() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0070");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    java.lang.String str5 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str6 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str7 = queryLoggingServiceExtensionFactory0.getName();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext8 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies9 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle10 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext8, queryLoggingServiceDependencies9);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertEquals(
        "'" + str5 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str5, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "query-logging" + "'", str6,
        "query-logging");
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "query-logging" + "'", str7,
        "query-logging");
  }

  @Test
  public void test0071() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0071");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    java.lang.Throwable throwable5 = null;
    queryLoggingService0.faleForExTh(executingQuery4, throwable5);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery7 = null;
    java.lang.Throwable throwable8 = null;
    queryLoggingService0.faleForExTh(executingQuery7, throwable8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    java.lang.Throwable throwable11 = null;
    queryLoggingService0.rolcForKe(kernelTransaction10, throwable11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService0.strForEx(kernelTransaction13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService0.faleForExTh(executingQuery15, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    queryLoggingService0.strForEx(executingQuery18);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction20 = null;
    queryLoggingService0.comForKe(kernelTransaction20);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0072() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0072");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    java.lang.String str5 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str6 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory7 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean9 = queryLoggingServiceExtensionFactory7.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory10 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str11 = queryLoggingServiceExtensionFactory10.toString();
    boolean boolean12 = queryLoggingServiceExtensionFactory7.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory10);
    boolean boolean13 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory7);
    java.lang.String str14 = queryLoggingServiceExtensionFactory0.getName();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext15 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies16 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle17 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext15, queryLoggingServiceDependencies16);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertEquals(
        "'" + str5 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str5, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "query-logging" + "'", str6,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str11, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "query-logging" + "'", str14,
        "query-logging");
  }

  @Test
  public void test0073() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0073");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction4 = null;
    queryLoggingService0.comForKe(kernelTransaction4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    java.lang.Class<?> wildcardClass8 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass8);
  }

  @Test
  public void test0074() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0074");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.faleForExTh(executingQuery6, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService0.strForEx(kernelTransaction9);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0075() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0075");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction8 = null;
    java.lang.Throwable throwable9 = null;
    queryLoggingService0.rolcForKe(kernelTransaction8, throwable9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    queryLoggingService0.sucsForEx(executingQuery11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService0.comForKe(kernelTransaction13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    queryLoggingService0.rolcForKe(kernelTransaction15);
    java.lang.Class<?> wildcardClass17 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass17);
  }

  @Test
  public void test0076() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0076");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    queryLoggingService0.sucsForEx(executingQuery4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.comForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.faleForExTh(executingQuery8, "query-logging");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    queryLoggingService0.strForEx(kernelTransaction11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService0.comForKe(kernelTransaction13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    java.lang.Throwable throwable16 = null;
    queryLoggingService0.rolcForKe(kernelTransaction15, throwable16);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0077() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0077");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory3 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str4 = queryLoggingServiceExtensionFactory3.toString();
    boolean boolean5 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory3);
    boolean boolean7 = queryLoggingServiceExtensionFactory3.equals((java.lang.Object) 100.0d);
    java.lang.String str8 = queryLoggingServiceExtensionFactory3.toString();
    java.lang.String str9 = queryLoggingServiceExtensionFactory3.toString();
    java.lang.Class<?> wildcardClass10 = queryLoggingServiceExtensionFactory3.getClass();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str4 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str4, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    org.junit.Assert.assertEquals(
        "'" + str8 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str8, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals(
        "'" + str9 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str9, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(wildcardClass10);
  }

  @Test
  public void test0078() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0078");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.faleForExTh(executingQuery1,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    queryLoggingService0.faleForExTh(executingQuery4,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction7 = null;
    java.lang.Throwable throwable8 = null;
    queryLoggingService0.rolcForKe(kernelTransaction7, throwable8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    java.lang.Throwable throwable11 = null;
    queryLoggingService0.rolcForKe(kernelTransaction10, throwable11);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0079() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0079");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.faleForExTh(executingQuery8, "hi!");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    queryLoggingService0.strForEx(kernelTransaction11);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery13 = null;
    java.lang.Throwable throwable14 = null;
    queryLoggingService0.faleForExTh(executingQuery13, throwable14);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    queryLoggingService0.faleForExTh(executingQuery16, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery19 = null;
    queryLoggingService0.strForEx(executingQuery19);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction21 = null;
    queryLoggingService0.strForEx(kernelTransaction21);
    java.lang.Class<?> wildcardClass23 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass23);
  }

  @Test
  public void test0080() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0080");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery10 = null;
    queryLoggingService0.strForEx(executingQuery10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.sucsForEx(executingQuery12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    queryLoggingService0.sucsForEx(executingQuery14);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    queryLoggingService0.sucsForEx(executingQuery16);
    java.lang.Class<?> wildcardClass18 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass18);
  }

  @Test
  public void test0081() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0081");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory3 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str4 = queryLoggingServiceExtensionFactory3.toString();
    boolean boolean5 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory3);
    boolean boolean7 = queryLoggingServiceExtensionFactory3.equals((java.lang.Object) 100.0d);
    java.lang.String str8 = queryLoggingServiceExtensionFactory3.getName();
    java.lang.String str9 = queryLoggingServiceExtensionFactory3.toString();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext10 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies11 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle12 = queryLoggingServiceExtensionFactory3.newInstance(
          extensionContext10, queryLoggingServiceDependencies11);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str4 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str4, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "query-logging" + "'", str8,
        "query-logging");
    org.junit.Assert.assertEquals(
        "'" + str9 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str9, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
  }

  @Test
  public void test0082() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0082");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService0.rolcForKe(kernelTransaction9, throwable10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    queryLoggingService0.strForEx(kernelTransaction12);
    java.lang.Class<?> wildcardClass14 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass14);
  }

  @Test
  public void test0083() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0083");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    queryLoggingService0.faleForExTh(executingQuery3, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.faleForExTh(executingQuery6, throwable7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService0.faleForExTh(executingQuery9, throwable10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    java.lang.Throwable throwable13 = null;
    queryLoggingService0.rolcForKe(kernelTransaction12, throwable13);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0084() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0084");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1.0d));
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService3 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction4 = null;
    queryLoggingService3.rolcForKe(kernelTransaction4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService3.faleForExTh(executingQuery6, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService3.faleForExTh(executingQuery9, throwable10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    java.lang.Throwable throwable13 = null;
    queryLoggingService3.faleForExTh(executingQuery12, throwable13);
    boolean boolean15 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) executingQuery12);
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext16 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies17 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle18 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext16, queryLoggingServiceDependencies17);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertNotNull(queryLoggingService3);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
  }

  @Test
  public void test0085() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0085");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (short) 1);
    java.lang.String str3 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService4 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery5 = null;
    queryLoggingService4.strForEx(executingQuery5);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery7 = null;
    java.lang.Throwable throwable8 = null;
    queryLoggingService4.faleForExTh(executingQuery7, throwable8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    java.lang.Throwable throwable11 = null;
    queryLoggingService4.rolcForKe(kernelTransaction10, throwable11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService4.comForKe(kernelTransaction13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService4.strForEx(executingQuery15);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery17 = null;
    queryLoggingService4.strForEx(executingQuery17);
    boolean boolean19 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) executingQuery17);
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext20 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies21 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle22 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext20, queryLoggingServiceDependencies21);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "query-logging" + "'", str3,
        "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService4);
    org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
  }

  @Test
  public void test0086() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0086");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService0.comForKe(kernelTransaction9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    queryLoggingService0.faleForExTh(executingQuery11,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    java.lang.Throwable throwable15 = null;
    queryLoggingService0.rolcForKe(kernelTransaction14, throwable15);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0087() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0087");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory3 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str4 = queryLoggingServiceExtensionFactory3.toString();
    boolean boolean5 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory3);
    boolean boolean7 = queryLoggingServiceExtensionFactory3.equals((java.lang.Object) 100.0d);
    java.lang.String str8 = queryLoggingServiceExtensionFactory3.toString();
    java.lang.Class<?> wildcardClass9 = queryLoggingServiceExtensionFactory3.getClass();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str4 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str4, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    org.junit.Assert.assertEquals(
        "'" + str8 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str8, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(wildcardClass9);
  }

  @Test
  public void test0088() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0088");
    }
    io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl diagnosticsOfflineReportProviderQueryLoggingImpl0 = new io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction1 = null;
    org.neo4j.configuration.Config config3 = null;
    java.nio.file.Path path4 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction1, "hi!", config3,
        path4);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.configuration.Config config8 = null;
    java.nio.file.Path path9 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction6,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config8, path9);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction11 = null;
    org.neo4j.configuration.Config config13 = null;
    java.nio.file.Path path14 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction11,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config13, path14);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction16 = null;
    org.neo4j.configuration.Config config18 = null;
    java.nio.file.Path path19 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction16, "", config18,
        path19);
    java.lang.Class<?> wildcardClass21 = diagnosticsOfflineReportProviderQueryLoggingImpl0.getClass();
    org.junit.Assert.assertNotNull(wildcardClass21);
  }

  @Test
  public void test0089() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0089");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService5 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService5.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction8 = null;
    java.lang.Throwable throwable9 = null;
    queryLoggingService5.rolcForKe(kernelTransaction8, throwable9);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    queryLoggingService5.rolcForKe(kernelTransaction11);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery13 = null;
    queryLoggingService5.sucsForEx(executingQuery13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    queryLoggingService5.strForEx(kernelTransaction15);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery17 = null;
    queryLoggingService5.faleForExTh(executingQuery17,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    boolean boolean20 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService21 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction22 = null;
    queryLoggingService21.rolcForKe(kernelTransaction22);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction24 = null;
    java.lang.Throwable throwable25 = null;
    queryLoggingService21.rolcForKe(kernelTransaction24, throwable25);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction27 = null;
    queryLoggingService21.rolcForKe(kernelTransaction27);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery29 = null;
    queryLoggingService21.sucsForEx(executingQuery29);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction31 = null;
    queryLoggingService21.strForEx(kernelTransaction31);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery33 = null;
    queryLoggingService21.faleForExTh(executingQuery33,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction36 = null;
    java.lang.Throwable throwable37 = null;
    queryLoggingService21.rolcForKe(kernelTransaction36, throwable37);
    boolean boolean39 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingService21);
    java.lang.String str40 = queryLoggingServiceExtensionFactory0.getName();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext41 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies42 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle43 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext41, queryLoggingServiceDependencies42);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertNotNull(queryLoggingService5);
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    org.junit.Assert.assertNotNull(queryLoggingService21);
    org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    org.junit.Assert.assertEquals("'" + str40 + "' != '" + "query-logging" + "'", str40,
        "query-logging");
  }

  @Test
  public void test0090() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0090");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str1 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService2 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService2.rolcForKe(kernelTransaction3, throwable4);
    boolean boolean6 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) throwable4);
    java.lang.Class<?> wildcardClass7 = queryLoggingServiceExtensionFactory0.getClass();
    org.junit.Assert.assertEquals(
        "'" + str1 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str1, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(queryLoggingService2);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertNotNull(wildcardClass7);
  }

  @Test
  public void test0091() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0091");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory3 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str4 = queryLoggingServiceExtensionFactory3.toString();
    boolean boolean5 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory3);
    java.lang.String str6 = queryLoggingServiceExtensionFactory3.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService7 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction8 = null;
    queryLoggingService7.rolcForKe(kernelTransaction8);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery10 = null;
    queryLoggingService7.faleForExTh(executingQuery10, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery13 = null;
    java.lang.Throwable throwable14 = null;
    queryLoggingService7.faleForExTh(executingQuery13, throwable14);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    java.lang.Throwable throwable17 = null;
    queryLoggingService7.faleForExTh(executingQuery16, throwable17);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction19 = null;
    queryLoggingService7.strForEx(kernelTransaction19);
    java.lang.Class<?> wildcardClass21 = queryLoggingService7.getClass();
    boolean boolean22 = queryLoggingServiceExtensionFactory3.equals(
        (java.lang.Object) queryLoggingService7);
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext23 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies24 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle25 = queryLoggingServiceExtensionFactory3.newInstance(
          extensionContext23, queryLoggingServiceDependencies24);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str4 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str4, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertEquals(
        "'" + str6 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str6, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(queryLoggingService7);
    org.junit.Assert.assertNotNull(wildcardClass21);
    org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
  }

  @Test
  public void test0092() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0092");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService0.faleForExTh(executingQuery9, throwable10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    queryLoggingService0.rolcForKe(kernelTransaction12);
    java.lang.Class<?> wildcardClass14 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass14);
  }

  @Test
  public void test0093() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0093");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService3 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction4 = null;
    queryLoggingService3.rolcForKe(kernelTransaction4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService3.rolcForKe(kernelTransaction6, throwable7);
    boolean boolean9 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingService3);
    java.lang.String str10 = queryLoggingServiceExtensionFactory0.getName();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext11 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies12 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle13 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext11, queryLoggingServiceDependencies12);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertNotNull(queryLoggingService3);
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "query-logging" + "'", str10,
        "query-logging");
  }

  @Test
  public void test0094() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0094");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService3 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction4 = null;
    queryLoggingService3.rolcForKe(kernelTransaction4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService3.rolcForKe(kernelTransaction6, throwable7);
    boolean boolean9 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingService3);
    java.lang.String str10 = queryLoggingServiceExtensionFactory0.toString();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext11 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies12 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle13 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext11, queryLoggingServiceDependencies12);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertNotNull(queryLoggingService3);
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    org.junit.Assert.assertEquals(
        "'" + str10 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str10, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
  }

  @Test
  public void test0095() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0095");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.strForEx(kernelTransaction10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    java.lang.Throwable throwable13 = null;
    queryLoggingService0.rolcForKe(kernelTransaction12, throwable13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    queryLoggingService0.strForEx(kernelTransaction15);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction17 = null;
    queryLoggingService0.strForEx(kernelTransaction17);
    java.lang.Class<?> wildcardClass19 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass19);
  }

  @Test
  public void test0096() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0096");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    java.lang.Object obj5 = new java.lang.Object();
    boolean boolean6 = queryLoggingServiceExtensionFactory0.equals(obj5);
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext7 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies8 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle9 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext7, queryLoggingServiceDependencies8);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
  }

  @Test
  public void test0097() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0097");
    }
    io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl diagnosticsOfflineReportProviderQueryLoggingImpl0 = new io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction1 = null;
    org.neo4j.configuration.Config config3 = null;
    java.nio.file.Path path4 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction1, "", config3,
        path4);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.configuration.Config config8 = null;
    java.nio.file.Path path9 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction6,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config8, path9);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction11 = null;
    org.neo4j.configuration.Config config13 = null;
    java.nio.file.Path path14 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction11, "hi!", config13,
        path14);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction16 = null;
    org.neo4j.configuration.Config config18 = null;
    java.nio.file.Path path19 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction16, "hi!", config18,
        path19);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction21 = null;
    org.neo4j.configuration.Config config23 = null;
    java.nio.file.Path path24 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction21, "hi!", config23,
        path24);
  }

  @Test
  public void test0098() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0098");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.strForEx(kernelTransaction10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    java.lang.Throwable throwable13 = null;
    queryLoggingService0.faleForExTh(executingQuery12, throwable13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    queryLoggingService0.strForEx(kernelTransaction15);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction17 = null;
    java.lang.Throwable throwable18 = null;
    queryLoggingService0.rolcForKe(kernelTransaction17, throwable18);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction20 = null;
    java.lang.Throwable throwable21 = null;
    queryLoggingService0.rolcForKe(kernelTransaction20, throwable21);
    java.lang.Class<?> wildcardClass23 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass23);
  }

  @Test
  public void test0099() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0099");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService0.comForKe(kernelTransaction9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    queryLoggingService0.faleForExTh(executingQuery11,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    java.lang.Class<?> wildcardClass14 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass14);
  }

  @Test
  public void test0100() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0100");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str1 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory2 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean4 = queryLoggingServiceExtensionFactory2.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory5 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str6 = queryLoggingServiceExtensionFactory5.toString();
    boolean boolean7 = queryLoggingServiceExtensionFactory2.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory5);
    java.lang.String str8 = queryLoggingServiceExtensionFactory2.getName();
    java.lang.String str9 = queryLoggingServiceExtensionFactory2.getName();
    boolean boolean10 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory2);
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext11 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies12 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle13 = queryLoggingServiceExtensionFactory2.newInstance(
          extensionContext11, queryLoggingServiceDependencies12);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertEquals(
        "'" + str1 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str1, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertEquals(
        "'" + str6 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str6, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "query-logging" + "'", str8,
        "query-logging");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "query-logging" + "'", str9,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
  }

  @Test
  public void test0101() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0101");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory3 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str4 = queryLoggingServiceExtensionFactory3.toString();
    boolean boolean5 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory3);
    java.lang.String str6 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory7 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory8 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean10 = queryLoggingServiceExtensionFactory8.equals((java.lang.Object) (-1L));
    boolean boolean11 = queryLoggingServiceExtensionFactory7.equals((java.lang.Object) boolean10);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService12 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery13 = null;
    queryLoggingService12.strForEx(executingQuery13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    java.lang.Throwable throwable16 = null;
    queryLoggingService12.faleForExTh(executingQuery15, throwable16);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction18 = null;
    queryLoggingService12.rolcForKe(kernelTransaction18);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery20 = null;
    queryLoggingService12.sucsForEx(executingQuery20);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery22 = null;
    queryLoggingService12.strForEx(executingQuery22);
    boolean boolean24 = queryLoggingServiceExtensionFactory7.equals(
        (java.lang.Object) executingQuery22);
    boolean boolean25 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory7);
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory26 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean28 = queryLoggingServiceExtensionFactory26.equals((java.lang.Object) (short) 1);
    java.lang.String str29 = queryLoggingServiceExtensionFactory26.toString();
    boolean boolean30 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory26);
    java.lang.String str31 = queryLoggingServiceExtensionFactory26.toString();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext32 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies33 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle34 = queryLoggingServiceExtensionFactory26.newInstance(
          extensionContext32, queryLoggingServiceDependencies33);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str4 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str4, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "query-logging" + "'", str6,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    org.junit.Assert.assertNotNull(queryLoggingService12);
    org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    org.junit.Assert.assertEquals(
        "'" + str29 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str29, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    org.junit.Assert.assertEquals(
        "'" + str31 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str31, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
  }

  @Test
  public void test0102() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0102");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction4 = null;
    queryLoggingService0.comForKe(kernelTransaction4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.sucsForEx(executingQuery6);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction8 = null;
    queryLoggingService0.comForKe(kernelTransaction8);
    java.lang.Class<?> wildcardClass10 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass10);
  }

  @Test
  public void test0103() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0103");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.faleForExTh(executingQuery6, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService0.rolcForKe(kernelTransaction9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    java.lang.Throwable throwable12 = null;
    queryLoggingService0.faleForExTh(executingQuery11, throwable12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    queryLoggingService0.sucsForEx(executingQuery14);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    queryLoggingService0.faleForExTh(executingQuery16,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction19 = null;
    queryLoggingService0.rolcForKe(kernelTransaction19);
    java.lang.Class<?> wildcardClass21 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass21);
  }

  @Test
  public void test0104() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0104");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    java.lang.Object obj5 = new java.lang.Object();
    boolean boolean6 = queryLoggingServiceExtensionFactory0.equals(obj5);
    java.lang.String str7 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService8 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    queryLoggingService8.strForEx(executingQuery9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    java.lang.Throwable throwable12 = null;
    queryLoggingService8.faleForExTh(executingQuery11, throwable12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    java.lang.Throwable throwable15 = null;
    queryLoggingService8.rolcForKe(kernelTransaction14, throwable15);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction17 = null;
    queryLoggingService8.comForKe(kernelTransaction17);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery19 = null;
    queryLoggingService8.strForEx(executingQuery19);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction21 = null;
    java.lang.Throwable throwable22 = null;
    queryLoggingService8.rolcForKe(kernelTransaction21, throwable22);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction24 = null;
    queryLoggingService8.comForKe(kernelTransaction24);
    boolean boolean26 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingService8);
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext27 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies28 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle29 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext27, queryLoggingServiceDependencies28);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "query-logging" + "'", str7,
        "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService8);
    org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
  }

  @Test
  public void test0105() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0105");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (short) 1);
    java.lang.String str3 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService4 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery5 = null;
    queryLoggingService4.strForEx(executingQuery5);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery7 = null;
    java.lang.Throwable throwable8 = null;
    queryLoggingService4.faleForExTh(executingQuery7, throwable8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    java.lang.Throwable throwable11 = null;
    queryLoggingService4.rolcForKe(kernelTransaction10, throwable11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService4.comForKe(kernelTransaction13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService4.strForEx(executingQuery15);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery17 = null;
    queryLoggingService4.strForEx(executingQuery17);
    boolean boolean19 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) executingQuery17);
    java.lang.String str20 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str21 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str22 = queryLoggingServiceExtensionFactory0.toString();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext23 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies24 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle25 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext23, queryLoggingServiceDependencies24);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "query-logging" + "'", str3,
        "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService4);
    org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "query-logging" + "'", str20,
        "query-logging");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str21, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str22, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
  }

  @Test
  public void test0106() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0106");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction8 = null;
    java.lang.Throwable throwable9 = null;
    queryLoggingService0.rolcForKe(kernelTransaction8, throwable9);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    queryLoggingService0.strForEx(kernelTransaction11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService0.rolcForKe(kernelTransaction13);
    java.lang.Class<?> wildcardClass15 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass15);
  }

  @Test
  public void test0107() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0107");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    java.lang.String str5 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str6 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory7 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean9 = queryLoggingServiceExtensionFactory7.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory10 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str11 = queryLoggingServiceExtensionFactory10.toString();
    boolean boolean12 = queryLoggingServiceExtensionFactory7.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory10);
    boolean boolean13 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory7);
    java.lang.String str14 = queryLoggingServiceExtensionFactory7.getName();
    java.lang.String str15 = queryLoggingServiceExtensionFactory7.toString();
    java.lang.Class<?> wildcardClass16 = queryLoggingServiceExtensionFactory7.getClass();
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertEquals(
        "'" + str5 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str5, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "query-logging" + "'", str6,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str11, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "query-logging" + "'", str14,
        "query-logging");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str15, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(wildcardClass16);
  }

  @Test
  public void test0108() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0108");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (short) 1);
    java.lang.String str3 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str4 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.Class<?> wildcardClass5 = queryLoggingServiceExtensionFactory0.getClass();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str3 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str3, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "query-logging" + "'", str4,
        "query-logging");
    org.junit.Assert.assertNotNull(wildcardClass5);
  }

  @Test
  public void test0109() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0109");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    boolean boolean6 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) 0L);
    java.lang.String str7 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str8 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str9 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str10 = queryLoggingServiceExtensionFactory0.getName();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext11 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies12 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle13 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext11, queryLoggingServiceDependencies12);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertEquals(
        "'" + str7 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str7, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "query-logging" + "'", str8,
        "query-logging");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "query-logging" + "'", str9,
        "query-logging");
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "query-logging" + "'", str10,
        "query-logging");
  }

  @Test
  public void test0110() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0110");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    queryLoggingService0.sucsForEx(executingQuery4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.strForEx(executingQuery6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.faleForExTh(executingQuery8, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    java.lang.Throwable throwable12 = null;
    queryLoggingService0.rolcForKe(kernelTransaction11, throwable12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    queryLoggingService0.sucsForEx(executingQuery14);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    java.lang.Throwable throwable17 = null;
    queryLoggingService0.faleForExTh(executingQuery16, throwable17);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery19 = null;
    queryLoggingService0.faleForExTh(executingQuery19, "query-logging");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction22 = null;
    queryLoggingService0.comForKe(kernelTransaction22);
    java.lang.Class<?> wildcardClass24 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass24);
  }

  @Test
  public void test0111() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0111");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory3 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str4 = queryLoggingServiceExtensionFactory3.toString();
    boolean boolean5 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory3);
    boolean boolean7 = queryLoggingServiceExtensionFactory3.equals((java.lang.Object) 100.0d);
    java.lang.String str8 = queryLoggingServiceExtensionFactory3.getName();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext9 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies10 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle11 = queryLoggingServiceExtensionFactory3.newInstance(
          extensionContext9, queryLoggingServiceDependencies10);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str4 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str4, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "query-logging" + "'", str8,
        "query-logging");
  }

  @Test
  public void test0112() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0112");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery10 = null;
    queryLoggingService0.strForEx(executingQuery10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.sucsForEx(executingQuery12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    queryLoggingService0.sucsForEx(executingQuery14);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    queryLoggingService0.sucsForEx(executingQuery16);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    queryLoggingService0.strForEx(executingQuery18);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction20 = null;
    java.lang.Throwable throwable21 = null;
    queryLoggingService0.rolcForKe(kernelTransaction20, throwable21);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery23 = null;
    queryLoggingService0.sucsForEx(executingQuery23);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0113() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0113");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService5 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService5.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction8 = null;
    java.lang.Throwable throwable9 = null;
    queryLoggingService5.rolcForKe(kernelTransaction8, throwable9);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    queryLoggingService5.rolcForKe(kernelTransaction11);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery13 = null;
    queryLoggingService5.sucsForEx(executingQuery13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    queryLoggingService5.strForEx(kernelTransaction15);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery17 = null;
    queryLoggingService5.faleForExTh(executingQuery17,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    boolean boolean20 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext21 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies22 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle23 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext21, queryLoggingServiceDependencies22);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertNotNull(queryLoggingService5);
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
  }

  @Test
  public void test0114() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0114");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory3 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str4 = queryLoggingServiceExtensionFactory3.toString();
    boolean boolean5 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory3);
    boolean boolean7 = queryLoggingServiceExtensionFactory3.equals((java.lang.Object) 100.0d);
    java.lang.String str8 = queryLoggingServiceExtensionFactory3.getName();
    java.lang.String str9 = queryLoggingServiceExtensionFactory3.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService10 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    java.lang.Throwable throwable12 = null;
    queryLoggingService10.rolcForKe(kernelTransaction11, throwable12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    queryLoggingService10.comForKe(kernelTransaction14);
    boolean boolean16 = queryLoggingServiceExtensionFactory3.equals(
        (java.lang.Object) queryLoggingService10);
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext17 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies18 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle19 = queryLoggingServiceExtensionFactory3.newInstance(
          extensionContext17, queryLoggingServiceDependencies18);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str4 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str4, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "query-logging" + "'", str8,
        "query-logging");
    org.junit.Assert.assertEquals(
        "'" + str9 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str9, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(queryLoggingService10);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
  }

  @Test
  public void test0115() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0115");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction4 = null;
    queryLoggingService0.comForKe(kernelTransaction4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.faleForExTh(executingQuery6, throwable7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService0.comForKe(kernelTransaction9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    queryLoggingService0.sucsForEx(executingQuery11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService0.strForEx(kernelTransaction13);
    java.lang.Class<?> wildcardClass15 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass15);
  }

  @Test
  public void test0116() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0116");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.strForEx(executingQuery8);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery10 = null;
    java.lang.Throwable throwable11 = null;
    queryLoggingService0.faleForExTh(executingQuery10, throwable11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService0.strForEx(kernelTransaction13);
    java.lang.Class<?> wildcardClass15 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass15);
  }

  @Test
  public void test0117() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0117");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    queryLoggingService0.sucsForEx(executingQuery4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.strForEx(executingQuery8);
    java.lang.Class<?> wildcardClass10 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass10);
  }

  @Test
  public void test0118() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0118");
    }
    io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl diagnosticsOfflineReportProviderQueryLoggingImpl0 = new io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction1 = null;
    org.neo4j.configuration.Config config3 = null;
    java.nio.file.Path path4 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction1, "", config3,
        path4);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.configuration.Config config8 = null;
    java.nio.file.Path path9 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction6,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config8, path9);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction11 = null;
    org.neo4j.configuration.Config config13 = null;
    java.nio.file.Path path14 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction11, "hi!", config13,
        path14);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction16 = null;
    org.neo4j.configuration.Config config18 = null;
    java.nio.file.Path path19 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction16, "query-logging",
        config18, path19);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction21 = null;
    org.neo4j.configuration.Config config23 = null;
    java.nio.file.Path path24 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction21,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config23, path24);
  }

  @Test
  public void test0119() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0119");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.faleForExTh(executingQuery8, "hi!");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    queryLoggingService0.strForEx(kernelTransaction11);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery13 = null;
    queryLoggingService0.faleForExTh(executingQuery13, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    java.lang.Throwable throwable17 = null;
    queryLoggingService0.rolcForKe(kernelTransaction16, throwable17);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0120() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0120");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.strForEx(kernelTransaction10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    java.lang.Throwable throwable13 = null;
    queryLoggingService0.faleForExTh(executingQuery12, throwable13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    queryLoggingService0.strForEx(kernelTransaction15);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction17 = null;
    queryLoggingService0.strForEx(kernelTransaction17);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery19 = null;
    queryLoggingService0.sucsForEx(executingQuery19);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction21 = null;
    queryLoggingService0.comForKe(kernelTransaction21);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0121() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0121");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.strForEx(kernelTransaction10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    java.lang.Throwable throwable13 = null;
    queryLoggingService0.faleForExTh(executingQuery12, throwable13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    queryLoggingService0.strForEx(kernelTransaction15);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction17 = null;
    queryLoggingService0.strForEx(kernelTransaction17);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction19 = null;
    java.lang.Throwable throwable20 = null;
    queryLoggingService0.rolcForKe(kernelTransaction19, throwable20);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction22 = null;
    java.lang.Throwable throwable23 = null;
    queryLoggingService0.rolcForKe(kernelTransaction22, throwable23);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction25 = null;
    java.lang.Throwable throwable26 = null;
    queryLoggingService0.rolcForKe(kernelTransaction25, throwable26);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0122() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0122");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService0.comForKe(kernelTransaction9);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    queryLoggingService0.strForEx(kernelTransaction11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService0.comForKe(kernelTransaction13);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0123() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0123");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService0.comForKe(kernelTransaction9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    queryLoggingService0.strForEx(executingQuery11);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0124() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0124");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    boolean boolean6 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) 0L);
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory7 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory8 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean10 = queryLoggingServiceExtensionFactory8.equals((java.lang.Object) (-1L));
    boolean boolean11 = queryLoggingServiceExtensionFactory7.equals((java.lang.Object) boolean10);
    java.lang.Object obj12 = new java.lang.Object();
    boolean boolean13 = queryLoggingServiceExtensionFactory7.equals(obj12);
    java.lang.String str14 = queryLoggingServiceExtensionFactory7.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService15 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    queryLoggingService15.strForEx(executingQuery16);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    java.lang.Throwable throwable19 = null;
    queryLoggingService15.faleForExTh(executingQuery18, throwable19);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction21 = null;
    java.lang.Throwable throwable22 = null;
    queryLoggingService15.rolcForKe(kernelTransaction21, throwable22);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction24 = null;
    queryLoggingService15.comForKe(kernelTransaction24);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery26 = null;
    queryLoggingService15.strForEx(executingQuery26);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction28 = null;
    java.lang.Throwable throwable29 = null;
    queryLoggingService15.rolcForKe(kernelTransaction28, throwable29);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction31 = null;
    queryLoggingService15.comForKe(kernelTransaction31);
    boolean boolean33 = queryLoggingServiceExtensionFactory7.equals(
        (java.lang.Object) queryLoggingService15);
    boolean boolean34 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory7);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService35 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction36 = null;
    java.lang.Throwable throwable37 = null;
    queryLoggingService35.rolcForKe(kernelTransaction36, throwable37);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction39 = null;
    queryLoggingService35.comForKe(kernelTransaction39);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery41 = null;
    java.lang.Throwable throwable42 = null;
    queryLoggingService35.faleForExTh(executingQuery41, throwable42);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction44 = null;
    queryLoggingService35.rolcForKe(kernelTransaction44);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction46 = null;
    queryLoggingService35.comForKe(kernelTransaction46);
    boolean boolean48 = queryLoggingServiceExtensionFactory7.equals(
        (java.lang.Object) queryLoggingService35);
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext49 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies50 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle51 = queryLoggingServiceExtensionFactory7.newInstance(
          extensionContext49, queryLoggingServiceDependencies50);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "query-logging" + "'", str14,
        "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService15);
    org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    org.junit.Assert.assertNotNull(queryLoggingService35);
    org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
  }

  @Test
  public void test0125() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0125");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    queryLoggingService0.sucsForEx(executingQuery4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery10 = null;
    queryLoggingService0.faleForExTh(executingQuery10, "hi!");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    java.lang.Throwable throwable14 = null;
    queryLoggingService0.rolcForKe(kernelTransaction13, throwable14);
    java.lang.Class<?> wildcardClass16 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass16);
  }

  @Test
  public void test0126() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0126");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.faleForExTh(executingQuery6, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService0.rolcForKe(kernelTransaction9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    java.lang.Throwable throwable12 = null;
    queryLoggingService0.faleForExTh(executingQuery11, throwable12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    queryLoggingService0.sucsForEx(executingQuery14);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    queryLoggingService0.faleForExTh(executingQuery16,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction19 = null;
    queryLoggingService0.strForEx(kernelTransaction19);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction21 = null;
    queryLoggingService0.rolcForKe(kernelTransaction21);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0127() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0127");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    java.lang.String str5 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str6 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory7 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean9 = queryLoggingServiceExtensionFactory7.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory10 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str11 = queryLoggingServiceExtensionFactory10.toString();
    boolean boolean12 = queryLoggingServiceExtensionFactory7.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory10);
    boolean boolean13 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory7);
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext14 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies15 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle16 = queryLoggingServiceExtensionFactory7.newInstance(
          extensionContext14, queryLoggingServiceDependencies15);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertEquals(
        "'" + str5 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str5, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "query-logging" + "'", str6,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str11, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
  }

  @Test
  public void test0128() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0128");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery10 = null;
    queryLoggingService0.strForEx(executingQuery10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.sucsForEx(executingQuery12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    queryLoggingService0.sucsForEx(executingQuery14);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    queryLoggingService0.rolcForKe(kernelTransaction16);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    queryLoggingService0.sucsForEx(executingQuery18);
    java.lang.Class<?> wildcardClass20 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass20);
  }

  @Test
  public void test0129() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0129");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.faleForExTh(executingQuery8, "hi!");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    queryLoggingService0.strForEx(kernelTransaction11);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery13 = null;
    java.lang.Throwable throwable14 = null;
    queryLoggingService0.faleForExTh(executingQuery13, throwable14);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    queryLoggingService0.strForEx(kernelTransaction16);
    java.lang.Class<?> wildcardClass18 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass18);
  }

  @Test
  public void test0130() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0130");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    queryLoggingService0.sucsForEx(executingQuery4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.strForEx(executingQuery6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.faleForExTh(executingQuery8, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    java.lang.Throwable throwable12 = null;
    queryLoggingService0.rolcForKe(kernelTransaction11, throwable12);
    java.lang.Class<?> wildcardClass14 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass14);
  }

  @Test
  public void test0131() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0131");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    java.lang.Throwable throwable5 = null;
    queryLoggingService0.faleForExTh(executingQuery4, throwable5);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery7 = null;
    java.lang.Throwable throwable8 = null;
    queryLoggingService0.faleForExTh(executingQuery7, throwable8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    java.lang.Throwable throwable11 = null;
    queryLoggingService0.rolcForKe(kernelTransaction10, throwable11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService0.strForEx(kernelTransaction13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    queryLoggingService0.strForEx(kernelTransaction15);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery17 = null;
    queryLoggingService0.sucsForEx(executingQuery17);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery19 = null;
    queryLoggingService0.strForEx(executingQuery19);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0132() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0132");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    java.lang.String str3 = queryLoggingServiceExtensionFactory0.getName();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext4 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies5 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle6 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext4, queryLoggingServiceDependencies5);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "query-logging" + "'", str3,
        "query-logging");
  }

  @Test
  public void test0133() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0133");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    queryLoggingService0.faleForExTh(executingQuery3, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.faleForExTh(executingQuery6, throwable7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService0.faleForExTh(executingQuery9, throwable10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    queryLoggingService0.strForEx(kernelTransaction12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    java.lang.Throwable throwable15 = null;
    queryLoggingService0.faleForExTh(executingQuery14, throwable15);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction17 = null;
    queryLoggingService0.comForKe(kernelTransaction17);
    java.lang.Class<?> wildcardClass19 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass19);
  }

  @Test
  public void test0134() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0134");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    queryLoggingService0.sucsForEx(executingQuery4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.strForEx(executingQuery6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.faleForExTh(executingQuery8, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    java.lang.Throwable throwable12 = null;
    queryLoggingService0.rolcForKe(kernelTransaction11, throwable12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    queryLoggingService0.sucsForEx(executingQuery14);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    queryLoggingService0.sucsForEx(executingQuery16);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    java.lang.Throwable throwable19 = null;
    queryLoggingService0.faleForExTh(executingQuery18, throwable19);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery21 = null;
    queryLoggingService0.faleForExTh(executingQuery21,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery24 = null;
    java.lang.Throwable throwable25 = null;
    queryLoggingService0.faleForExTh(executingQuery24, throwable25);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery27 = null;
    queryLoggingService0.faleForExTh(executingQuery27, "");
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0135() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0135");
    }
    io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl diagnosticsOfflineReportProviderQueryLoggingImpl0 = new io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction1 = null;
    org.neo4j.configuration.Config config3 = null;
    java.nio.file.Path path4 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction1, "hi!", config3,
        path4);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.configuration.Config config8 = null;
    java.nio.file.Path path9 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction6, "query-logging",
        config8, path9);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction11 = null;
    org.neo4j.configuration.Config config13 = null;
    java.nio.file.Path path14 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction11, "query-logging",
        config13, path14);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction16 = null;
    org.neo4j.configuration.Config config18 = null;
    java.nio.file.Path path19 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction16, "", config18,
        path19);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction21 = null;
    org.neo4j.configuration.Config config23 = null;
    java.nio.file.Path path24 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction21, "", config23,
        path24);
    java.lang.Class<?> wildcardClass26 = diagnosticsOfflineReportProviderQueryLoggingImpl0.getClass();
    org.junit.Assert.assertNotNull(wildcardClass26);
  }

  @Test
  public void test0136() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0136");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    java.lang.Class<?> wildcardClass3 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass3);
  }

  @Test
  public void test0137() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0137");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str1 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService2 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService2.rolcForKe(kernelTransaction3, throwable4);
    boolean boolean6 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) throwable4);
    java.lang.String str7 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str8 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str9 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService10 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    queryLoggingService10.rolcForKe(kernelTransaction11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    java.lang.Throwable throwable14 = null;
    queryLoggingService10.rolcForKe(kernelTransaction13, throwable14);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    queryLoggingService10.rolcForKe(kernelTransaction16);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    queryLoggingService10.sucsForEx(executingQuery18);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction20 = null;
    queryLoggingService10.strForEx(kernelTransaction20);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction22 = null;
    java.lang.Throwable throwable23 = null;
    queryLoggingService10.rolcForKe(kernelTransaction22, throwable23);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction25 = null;
    java.lang.Throwable throwable26 = null;
    queryLoggingService10.rolcForKe(kernelTransaction25, throwable26);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction28 = null;
    queryLoggingService10.rolcForKe(kernelTransaction28);
    boolean boolean30 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) kernelTransaction28);
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext31 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies32 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle33 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext31, queryLoggingServiceDependencies32);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertEquals(
        "'" + str1 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str1, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(queryLoggingService2);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertEquals(
        "'" + str7 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str7, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals(
        "'" + str8 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str8, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "query-logging" + "'", str9,
        "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService10);
    org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
  }

  @Test
  public void test0138() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0138");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    java.lang.Throwable throwable5 = null;
    queryLoggingService0.faleForExTh(executingQuery4, throwable5);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery7 = null;
    java.lang.Throwable throwable8 = null;
    queryLoggingService0.faleForExTh(executingQuery7, throwable8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    java.lang.Throwable throwable11 = null;
    queryLoggingService0.rolcForKe(kernelTransaction10, throwable11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService0.strForEx(kernelTransaction13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService0.faleForExTh(executingQuery15, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    queryLoggingService0.strForEx(executingQuery18);
    java.lang.Class<?> wildcardClass20 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass20);
  }

  @Test
  public void test0139() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0139");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str1 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str2 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService3 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction4 = null;
    java.lang.Throwable throwable5 = null;
    queryLoggingService3.rolcForKe(kernelTransaction4, throwable5);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery7 = null;
    queryLoggingService3.sucsForEx(executingQuery7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService3.rolcForKe(kernelTransaction9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    queryLoggingService3.sucsForEx(executingQuery11);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery13 = null;
    queryLoggingService3.faleForExTh(executingQuery13, "hi!");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    queryLoggingService3.strForEx(executingQuery16);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction18 = null;
    java.lang.Throwable throwable19 = null;
    queryLoggingService3.rolcForKe(kernelTransaction18, throwable19);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction21 = null;
    queryLoggingService3.comForKe(kernelTransaction21);
    boolean boolean23 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) kernelTransaction21);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService24 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction25 = null;
    queryLoggingService24.rolcForKe(kernelTransaction25);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction27 = null;
    java.lang.Throwable throwable28 = null;
    queryLoggingService24.rolcForKe(kernelTransaction27, throwable28);
    boolean boolean30 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) throwable28);
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext31 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies32 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle33 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext31, queryLoggingServiceDependencies32);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertEquals(
        "'" + str1 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str1, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals(
        "'" + str2 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str2, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(queryLoggingService3);
    org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    org.junit.Assert.assertNotNull(queryLoggingService24);
    org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
  }

  @Test
  public void test0140() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0140");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    queryLoggingService0.faleForExTh(executingQuery9, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.sucsForEx(executingQuery12);
    java.lang.Class<?> wildcardClass14 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass14);
  }

  @Test
  public void test0141() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0141");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService0.comForKe(kernelTransaction9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    queryLoggingService0.faleForExTh(executingQuery11,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    queryLoggingService0.comForKe(kernelTransaction14);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    queryLoggingService0.strForEx(executingQuery16);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0142() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0142");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    queryLoggingService0.strForEx(executingQuery9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    queryLoggingService0.strForEx(executingQuery11);
    java.lang.Class<?> wildcardClass13 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass13);
  }

  @Test
  public void test0143() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0143");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.strForEx(kernelTransaction10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    java.lang.Throwable throwable13 = null;
    queryLoggingService0.faleForExTh(executingQuery12, throwable13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    queryLoggingService0.strForEx(kernelTransaction15);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction17 = null;
    queryLoggingService0.strForEx(kernelTransaction17);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery19 = null;
    queryLoggingService0.sucsForEx(executingQuery19);
    java.lang.Class<?> wildcardClass21 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass21);
  }

  @Test
  public void test0144() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0144");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    java.lang.String str5 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str6 = queryLoggingServiceExtensionFactory0.getName();
    boolean boolean8 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) 0L);
    java.lang.String str9 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService10 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    queryLoggingService10.rolcForKe(kernelTransaction11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    java.lang.Throwable throwable14 = null;
    queryLoggingService10.rolcForKe(kernelTransaction13, throwable14);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    queryLoggingService10.rolcForKe(kernelTransaction16);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    queryLoggingService10.sucsForEx(executingQuery18);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction20 = null;
    queryLoggingService10.strForEx(kernelTransaction20);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction22 = null;
    java.lang.Throwable throwable23 = null;
    queryLoggingService10.rolcForKe(kernelTransaction22, throwable23);
    boolean boolean25 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) throwable23);
    java.lang.String str26 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.Class<?> wildcardClass27 = queryLoggingServiceExtensionFactory0.getClass();
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertEquals(
        "'" + str5 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str5, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "query-logging" + "'", str6,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    org.junit.Assert.assertEquals(
        "'" + str9 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str9, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(queryLoggingService10);
    org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    org.junit.Assert.assertEquals(
        "'" + str26 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str26, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(wildcardClass27);
  }

  @Test
  public void test0145() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0145");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    boolean boolean6 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) 0L);
    java.lang.String str7 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str8 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.Object obj9 = new java.lang.Object();
    java.lang.Class<?> wildcardClass10 = obj9.getClass();
    boolean boolean11 = queryLoggingServiceExtensionFactory0.equals(obj9);
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory12 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean14 = queryLoggingServiceExtensionFactory12.equals((java.lang.Object) (short) 1);
    java.lang.String str15 = queryLoggingServiceExtensionFactory12.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService16 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery17 = null;
    queryLoggingService16.strForEx(executingQuery17);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery19 = null;
    java.lang.Throwable throwable20 = null;
    queryLoggingService16.faleForExTh(executingQuery19, throwable20);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction22 = null;
    java.lang.Throwable throwable23 = null;
    queryLoggingService16.rolcForKe(kernelTransaction22, throwable23);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction25 = null;
    queryLoggingService16.comForKe(kernelTransaction25);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery27 = null;
    queryLoggingService16.strForEx(executingQuery27);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery29 = null;
    queryLoggingService16.strForEx(executingQuery29);
    boolean boolean31 = queryLoggingServiceExtensionFactory12.equals(
        (java.lang.Object) executingQuery29);
    boolean boolean32 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) executingQuery29);
    java.lang.String str33 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str34 = queryLoggingServiceExtensionFactory0.getName();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext35 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies36 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle37 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext35, queryLoggingServiceDependencies36);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertEquals(
        "'" + str7 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str7, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "query-logging" + "'", str8,
        "query-logging");
    org.junit.Assert.assertNotNull(wildcardClass10);
    org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "query-logging" + "'", str15,
        "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService16);
    org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    org.junit.Assert.assertEquals("'" + str33 + "' != '" + "query-logging" + "'", str33,
        "query-logging");
    org.junit.Assert.assertEquals("'" + str34 + "' != '" + "query-logging" + "'", str34,
        "query-logging");
  }

  @Test
  public void test0146() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0146");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    java.lang.Throwable throwable5 = null;
    queryLoggingService0.faleForExTh(executingQuery4, throwable5);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery7 = null;
    java.lang.Throwable throwable8 = null;
    queryLoggingService0.faleForExTh(executingQuery7, throwable8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    java.lang.Throwable throwable11 = null;
    queryLoggingService0.rolcForKe(kernelTransaction10, throwable11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService0.strForEx(kernelTransaction13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService0.faleForExTh(executingQuery15, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction18 = null;
    queryLoggingService0.comForKe(kernelTransaction18);
    java.lang.Class<?> wildcardClass20 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass20);
  }

  @Test
  public void test0147() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0147");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    java.lang.Throwable throwable5 = null;
    queryLoggingService0.faleForExTh(executingQuery4, throwable5);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery7 = null;
    java.lang.Throwable throwable8 = null;
    queryLoggingService0.faleForExTh(executingQuery7, throwable8);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery10 = null;
    queryLoggingService0.sucsForEx(executingQuery10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.sucsForEx(executingQuery12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    queryLoggingService0.strForEx(kernelTransaction14);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0148() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0148");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    queryLoggingService0.faleForExTh(executingQuery9, "hi!");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.sucsForEx(executingQuery12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    java.lang.Throwable throwable15 = null;
    queryLoggingService0.rolcForKe(kernelTransaction14, throwable15);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0149() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0149");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    java.lang.String str5 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str6 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str7 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str8 = queryLoggingServiceExtensionFactory0.getName();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext9 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies10 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle11 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext9, queryLoggingServiceDependencies10);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertEquals(
        "'" + str5 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str5, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals(
        "'" + str6 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str6, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals(
        "'" + str7 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str7, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "query-logging" + "'", str8,
        "query-logging");
  }

  @Test
  public void test0150() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0150");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str1 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService2 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    queryLoggingService2.strForEx(executingQuery3);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery5 = null;
    java.lang.Throwable throwable6 = null;
    queryLoggingService2.faleForExTh(executingQuery5, throwable6);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction8 = null;
    queryLoggingService2.rolcForKe(kernelTransaction8);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery10 = null;
    queryLoggingService2.sucsForEx(executingQuery10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    queryLoggingService2.strForEx(kernelTransaction12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    java.lang.Throwable throwable15 = null;
    queryLoggingService2.faleForExTh(executingQuery14, throwable15);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction17 = null;
    queryLoggingService2.strForEx(kernelTransaction17);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction19 = null;
    queryLoggingService2.strForEx(kernelTransaction19);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction21 = null;
    java.lang.Throwable throwable22 = null;
    queryLoggingService2.rolcForKe(kernelTransaction21, throwable22);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction24 = null;
    java.lang.Throwable throwable25 = null;
    queryLoggingService2.rolcForKe(kernelTransaction24, throwable25);
    boolean boolean27 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) kernelTransaction24);
    java.lang.Class<?> wildcardClass28 = queryLoggingServiceExtensionFactory0.getClass();
    org.junit.Assert.assertEquals(
        "'" + str1 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str1, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(queryLoggingService2);
    org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    org.junit.Assert.assertNotNull(wildcardClass28);
  }

  @Test
  public void test0151() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0151");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (short) 1);
    java.lang.String str3 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str4 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService5 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService5.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService5.comForKe(kernelTransaction9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    java.lang.Throwable throwable12 = null;
    queryLoggingService5.faleForExTh(executingQuery11, throwable12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    queryLoggingService5.rolcForKe(kernelTransaction14);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    java.lang.Throwable throwable17 = null;
    queryLoggingService5.faleForExTh(executingQuery16, throwable17);
    java.lang.Class<?> wildcardClass19 = queryLoggingService5.getClass();
    boolean boolean20 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) wildcardClass19);
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext21 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies22 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle23 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext21, queryLoggingServiceDependencies22);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str3 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str3, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "query-logging" + "'", str4,
        "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService5);
    org.junit.Assert.assertNotNull(wildcardClass19);
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
  }

  @Test
  public void test0152() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0152");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService5 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService5.strForEx(executingQuery6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    java.lang.Throwable throwable9 = null;
    queryLoggingService5.faleForExTh(executingQuery8, throwable9);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    queryLoggingService5.rolcForKe(kernelTransaction11);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery13 = null;
    queryLoggingService5.sucsForEx(executingQuery13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService5.strForEx(executingQuery15);
    boolean boolean17 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) executingQuery15);
    java.lang.String str18 = queryLoggingServiceExtensionFactory0.getName();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext19 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies20 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle21 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext19, queryLoggingServiceDependencies20);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertNotNull(queryLoggingService5);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "query-logging" + "'", str18,
        "query-logging");
  }

  @Test
  public void test0153() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0153");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.strForEx(kernelTransaction10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    java.lang.Throwable throwable13 = null;
    queryLoggingService0.rolcForKe(kernelTransaction12, throwable13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    queryLoggingService0.strForEx(kernelTransaction15);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction17 = null;
    queryLoggingService0.comForKe(kernelTransaction17);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0154() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0154");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    queryLoggingService0.faleForExTh(executingQuery3, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.faleForExTh(executingQuery6, throwable7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService0.faleForExTh(executingQuery9, throwable10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    queryLoggingService0.strForEx(kernelTransaction12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    queryLoggingService0.strForEx(kernelTransaction14);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    queryLoggingService0.sucsForEx(executingQuery16);
    java.lang.Class<?> wildcardClass18 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass18);
  }

  @Test
  public void test0155() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0155");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory3 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str4 = queryLoggingServiceExtensionFactory3.toString();
    boolean boolean5 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory3);
    boolean boolean7 = queryLoggingServiceExtensionFactory3.equals((java.lang.Object) 100.0d);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService8 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    queryLoggingService8.strForEx(executingQuery9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    java.lang.Throwable throwable12 = null;
    queryLoggingService8.faleForExTh(executingQuery11, throwable12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    queryLoggingService8.rolcForKe(kernelTransaction14);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    queryLoggingService8.sucsForEx(executingQuery16);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    queryLoggingService8.strForEx(executingQuery18);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery20 = null;
    queryLoggingService8.sucsForEx(executingQuery20);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery22 = null;
    queryLoggingService8.sucsForEx(executingQuery22);
    boolean boolean24 = queryLoggingServiceExtensionFactory3.equals(
        (java.lang.Object) executingQuery22);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService25 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery26 = null;
    queryLoggingService25.strForEx(executingQuery26);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery28 = null;
    java.lang.Throwable throwable29 = null;
    queryLoggingService25.faleForExTh(executingQuery28, throwable29);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction31 = null;
    queryLoggingService25.rolcForKe(kernelTransaction31);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery33 = null;
    queryLoggingService25.sucsForEx(executingQuery33);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery35 = null;
    queryLoggingService25.strForEx(executingQuery35);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery37 = null;
    queryLoggingService25.sucsForEx(executingQuery37);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery39 = null;
    queryLoggingService25.sucsForEx(executingQuery39);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery41 = null;
    queryLoggingService25.sucsForEx(executingQuery41);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery43 = null;
    queryLoggingService25.strForEx(executingQuery43);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction45 = null;
    java.lang.Throwable throwable46 = null;
    queryLoggingService25.rolcForKe(kernelTransaction45, throwable46);
    boolean boolean48 = queryLoggingServiceExtensionFactory3.equals(
        (java.lang.Object) queryLoggingService25);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService49 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery50 = null;
    queryLoggingService49.strForEx(executingQuery50);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery52 = null;
    java.lang.Throwable throwable53 = null;
    queryLoggingService49.faleForExTh(executingQuery52, throwable53);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction55 = null;
    java.lang.Throwable throwable56 = null;
    queryLoggingService49.rolcForKe(kernelTransaction55, throwable56);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery58 = null;
    queryLoggingService49.faleForExTh(executingQuery58, "hi!");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction61 = null;
    java.lang.Throwable throwable62 = null;
    queryLoggingService49.rolcForKe(kernelTransaction61, throwable62);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction64 = null;
    queryLoggingService49.comForKe(kernelTransaction64);
    boolean boolean66 = queryLoggingServiceExtensionFactory3.equals(
        (java.lang.Object) kernelTransaction64);
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext67 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies68 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle69 = queryLoggingServiceExtensionFactory3.newInstance(
          extensionContext67, queryLoggingServiceDependencies68);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str4 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str4, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    org.junit.Assert.assertNotNull(queryLoggingService8);
    org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    org.junit.Assert.assertNotNull(queryLoggingService25);
    org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    org.junit.Assert.assertNotNull(queryLoggingService49);
    org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
  }

  @Test
  public void test0156() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0156");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    queryLoggingService0.sucsForEx(executingQuery4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.strForEx(executingQuery8);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery10 = null;
    queryLoggingService0.strForEx(executingQuery10);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0157() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0157");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str1 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService2 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService2.rolcForKe(kernelTransaction3, throwable4);
    boolean boolean6 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) throwable4);
    java.lang.String str7 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str8 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl diagnosticsOfflineReportProviderQueryLoggingImpl9 = new io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction10 = null;
    org.neo4j.configuration.Config config12 = null;
    java.nio.file.Path path13 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl9.init(fileSystemAbstraction10, "hi!", config12,
        path13);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction15 = null;
    org.neo4j.configuration.Config config17 = null;
    java.nio.file.Path path18 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl9.init(fileSystemAbstraction15,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config17, path18);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction20 = null;
    org.neo4j.configuration.Config config22 = null;
    java.nio.file.Path path23 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl9.init(fileSystemAbstraction20,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config22, path23);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction25 = null;
    org.neo4j.configuration.Config config27 = null;
    java.nio.file.Path path28 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl9.init(fileSystemAbstraction25, "query-logging",
        config27, path28);
    boolean boolean30 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) fileSystemAbstraction25);
    boolean boolean32 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) 0.0f);
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext33 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies34 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle35 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext33, queryLoggingServiceDependencies34);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertEquals(
        "'" + str1 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str1, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(queryLoggingService2);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertEquals(
        "'" + str7 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str7, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals(
        "'" + str8 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str8, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
  }

  @Test
  public void test0158() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0158");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction4 = null;
    queryLoggingService0.comForKe(kernelTransaction4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.faleForExTh(executingQuery6, throwable7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService0.comForKe(kernelTransaction9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    queryLoggingService0.sucsForEx(executingQuery11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService0.strForEx(kernelTransaction13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    queryLoggingService0.strForEx(kernelTransaction15);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery17 = null;
    queryLoggingService0.sucsForEx(executingQuery17);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0159() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0159");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    queryLoggingService0.sucsForEx(executingQuery4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.sucsForEx(executingQuery6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.rolcForKe(kernelTransaction10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.sucsForEx(executingQuery12);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0160() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0160");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    queryLoggingService0.faleForExTh(executingQuery9, "hi!");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    java.lang.Throwable throwable13 = null;
    queryLoggingService0.rolcForKe(kernelTransaction12, throwable13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService0.strForEx(executingQuery15);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction17 = null;
    queryLoggingService0.rolcForKe(kernelTransaction17);
    java.lang.Class<?> wildcardClass19 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass19);
  }

  @Test
  public void test0161() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0161");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService0.faleForExTh(executingQuery9, throwable10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    queryLoggingService0.strForEx(kernelTransaction12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    queryLoggingService0.sucsForEx(executingQuery14);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    queryLoggingService0.rolcForKe(kernelTransaction16);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0162() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0162");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    queryLoggingService0.strForEx(executingQuery9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    java.lang.Throwable throwable12 = null;
    queryLoggingService0.faleForExTh(executingQuery11, throwable12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    queryLoggingService0.strForEx(executingQuery14);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    queryLoggingService0.strForEx(executingQuery16);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0163() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0163");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    java.lang.Throwable throwable5 = null;
    queryLoggingService0.faleForExTh(executingQuery4, throwable5);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery7 = null;
    java.lang.Throwable throwable8 = null;
    queryLoggingService0.faleForExTh(executingQuery7, throwable8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.rolcForKe(kernelTransaction10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    java.lang.Throwable throwable13 = null;
    queryLoggingService0.faleForExTh(executingQuery12, throwable13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService0.strForEx(executingQuery15);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction17 = null;
    queryLoggingService0.comForKe(kernelTransaction17);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery19 = null;
    queryLoggingService0.sucsForEx(executingQuery19);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0164() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0164");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.strForEx(kernelTransaction10);
    java.lang.Class<?> wildcardClass12 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass12);
  }

  @Test
  public void test0165() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0165");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction4 = null;
    java.lang.Throwable throwable5 = null;
    queryLoggingService0.rolcForKe(kernelTransaction4, throwable5);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService0.rolcForKe(kernelTransaction9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    java.lang.Throwable throwable12 = null;
    queryLoggingService0.faleForExTh(executingQuery11, throwable12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    java.lang.Throwable throwable15 = null;
    queryLoggingService0.faleForExTh(executingQuery14, throwable15);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0166() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0166");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService0.rolcForKe(kernelTransaction9, throwable10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    queryLoggingService0.rolcForKe(kernelTransaction12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    queryLoggingService0.rolcForKe(kernelTransaction14);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    java.lang.Throwable throwable17 = null;
    queryLoggingService0.rolcForKe(kernelTransaction16, throwable17);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction19 = null;
    java.lang.Throwable throwable20 = null;
    queryLoggingService0.rolcForKe(kernelTransaction19, throwable20);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery22 = null;
    queryLoggingService0.faleForExTh(executingQuery22,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0167() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0167");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    boolean boolean6 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) 0L);
    java.lang.String str7 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str8 = queryLoggingServiceExtensionFactory0.getName();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext9 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies10 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle11 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext9, queryLoggingServiceDependencies10);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertEquals(
        "'" + str7 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str7, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "query-logging" + "'", str8,
        "query-logging");
  }

  @Test
  public void test0168() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0168");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction4 = null;
    java.lang.Throwable throwable5 = null;
    queryLoggingService0.rolcForKe(kernelTransaction4, throwable5);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery7 = null;
    queryLoggingService0.faleForExTh(executingQuery7, "query-logging");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.comForKe(kernelTransaction10);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0169() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0169");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService0.rolcForKe(kernelTransaction9, throwable10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.faleForExTh(executingQuery12, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    java.lang.Throwable throwable16 = null;
    queryLoggingService0.faleForExTh(executingQuery15, throwable16);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    queryLoggingService0.sucsForEx(executingQuery18);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery20 = null;
    queryLoggingService0.sucsForEx(executingQuery20);
    java.lang.Class<?> wildcardClass22 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass22);
  }

  @Test
  public void test0170() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0170");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService0.rolcForKe(kernelTransaction9, throwable10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    queryLoggingService0.comForKe(kernelTransaction12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    queryLoggingService0.comForKe(kernelTransaction14);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    queryLoggingService0.comForKe(kernelTransaction16);
    java.lang.Class<?> wildcardClass18 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass18);
  }

  @Test
  public void test0171() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0171");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (short) 1);
    java.lang.String str3 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService4 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery5 = null;
    queryLoggingService4.strForEx(executingQuery5);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery7 = null;
    java.lang.Throwable throwable8 = null;
    queryLoggingService4.faleForExTh(executingQuery7, throwable8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    java.lang.Throwable throwable11 = null;
    queryLoggingService4.rolcForKe(kernelTransaction10, throwable11);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery13 = null;
    queryLoggingService4.faleForExTh(executingQuery13, "hi!");
    boolean boolean16 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) "hi!");
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext17 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies18 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle19 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext17, queryLoggingServiceDependencies18);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str3 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str3, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(queryLoggingService4);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
  }

  @Test
  public void test0172() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0172");
    }
    io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl diagnosticsOfflineReportProviderQueryLoggingImpl0 = new io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction1 = null;
    org.neo4j.configuration.Config config3 = null;
    java.nio.file.Path path4 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction1, "hi!", config3,
        path4);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.configuration.Config config8 = null;
    java.nio.file.Path path9 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction6,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config8, path9);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction11 = null;
    org.neo4j.configuration.Config config13 = null;
    java.nio.file.Path path14 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction11,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config13, path14);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction16 = null;
    org.neo4j.configuration.Config config18 = null;
    java.nio.file.Path path19 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction16, "query-logging",
        config18, path19);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction21 = null;
    org.neo4j.configuration.Config config23 = null;
    java.nio.file.Path path24 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction21, "hi!", config23,
        path24);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction26 = null;
    org.neo4j.configuration.Config config28 = null;
    java.nio.file.Path path29 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction26,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config28, path29);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction31 = null;
    org.neo4j.configuration.Config config33 = null;
    java.nio.file.Path path34 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction31, "hi!", config33,
        path34);
  }

  @Test
  public void test0173() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0173");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    queryLoggingService0.faleForExTh(executingQuery9, "hi!");
    java.lang.Class<?> wildcardClass12 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass12);
  }

  @Test
  public void test0174() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0174");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory3 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str4 = queryLoggingServiceExtensionFactory3.toString();
    boolean boolean5 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory3);
    java.lang.String str6 = queryLoggingServiceExtensionFactory3.toString();
    java.lang.String str7 = queryLoggingServiceExtensionFactory3.getName();
    java.lang.String str8 = queryLoggingServiceExtensionFactory3.getName();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext9 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies10 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle11 = queryLoggingServiceExtensionFactory3.newInstance(
          extensionContext9, queryLoggingServiceDependencies10);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str4 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str4, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertEquals(
        "'" + str6 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str6, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "query-logging" + "'", str7,
        "query-logging");
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "query-logging" + "'", str8,
        "query-logging");
  }

  @Test
  public void test0175() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0175");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory3 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str4 = queryLoggingServiceExtensionFactory3.toString();
    boolean boolean5 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory3);
    boolean boolean7 = queryLoggingServiceExtensionFactory3.equals((java.lang.Object) 100.0d);
    java.lang.String str8 = queryLoggingServiceExtensionFactory3.toString();
    java.lang.String str9 = queryLoggingServiceExtensionFactory3.getName();
    java.lang.Object obj10 = null;
    boolean boolean11 = queryLoggingServiceExtensionFactory3.equals(obj10);
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext12 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies13 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle14 = queryLoggingServiceExtensionFactory3.newInstance(
          extensionContext12, queryLoggingServiceDependencies13);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str4 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str4, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    org.junit.Assert.assertEquals(
        "'" + str8 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str8, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "query-logging" + "'", str9,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
  }

  @Test
  public void test0176() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0176");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory3 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str4 = queryLoggingServiceExtensionFactory3.toString();
    boolean boolean5 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory3);
    boolean boolean7 = queryLoggingServiceExtensionFactory3.equals((java.lang.Object) 100.0d);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService8 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    queryLoggingService8.strForEx(executingQuery9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    java.lang.Throwable throwable12 = null;
    queryLoggingService8.faleForExTh(executingQuery11, throwable12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    queryLoggingService8.rolcForKe(kernelTransaction14);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    queryLoggingService8.sucsForEx(executingQuery16);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    queryLoggingService8.strForEx(executingQuery18);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery20 = null;
    queryLoggingService8.sucsForEx(executingQuery20);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery22 = null;
    queryLoggingService8.sucsForEx(executingQuery22);
    boolean boolean24 = queryLoggingServiceExtensionFactory3.equals(
        (java.lang.Object) executingQuery22);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService25 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery26 = null;
    queryLoggingService25.strForEx(executingQuery26);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery28 = null;
    java.lang.Throwable throwable29 = null;
    queryLoggingService25.faleForExTh(executingQuery28, throwable29);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction31 = null;
    queryLoggingService25.rolcForKe(kernelTransaction31);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery33 = null;
    queryLoggingService25.sucsForEx(executingQuery33);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery35 = null;
    queryLoggingService25.strForEx(executingQuery35);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery37 = null;
    queryLoggingService25.sucsForEx(executingQuery37);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery39 = null;
    queryLoggingService25.sucsForEx(executingQuery39);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery41 = null;
    queryLoggingService25.sucsForEx(executingQuery41);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery43 = null;
    queryLoggingService25.strForEx(executingQuery43);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction45 = null;
    java.lang.Throwable throwable46 = null;
    queryLoggingService25.rolcForKe(kernelTransaction45, throwable46);
    boolean boolean48 = queryLoggingServiceExtensionFactory3.equals(
        (java.lang.Object) queryLoggingService25);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService49 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery50 = null;
    queryLoggingService49.strForEx(executingQuery50);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery52 = null;
    java.lang.Throwable throwable53 = null;
    queryLoggingService49.faleForExTh(executingQuery52, throwable53);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction55 = null;
    java.lang.Throwable throwable56 = null;
    queryLoggingService49.rolcForKe(kernelTransaction55, throwable56);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery58 = null;
    queryLoggingService49.faleForExTh(executingQuery58, "hi!");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction61 = null;
    java.lang.Throwable throwable62 = null;
    queryLoggingService49.rolcForKe(kernelTransaction61, throwable62);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction64 = null;
    queryLoggingService49.comForKe(kernelTransaction64);
    boolean boolean66 = queryLoggingServiceExtensionFactory3.equals(
        (java.lang.Object) kernelTransaction64);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService67 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction68 = null;
    queryLoggingService67.rolcForKe(kernelTransaction68);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction70 = null;
    java.lang.Throwable throwable71 = null;
    queryLoggingService67.rolcForKe(kernelTransaction70, throwable71);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction73 = null;
    java.lang.Throwable throwable74 = null;
    queryLoggingService67.rolcForKe(kernelTransaction73, throwable74);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery76 = null;
    java.lang.Throwable throwable77 = null;
    queryLoggingService67.faleForExTh(executingQuery76, throwable77);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction79 = null;
    queryLoggingService67.strForEx(kernelTransaction79);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery81 = null;
    queryLoggingService67.sucsForEx(executingQuery81);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery83 = null;
    queryLoggingService67.faleForExTh(executingQuery83,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery86 = null;
    queryLoggingService67.faleForExTh(executingQuery86,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery89 = null;
    queryLoggingService67.faleForExTh(executingQuery89, "hi!");
    boolean boolean92 = queryLoggingServiceExtensionFactory3.equals((java.lang.Object) "hi!");
    java.lang.String str93 = queryLoggingServiceExtensionFactory3.getName();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str4 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str4, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    org.junit.Assert.assertNotNull(queryLoggingService8);
    org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    org.junit.Assert.assertNotNull(queryLoggingService25);
    org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    org.junit.Assert.assertNotNull(queryLoggingService49);
    org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    org.junit.Assert.assertNotNull(queryLoggingService67);
    org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    org.junit.Assert.assertEquals("'" + str93 + "' != '" + "query-logging" + "'", str93,
        "query-logging");
  }

  @Test
  public void test0177() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0177");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory3 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str4 = queryLoggingServiceExtensionFactory3.toString();
    boolean boolean5 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory3);
    boolean boolean7 = queryLoggingServiceExtensionFactory3.equals((java.lang.Object) 100.0d);
    java.lang.String str8 = queryLoggingServiceExtensionFactory3.toString();
    java.lang.String str9 = queryLoggingServiceExtensionFactory3.getName();
    java.lang.String str10 = queryLoggingServiceExtensionFactory3.toString();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext11 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies12 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle13 = queryLoggingServiceExtensionFactory3.newInstance(
          extensionContext11, queryLoggingServiceDependencies12);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str4 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str4, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    org.junit.Assert.assertEquals(
        "'" + str8 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str8, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "query-logging" + "'", str9,
        "query-logging");
    org.junit.Assert.assertEquals(
        "'" + str10 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str10, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
  }

  @Test
  public void test0178() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0178");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    queryLoggingService0.faleForExTh(executingQuery3, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.sucsForEx(executingQuery6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.faleForExTh(executingQuery8, "");
    java.lang.Class<?> wildcardClass11 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass11);
  }

  @Test
  public void test0179() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0179");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory3 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str4 = queryLoggingServiceExtensionFactory3.toString();
    boolean boolean5 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory3);
    java.lang.String str6 = queryLoggingServiceExtensionFactory3.toString();
    java.lang.String str7 = queryLoggingServiceExtensionFactory3.getName();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext8 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies9 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle10 = queryLoggingServiceExtensionFactory3.newInstance(
          extensionContext8, queryLoggingServiceDependencies9);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str4 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str4, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertEquals(
        "'" + str6 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str6, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "query-logging" + "'", str7,
        "query-logging");
  }

  @Test
  public void test0180() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0180");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    queryLoggingService0.faleForExTh(executingQuery9, "hi!");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.faleForExTh(executingQuery12, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    java.lang.Throwable throwable16 = null;
    queryLoggingService0.rolcForKe(kernelTransaction15, throwable16);
    java.lang.Class<?> wildcardClass18 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass18);
  }

  @Test
  public void test0181() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0181");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService5 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService5.strForEx(executingQuery6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    java.lang.Throwable throwable9 = null;
    queryLoggingService5.faleForExTh(executingQuery8, throwable9);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    queryLoggingService5.rolcForKe(kernelTransaction11);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery13 = null;
    queryLoggingService5.sucsForEx(executingQuery13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService5.strForEx(executingQuery15);
    boolean boolean17 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) executingQuery15);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService18 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction19 = null;
    queryLoggingService18.rolcForKe(kernelTransaction19);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction21 = null;
    java.lang.Throwable throwable22 = null;
    queryLoggingService18.rolcForKe(kernelTransaction21, throwable22);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery24 = null;
    queryLoggingService18.faleForExTh(executingQuery24, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction27 = null;
    queryLoggingService18.rolcForKe(kernelTransaction27);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery29 = null;
    java.lang.Throwable throwable30 = null;
    queryLoggingService18.faleForExTh(executingQuery29, throwable30);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery32 = null;
    queryLoggingService18.sucsForEx(executingQuery32);
    boolean boolean34 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingService18);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService35 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction36 = null;
    java.lang.Throwable throwable37 = null;
    queryLoggingService35.rolcForKe(kernelTransaction36, throwable37);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery39 = null;
    queryLoggingService35.sucsForEx(executingQuery39);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction41 = null;
    queryLoggingService35.comForKe(kernelTransaction41);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery43 = null;
    queryLoggingService35.faleForExTh(executingQuery43, "query-logging");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction46 = null;
    queryLoggingService35.strForEx(kernelTransaction46);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction48 = null;
    queryLoggingService35.comForKe(kernelTransaction48);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery50 = null;
    queryLoggingService35.strForEx(executingQuery50);
    boolean boolean52 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingService35);
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext53 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies54 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle55 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext53, queryLoggingServiceDependencies54);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertNotNull(queryLoggingService5);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    org.junit.Assert.assertNotNull(queryLoggingService18);
    org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    org.junit.Assert.assertNotNull(queryLoggingService35);
    org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
  }

  @Test
  public void test0182() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0182");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (short) 1);
    java.lang.String str3 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService4 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery5 = null;
    queryLoggingService4.strForEx(executingQuery5);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery7 = null;
    java.lang.Throwable throwable8 = null;
    queryLoggingService4.faleForExTh(executingQuery7, throwable8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    java.lang.Throwable throwable11 = null;
    queryLoggingService4.rolcForKe(kernelTransaction10, throwable11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService4.comForKe(kernelTransaction13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService4.strForEx(executingQuery15);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery17 = null;
    queryLoggingService4.strForEx(executingQuery17);
    boolean boolean19 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) executingQuery17);
    java.lang.String str20 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str21 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str22 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str23 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str24 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService25 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery26 = null;
    queryLoggingService25.strForEx(executingQuery26);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery28 = null;
    java.lang.Throwable throwable29 = null;
    queryLoggingService25.faleForExTh(executingQuery28, throwable29);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction31 = null;
    java.lang.Throwable throwable32 = null;
    queryLoggingService25.rolcForKe(kernelTransaction31, throwable32);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery34 = null;
    queryLoggingService25.faleForExTh(executingQuery34, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery37 = null;
    queryLoggingService25.sucsForEx(executingQuery37);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery39 = null;
    queryLoggingService25.sucsForEx(executingQuery39);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction41 = null;
    queryLoggingService25.strForEx(kernelTransaction41);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction43 = null;
    queryLoggingService25.strForEx(kernelTransaction43);
    boolean boolean45 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) kernelTransaction43);
    java.lang.String str46 = queryLoggingServiceExtensionFactory0.getName();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "query-logging" + "'", str3,
        "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService4);
    org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "query-logging" + "'", str20,
        "query-logging");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str21, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str22, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str23 + "' != '" + "query-logging" + "'", str23,
        "query-logging");
    org.junit.Assert.assertEquals("'" + str24 + "' != '" + "query-logging" + "'", str24,
        "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService25);
    org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    org.junit.Assert.assertEquals("'" + str46 + "' != '" + "query-logging" + "'", str46,
        "query-logging");
  }

  @Test
  public void test0183() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0183");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    queryLoggingService0.sucsForEx(executingQuery4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.strForEx(executingQuery6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.faleForExTh(executingQuery8, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    java.lang.Throwable throwable12 = null;
    queryLoggingService0.rolcForKe(kernelTransaction11, throwable12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    queryLoggingService0.sucsForEx(executingQuery14);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    queryLoggingService0.sucsForEx(executingQuery16);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    java.lang.Throwable throwable19 = null;
    queryLoggingService0.faleForExTh(executingQuery18, throwable19);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery21 = null;
    queryLoggingService0.faleForExTh(executingQuery21,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    java.lang.Class<?> wildcardClass24 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass24);
  }

  @Test
  public void test0184() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0184");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    java.lang.Throwable throwable5 = null;
    queryLoggingService0.faleForExTh(executingQuery4, throwable5);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery7 = null;
    java.lang.Throwable throwable8 = null;
    queryLoggingService0.faleForExTh(executingQuery7, throwable8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.strForEx(kernelTransaction10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    queryLoggingService0.strForEx(kernelTransaction12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    java.lang.Throwable throwable15 = null;
    queryLoggingService0.rolcForKe(kernelTransaction14, throwable15);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction17 = null;
    queryLoggingService0.rolcForKe(kernelTransaction17);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery19 = null;
    queryLoggingService0.faleForExTh(executingQuery19, "hi!");
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0185() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0185");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.strForEx(kernelTransaction10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.faleForExTh(executingQuery12,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService0.faleForExTh(executingQuery15, "query-logging");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    queryLoggingService0.sucsForEx(executingQuery18);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery20 = null;
    queryLoggingService0.faleForExTh(executingQuery20, "query-logging");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery23 = null;
    queryLoggingService0.faleForExTh(executingQuery23, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction26 = null;
    java.lang.Throwable throwable27 = null;
    queryLoggingService0.rolcForKe(kernelTransaction26, throwable27);
    java.lang.Class<?> wildcardClass29 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass29);
  }

  @Test
  public void test0186() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0186");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction4 = null;
    java.lang.Throwable throwable5 = null;
    queryLoggingService0.rolcForKe(kernelTransaction4, throwable5);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService0.faleForExTh(executingQuery9, throwable10);
    java.lang.Class<?> wildcardClass12 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass12);
  }

  @Test
  public void test0187() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0187");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService0.comForKe(kernelTransaction9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    queryLoggingService0.faleForExTh(executingQuery11, "");
    java.lang.Class<?> wildcardClass14 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass14);
  }

  @Test
  public void test0188() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0188");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (short) 1);
    java.lang.String str3 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService4 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery5 = null;
    queryLoggingService4.strForEx(executingQuery5);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery7 = null;
    java.lang.Throwable throwable8 = null;
    queryLoggingService4.faleForExTh(executingQuery7, throwable8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    java.lang.Throwable throwable11 = null;
    queryLoggingService4.rolcForKe(kernelTransaction10, throwable11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService4.comForKe(kernelTransaction13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService4.strForEx(executingQuery15);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery17 = null;
    queryLoggingService4.strForEx(executingQuery17);
    boolean boolean19 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) executingQuery17);
    java.lang.String str20 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.Class<?> wildcardClass21 = queryLoggingServiceExtensionFactory0.getClass();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "query-logging" + "'", str3,
        "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService4);
    org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str20, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(wildcardClass21);
  }

  @Test
  public void test0189() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0189");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1.0d));
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService3 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction4 = null;
    queryLoggingService3.rolcForKe(kernelTransaction4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService3.faleForExTh(executingQuery6, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService3.faleForExTh(executingQuery9, throwable10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    java.lang.Throwable throwable13 = null;
    queryLoggingService3.faleForExTh(executingQuery12, throwable13);
    boolean boolean15 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) executingQuery12);
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory16 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean18 = queryLoggingServiceExtensionFactory16.equals((java.lang.Object) (short) 1);
    java.lang.String str19 = queryLoggingServiceExtensionFactory16.getName();
    boolean boolean20 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory16);
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory21 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean23 = queryLoggingServiceExtensionFactory21.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory24 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str25 = queryLoggingServiceExtensionFactory24.toString();
    boolean boolean26 = queryLoggingServiceExtensionFactory21.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory24);
    boolean boolean28 = queryLoggingServiceExtensionFactory21.equals((java.lang.Object) (-1.0f));
    boolean boolean29 = queryLoggingServiceExtensionFactory16.equals((java.lang.Object) (-1.0f));
    java.lang.String str30 = queryLoggingServiceExtensionFactory16.getName();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext31 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies32 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle33 = queryLoggingServiceExtensionFactory16.newInstance(
          extensionContext31, queryLoggingServiceDependencies32);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertNotNull(queryLoggingService3);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "query-logging" + "'", str19,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    org.junit.Assert.assertEquals(
        "'" + str25 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str25, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    org.junit.Assert.assertEquals("'" + str30 + "' != '" + "query-logging" + "'", str30,
        "query-logging");
  }

  @Test
  public void test0190() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0190");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    java.lang.Throwable throwable5 = null;
    queryLoggingService0.faleForExTh(executingQuery4, throwable5);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery7 = null;
    java.lang.Throwable throwable8 = null;
    queryLoggingService0.faleForExTh(executingQuery7, throwable8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.strForEx(kernelTransaction10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    java.lang.Throwable throwable13 = null;
    queryLoggingService0.faleForExTh(executingQuery12, throwable13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    queryLoggingService0.rolcForKe(kernelTransaction15);
    java.lang.Class<?> wildcardClass17 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass17);
  }

  @Test
  public void test0191() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0191");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService0.faleForExTh(executingQuery9, throwable10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    queryLoggingService0.strForEx(kernelTransaction12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    queryLoggingService0.rolcForKe(kernelTransaction14);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0192() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0192");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.faleForExTh(executingQuery8, "hi!");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    queryLoggingService0.strForEx(kernelTransaction11);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery13 = null;
    java.lang.Throwable throwable14 = null;
    queryLoggingService0.faleForExTh(executingQuery13, throwable14);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    queryLoggingService0.faleForExTh(executingQuery16, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction19 = null;
    queryLoggingService0.strForEx(kernelTransaction19);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction21 = null;
    java.lang.Throwable throwable22 = null;
    queryLoggingService0.rolcForKe(kernelTransaction21, throwable22);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery24 = null;
    queryLoggingService0.faleForExTh(executingQuery24, "");
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0193() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0193");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    queryLoggingService0.faleForExTh(executingQuery3, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.faleForExTh(executingQuery6, throwable7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService0.faleForExTh(executingQuery9, throwable10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    queryLoggingService0.strForEx(kernelTransaction12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    queryLoggingService0.faleForExTh(executingQuery14, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery17 = null;
    queryLoggingService0.strForEx(executingQuery17);
    java.lang.Class<?> wildcardClass19 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass19);
  }

  @Test
  public void test0194() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0194");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService0.comForKe(kernelTransaction9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    queryLoggingService0.strForEx(executingQuery11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    java.lang.Throwable throwable14 = null;
    queryLoggingService0.rolcForKe(kernelTransaction13, throwable14);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    queryLoggingService0.comForKe(kernelTransaction16);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction18 = null;
    java.lang.Throwable throwable19 = null;
    queryLoggingService0.rolcForKe(kernelTransaction18, throwable19);
    java.lang.Class<?> wildcardClass21 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass21);
  }

  @Test
  public void test0195() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0195");
    }
    io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl diagnosticsOfflineReportProviderQueryLoggingImpl0 = new io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction1 = null;
    org.neo4j.configuration.Config config3 = null;
    java.nio.file.Path path4 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction1, "hi!", config3,
        path4);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.configuration.Config config8 = null;
    java.nio.file.Path path9 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction6, "query-logging",
        config8, path9);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction11 = null;
    org.neo4j.configuration.Config config13 = null;
    java.nio.file.Path path14 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction11,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config13, path14);
    java.lang.Class<?> wildcardClass16 = diagnosticsOfflineReportProviderQueryLoggingImpl0.getClass();
    org.junit.Assert.assertNotNull(wildcardClass16);
  }

  @Test
  public void test0196() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0196");
    }
    io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl diagnosticsOfflineReportProviderQueryLoggingImpl0 = new io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction1 = null;
    org.neo4j.configuration.Config config3 = null;
    java.nio.file.Path path4 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction1, "", config3,
        path4);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.configuration.Config config8 = null;
    java.nio.file.Path path9 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction6,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config8, path9);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction11 = null;
    org.neo4j.configuration.Config config13 = null;
    java.nio.file.Path path14 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction11, "hi!", config13,
        path14);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction16 = null;
    org.neo4j.configuration.Config config18 = null;
    java.nio.file.Path path19 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction16, "query-logging",
        config18, path19);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction21 = null;
    org.neo4j.configuration.Config config23 = null;
    java.nio.file.Path path24 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction21, "hi!", config23,
        path24);
  }

  @Test
  public void test0197() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0197");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    java.lang.String str5 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str6 = queryLoggingServiceExtensionFactory0.getName();
    boolean boolean8 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) 0L);
    java.lang.String str9 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService10 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    queryLoggingService10.rolcForKe(kernelTransaction11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    java.lang.Throwable throwable14 = null;
    queryLoggingService10.rolcForKe(kernelTransaction13, throwable14);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    queryLoggingService10.rolcForKe(kernelTransaction16);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    queryLoggingService10.sucsForEx(executingQuery18);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction20 = null;
    queryLoggingService10.strForEx(kernelTransaction20);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction22 = null;
    java.lang.Throwable throwable23 = null;
    queryLoggingService10.rolcForKe(kernelTransaction22, throwable23);
    boolean boolean25 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) throwable23);
    java.lang.String str26 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService27 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction28 = null;
    java.lang.Throwable throwable29 = null;
    queryLoggingService27.rolcForKe(kernelTransaction28, throwable29);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery31 = null;
    java.lang.Throwable throwable32 = null;
    queryLoggingService27.faleForExTh(executingQuery31, throwable32);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery34 = null;
    java.lang.Throwable throwable35 = null;
    queryLoggingService27.faleForExTh(executingQuery34, throwable35);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction37 = null;
    java.lang.Throwable throwable38 = null;
    queryLoggingService27.rolcForKe(kernelTransaction37, throwable38);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction40 = null;
    queryLoggingService27.strForEx(kernelTransaction40);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery42 = null;
    queryLoggingService27.faleForExTh(executingQuery42, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery45 = null;
    queryLoggingService27.strForEx(executingQuery45);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction47 = null;
    java.lang.Throwable throwable48 = null;
    queryLoggingService27.rolcForKe(kernelTransaction47, throwable48);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction50 = null;
    queryLoggingService27.comForKe(kernelTransaction50);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction52 = null;
    queryLoggingService27.comForKe(kernelTransaction52);
    boolean boolean54 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingService27);
    java.lang.String str55 = queryLoggingServiceExtensionFactory0.getName();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext56 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies57 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle58 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext56, queryLoggingServiceDependencies57);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertEquals(
        "'" + str5 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str5, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "query-logging" + "'", str6,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    org.junit.Assert.assertEquals(
        "'" + str9 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str9, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(queryLoggingService10);
    org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    org.junit.Assert.assertEquals(
        "'" + str26 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str26, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(queryLoggingService27);
    org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    org.junit.Assert.assertEquals("'" + str55 + "' != '" + "query-logging" + "'", str55,
        "query-logging");
  }

  @Test
  public void test0198() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0198");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService5 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService5.strForEx(executingQuery6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    java.lang.Throwable throwable9 = null;
    queryLoggingService5.faleForExTh(executingQuery8, throwable9);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    queryLoggingService5.rolcForKe(kernelTransaction11);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery13 = null;
    queryLoggingService5.sucsForEx(executingQuery13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService5.strForEx(executingQuery15);
    boolean boolean17 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) executingQuery15);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService18 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction19 = null;
    queryLoggingService18.rolcForKe(kernelTransaction19);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction21 = null;
    java.lang.Throwable throwable22 = null;
    queryLoggingService18.rolcForKe(kernelTransaction21, throwable22);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery24 = null;
    queryLoggingService18.faleForExTh(executingQuery24, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction27 = null;
    queryLoggingService18.rolcForKe(kernelTransaction27);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery29 = null;
    java.lang.Throwable throwable30 = null;
    queryLoggingService18.faleForExTh(executingQuery29, throwable30);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery32 = null;
    queryLoggingService18.sucsForEx(executingQuery32);
    boolean boolean34 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingService18);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService35 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction36 = null;
    java.lang.Throwable throwable37 = null;
    queryLoggingService35.rolcForKe(kernelTransaction36, throwable37);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery39 = null;
    java.lang.Throwable throwable40 = null;
    queryLoggingService35.faleForExTh(executingQuery39, throwable40);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery42 = null;
    java.lang.Throwable throwable43 = null;
    queryLoggingService35.faleForExTh(executingQuery42, throwable43);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction45 = null;
    queryLoggingService35.strForEx(kernelTransaction45);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery47 = null;
    java.lang.Throwable throwable48 = null;
    queryLoggingService35.faleForExTh(executingQuery47, throwable48);
    java.lang.Class<?> wildcardClass50 = queryLoggingService35.getClass();
    boolean boolean51 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) wildcardClass50);
    java.lang.String str52 = queryLoggingServiceExtensionFactory0.toString();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext53 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies54 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle55 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext53, queryLoggingServiceDependencies54);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertNotNull(queryLoggingService5);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    org.junit.Assert.assertNotNull(queryLoggingService18);
    org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    org.junit.Assert.assertNotNull(queryLoggingService35);
    org.junit.Assert.assertNotNull(wildcardClass50);
    org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    org.junit.Assert.assertEquals(
        "'" + str52 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str52, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
  }

  @Test
  public void test0199() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0199");
    }
    io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl diagnosticsOfflineReportProviderQueryLoggingImpl0 = new io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction1 = null;
    org.neo4j.configuration.Config config3 = null;
    java.nio.file.Path path4 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction1,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config3, path4);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.configuration.Config config8 = null;
    java.nio.file.Path path9 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction6,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config8, path9);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction11 = null;
    org.neo4j.configuration.Config config13 = null;
    java.nio.file.Path path14 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction11, "query-logging",
        config13, path14);
    java.lang.Class<?> wildcardClass16 = diagnosticsOfflineReportProviderQueryLoggingImpl0.getClass();
    org.junit.Assert.assertNotNull(wildcardClass16);
  }

  @Test
  public void test0200() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0200");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    java.lang.String str5 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str6 = queryLoggingServiceExtensionFactory0.getName();
    boolean boolean8 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) 0L);
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext9 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies10 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle11 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext9, queryLoggingServiceDependencies10);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertEquals(
        "'" + str5 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str5, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "query-logging" + "'", str6,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
  }

  @Test
  public void test0201() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0201");
    }
    io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl diagnosticsOfflineReportProviderQueryLoggingImpl0 = new io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction1 = null;
    org.neo4j.configuration.Config config3 = null;
    java.nio.file.Path path4 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction1, "hi!", config3,
        path4);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.configuration.Config config8 = null;
    java.nio.file.Path path9 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction6,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config8, path9);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction11 = null;
    org.neo4j.configuration.Config config13 = null;
    java.nio.file.Path path14 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction11,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config13, path14);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction16 = null;
    org.neo4j.configuration.Config config18 = null;
    java.nio.file.Path path19 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction16, "query-logging",
        config18, path19);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction21 = null;
    org.neo4j.configuration.Config config23 = null;
    java.nio.file.Path path24 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction21, "hi!", config23,
        path24);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction26 = null;
    org.neo4j.configuration.Config config28 = null;
    java.nio.file.Path path29 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction26,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config28, path29);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction31 = null;
    org.neo4j.configuration.Config config33 = null;
    java.nio.file.Path path34 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction31, "", config33,
        path34);
  }

  @Test
  public void test0202() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0202");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    java.lang.String str5 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str6 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory7 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean9 = queryLoggingServiceExtensionFactory7.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory10 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str11 = queryLoggingServiceExtensionFactory10.toString();
    boolean boolean12 = queryLoggingServiceExtensionFactory7.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory10);
    boolean boolean13 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory7);
    java.lang.Object obj14 = null;
    boolean boolean15 = queryLoggingServiceExtensionFactory0.equals(obj14);
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext16 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies17 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle18 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext16, queryLoggingServiceDependencies17);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertEquals(
        "'" + str5 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str5, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "query-logging" + "'", str6,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str11, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
  }

  @Test
  public void test0203() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0203");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction4 = null;
    java.lang.Throwable throwable5 = null;
    queryLoggingService0.rolcForKe(kernelTransaction4, throwable5);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService0.rolcForKe(kernelTransaction9, throwable10);
    java.lang.Class<?> wildcardClass12 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass12);
  }

  @Test
  public void test0204() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0204");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    queryLoggingService0.sucsForEx(executingQuery4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.strForEx(executingQuery6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.faleForExTh(executingQuery8, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    java.lang.Throwable throwable12 = null;
    queryLoggingService0.rolcForKe(kernelTransaction11, throwable12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    queryLoggingService0.sucsForEx(executingQuery14);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    queryLoggingService0.sucsForEx(executingQuery16);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    java.lang.Throwable throwable19 = null;
    queryLoggingService0.faleForExTh(executingQuery18, throwable19);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery21 = null;
    queryLoggingService0.faleForExTh(executingQuery21,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery24 = null;
    java.lang.Throwable throwable25 = null;
    queryLoggingService0.faleForExTh(executingQuery24, throwable25);
    java.lang.Class<?> wildcardClass27 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass27);
  }

  @Test
  public void test0205() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0205");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    java.lang.Class<?> wildcardClass8 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass8);
  }

  @Test
  public void test0206() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0206");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    queryLoggingService0.sucsForEx(executingQuery4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.strForEx(executingQuery6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.faleForExTh(executingQuery8, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    java.lang.Throwable throwable12 = null;
    queryLoggingService0.rolcForKe(kernelTransaction11, throwable12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    queryLoggingService0.strForEx(kernelTransaction14);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    queryLoggingService0.strForEx(executingQuery16);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction18 = null;
    queryLoggingService0.rolcForKe(kernelTransaction18);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction20 = null;
    java.lang.Throwable throwable21 = null;
    queryLoggingService0.rolcForKe(kernelTransaction20, throwable21);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery23 = null;
    queryLoggingService0.strForEx(executingQuery23);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction25 = null;
    queryLoggingService0.strForEx(kernelTransaction25);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0207() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0207");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.strForEx(kernelTransaction10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.faleForExTh(executingQuery12,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService0.faleForExTh(executingQuery15, "query-logging");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction18 = null;
    queryLoggingService0.rolcForKe(kernelTransaction18);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery20 = null;
    queryLoggingService0.strForEx(executingQuery20);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery22 = null;
    queryLoggingService0.faleForExTh(executingQuery22, "hi!");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery25 = null;
    queryLoggingService0.strForEx(executingQuery25);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction27 = null;
    queryLoggingService0.strForEx(kernelTransaction27);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0208() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0208");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.strForEx(kernelTransaction10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.faleForExTh(executingQuery12,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService0.faleForExTh(executingQuery15, "query-logging");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    queryLoggingService0.faleForExTh(executingQuery18, "hi!");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery21 = null;
    queryLoggingService0.faleForExTh(executingQuery21, "");
    java.lang.Class<?> wildcardClass24 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass24);
  }

  @Test
  public void test0209() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0209");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory3 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str4 = queryLoggingServiceExtensionFactory3.toString();
    boolean boolean5 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory3);
    boolean boolean7 = queryLoggingServiceExtensionFactory3.equals((java.lang.Object) 100.0d);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService8 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    queryLoggingService8.strForEx(executingQuery9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    java.lang.Throwable throwable12 = null;
    queryLoggingService8.faleForExTh(executingQuery11, throwable12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    queryLoggingService8.rolcForKe(kernelTransaction14);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    queryLoggingService8.sucsForEx(executingQuery16);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    queryLoggingService8.strForEx(executingQuery18);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery20 = null;
    queryLoggingService8.sucsForEx(executingQuery20);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery22 = null;
    queryLoggingService8.sucsForEx(executingQuery22);
    boolean boolean24 = queryLoggingServiceExtensionFactory3.equals(
        (java.lang.Object) executingQuery22);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService25 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery26 = null;
    queryLoggingService25.strForEx(executingQuery26);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery28 = null;
    java.lang.Throwable throwable29 = null;
    queryLoggingService25.faleForExTh(executingQuery28, throwable29);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction31 = null;
    queryLoggingService25.rolcForKe(kernelTransaction31);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery33 = null;
    queryLoggingService25.sucsForEx(executingQuery33);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery35 = null;
    queryLoggingService25.strForEx(executingQuery35);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery37 = null;
    queryLoggingService25.sucsForEx(executingQuery37);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery39 = null;
    queryLoggingService25.sucsForEx(executingQuery39);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery41 = null;
    queryLoggingService25.sucsForEx(executingQuery41);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery43 = null;
    queryLoggingService25.strForEx(executingQuery43);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction45 = null;
    java.lang.Throwable throwable46 = null;
    queryLoggingService25.rolcForKe(kernelTransaction45, throwable46);
    boolean boolean48 = queryLoggingServiceExtensionFactory3.equals(
        (java.lang.Object) queryLoggingService25);
    java.lang.Class<?> wildcardClass49 = queryLoggingServiceExtensionFactory3.getClass();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str4 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str4, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    org.junit.Assert.assertNotNull(queryLoggingService8);
    org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    org.junit.Assert.assertNotNull(queryLoggingService25);
    org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    org.junit.Assert.assertNotNull(wildcardClass49);
  }

  @Test
  public void test0210() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0210");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (short) 1);
    java.lang.String str3 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService4 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery5 = null;
    queryLoggingService4.strForEx(executingQuery5);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery7 = null;
    java.lang.Throwable throwable8 = null;
    queryLoggingService4.faleForExTh(executingQuery7, throwable8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    java.lang.Throwable throwable11 = null;
    queryLoggingService4.rolcForKe(kernelTransaction10, throwable11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService4.comForKe(kernelTransaction13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService4.strForEx(executingQuery15);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery17 = null;
    queryLoggingService4.strForEx(executingQuery17);
    boolean boolean19 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) executingQuery17);
    java.lang.String str20 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str21 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str22 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str23 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str24 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str25 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str26 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory27 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory28 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean30 = queryLoggingServiceExtensionFactory28.equals((java.lang.Object) (-1L));
    boolean boolean31 = queryLoggingServiceExtensionFactory27.equals((java.lang.Object) boolean30);
    boolean boolean33 = queryLoggingServiceExtensionFactory27.equals((java.lang.Object) 0L);
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory34 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory35 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean37 = queryLoggingServiceExtensionFactory35.equals((java.lang.Object) (-1L));
    boolean boolean38 = queryLoggingServiceExtensionFactory34.equals((java.lang.Object) boolean37);
    java.lang.Object obj39 = new java.lang.Object();
    boolean boolean40 = queryLoggingServiceExtensionFactory34.equals(obj39);
    java.lang.String str41 = queryLoggingServiceExtensionFactory34.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService42 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery43 = null;
    queryLoggingService42.strForEx(executingQuery43);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery45 = null;
    java.lang.Throwable throwable46 = null;
    queryLoggingService42.faleForExTh(executingQuery45, throwable46);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction48 = null;
    java.lang.Throwable throwable49 = null;
    queryLoggingService42.rolcForKe(kernelTransaction48, throwable49);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction51 = null;
    queryLoggingService42.comForKe(kernelTransaction51);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery53 = null;
    queryLoggingService42.strForEx(executingQuery53);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction55 = null;
    java.lang.Throwable throwable56 = null;
    queryLoggingService42.rolcForKe(kernelTransaction55, throwable56);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction58 = null;
    queryLoggingService42.comForKe(kernelTransaction58);
    boolean boolean60 = queryLoggingServiceExtensionFactory34.equals(
        (java.lang.Object) queryLoggingService42);
    boolean boolean61 = queryLoggingServiceExtensionFactory27.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory34);
    boolean boolean62 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory34);
    java.lang.String str63 = queryLoggingServiceExtensionFactory34.getName();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext64 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies65 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle66 = queryLoggingServiceExtensionFactory34.newInstance(
          extensionContext64, queryLoggingServiceDependencies65);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "query-logging" + "'", str3,
        "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService4);
    org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "query-logging" + "'", str20,
        "query-logging");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str21, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str22, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str23 + "' != '" + "query-logging" + "'", str23,
        "query-logging");
    org.junit.Assert.assertEquals("'" + str24 + "' != '" + "query-logging" + "'", str24,
        "query-logging");
    org.junit.Assert.assertEquals(
        "'" + str25 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str25, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str26 + "' != '" + "query-logging" + "'", str26,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    org.junit.Assert.assertEquals("'" + str41 + "' != '" + "query-logging" + "'", str41,
        "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService42);
    org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    org.junit.Assert.assertEquals("'" + str63 + "' != '" + "query-logging" + "'", str63,
        "query-logging");
  }

  @Test
  public void test0211() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0211");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService0.faleForExTh(executingQuery9, throwable10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    queryLoggingService0.rolcForKe(kernelTransaction12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    queryLoggingService0.faleForExTh(executingQuery14,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    java.lang.Class<?> wildcardClass17 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass17);
  }

  @Test
  public void test0212() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0212");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    queryLoggingService0.sucsForEx(executingQuery4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.faleForExTh(executingQuery6, "hi!");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService0.faleForExTh(executingQuery9, throwable10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.faleForExTh(executingQuery12, "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0213() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0213");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.strForEx(kernelTransaction10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    java.lang.Throwable throwable13 = null;
    queryLoggingService0.faleForExTh(executingQuery12, throwable13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    queryLoggingService0.strForEx(kernelTransaction15);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction17 = null;
    java.lang.Throwable throwable18 = null;
    queryLoggingService0.rolcForKe(kernelTransaction17, throwable18);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction20 = null;
    java.lang.Throwable throwable21 = null;
    queryLoggingService0.rolcForKe(kernelTransaction20, throwable21);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery23 = null;
    queryLoggingService0.strForEx(executingQuery23);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery25 = null;
    queryLoggingService0.strForEx(executingQuery25);
    java.lang.Class<?> wildcardClass27 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass27);
  }

  @Test
  public void test0214() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0214");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    queryLoggingService0.strForEx(executingQuery9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    java.lang.Throwable throwable12 = null;
    queryLoggingService0.faleForExTh(executingQuery11, throwable12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    queryLoggingService0.strForEx(executingQuery14);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    queryLoggingService0.rolcForKe(kernelTransaction16);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction18 = null;
    java.lang.Throwable throwable19 = null;
    queryLoggingService0.rolcForKe(kernelTransaction18, throwable19);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0215() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0215");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService5 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService5.strForEx(executingQuery6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    java.lang.Throwable throwable9 = null;
    queryLoggingService5.faleForExTh(executingQuery8, throwable9);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    queryLoggingService5.rolcForKe(kernelTransaction11);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery13 = null;
    queryLoggingService5.sucsForEx(executingQuery13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService5.strForEx(executingQuery15);
    boolean boolean17 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) executingQuery15);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService18 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction19 = null;
    queryLoggingService18.rolcForKe(kernelTransaction19);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction21 = null;
    java.lang.Throwable throwable22 = null;
    queryLoggingService18.rolcForKe(kernelTransaction21, throwable22);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery24 = null;
    queryLoggingService18.faleForExTh(executingQuery24, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction27 = null;
    queryLoggingService18.rolcForKe(kernelTransaction27);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery29 = null;
    java.lang.Throwable throwable30 = null;
    queryLoggingService18.faleForExTh(executingQuery29, throwable30);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery32 = null;
    queryLoggingService18.sucsForEx(executingQuery32);
    boolean boolean34 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingService18);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService35 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction36 = null;
    java.lang.Throwable throwable37 = null;
    queryLoggingService35.rolcForKe(kernelTransaction36, throwable37);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery39 = null;
    java.lang.Throwable throwable40 = null;
    queryLoggingService35.faleForExTh(executingQuery39, throwable40);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery42 = null;
    java.lang.Throwable throwable43 = null;
    queryLoggingService35.faleForExTh(executingQuery42, throwable43);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction45 = null;
    queryLoggingService35.strForEx(kernelTransaction45);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery47 = null;
    java.lang.Throwable throwable48 = null;
    queryLoggingService35.faleForExTh(executingQuery47, throwable48);
    java.lang.Class<?> wildcardClass50 = queryLoggingService35.getClass();
    boolean boolean51 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) wildcardClass50);
    java.lang.String str52 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str53 = queryLoggingServiceExtensionFactory0.getName();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext54 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies55 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle56 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext54, queryLoggingServiceDependencies55);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertNotNull(queryLoggingService5);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    org.junit.Assert.assertNotNull(queryLoggingService18);
    org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    org.junit.Assert.assertNotNull(queryLoggingService35);
    org.junit.Assert.assertNotNull(wildcardClass50);
    org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    org.junit.Assert.assertEquals("'" + str52 + "' != '" + "query-logging" + "'", str52,
        "query-logging");
    org.junit.Assert.assertEquals("'" + str53 + "' != '" + "query-logging" + "'", str53,
        "query-logging");
  }

  @Test
  public void test0216() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0216");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    java.lang.Throwable throwable5 = null;
    queryLoggingService0.faleForExTh(executingQuery4, throwable5);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery7 = null;
    java.lang.Throwable throwable8 = null;
    queryLoggingService0.faleForExTh(executingQuery7, throwable8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.strForEx(kernelTransaction10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    java.lang.Throwable throwable13 = null;
    queryLoggingService0.faleForExTh(executingQuery12, throwable13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    java.lang.Throwable throwable16 = null;
    queryLoggingService0.faleForExTh(executingQuery15, throwable16);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0217() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0217");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    queryLoggingService0.comForKe(kernelTransaction3);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction5 = null;
    queryLoggingService0.rolcForKe(kernelTransaction5);
    java.lang.Class<?> wildcardClass7 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass7);
  }

  @Test
  public void test0218() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0218");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str1 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str2 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str3 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str4 = queryLoggingServiceExtensionFactory0.getName();
    org.junit.Assert.assertEquals(
        "'" + str1 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str1, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals(
        "'" + str2 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str2, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals(
        "'" + str3 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str3, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "query-logging" + "'", str4,
        "query-logging");
  }

  @Test
  public void test0219() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0219");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService5 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService5.strForEx(executingQuery6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    java.lang.Throwable throwable9 = null;
    queryLoggingService5.faleForExTh(executingQuery8, throwable9);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    queryLoggingService5.rolcForKe(kernelTransaction11);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery13 = null;
    queryLoggingService5.sucsForEx(executingQuery13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService5.strForEx(executingQuery15);
    boolean boolean17 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) executingQuery15);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService18 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction19 = null;
    queryLoggingService18.rolcForKe(kernelTransaction19);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction21 = null;
    java.lang.Throwable throwable22 = null;
    queryLoggingService18.rolcForKe(kernelTransaction21, throwable22);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery24 = null;
    queryLoggingService18.faleForExTh(executingQuery24, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction27 = null;
    queryLoggingService18.rolcForKe(kernelTransaction27);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery29 = null;
    java.lang.Throwable throwable30 = null;
    queryLoggingService18.faleForExTh(executingQuery29, throwable30);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery32 = null;
    queryLoggingService18.sucsForEx(executingQuery32);
    boolean boolean34 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingService18);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery35 = null;
    queryLoggingService18.strForEx(executingQuery35);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery37 = null;
    queryLoggingService18.strForEx(executingQuery37);
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertNotNull(queryLoggingService5);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    org.junit.Assert.assertNotNull(queryLoggingService18);
    org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
  }

  @Test
  public void test0220() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0220");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    java.lang.String str5 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str6 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory7 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean9 = queryLoggingServiceExtensionFactory7.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory10 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str11 = queryLoggingServiceExtensionFactory10.toString();
    boolean boolean12 = queryLoggingServiceExtensionFactory7.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory10);
    boolean boolean13 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory7);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService14 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    queryLoggingService14.rolcForKe(kernelTransaction15);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction17 = null;
    java.lang.Throwable throwable18 = null;
    queryLoggingService14.rolcForKe(kernelTransaction17, throwable18);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery20 = null;
    queryLoggingService14.faleForExTh(executingQuery20, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction23 = null;
    queryLoggingService14.rolcForKe(kernelTransaction23);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery25 = null;
    java.lang.Throwable throwable26 = null;
    queryLoggingService14.faleForExTh(executingQuery25, throwable26);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery28 = null;
    queryLoggingService14.strForEx(executingQuery28);
    boolean boolean30 = queryLoggingServiceExtensionFactory7.equals(
        (java.lang.Object) queryLoggingService14);
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext31 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies32 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle33 = queryLoggingServiceExtensionFactory7.newInstance(
          extensionContext31, queryLoggingServiceDependencies32);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertEquals(
        "'" + str5 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str5, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "query-logging" + "'", str6,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str11, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    org.junit.Assert.assertNotNull(queryLoggingService14);
    org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
  }

  @Test
  public void test0221() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0221");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    java.lang.String str5 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str6 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str7 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str8 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str9 = queryLoggingServiceExtensionFactory0.toString();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext10 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies11 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle12 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext10, queryLoggingServiceDependencies11);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertEquals(
        "'" + str5 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str5, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals(
        "'" + str6 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str6, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals(
        "'" + str7 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str7, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "query-logging" + "'", str8,
        "query-logging");
    org.junit.Assert.assertEquals(
        "'" + str9 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str9, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
  }

  @Test
  public void test0222() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0222");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    queryLoggingService0.sucsForEx(executingQuery4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery10 = null;
    queryLoggingService0.faleForExTh(executingQuery10, "hi!");
    java.lang.Class<?> wildcardClass13 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass13);
  }

  @Test
  public void test0223() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0223");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.strForEx(kernelTransaction10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.faleForExTh(executingQuery12,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    queryLoggingService0.strForEx(kernelTransaction15);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction17 = null;
    queryLoggingService0.rolcForKe(kernelTransaction17);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0224() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0224");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction4 = null;
    java.lang.Throwable throwable5 = null;
    queryLoggingService0.rolcForKe(kernelTransaction4, throwable5);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService0.rolcForKe(kernelTransaction9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    java.lang.Throwable throwable12 = null;
    queryLoggingService0.faleForExTh(executingQuery11, throwable12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    queryLoggingService0.rolcForKe(kernelTransaction14);
    java.lang.Class<?> wildcardClass16 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass16);
  }

  @Test
  public void test0225() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0225");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory3 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str4 = queryLoggingServiceExtensionFactory3.toString();
    boolean boolean5 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory3);
    boolean boolean7 = queryLoggingServiceExtensionFactory3.equals((java.lang.Object) 100.0d);
    java.lang.String str8 = queryLoggingServiceExtensionFactory3.toString();
    java.lang.String str9 = queryLoggingServiceExtensionFactory3.getName();
    java.lang.String str10 = queryLoggingServiceExtensionFactory3.getName();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext11 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies12 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle13 = queryLoggingServiceExtensionFactory3.newInstance(
          extensionContext11, queryLoggingServiceDependencies12);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str4 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str4, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    org.junit.Assert.assertEquals(
        "'" + str8 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str8, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "query-logging" + "'", str9,
        "query-logging");
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "query-logging" + "'", str10,
        "query-logging");
  }

  @Test
  public void test0226() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0226");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    queryLoggingService0.strForEx(executingQuery3);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery5 = null;
    queryLoggingService0.sucsForEx(executingQuery5);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction7 = null;
    queryLoggingService0.strForEx(kernelTransaction7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService0.comForKe(kernelTransaction9);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0227() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0227");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.strForEx(kernelTransaction10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.faleForExTh(executingQuery12,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService0.faleForExTh(executingQuery15, "query-logging");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    java.lang.Throwable throwable19 = null;
    queryLoggingService0.faleForExTh(executingQuery18, throwable19);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0228() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0228");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory3 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str4 = queryLoggingServiceExtensionFactory3.toString();
    boolean boolean5 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory3);
    boolean boolean7 = queryLoggingServiceExtensionFactory3.equals((java.lang.Object) 100.0d);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService8 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    queryLoggingService8.strForEx(executingQuery9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    java.lang.Throwable throwable12 = null;
    queryLoggingService8.faleForExTh(executingQuery11, throwable12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    queryLoggingService8.rolcForKe(kernelTransaction14);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    queryLoggingService8.sucsForEx(executingQuery16);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    queryLoggingService8.strForEx(executingQuery18);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery20 = null;
    queryLoggingService8.sucsForEx(executingQuery20);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery22 = null;
    queryLoggingService8.sucsForEx(executingQuery22);
    boolean boolean24 = queryLoggingServiceExtensionFactory3.equals(
        (java.lang.Object) executingQuery22);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService25 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery26 = null;
    queryLoggingService25.strForEx(executingQuery26);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery28 = null;
    java.lang.Throwable throwable29 = null;
    queryLoggingService25.faleForExTh(executingQuery28, throwable29);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction31 = null;
    queryLoggingService25.rolcForKe(kernelTransaction31);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery33 = null;
    queryLoggingService25.sucsForEx(executingQuery33);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery35 = null;
    queryLoggingService25.strForEx(executingQuery35);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery37 = null;
    queryLoggingService25.sucsForEx(executingQuery37);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery39 = null;
    queryLoggingService25.sucsForEx(executingQuery39);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery41 = null;
    queryLoggingService25.sucsForEx(executingQuery41);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery43 = null;
    queryLoggingService25.strForEx(executingQuery43);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction45 = null;
    java.lang.Throwable throwable46 = null;
    queryLoggingService25.rolcForKe(kernelTransaction45, throwable46);
    boolean boolean48 = queryLoggingServiceExtensionFactory3.equals(
        (java.lang.Object) queryLoggingService25);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction49 = null;
    queryLoggingService25.comForKe(kernelTransaction49);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction51 = null;
    java.lang.Throwable throwable52 = null;
    queryLoggingService25.rolcForKe(kernelTransaction51, throwable52);
    java.lang.Class<?> wildcardClass54 = queryLoggingService25.getClass();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str4 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str4, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    org.junit.Assert.assertNotNull(queryLoggingService8);
    org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    org.junit.Assert.assertNotNull(queryLoggingService25);
    org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    org.junit.Assert.assertNotNull(wildcardClass54);
  }

  @Test
  public void test0229() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0229");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService0.faleForExTh(executingQuery9, throwable10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    queryLoggingService0.strForEx(kernelTransaction12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    queryLoggingService0.sucsForEx(executingQuery14);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    java.lang.Throwable throwable17 = null;
    queryLoggingService0.faleForExTh(executingQuery16, throwable17);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction19 = null;
    queryLoggingService0.rolcForKe(kernelTransaction19);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery21 = null;
    queryLoggingService0.sucsForEx(executingQuery21);
    java.lang.Class<?> wildcardClass23 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass23);
  }

  @Test
  public void test0230() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0230");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    boolean boolean6 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) 0L);
    java.lang.String str7 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str8 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.Object obj9 = new java.lang.Object();
    java.lang.Class<?> wildcardClass10 = obj9.getClass();
    boolean boolean11 = queryLoggingServiceExtensionFactory0.equals(obj9);
    java.lang.Class<?> wildcardClass12 = queryLoggingServiceExtensionFactory0.getClass();
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertEquals(
        "'" + str7 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str7, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "query-logging" + "'", str8,
        "query-logging");
    org.junit.Assert.assertNotNull(wildcardClass10);
    org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    org.junit.Assert.assertNotNull(wildcardClass12);
  }

  @Test
  public void test0231() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0231");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.strForEx(kernelTransaction10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    java.lang.Throwable throwable13 = null;
    queryLoggingService0.faleForExTh(executingQuery12, throwable13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    queryLoggingService0.strForEx(kernelTransaction15);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction17 = null;
    queryLoggingService0.strForEx(kernelTransaction17);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery19 = null;
    queryLoggingService0.strForEx(executingQuery19);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0232() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0232");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService5 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService5.strForEx(executingQuery6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    java.lang.Throwable throwable9 = null;
    queryLoggingService5.faleForExTh(executingQuery8, throwable9);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    queryLoggingService5.rolcForKe(kernelTransaction11);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery13 = null;
    queryLoggingService5.sucsForEx(executingQuery13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService5.strForEx(executingQuery15);
    boolean boolean17 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) executingQuery15);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService18 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction19 = null;
    queryLoggingService18.rolcForKe(kernelTransaction19);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction21 = null;
    java.lang.Throwable throwable22 = null;
    queryLoggingService18.rolcForKe(kernelTransaction21, throwable22);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery24 = null;
    queryLoggingService18.faleForExTh(executingQuery24, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction27 = null;
    queryLoggingService18.rolcForKe(kernelTransaction27);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery29 = null;
    java.lang.Throwable throwable30 = null;
    queryLoggingService18.faleForExTh(executingQuery29, throwable30);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery32 = null;
    queryLoggingService18.sucsForEx(executingQuery32);
    boolean boolean34 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingService18);
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext35 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies36 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle37 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext35, queryLoggingServiceDependencies36);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertNotNull(queryLoggingService5);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    org.junit.Assert.assertNotNull(queryLoggingService18);
    org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
  }

  @Test
  public void test0233() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0233");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.strForEx(kernelTransaction10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.faleForExTh(executingQuery12,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    java.lang.Throwable throwable16 = null;
    queryLoggingService0.rolcForKe(kernelTransaction15, throwable16);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction18 = null;
    queryLoggingService0.comForKe(kernelTransaction18);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction20 = null;
    queryLoggingService0.strForEx(kernelTransaction20);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction22 = null;
    queryLoggingService0.rolcForKe(kernelTransaction22);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0234() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0234");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService5 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService5.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction8 = null;
    queryLoggingService5.strForEx(kernelTransaction8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService5.strForEx(kernelTransaction10);
    boolean boolean12 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingService5);
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext13 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies14 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle15 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext13, queryLoggingServiceDependencies14);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertNotNull(queryLoggingService5);
    org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
  }

  @Test
  public void test0235() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0235");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.strForEx(kernelTransaction10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.faleForExTh(executingQuery12,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService0.faleForExTh(executingQuery15, "query-logging");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction18 = null;
    queryLoggingService0.rolcForKe(kernelTransaction18);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery20 = null;
    queryLoggingService0.strForEx(executingQuery20);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery22 = null;
    queryLoggingService0.faleForExTh(executingQuery22, "hi!");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery25 = null;
    queryLoggingService0.strForEx(executingQuery25);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery27 = null;
    queryLoggingService0.sucsForEx(executingQuery27);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0236() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0236");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    queryLoggingService0.faleForExTh(executingQuery3, "query-logging");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.strForEx(kernelTransaction6);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction8 = null;
    queryLoggingService0.comForKe(kernelTransaction8);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery10 = null;
    java.lang.Throwable throwable11 = null;
    queryLoggingService0.faleForExTh(executingQuery10, throwable11);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0237() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0237");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.strForEx(kernelTransaction10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    queryLoggingService0.comForKe(kernelTransaction12);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0238() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0238");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory3 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str4 = queryLoggingServiceExtensionFactory3.toString();
    boolean boolean5 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory3);
    boolean boolean7 = queryLoggingServiceExtensionFactory3.equals((java.lang.Object) 100.0d);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService8 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    queryLoggingService8.strForEx(executingQuery9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    java.lang.Throwable throwable12 = null;
    queryLoggingService8.faleForExTh(executingQuery11, throwable12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    queryLoggingService8.rolcForKe(kernelTransaction14);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    queryLoggingService8.sucsForEx(executingQuery16);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    queryLoggingService8.strForEx(executingQuery18);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery20 = null;
    queryLoggingService8.sucsForEx(executingQuery20);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery22 = null;
    queryLoggingService8.sucsForEx(executingQuery22);
    boolean boolean24 = queryLoggingServiceExtensionFactory3.equals(
        (java.lang.Object) executingQuery22);
    java.lang.String str25 = queryLoggingServiceExtensionFactory3.toString();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext26 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies27 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle28 = queryLoggingServiceExtensionFactory3.newInstance(
          extensionContext26, queryLoggingServiceDependencies27);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str4 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str4, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    org.junit.Assert.assertNotNull(queryLoggingService8);
    org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    org.junit.Assert.assertEquals(
        "'" + str25 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str25, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
  }

  @Test
  public void test0239() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0239");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.strForEx(kernelTransaction10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.faleForExTh(executingQuery12,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService0.faleForExTh(executingQuery15, "query-logging");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    queryLoggingService0.faleForExTh(executingQuery18, "hi!");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery21 = null;
    queryLoggingService0.faleForExTh(executingQuery21, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery24 = null;
    queryLoggingService0.strForEx(executingQuery24);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0240() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0240");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    queryLoggingService0.faleForExTh(executingQuery9, "query-logging");
    java.lang.Class<?> wildcardClass12 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass12);
  }

  @Test
  public void test0241() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0241");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory3 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str4 = queryLoggingServiceExtensionFactory3.toString();
    boolean boolean5 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory3);
    java.lang.String str6 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory7 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory8 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean10 = queryLoggingServiceExtensionFactory8.equals((java.lang.Object) (-1L));
    boolean boolean11 = queryLoggingServiceExtensionFactory7.equals((java.lang.Object) boolean10);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService12 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery13 = null;
    queryLoggingService12.strForEx(executingQuery13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    java.lang.Throwable throwable16 = null;
    queryLoggingService12.faleForExTh(executingQuery15, throwable16);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction18 = null;
    queryLoggingService12.rolcForKe(kernelTransaction18);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery20 = null;
    queryLoggingService12.sucsForEx(executingQuery20);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery22 = null;
    queryLoggingService12.strForEx(executingQuery22);
    boolean boolean24 = queryLoggingServiceExtensionFactory7.equals(
        (java.lang.Object) executingQuery22);
    boolean boolean25 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory7);
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory26 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean28 = queryLoggingServiceExtensionFactory26.equals((java.lang.Object) (short) 1);
    java.lang.String str29 = queryLoggingServiceExtensionFactory26.toString();
    boolean boolean30 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory26);
    java.lang.Class<?> wildcardClass31 = queryLoggingServiceExtensionFactory26.getClass();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str4 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str4, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "query-logging" + "'", str6,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    org.junit.Assert.assertNotNull(queryLoggingService12);
    org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    org.junit.Assert.assertEquals(
        "'" + str29 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str29, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    org.junit.Assert.assertNotNull(wildcardClass31);
  }

  @Test
  public void test0242() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0242");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService0.rolcForKe(kernelTransaction9, throwable10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    queryLoggingService0.rolcForKe(kernelTransaction12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    java.lang.Throwable throwable15 = null;
    queryLoggingService0.faleForExTh(executingQuery14, throwable15);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery17 = null;
    java.lang.Throwable throwable18 = null;
    queryLoggingService0.faleForExTh(executingQuery17, throwable18);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction20 = null;
    queryLoggingService0.rolcForKe(kernelTransaction20);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0243() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0243");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory3 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str4 = queryLoggingServiceExtensionFactory3.toString();
    boolean boolean5 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory3);
    java.lang.String str6 = queryLoggingServiceExtensionFactory3.getName();
    java.lang.String str7 = queryLoggingServiceExtensionFactory3.toString();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str4 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str4, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "query-logging" + "'", str6,
        "query-logging");
    org.junit.Assert.assertEquals(
        "'" + str7 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str7, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
  }

  @Test
  public void test0244() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0244");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    boolean boolean6 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) 0L);
    java.lang.String str7 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str8 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str9 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str10 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.Class<?> wildcardClass11 = queryLoggingServiceExtensionFactory0.getClass();
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertEquals(
        "'" + str7 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str7, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "query-logging" + "'", str8,
        "query-logging");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "query-logging" + "'", str9,
        "query-logging");
    org.junit.Assert.assertEquals(
        "'" + str10 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str10, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(wildcardClass11);
  }

  @Test
  public void test0245() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0245");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    java.lang.Object obj5 = new java.lang.Object();
    boolean boolean6 = queryLoggingServiceExtensionFactory0.equals(obj5);
    java.lang.String str7 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService8 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    queryLoggingService8.strForEx(executingQuery9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    java.lang.Throwable throwable12 = null;
    queryLoggingService8.faleForExTh(executingQuery11, throwable12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    java.lang.Throwable throwable15 = null;
    queryLoggingService8.rolcForKe(kernelTransaction14, throwable15);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction17 = null;
    queryLoggingService8.comForKe(kernelTransaction17);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery19 = null;
    queryLoggingService8.strForEx(executingQuery19);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction21 = null;
    java.lang.Throwable throwable22 = null;
    queryLoggingService8.rolcForKe(kernelTransaction21, throwable22);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction24 = null;
    queryLoggingService8.comForKe(kernelTransaction24);
    boolean boolean26 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingService8);
    java.lang.String str27 = queryLoggingServiceExtensionFactory0.toString();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext28 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies29 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle30 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext28, queryLoggingServiceDependencies29);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "query-logging" + "'", str7,
        "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService8);
    org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    org.junit.Assert.assertEquals(
        "'" + str27 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str27, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
  }

  @Test
  public void test0246() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0246");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    queryLoggingService0.faleForExTh(executingQuery9, "hi!");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.faleForExTh(executingQuery12, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    queryLoggingService0.strForEx(kernelTransaction15);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery17 = null;
    queryLoggingService0.strForEx(executingQuery17);
    java.lang.Class<?> wildcardClass19 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass19);
  }

  @Test
  public void test0247() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0247");
    }
    io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl diagnosticsOfflineReportProviderQueryLoggingImpl0 = new io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction1 = null;
    org.neo4j.configuration.Config config3 = null;
    java.nio.file.Path path4 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction1, "hi!", config3,
        path4);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.configuration.Config config8 = null;
    java.nio.file.Path path9 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction6,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config8, path9);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction11 = null;
    org.neo4j.configuration.Config config13 = null;
    java.nio.file.Path path14 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction11,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config13, path14);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction16 = null;
    org.neo4j.configuration.Config config18 = null;
    java.nio.file.Path path19 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction16, "query-logging",
        config18, path19);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction21 = null;
    org.neo4j.configuration.Config config23 = null;
    java.nio.file.Path path24 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction21, "query-logging",
        config23, path24);
  }

  @Test
  public void test0248() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0248");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.faleForExTh(executingQuery6, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService0.rolcForKe(kernelTransaction9, throwable10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    queryLoggingService0.rolcForKe(kernelTransaction12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    java.lang.Throwable throwable15 = null;
    queryLoggingService0.faleForExTh(executingQuery14, throwable15);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction17 = null;
    queryLoggingService0.rolcForKe(kernelTransaction17);
    java.lang.Class<?> wildcardClass19 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass19);
  }

  @Test
  public void test0249() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0249");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService3 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction4 = null;
    queryLoggingService3.rolcForKe(kernelTransaction4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService3.rolcForKe(kernelTransaction6, throwable7);
    boolean boolean9 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingService3);
    java.lang.String str10 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str11 = queryLoggingServiceExtensionFactory0.getName();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext12 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies13 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle14 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext12, queryLoggingServiceDependencies13);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertNotNull(queryLoggingService3);
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    org.junit.Assert.assertEquals(
        "'" + str10 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str10, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "query-logging" + "'", str11,
        "query-logging");
  }

  @Test
  public void test0250() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0250");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    java.lang.Throwable throwable5 = null;
    queryLoggingService0.faleForExTh(executingQuery4, throwable5);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery7 = null;
    java.lang.Throwable throwable8 = null;
    queryLoggingService0.faleForExTh(executingQuery7, throwable8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    java.lang.Throwable throwable11 = null;
    queryLoggingService0.rolcForKe(kernelTransaction10, throwable11);
    java.lang.Class<?> wildcardClass13 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass13);
  }

  @Test
  public void test0251() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0251");
    }
    io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl diagnosticsOfflineReportProviderQueryLoggingImpl0 = new io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction1 = null;
    org.neo4j.configuration.Config config3 = null;
    java.nio.file.Path path4 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction1, "hi!", config3,
        path4);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.configuration.Config config8 = null;
    java.nio.file.Path path9 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction6, "", config8,
        path9);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction11 = null;
    org.neo4j.configuration.Config config13 = null;
    java.nio.file.Path path14 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction11, "query-logging",
        config13, path14);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction16 = null;
    org.neo4j.configuration.Config config18 = null;
    java.nio.file.Path path19 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction16,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config18, path19);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction21 = null;
    org.neo4j.configuration.Config config23 = null;
    java.nio.file.Path path24 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction21, "", config23,
        path24);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction26 = null;
    org.neo4j.configuration.Config config28 = null;
    java.nio.file.Path path29 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction26,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config28, path29);
    java.lang.Class<?> wildcardClass31 = diagnosticsOfflineReportProviderQueryLoggingImpl0.getClass();
    org.junit.Assert.assertNotNull(wildcardClass31);
  }

  @Test
  public void test0252() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0252");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    queryLoggingService0.faleForExTh(executingQuery3, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.faleForExTh(executingQuery6, throwable7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService0.faleForExTh(executingQuery9, throwable10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    queryLoggingService0.strForEx(kernelTransaction12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    java.lang.Throwable throwable15 = null;
    queryLoggingService0.faleForExTh(executingQuery14, throwable15);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery17 = null;
    queryLoggingService0.faleForExTh(executingQuery17, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery20 = null;
    queryLoggingService0.faleForExTh(executingQuery20, "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0253() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0253");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery10 = null;
    queryLoggingService0.strForEx(executingQuery10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.sucsForEx(executingQuery12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    queryLoggingService0.comForKe(kernelTransaction14);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    queryLoggingService0.rolcForKe(kernelTransaction16);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    java.lang.Throwable throwable19 = null;
    queryLoggingService0.faleForExTh(executingQuery18, throwable19);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0254() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0254");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService0.faleForExTh(executingQuery9, throwable10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    queryLoggingService0.rolcForKe(kernelTransaction12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    java.lang.Throwable throwable15 = null;
    queryLoggingService0.faleForExTh(executingQuery14, throwable15);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0255() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0255");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str1 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str2 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService3 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    queryLoggingService3.faleForExTh(executingQuery4,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery7 = null;
    queryLoggingService3.faleForExTh(executingQuery7,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService3.strForEx(kernelTransaction10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    queryLoggingService3.rolcForKe(kernelTransaction12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    queryLoggingService3.faleForExTh(executingQuery14,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    boolean boolean17 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext18 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies19 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle20 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext18, queryLoggingServiceDependencies19);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertEquals(
        "'" + str1 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str1, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals(
        "'" + str2 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str2, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(queryLoggingService3);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
  }

  @Test
  public void test0256() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0256");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    queryLoggingService0.faleForExTh(executingQuery3, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.sucsForEx(executingQuery6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    java.lang.Throwable throwable9 = null;
    queryLoggingService0.faleForExTh(executingQuery8, throwable9);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    queryLoggingService0.comForKe(kernelTransaction11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    java.lang.Throwable throwable14 = null;
    queryLoggingService0.rolcForKe(kernelTransaction13, throwable14);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    queryLoggingService0.faleForExTh(executingQuery16, "hi!");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery19 = null;
    queryLoggingService0.sucsForEx(executingQuery19);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0257() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0257");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    queryLoggingService0.strForEx(executingQuery9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    queryLoggingService0.sucsForEx(executingQuery11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService0.rolcForKe(kernelTransaction13);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0258() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0258");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    queryLoggingService0.faleForExTh(executingQuery3, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.faleForExTh(executingQuery6, throwable7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService0.faleForExTh(executingQuery9, throwable10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    queryLoggingService0.strForEx(kernelTransaction12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    queryLoggingService0.strForEx(kernelTransaction14);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    java.lang.Throwable throwable17 = null;
    queryLoggingService0.rolcForKe(kernelTransaction16, throwable17);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery19 = null;
    queryLoggingService0.strForEx(executingQuery19);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0259() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0259");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    boolean boolean6 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) 0L);
    java.lang.String str7 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str8 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str9 = queryLoggingServiceExtensionFactory0.getName();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext10 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies11 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle12 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext10, queryLoggingServiceDependencies11);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertEquals(
        "'" + str7 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str7, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "query-logging" + "'", str8,
        "query-logging");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "query-logging" + "'", str9,
        "query-logging");
  }

  @Test
  public void test0260() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0260");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.faleForExTh(executingQuery6, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService0.rolcForKe(kernelTransaction9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    java.lang.Throwable throwable12 = null;
    queryLoggingService0.faleForExTh(executingQuery11, throwable12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    queryLoggingService0.sucsForEx(executingQuery14);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    queryLoggingService0.comForKe(kernelTransaction16);
    java.lang.Class<?> wildcardClass18 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass18);
  }

  @Test
  public void test0261() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0261");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    queryLoggingService0.faleForExTh(executingQuery3, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.sucsForEx(executingQuery6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    java.lang.Throwable throwable9 = null;
    queryLoggingService0.faleForExTh(executingQuery8, throwable9);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    queryLoggingService0.strForEx(kernelTransaction11);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery13 = null;
    queryLoggingService0.sucsForEx(executingQuery13);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0262() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0262");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery10 = null;
    queryLoggingService0.strForEx(executingQuery10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    java.lang.Throwable throwable13 = null;
    queryLoggingService0.rolcForKe(kernelTransaction12, throwable13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    queryLoggingService0.comForKe(kernelTransaction15);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction17 = null;
    queryLoggingService0.strForEx(kernelTransaction17);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0263() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0263");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    java.lang.String str3 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.Class<?> wildcardClass4 = queryLoggingServiceExtensionFactory0.getClass();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "query-logging" + "'", str3,
        "query-logging");
    org.junit.Assert.assertNotNull(wildcardClass4);
  }

  @Test
  public void test0264() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0264");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    java.lang.String str5 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str6 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory7 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean9 = queryLoggingServiceExtensionFactory7.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory10 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str11 = queryLoggingServiceExtensionFactory10.toString();
    boolean boolean12 = queryLoggingServiceExtensionFactory7.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory10);
    boolean boolean13 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory7);
    java.lang.String str14 = queryLoggingServiceExtensionFactory7.getName();
    java.lang.String str15 = queryLoggingServiceExtensionFactory7.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService16 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction17 = null;
    queryLoggingService16.rolcForKe(kernelTransaction17);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction19 = null;
    java.lang.Throwable throwable20 = null;
    queryLoggingService16.rolcForKe(kernelTransaction19, throwable20);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction22 = null;
    queryLoggingService16.rolcForKe(kernelTransaction22);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction24 = null;
    java.lang.Throwable throwable25 = null;
    queryLoggingService16.rolcForKe(kernelTransaction24, throwable25);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery27 = null;
    queryLoggingService16.faleForExTh(executingQuery27, "hi!");
    boolean boolean30 = queryLoggingServiceExtensionFactory7.equals(
        (java.lang.Object) queryLoggingService16);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService31 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction32 = null;
    java.lang.Throwable throwable33 = null;
    queryLoggingService31.rolcForKe(kernelTransaction32, throwable33);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery35 = null;
    java.lang.Throwable throwable36 = null;
    queryLoggingService31.faleForExTh(executingQuery35, throwable36);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery38 = null;
    java.lang.Throwable throwable39 = null;
    queryLoggingService31.faleForExTh(executingQuery38, throwable39);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction41 = null;
    queryLoggingService31.strForEx(kernelTransaction41);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction43 = null;
    queryLoggingService31.strForEx(kernelTransaction43);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction45 = null;
    java.lang.Throwable throwable46 = null;
    queryLoggingService31.rolcForKe(kernelTransaction45, throwable46);
    boolean boolean48 = queryLoggingServiceExtensionFactory7.equals(
        (java.lang.Object) kernelTransaction45);
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertEquals(
        "'" + str5 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str5, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "query-logging" + "'", str6,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str11, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "query-logging" + "'", str14,
        "query-logging");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str15, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(queryLoggingService16);
    org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    org.junit.Assert.assertNotNull(queryLoggingService31);
    org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
  }

  @Test
  public void test0265() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0265");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    boolean boolean6 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) 0L);
    java.lang.String str7 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str8 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str9 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str10 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str11 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.Class<?> wildcardClass12 = queryLoggingServiceExtensionFactory0.getClass();
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertEquals(
        "'" + str7 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str7, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "query-logging" + "'", str8,
        "query-logging");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "query-logging" + "'", str9,
        "query-logging");
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "query-logging" + "'", str10,
        "query-logging");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str11, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(wildcardClass12);
  }

  @Test
  public void test0266() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0266");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str1 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str2 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService3 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction4 = null;
    queryLoggingService3.rolcForKe(kernelTransaction4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService3.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService3.rolcForKe(kernelTransaction9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    queryLoggingService3.sucsForEx(executingQuery11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService3.strForEx(kernelTransaction13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    java.lang.Throwable throwable16 = null;
    queryLoggingService3.rolcForKe(kernelTransaction15, throwable16);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction18 = null;
    java.lang.Throwable throwable19 = null;
    queryLoggingService3.rolcForKe(kernelTransaction18, throwable19);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction21 = null;
    queryLoggingService3.rolcForKe(kernelTransaction21);
    boolean boolean23 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) kernelTransaction21);
    java.lang.String str24 = queryLoggingServiceExtensionFactory0.getName();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext25 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies26 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle27 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext25, queryLoggingServiceDependencies26);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertEquals(
        "'" + str1 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str1, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals(
        "'" + str2 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str2, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(queryLoggingService3);
    org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    org.junit.Assert.assertEquals("'" + str24 + "' != '" + "query-logging" + "'", str24,
        "query-logging");
  }

  @Test
  public void test0267() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0267");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.strForEx(kernelTransaction10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    java.lang.Throwable throwable13 = null;
    queryLoggingService0.faleForExTh(executingQuery12, throwable13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    queryLoggingService0.strForEx(kernelTransaction15);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction17 = null;
    java.lang.Throwable throwable18 = null;
    queryLoggingService0.rolcForKe(kernelTransaction17, throwable18);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction20 = null;
    queryLoggingService0.comForKe(kernelTransaction20);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0268() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0268");
    }
    io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl diagnosticsOfflineReportProviderQueryLoggingImpl0 = new io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction1 = null;
    org.neo4j.configuration.Config config3 = null;
    java.nio.file.Path path4 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction1, "hi!", config3,
        path4);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.configuration.Config config8 = null;
    java.nio.file.Path path9 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction6,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config8, path9);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction11 = null;
    org.neo4j.configuration.Config config13 = null;
    java.nio.file.Path path14 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction11, "hi!", config13,
        path14);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction16 = null;
    org.neo4j.configuration.Config config18 = null;
    java.nio.file.Path path19 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction16, "hi!", config18,
        path19);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction21 = null;
    org.neo4j.configuration.Config config23 = null;
    java.nio.file.Path path24 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction21,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config23, path24);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction26 = null;
    org.neo4j.configuration.Config config28 = null;
    java.nio.file.Path path29 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction26,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config28, path29);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction31 = null;
    org.neo4j.configuration.Config config33 = null;
    java.nio.file.Path path34 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction31, "query-logging",
        config33, path34);
  }

  @Test
  public void test0269() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0269");
    }
    io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl diagnosticsOfflineReportProviderQueryLoggingImpl0 = new io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction1 = null;
    org.neo4j.configuration.Config config3 = null;
    java.nio.file.Path path4 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction1, "hi!", config3,
        path4);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.configuration.Config config8 = null;
    java.nio.file.Path path9 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction6,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config8, path9);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction11 = null;
    org.neo4j.configuration.Config config13 = null;
    java.nio.file.Path path14 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction11, "hi!", config13,
        path14);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction16 = null;
    org.neo4j.configuration.Config config18 = null;
    java.nio.file.Path path19 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction16, "", config18,
        path19);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction21 = null;
    org.neo4j.configuration.Config config23 = null;
    java.nio.file.Path path24 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction21, "hi!", config23,
        path24);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction26 = null;
    org.neo4j.configuration.Config config28 = null;
    java.nio.file.Path path29 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction26, "query-logging",
        config28, path29);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction31 = null;
    org.neo4j.configuration.Config config33 = null;
    java.nio.file.Path path34 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction31, "hi!", config33,
        path34);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction36 = null;
    org.neo4j.configuration.Config config38 = null;
    java.nio.file.Path path39 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction36, "", config38,
        path39);
  }

  @Test
  public void test0270() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0270");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    queryLoggingService0.strForEx(executingQuery3);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction5 = null;
    java.lang.Throwable throwable6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction5, throwable6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery10 = null;
    java.lang.Throwable throwable11 = null;
    queryLoggingService0.faleForExTh(executingQuery10, throwable11);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0271() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0271");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory3 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str4 = queryLoggingServiceExtensionFactory3.toString();
    boolean boolean5 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory3);
    boolean boolean7 = queryLoggingServiceExtensionFactory3.equals((java.lang.Object) 100.0d);
    java.lang.String str8 = queryLoggingServiceExtensionFactory3.toString();
    java.lang.String str9 = queryLoggingServiceExtensionFactory3.getName();
    java.lang.Object obj10 = null;
    boolean boolean11 = queryLoggingServiceExtensionFactory3.equals(obj10);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService12 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    java.lang.Throwable throwable14 = null;
    queryLoggingService12.rolcForKe(kernelTransaction13, throwable14);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    queryLoggingService12.comForKe(kernelTransaction16);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    queryLoggingService12.sucsForEx(executingQuery18);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction20 = null;
    queryLoggingService12.comForKe(kernelTransaction20);
    boolean boolean22 = queryLoggingServiceExtensionFactory3.equals(
        (java.lang.Object) queryLoggingService12);
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext23 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies24 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle25 = queryLoggingServiceExtensionFactory3.newInstance(
          extensionContext23, queryLoggingServiceDependencies24);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str4 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str4, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    org.junit.Assert.assertEquals(
        "'" + str8 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str8, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "query-logging" + "'", str9,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    org.junit.Assert.assertNotNull(queryLoggingService12);
    org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
  }

  @Test
  public void test0272() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0272");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService5 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService5.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction8 = null;
    java.lang.Throwable throwable9 = null;
    queryLoggingService5.rolcForKe(kernelTransaction8, throwable9);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    queryLoggingService5.rolcForKe(kernelTransaction11);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery13 = null;
    queryLoggingService5.sucsForEx(executingQuery13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    queryLoggingService5.strForEx(kernelTransaction15);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery17 = null;
    queryLoggingService5.faleForExTh(executingQuery17,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    boolean boolean20 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService21 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction22 = null;
    queryLoggingService21.rolcForKe(kernelTransaction22);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction24 = null;
    java.lang.Throwable throwable25 = null;
    queryLoggingService21.rolcForKe(kernelTransaction24, throwable25);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction27 = null;
    queryLoggingService21.rolcForKe(kernelTransaction27);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery29 = null;
    queryLoggingService21.sucsForEx(executingQuery29);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction31 = null;
    queryLoggingService21.strForEx(kernelTransaction31);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery33 = null;
    queryLoggingService21.faleForExTh(executingQuery33,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction36 = null;
    java.lang.Throwable throwable37 = null;
    queryLoggingService21.rolcForKe(kernelTransaction36, throwable37);
    boolean boolean39 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingService21);
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory40 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory41 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean43 = queryLoggingServiceExtensionFactory41.equals((java.lang.Object) (-1L));
    boolean boolean44 = queryLoggingServiceExtensionFactory40.equals((java.lang.Object) boolean43);
    boolean boolean46 = queryLoggingServiceExtensionFactory40.equals((java.lang.Object) 0L);
    java.lang.String str47 = queryLoggingServiceExtensionFactory40.toString();
    java.lang.String str48 = queryLoggingServiceExtensionFactory40.getName();
    boolean boolean49 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) str48);
    java.lang.String str50 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str51 = queryLoggingServiceExtensionFactory0.toString();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext52 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies53 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle54 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext52, queryLoggingServiceDependencies53);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertNotNull(queryLoggingService5);
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    org.junit.Assert.assertNotNull(queryLoggingService21);
    org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    org.junit.Assert.assertEquals(
        "'" + str47 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str47, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str48 + "' != '" + "query-logging" + "'", str48,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    org.junit.Assert.assertEquals("'" + str50 + "' != '" + "query-logging" + "'", str50,
        "query-logging");
    org.junit.Assert.assertEquals(
        "'" + str51 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str51, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
  }

  @Test
  public void test0273() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0273");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.sucsForEx(executingQuery6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.strForEx(executingQuery8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.comForKe(kernelTransaction10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.faleForExTh(executingQuery12, "hi!");
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0274() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0274");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    java.lang.String str5 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str6 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory7 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean9 = queryLoggingServiceExtensionFactory7.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory10 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str11 = queryLoggingServiceExtensionFactory10.toString();
    boolean boolean12 = queryLoggingServiceExtensionFactory7.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory10);
    boolean boolean13 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory7);
    java.lang.Object obj14 = null;
    boolean boolean15 = queryLoggingServiceExtensionFactory0.equals(obj14);
    java.lang.String str16 = queryLoggingServiceExtensionFactory0.getName();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext17 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies18 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle19 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext17, queryLoggingServiceDependencies18);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertEquals(
        "'" + str5 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str5, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "query-logging" + "'", str6,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str11, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "query-logging" + "'", str16,
        "query-logging");
  }

  @Test
  public void test0275() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0275");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    queryLoggingService0.sucsForEx(executingQuery4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.comForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    java.lang.Throwable throwable9 = null;
    queryLoggingService0.faleForExTh(executingQuery8, throwable9);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    queryLoggingService0.strForEx(kernelTransaction11);
    java.lang.Class<?> wildcardClass13 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass13);
  }

  @Test
  public void test0276() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0276");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    boolean boolean6 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) 0L);
    java.lang.String str7 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str8 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.Object obj9 = new java.lang.Object();
    java.lang.Class<?> wildcardClass10 = obj9.getClass();
    boolean boolean11 = queryLoggingServiceExtensionFactory0.equals(obj9);
    java.lang.String str12 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.Object obj13 = null;
    boolean boolean14 = queryLoggingServiceExtensionFactory0.equals(obj13);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService15 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    queryLoggingService15.rolcForKe(kernelTransaction16);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction18 = null;
    java.lang.Throwable throwable19 = null;
    queryLoggingService15.rolcForKe(kernelTransaction18, throwable19);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction21 = null;
    queryLoggingService15.rolcForKe(kernelTransaction21);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery23 = null;
    queryLoggingService15.sucsForEx(executingQuery23);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction25 = null;
    queryLoggingService15.strForEx(kernelTransaction25);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction27 = null;
    java.lang.Throwable throwable28 = null;
    queryLoggingService15.rolcForKe(kernelTransaction27, throwable28);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction30 = null;
    queryLoggingService15.strForEx(kernelTransaction30);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery32 = null;
    queryLoggingService15.sucsForEx(executingQuery32);
    boolean boolean34 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) executingQuery32);
    java.lang.String str35 = queryLoggingServiceExtensionFactory0.getName();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext36 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies37 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle38 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext36, queryLoggingServiceDependencies37);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertEquals(
        "'" + str7 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str7, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "query-logging" + "'", str8,
        "query-logging");
    org.junit.Assert.assertNotNull(wildcardClass10);
    org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "query-logging" + "'", str12,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    org.junit.Assert.assertNotNull(queryLoggingService15);
    org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    org.junit.Assert.assertEquals("'" + str35 + "' != '" + "query-logging" + "'", str35,
        "query-logging");
  }

  @Test
  public void test0277() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0277");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.strForEx(kernelTransaction10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    java.lang.Throwable throwable13 = null;
    queryLoggingService0.faleForExTh(executingQuery12, throwable13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    queryLoggingService0.strForEx(kernelTransaction15);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction17 = null;
    java.lang.Throwable throwable18 = null;
    queryLoggingService0.rolcForKe(kernelTransaction17, throwable18);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction20 = null;
    queryLoggingService0.strForEx(kernelTransaction20);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery22 = null;
    queryLoggingService0.faleForExTh(executingQuery22, "hi!");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery25 = null;
    queryLoggingService0.faleForExTh(executingQuery25, "hi!");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction28 = null;
    queryLoggingService0.comForKe(kernelTransaction28);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0278() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0278");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    queryLoggingService0.faleForExTh(executingQuery3, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.sucsForEx(executingQuery6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.faleForExTh(executingQuery8, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    queryLoggingService0.rolcForKe(kernelTransaction11);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0279() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0279");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    java.lang.String str5 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str6 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory7 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean9 = queryLoggingServiceExtensionFactory7.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory10 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str11 = queryLoggingServiceExtensionFactory10.toString();
    boolean boolean12 = queryLoggingServiceExtensionFactory7.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory10);
    boolean boolean13 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory7);
    java.lang.String str14 = queryLoggingServiceExtensionFactory7.getName();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext15 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies16 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle17 = queryLoggingServiceExtensionFactory7.newInstance(
          extensionContext15, queryLoggingServiceDependencies16);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertEquals(
        "'" + str5 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str5, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "query-logging" + "'", str6,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str11, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "query-logging" + "'", str14,
        "query-logging");
  }

  @Test
  public void test0280() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0280");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction4 = null;
    java.lang.Throwable throwable5 = null;
    queryLoggingService0.rolcForKe(kernelTransaction4, throwable5);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction7 = null;
    queryLoggingService0.comForKe(kernelTransaction7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService0.strForEx(kernelTransaction9);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    queryLoggingService0.comForKe(kernelTransaction11);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0281() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0281");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService0.faleForExTh(executingQuery9, throwable10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    queryLoggingService0.rolcForKe(kernelTransaction12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    queryLoggingService0.rolcForKe(kernelTransaction14);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    queryLoggingService0.strForEx(executingQuery16);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction18 = null;
    java.lang.Throwable throwable19 = null;
    queryLoggingService0.rolcForKe(kernelTransaction18, throwable19);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery21 = null;
    queryLoggingService0.sucsForEx(executingQuery21);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0282() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0282");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (short) 1);
    java.lang.String str3 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService4 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery5 = null;
    queryLoggingService4.strForEx(executingQuery5);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery7 = null;
    java.lang.Throwable throwable8 = null;
    queryLoggingService4.faleForExTh(executingQuery7, throwable8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    java.lang.Throwable throwable11 = null;
    queryLoggingService4.rolcForKe(kernelTransaction10, throwable11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService4.comForKe(kernelTransaction13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService4.strForEx(executingQuery15);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery17 = null;
    queryLoggingService4.strForEx(executingQuery17);
    boolean boolean19 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) executingQuery17);
    java.lang.String str20 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService21 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction22 = null;
    queryLoggingService21.rolcForKe(kernelTransaction22);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery24 = null;
    queryLoggingService21.faleForExTh(executingQuery24, "");
    java.lang.Class<?> wildcardClass27 = queryLoggingService21.getClass();
    boolean boolean28 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingService21);
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory29 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory30 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean32 = queryLoggingServiceExtensionFactory30.equals((java.lang.Object) (-1L));
    boolean boolean33 = queryLoggingServiceExtensionFactory29.equals((java.lang.Object) boolean32);
    java.lang.String str34 = queryLoggingServiceExtensionFactory29.toString();
    java.lang.String str35 = queryLoggingServiceExtensionFactory29.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory36 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean38 = queryLoggingServiceExtensionFactory36.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory39 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str40 = queryLoggingServiceExtensionFactory39.toString();
    boolean boolean41 = queryLoggingServiceExtensionFactory36.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory39);
    boolean boolean42 = queryLoggingServiceExtensionFactory29.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory36);
    java.lang.String str43 = queryLoggingServiceExtensionFactory29.getName();
    boolean boolean44 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory29);
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory45 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean47 = queryLoggingServiceExtensionFactory45.equals((java.lang.Object) (short) 1);
    boolean boolean48 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory45);
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext49 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies50 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle51 = queryLoggingServiceExtensionFactory45.newInstance(
          extensionContext49, queryLoggingServiceDependencies50);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "query-logging" + "'", str3,
        "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService4);
    org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "query-logging" + "'", str20,
        "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService21);
    org.junit.Assert.assertNotNull(wildcardClass27);
    org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    org.junit.Assert.assertEquals(
        "'" + str34 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str34, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str35 + "' != '" + "query-logging" + "'", str35,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    org.junit.Assert.assertEquals(
        "'" + str40 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str40, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    org.junit.Assert.assertEquals("'" + str43 + "' != '" + "query-logging" + "'", str43,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
  }

  @Test
  public void test0283() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0283");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.faleForExTh(executingQuery1,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    queryLoggingService0.sucsForEx(executingQuery4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.strForEx(executingQuery6);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction8 = null;
    queryLoggingService0.rolcForKe(kernelTransaction8);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery10 = null;
    java.lang.Throwable throwable11 = null;
    queryLoggingService0.faleForExTh(executingQuery10, throwable11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    java.lang.Throwable throwable14 = null;
    queryLoggingService0.rolcForKe(kernelTransaction13, throwable14);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    queryLoggingService0.strForEx(kernelTransaction16);
    java.lang.Class<?> wildcardClass18 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass18);
  }

  @Test
  public void test0284() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0284");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    queryLoggingService0.sucsForEx(executingQuery4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery10 = null;
    queryLoggingService0.faleForExTh(executingQuery10, "hi!");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery13 = null;
    queryLoggingService0.strForEx(executingQuery13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    java.lang.Throwable throwable16 = null;
    queryLoggingService0.rolcForKe(kernelTransaction15, throwable16);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    java.lang.Throwable throwable19 = null;
    queryLoggingService0.faleForExTh(executingQuery18, throwable19);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0285() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0285");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.strForEx(kernelTransaction10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.faleForExTh(executingQuery12,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService0.faleForExTh(executingQuery15, "query-logging");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction18 = null;
    queryLoggingService0.rolcForKe(kernelTransaction18);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery20 = null;
    queryLoggingService0.strForEx(executingQuery20);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery22 = null;
    queryLoggingService0.faleForExTh(executingQuery22, "hi!");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery25 = null;
    queryLoggingService0.strForEx(executingQuery25);
    java.lang.Class<?> wildcardClass27 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass27);
  }

  @Test
  public void test0286() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0286");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    java.lang.Throwable throwable5 = null;
    queryLoggingService0.faleForExTh(executingQuery4, throwable5);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery7 = null;
    java.lang.Throwable throwable8 = null;
    queryLoggingService0.faleForExTh(executingQuery7, throwable8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.strForEx(kernelTransaction10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    queryLoggingService0.strForEx(kernelTransaction12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    java.lang.Throwable throwable15 = null;
    queryLoggingService0.rolcForKe(kernelTransaction14, throwable15);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction17 = null;
    queryLoggingService0.rolcForKe(kernelTransaction17);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery19 = null;
    queryLoggingService0.sucsForEx(executingQuery19);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0287() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0287");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory3 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str4 = queryLoggingServiceExtensionFactory3.toString();
    boolean boolean5 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory3);
    java.lang.String str6 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str7 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.Object obj8 = null;
    boolean boolean9 = queryLoggingServiceExtensionFactory0.equals(obj8);
    java.lang.Class<?> wildcardClass10 = queryLoggingServiceExtensionFactory0.getClass();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str4 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str4, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "query-logging" + "'", str6,
        "query-logging");
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "query-logging" + "'", str7,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    org.junit.Assert.assertNotNull(wildcardClass10);
  }

  @Test
  public void test0288() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0288");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str1 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService2 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService2.rolcForKe(kernelTransaction3, throwable4);
    boolean boolean6 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) throwable4);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService7 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService7.strForEx(executingQuery8);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery10 = null;
    java.lang.Throwable throwable11 = null;
    queryLoggingService7.faleForExTh(executingQuery10, throwable11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService7.rolcForKe(kernelTransaction13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService7.faleForExTh(executingQuery15, "hi!");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction18 = null;
    queryLoggingService7.strForEx(kernelTransaction18);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery20 = null;
    java.lang.Throwable throwable21 = null;
    queryLoggingService7.faleForExTh(executingQuery20, throwable21);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction23 = null;
    queryLoggingService7.strForEx(kernelTransaction23);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery25 = null;
    queryLoggingService7.faleForExTh(executingQuery25, "query-logging");
    boolean boolean28 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) executingQuery25);
    java.lang.Class<?> wildcardClass29 = queryLoggingServiceExtensionFactory0.getClass();
    org.junit.Assert.assertEquals(
        "'" + str1 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str1, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(queryLoggingService2);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertNotNull(queryLoggingService7);
    org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    org.junit.Assert.assertNotNull(wildcardClass29);
  }

  @Test
  public void test0289() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0289");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory3 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str4 = queryLoggingServiceExtensionFactory3.toString();
    boolean boolean5 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory3);
    boolean boolean7 = queryLoggingServiceExtensionFactory3.equals((java.lang.Object) 100.0d);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService8 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    queryLoggingService8.strForEx(executingQuery9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    java.lang.Throwable throwable12 = null;
    queryLoggingService8.faleForExTh(executingQuery11, throwable12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    queryLoggingService8.rolcForKe(kernelTransaction14);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    queryLoggingService8.sucsForEx(executingQuery16);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    queryLoggingService8.strForEx(executingQuery18);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery20 = null;
    queryLoggingService8.sucsForEx(executingQuery20);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery22 = null;
    queryLoggingService8.sucsForEx(executingQuery22);
    boolean boolean24 = queryLoggingServiceExtensionFactory3.equals(
        (java.lang.Object) executingQuery22);
    java.lang.String str25 = queryLoggingServiceExtensionFactory3.toString();
    java.lang.String str26 = queryLoggingServiceExtensionFactory3.getName();
    java.lang.String str27 = queryLoggingServiceExtensionFactory3.toString();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext28 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies29 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle30 = queryLoggingServiceExtensionFactory3.newInstance(
          extensionContext28, queryLoggingServiceDependencies29);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str4 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str4, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    org.junit.Assert.assertNotNull(queryLoggingService8);
    org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    org.junit.Assert.assertEquals(
        "'" + str25 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str25, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str26 + "' != '" + "query-logging" + "'", str26,
        "query-logging");
    org.junit.Assert.assertEquals(
        "'" + str27 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str27, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
  }

  @Test
  public void test0290() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0290");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    queryLoggingService0.faleForExTh(executingQuery3, "query-logging");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.strForEx(kernelTransaction6);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction8 = null;
    queryLoggingService0.comForKe(kernelTransaction8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.rolcForKe(kernelTransaction10);
    java.lang.Class<?> wildcardClass12 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass12);
  }

  @Test
  public void test0291() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0291");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str1 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService2 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService2.rolcForKe(kernelTransaction3, throwable4);
    boolean boolean6 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) throwable4);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService7 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService7.strForEx(executingQuery8);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery10 = null;
    java.lang.Throwable throwable11 = null;
    queryLoggingService7.faleForExTh(executingQuery10, throwable11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService7.rolcForKe(kernelTransaction13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService7.faleForExTh(executingQuery15, "hi!");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction18 = null;
    queryLoggingService7.strForEx(kernelTransaction18);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery20 = null;
    java.lang.Throwable throwable21 = null;
    queryLoggingService7.faleForExTh(executingQuery20, throwable21);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction23 = null;
    queryLoggingService7.strForEx(kernelTransaction23);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery25 = null;
    queryLoggingService7.faleForExTh(executingQuery25, "query-logging");
    boolean boolean28 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) executingQuery25);
    java.lang.String str29 = queryLoggingServiceExtensionFactory0.getName();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext30 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies31 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle32 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext30, queryLoggingServiceDependencies31);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertEquals(
        "'" + str1 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str1, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(queryLoggingService2);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertNotNull(queryLoggingService7);
    org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    org.junit.Assert.assertEquals("'" + str29 + "' != '" + "query-logging" + "'", str29,
        "query-logging");
  }

  @Test
  public void test0292() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0292");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str1 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService2 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService2.rolcForKe(kernelTransaction3, throwable4);
    boolean boolean6 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) throwable4);
    java.lang.String str7 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str8 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str9 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str10 = queryLoggingServiceExtensionFactory0.getName();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext11 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies12 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle13 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext11, queryLoggingServiceDependencies12);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertEquals(
        "'" + str1 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str1, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(queryLoggingService2);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertEquals(
        "'" + str7 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str7, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals(
        "'" + str8 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str8, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "query-logging" + "'", str9,
        "query-logging");
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "query-logging" + "'", str10,
        "query-logging");
  }

  @Test
  public void test0293() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0293");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    java.lang.Throwable throwable5 = null;
    queryLoggingService0.faleForExTh(executingQuery4, throwable5);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery7 = null;
    java.lang.Throwable throwable8 = null;
    queryLoggingService0.faleForExTh(executingQuery7, throwable8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    java.lang.Throwable throwable11 = null;
    queryLoggingService0.rolcForKe(kernelTransaction10, throwable11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService0.strForEx(kernelTransaction13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService0.sucsForEx(executingQuery15);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0294() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0294");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (short) 1);
    java.lang.String str3 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str4 = queryLoggingServiceExtensionFactory0.toString();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext5 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies6 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle7 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext5, queryLoggingServiceDependencies6);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str3 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str3, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals(
        "'" + str4 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str4, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
  }

  @Test
  public void test0295() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0295");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    java.lang.Throwable throwable5 = null;
    queryLoggingService0.faleForExTh(executingQuery4, throwable5);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction7 = null;
    queryLoggingService0.comForKe(kernelTransaction7);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0296() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0296");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    java.lang.Class<?> wildcardClass1 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass1);
  }

  @Test
  public void test0297() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0297");
    }
    io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl diagnosticsOfflineReportProviderQueryLoggingImpl0 = new io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction1 = null;
    org.neo4j.configuration.Config config3 = null;
    java.nio.file.Path path4 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction1, "hi!", config3,
        path4);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.configuration.Config config8 = null;
    java.nio.file.Path path9 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction6,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config8, path9);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction11 = null;
    org.neo4j.configuration.Config config13 = null;
    java.nio.file.Path path14 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction11, "hi!", config13,
        path14);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction16 = null;
    org.neo4j.configuration.Config config18 = null;
    java.nio.file.Path path19 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction16, "", config18,
        path19);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction21 = null;
    org.neo4j.configuration.Config config23 = null;
    java.nio.file.Path path24 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction21, "hi!", config23,
        path24);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction26 = null;
    org.neo4j.configuration.Config config28 = null;
    java.nio.file.Path path29 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction26, "", config28,
        path29);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction31 = null;
    org.neo4j.configuration.Config config33 = null;
    java.nio.file.Path path34 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction31, "query-logging",
        config33, path34);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction36 = null;
    org.neo4j.configuration.Config config38 = null;
    java.nio.file.Path path39 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction36,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config38, path39);
    java.lang.Class<?> wildcardClass41 = diagnosticsOfflineReportProviderQueryLoggingImpl0.getClass();
    org.junit.Assert.assertNotNull(wildcardClass41);
  }

  @Test
  public void test0298() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0298");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1.0d));
    java.lang.String str3 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl diagnosticsOfflineReportProviderQueryLoggingImpl4 = new io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction5 = null;
    org.neo4j.configuration.Config config7 = null;
    java.nio.file.Path path8 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl4.init(fileSystemAbstraction5, "", config7,
        path8);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction10 = null;
    org.neo4j.configuration.Config config12 = null;
    java.nio.file.Path path13 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl4.init(fileSystemAbstraction10, "hi!", config12,
        path13);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction15 = null;
    org.neo4j.configuration.Config config17 = null;
    java.nio.file.Path path18 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl4.init(fileSystemAbstraction15, "query-logging",
        config17, path18);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction20 = null;
    org.neo4j.configuration.Config config22 = null;
    java.nio.file.Path path23 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl4.init(fileSystemAbstraction20, "", config22,
        path23);
    boolean boolean25 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) fileSystemAbstraction20);
    java.lang.String str26 = queryLoggingServiceExtensionFactory0.toString();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext27 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies28 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle29 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext27, queryLoggingServiceDependencies28);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "query-logging" + "'", str3,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    org.junit.Assert.assertEquals(
        "'" + str26 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str26, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
  }

  @Test
  public void test0299() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0299");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (short) 1);
    java.lang.String str3 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str4 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str5 = queryLoggingServiceExtensionFactory0.getName();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "query-logging" + "'", str3,
        "query-logging");
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "query-logging" + "'", str4,
        "query-logging");
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "query-logging" + "'", str5,
        "query-logging");
  }

  @Test
  public void test0300() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0300");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (short) 1);
    java.lang.String str3 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService4 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery5 = null;
    queryLoggingService4.strForEx(executingQuery5);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery7 = null;
    java.lang.Throwable throwable8 = null;
    queryLoggingService4.faleForExTh(executingQuery7, throwable8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    java.lang.Throwable throwable11 = null;
    queryLoggingService4.rolcForKe(kernelTransaction10, throwable11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService4.comForKe(kernelTransaction13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService4.strForEx(executingQuery15);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery17 = null;
    queryLoggingService4.strForEx(executingQuery17);
    boolean boolean19 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) executingQuery17);
    java.lang.String str20 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str21 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str22 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str23 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str24 = queryLoggingServiceExtensionFactory0.getName();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext25 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies26 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle27 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext25, queryLoggingServiceDependencies26);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "query-logging" + "'", str3,
        "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService4);
    org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "query-logging" + "'", str20,
        "query-logging");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str21, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str22, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str23 + "' != '" + "query-logging" + "'", str23,
        "query-logging");
    org.junit.Assert.assertEquals("'" + str24 + "' != '" + "query-logging" + "'", str24,
        "query-logging");
  }

  @Test
  public void test0301() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0301");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    java.lang.String str5 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str6 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str7 = queryLoggingServiceExtensionFactory0.toString();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext8 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies9 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle10 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext8, queryLoggingServiceDependencies9);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertEquals(
        "'" + str5 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str5, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals(
        "'" + str6 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str6, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals(
        "'" + str7 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str7, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
  }

  @Test
  public void test0302() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0302");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    java.lang.String str5 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str6 = queryLoggingServiceExtensionFactory0.getName();
    boolean boolean8 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) 0L);
    java.lang.String str9 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService10 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    queryLoggingService10.rolcForKe(kernelTransaction11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    java.lang.Throwable throwable14 = null;
    queryLoggingService10.rolcForKe(kernelTransaction13, throwable14);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    queryLoggingService10.rolcForKe(kernelTransaction16);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    queryLoggingService10.sucsForEx(executingQuery18);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction20 = null;
    queryLoggingService10.strForEx(kernelTransaction20);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction22 = null;
    java.lang.Throwable throwable23 = null;
    queryLoggingService10.rolcForKe(kernelTransaction22, throwable23);
    boolean boolean25 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) throwable23);
    java.lang.String str26 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService27 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction28 = null;
    java.lang.Throwable throwable29 = null;
    queryLoggingService27.rolcForKe(kernelTransaction28, throwable29);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery31 = null;
    java.lang.Throwable throwable32 = null;
    queryLoggingService27.faleForExTh(executingQuery31, throwable32);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery34 = null;
    java.lang.Throwable throwable35 = null;
    queryLoggingService27.faleForExTh(executingQuery34, throwable35);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction37 = null;
    java.lang.Throwable throwable38 = null;
    queryLoggingService27.rolcForKe(kernelTransaction37, throwable38);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction40 = null;
    queryLoggingService27.strForEx(kernelTransaction40);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery42 = null;
    queryLoggingService27.faleForExTh(executingQuery42, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery45 = null;
    queryLoggingService27.strForEx(executingQuery45);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction47 = null;
    java.lang.Throwable throwable48 = null;
    queryLoggingService27.rolcForKe(kernelTransaction47, throwable48);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction50 = null;
    queryLoggingService27.comForKe(kernelTransaction50);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction52 = null;
    queryLoggingService27.comForKe(kernelTransaction52);
    boolean boolean54 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingService27);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction55 = null;
    queryLoggingService27.comForKe(kernelTransaction55);
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertEquals(
        "'" + str5 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str5, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "query-logging" + "'", str6,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    org.junit.Assert.assertEquals(
        "'" + str9 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str9, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(queryLoggingService10);
    org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    org.junit.Assert.assertEquals(
        "'" + str26 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str26, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(queryLoggingService27);
    org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
  }

  @Test
  public void test0303() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0303");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    java.lang.Object obj5 = new java.lang.Object();
    boolean boolean6 = queryLoggingServiceExtensionFactory0.equals(obj5);
    java.lang.String str7 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str8 = queryLoggingServiceExtensionFactory0.toString();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext9 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies10 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle11 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext9, queryLoggingServiceDependencies10);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "query-logging" + "'", str7,
        "query-logging");
    org.junit.Assert.assertEquals(
        "'" + str8 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str8, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
  }

  @Test
  public void test0304() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0304");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction4 = null;
    java.lang.Throwable throwable5 = null;
    queryLoggingService0.rolcForKe(kernelTransaction4, throwable5);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService0.rolcForKe(kernelTransaction9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    java.lang.Throwable throwable12 = null;
    queryLoggingService0.faleForExTh(executingQuery11, throwable12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    queryLoggingService0.rolcForKe(kernelTransaction14);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    queryLoggingService0.comForKe(kernelTransaction16);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction18 = null;
    java.lang.Throwable throwable19 = null;
    queryLoggingService0.rolcForKe(kernelTransaction18, throwable19);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery21 = null;
    queryLoggingService0.sucsForEx(executingQuery21);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0305() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0305");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1.0d));
    java.lang.String str3 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl diagnosticsOfflineReportProviderQueryLoggingImpl4 = new io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction5 = null;
    org.neo4j.configuration.Config config7 = null;
    java.nio.file.Path path8 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl4.init(fileSystemAbstraction5, "", config7,
        path8);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction10 = null;
    org.neo4j.configuration.Config config12 = null;
    java.nio.file.Path path13 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl4.init(fileSystemAbstraction10, "hi!", config12,
        path13);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction15 = null;
    org.neo4j.configuration.Config config17 = null;
    java.nio.file.Path path18 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl4.init(fileSystemAbstraction15, "query-logging",
        config17, path18);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction20 = null;
    org.neo4j.configuration.Config config22 = null;
    java.nio.file.Path path23 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl4.init(fileSystemAbstraction20, "", config22,
        path23);
    boolean boolean25 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) fileSystemAbstraction20);
    java.lang.String str26 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str27 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.Class<?> wildcardClass28 = queryLoggingServiceExtensionFactory0.getClass();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "query-logging" + "'", str3,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    org.junit.Assert.assertEquals(
        "'" + str26 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str26, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals(
        "'" + str27 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str27, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(wildcardClass28);
  }

  @Test
  public void test0306() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0306");
    }
    io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl diagnosticsOfflineReportProviderQueryLoggingImpl0 = new io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction1 = null;
    org.neo4j.configuration.Config config3 = null;
    java.nio.file.Path path4 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction1, "hi!", config3,
        path4);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.configuration.Config config8 = null;
    java.nio.file.Path path9 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction6, "query-logging",
        config8, path9);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction11 = null;
    org.neo4j.configuration.Config config13 = null;
    java.nio.file.Path path14 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction11,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config13, path14);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction16 = null;
    org.neo4j.configuration.Config config18 = null;
    java.nio.file.Path path19 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction16,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config18, path19);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction21 = null;
    org.neo4j.configuration.Config config23 = null;
    java.nio.file.Path path24 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction21, "hi!", config23,
        path24);
  }

  @Test
  public void test0307() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0307");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str1 = queryLoggingServiceExtensionFactory0.toString();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext2 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies3 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle4 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext2, queryLoggingServiceDependencies3);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertEquals(
        "'" + str1 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str1, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
  }

  @Test
  public void test0308() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0308");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery10 = null;
    queryLoggingService0.strForEx(executingQuery10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.sucsForEx(executingQuery12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    queryLoggingService0.sucsForEx(executingQuery14);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    queryLoggingService0.sucsForEx(executingQuery16);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    java.lang.Throwable throwable19 = null;
    queryLoggingService0.faleForExTh(executingQuery18, throwable19);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction21 = null;
    java.lang.Throwable throwable22 = null;
    queryLoggingService0.rolcForKe(kernelTransaction21, throwable22);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery24 = null;
    queryLoggingService0.strForEx(executingQuery24);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0309() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0309");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    queryLoggingService0.sucsForEx(executingQuery4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.faleForExTh(executingQuery6, "hi!");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService0.faleForExTh(executingQuery9, throwable10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    java.lang.Throwable throwable13 = null;
    queryLoggingService0.rolcForKe(kernelTransaction12, throwable13);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0310() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0310");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory3 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str4 = queryLoggingServiceExtensionFactory3.toString();
    boolean boolean5 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory3);
    boolean boolean7 = queryLoggingServiceExtensionFactory3.equals((java.lang.Object) 100.0d);
    java.lang.String str8 = queryLoggingServiceExtensionFactory3.getName();
    java.lang.String str9 = queryLoggingServiceExtensionFactory3.getName();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext10 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies11 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle12 = queryLoggingServiceExtensionFactory3.newInstance(
          extensionContext10, queryLoggingServiceDependencies11);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str4 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str4, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "query-logging" + "'", str8,
        "query-logging");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "query-logging" + "'", str9,
        "query-logging");
  }

  @Test
  public void test0311() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0311");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction4 = null;
    queryLoggingService0.comForKe(kernelTransaction4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction8 = null;
    queryLoggingService0.comForKe(kernelTransaction8);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery10 = null;
    java.lang.Throwable throwable11 = null;
    queryLoggingService0.faleForExTh(executingQuery10, throwable11);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0312() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0312");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService0.faleForExTh(executingQuery9, throwable10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    queryLoggingService0.rolcForKe(kernelTransaction12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    queryLoggingService0.rolcForKe(kernelTransaction14);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    java.lang.Throwable throwable17 = null;
    queryLoggingService0.rolcForKe(kernelTransaction16, throwable17);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0313() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0313");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    queryLoggingService0.faleForExTh(executingQuery9, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.strForEx(executingQuery12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    queryLoggingService0.strForEx(kernelTransaction14);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    java.lang.Throwable throwable17 = null;
    queryLoggingService0.faleForExTh(executingQuery16, throwable17);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0314() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0314");
    }
    io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl diagnosticsOfflineReportProviderQueryLoggingImpl0 = new io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction1 = null;
    org.neo4j.configuration.Config config3 = null;
    java.nio.file.Path path4 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction1, "", config3,
        path4);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.configuration.Config config8 = null;
    java.nio.file.Path path9 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction6,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config8, path9);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction11 = null;
    org.neo4j.configuration.Config config13 = null;
    java.nio.file.Path path14 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction11, "hi!", config13,
        path14);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction16 = null;
    org.neo4j.configuration.Config config18 = null;
    java.nio.file.Path path19 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction16, "hi!", config18,
        path19);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction21 = null;
    org.neo4j.configuration.Config config23 = null;
    java.nio.file.Path path24 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction21,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config23, path24);
    java.lang.Class<?> wildcardClass26 = diagnosticsOfflineReportProviderQueryLoggingImpl0.getClass();
    org.junit.Assert.assertNotNull(wildcardClass26);
  }

  @Test
  public void test0315() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0315");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    java.lang.Throwable throwable5 = null;
    queryLoggingService0.faleForExTh(executingQuery4, throwable5);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery7 = null;
    java.lang.Throwable throwable8 = null;
    queryLoggingService0.faleForExTh(executingQuery7, throwable8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    java.lang.Throwable throwable11 = null;
    queryLoggingService0.rolcForKe(kernelTransaction10, throwable11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService0.rolcForKe(kernelTransaction13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    queryLoggingService0.strForEx(kernelTransaction15);
    java.lang.Class<?> wildcardClass17 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass17);
  }

  @Test
  public void test0316() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0316");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.strForEx(kernelTransaction10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.faleForExTh(executingQuery12,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    java.lang.Throwable throwable16 = null;
    queryLoggingService0.rolcForKe(kernelTransaction15, throwable16);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction18 = null;
    java.lang.Throwable throwable19 = null;
    queryLoggingService0.rolcForKe(kernelTransaction18, throwable19);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0317() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0317");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory3 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str4 = queryLoggingServiceExtensionFactory3.toString();
    boolean boolean5 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory3);
    boolean boolean7 = queryLoggingServiceExtensionFactory3.equals((java.lang.Object) 100.0d);
    java.lang.String str8 = queryLoggingServiceExtensionFactory3.toString();
    java.lang.String str9 = queryLoggingServiceExtensionFactory3.getName();
    java.lang.String str10 = queryLoggingServiceExtensionFactory3.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService11 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService11.strForEx(executingQuery12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    java.lang.Throwable throwable15 = null;
    queryLoggingService11.faleForExTh(executingQuery14, throwable15);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction17 = null;
    queryLoggingService11.rolcForKe(kernelTransaction17);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery19 = null;
    queryLoggingService11.sucsForEx(executingQuery19);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction21 = null;
    queryLoggingService11.strForEx(kernelTransaction21);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery23 = null;
    java.lang.Throwable throwable24 = null;
    queryLoggingService11.faleForExTh(executingQuery23, throwable24);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction26 = null;
    queryLoggingService11.strForEx(kernelTransaction26);
    boolean boolean28 = queryLoggingServiceExtensionFactory3.equals(
        (java.lang.Object) kernelTransaction26);
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext29 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies30 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle31 = queryLoggingServiceExtensionFactory3.newInstance(
          extensionContext29, queryLoggingServiceDependencies30);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str4 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str4, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    org.junit.Assert.assertEquals(
        "'" + str8 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str8, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "query-logging" + "'", str9,
        "query-logging");
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "query-logging" + "'", str10,
        "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService11);
    org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
  }

  @Test
  public void test0318() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0318");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery10 = null;
    queryLoggingService0.strForEx(executingQuery10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.sucsForEx(executingQuery12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    queryLoggingService0.sucsForEx(executingQuery14);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    queryLoggingService0.rolcForKe(kernelTransaction16);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    queryLoggingService0.sucsForEx(executingQuery18);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery20 = null;
    queryLoggingService0.faleForExTh(executingQuery20, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction23 = null;
    queryLoggingService0.rolcForKe(kernelTransaction23);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0319() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0319");
    }
    io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl diagnosticsOfflineReportProviderQueryLoggingImpl0 = new io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction1 = null;
    org.neo4j.configuration.Config config3 = null;
    java.nio.file.Path path4 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction1, "hi!", config3,
        path4);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.configuration.Config config8 = null;
    java.nio.file.Path path9 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction6, "query-logging",
        config8, path9);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction11 = null;
    org.neo4j.configuration.Config config13 = null;
    java.nio.file.Path path14 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction11, "query-logging",
        config13, path14);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction16 = null;
    org.neo4j.configuration.Config config18 = null;
    java.nio.file.Path path19 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction16, "hi!", config18,
        path19);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction21 = null;
    org.neo4j.configuration.Config config23 = null;
    java.nio.file.Path path24 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction21,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config23, path24);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction26 = null;
    org.neo4j.configuration.Config config28 = null;
    java.nio.file.Path path29 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction26, "query-logging",
        config28, path29);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction31 = null;
    org.neo4j.configuration.Config config33 = null;
    java.nio.file.Path path34 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction31, "query-logging",
        config33, path34);
  }

  @Test
  public void test0320() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0320");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.faleForExTh(executingQuery6, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService0.rolcForKe(kernelTransaction9, throwable10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    queryLoggingService0.rolcForKe(kernelTransaction12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    java.lang.Throwable throwable15 = null;
    queryLoggingService0.faleForExTh(executingQuery14, throwable15);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction17 = null;
    queryLoggingService0.rolcForKe(kernelTransaction17);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery19 = null;
    java.lang.Throwable throwable20 = null;
    queryLoggingService0.faleForExTh(executingQuery19, throwable20);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction22 = null;
    java.lang.Throwable throwable23 = null;
    queryLoggingService0.rolcForKe(kernelTransaction22, throwable23);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery25 = null;
    queryLoggingService0.sucsForEx(executingQuery25);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0321() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0321");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction8 = null;
    java.lang.Throwable throwable9 = null;
    queryLoggingService0.rolcForKe(kernelTransaction8, throwable9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    queryLoggingService0.faleForExTh(executingQuery11, "hi!");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    queryLoggingService0.comForKe(kernelTransaction14);
    java.lang.Class<?> wildcardClass16 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass16);
  }

  @Test
  public void test0322() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0322");
    }
    io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl diagnosticsOfflineReportProviderQueryLoggingImpl0 = new io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction1 = null;
    org.neo4j.configuration.Config config3 = null;
    java.nio.file.Path path4 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction1, "", config3,
        path4);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.configuration.Config config8 = null;
    java.nio.file.Path path9 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction6,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config8, path9);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction11 = null;
    org.neo4j.configuration.Config config13 = null;
    java.nio.file.Path path14 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction11, "query-logging",
        config13, path14);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction16 = null;
    org.neo4j.configuration.Config config18 = null;
    java.nio.file.Path path19 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction16,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config18, path19);
  }

  @Test
  public void test0323() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0323");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    queryLoggingService0.sucsForEx(executingQuery4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.sucsForEx(executingQuery6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.faleForExTh(executingQuery8, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    queryLoggingService0.rolcForKe(kernelTransaction11);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery13 = null;
    java.lang.Throwable throwable14 = null;
    queryLoggingService0.faleForExTh(executingQuery13, throwable14);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0324() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0324");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str1 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService2 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService2.rolcForKe(kernelTransaction3, throwable4);
    boolean boolean6 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) throwable4);
    java.lang.String str7 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str8 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl diagnosticsOfflineReportProviderQueryLoggingImpl9 = new io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction10 = null;
    org.neo4j.configuration.Config config12 = null;
    java.nio.file.Path path13 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl9.init(fileSystemAbstraction10, "hi!", config12,
        path13);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction15 = null;
    org.neo4j.configuration.Config config17 = null;
    java.nio.file.Path path18 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl9.init(fileSystemAbstraction15, "query-logging",
        config17, path18);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction20 = null;
    org.neo4j.configuration.Config config22 = null;
    java.nio.file.Path path23 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl9.init(fileSystemAbstraction20,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config22, path23);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction25 = null;
    org.neo4j.configuration.Config config27 = null;
    java.nio.file.Path path28 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl9.init(fileSystemAbstraction25, "", config27,
        path28);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction30 = null;
    org.neo4j.configuration.Config config32 = null;
    java.nio.file.Path path33 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl9.init(fileSystemAbstraction30, "hi!", config32,
        path33);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction35 = null;
    org.neo4j.configuration.Config config37 = null;
    java.nio.file.Path path38 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl9.init(fileSystemAbstraction35, "hi!", config37,
        path38);
    boolean boolean40 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) config37);
    java.lang.String str41 = queryLoggingServiceExtensionFactory0.toString();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext42 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies43 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle44 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext42, queryLoggingServiceDependencies43);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertEquals(
        "'" + str1 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str1, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(queryLoggingService2);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "query-logging" + "'", str7,
        "query-logging");
    org.junit.Assert.assertEquals(
        "'" + str8 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str8, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    org.junit.Assert.assertEquals(
        "'" + str41 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str41, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
  }

  @Test
  public void test0325() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0325");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    queryLoggingService0.sucsForEx(executingQuery4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery10 = null;
    queryLoggingService0.faleForExTh(executingQuery10, "hi!");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery13 = null;
    queryLoggingService0.strForEx(executingQuery13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    java.lang.Throwable throwable16 = null;
    queryLoggingService0.rolcForKe(kernelTransaction15, throwable16);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction18 = null;
    queryLoggingService0.comForKe(kernelTransaction18);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction20 = null;
    queryLoggingService0.comForKe(kernelTransaction20);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction22 = null;
    java.lang.Throwable throwable23 = null;
    queryLoggingService0.rolcForKe(kernelTransaction22, throwable23);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0326() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0326");
    }
    io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl diagnosticsOfflineReportProviderQueryLoggingImpl0 = new io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction1 = null;
    org.neo4j.configuration.Config config3 = null;
    java.nio.file.Path path4 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction1, "hi!", config3,
        path4);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.configuration.Config config8 = null;
    java.nio.file.Path path9 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction6, "query-logging",
        config8, path9);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction11 = null;
    org.neo4j.configuration.Config config13 = null;
    java.nio.file.Path path14 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction11,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config13, path14);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction16 = null;
    org.neo4j.configuration.Config config18 = null;
    java.nio.file.Path path19 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction16, "", config18,
        path19);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction21 = null;
    org.neo4j.configuration.Config config23 = null;
    java.nio.file.Path path24 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction21, "", config23,
        path24);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction26 = null;
    org.neo4j.configuration.Config config28 = null;
    java.nio.file.Path path29 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction26, "", config28,
        path29);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction31 = null;
    org.neo4j.configuration.Config config33 = null;
    java.nio.file.Path path34 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction31, "query-logging",
        config33, path34);
  }

  @Test
  public void test0327() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0327");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction4 = null;
    queryLoggingService0.comForKe(kernelTransaction4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction8 = null;
    queryLoggingService0.rolcForKe(kernelTransaction8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    java.lang.Throwable throwable11 = null;
    queryLoggingService0.rolcForKe(kernelTransaction10, throwable11);
    java.lang.Class<?> wildcardClass13 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass13);
  }

  @Test
  public void test0328() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0328");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    queryLoggingService0.faleForExTh(executingQuery3, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.faleForExTh(executingQuery6, throwable7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService0.strForEx(kernelTransaction9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    queryLoggingService0.strForEx(executingQuery11);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery13 = null;
    queryLoggingService0.sucsForEx(executingQuery13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService0.sucsForEx(executingQuery15);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction17 = null;
    queryLoggingService0.strForEx(kernelTransaction17);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery19 = null;
    java.lang.Throwable throwable20 = null;
    queryLoggingService0.faleForExTh(executingQuery19, throwable20);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0329() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0329");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    queryLoggingService0.faleForExTh(executingQuery3, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.faleForExTh(executingQuery6, throwable7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService0.faleForExTh(executingQuery9, throwable10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    queryLoggingService0.strForEx(kernelTransaction12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    java.lang.Throwable throwable15 = null;
    queryLoggingService0.faleForExTh(executingQuery14, throwable15);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery17 = null;
    queryLoggingService0.faleForExTh(executingQuery17, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction20 = null;
    queryLoggingService0.comForKe(kernelTransaction20);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery22 = null;
    queryLoggingService0.strForEx(executingQuery22);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0330() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0330");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    boolean boolean6 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) 0L);
    java.lang.String str7 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str8 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str9 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str10 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str11 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str12 = queryLoggingServiceExtensionFactory0.getName();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext13 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies14 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle15 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext13, queryLoggingServiceDependencies14);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertEquals(
        "'" + str7 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str7, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "query-logging" + "'", str8,
        "query-logging");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "query-logging" + "'", str9,
        "query-logging");
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "query-logging" + "'", str10,
        "query-logging");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str11, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "query-logging" + "'", str12,
        "query-logging");
  }

  @Test
  public void test0331() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0331");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.strForEx(kernelTransaction10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    java.lang.Throwable throwable13 = null;
    queryLoggingService0.faleForExTh(executingQuery12, throwable13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    queryLoggingService0.strForEx(kernelTransaction15);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction17 = null;
    java.lang.Throwable throwable18 = null;
    queryLoggingService0.rolcForKe(kernelTransaction17, throwable18);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction20 = null;
    java.lang.Throwable throwable21 = null;
    queryLoggingService0.rolcForKe(kernelTransaction20, throwable21);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction23 = null;
    queryLoggingService0.strForEx(kernelTransaction23);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery25 = null;
    queryLoggingService0.faleForExTh(executingQuery25, "query-logging");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction28 = null;
    java.lang.Throwable throwable29 = null;
    queryLoggingService0.rolcForKe(kernelTransaction28, throwable29);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery31 = null;
    java.lang.Throwable throwable32 = null;
    queryLoggingService0.faleForExTh(executingQuery31, throwable32);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0332() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0332");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory3 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str4 = queryLoggingServiceExtensionFactory3.toString();
    boolean boolean5 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory3);
    java.lang.String str6 = queryLoggingServiceExtensionFactory3.toString();
    java.lang.String str7 = queryLoggingServiceExtensionFactory3.getName();
    java.lang.String str8 = queryLoggingServiceExtensionFactory3.toString();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext9 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies10 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle11 = queryLoggingServiceExtensionFactory3.newInstance(
          extensionContext9, queryLoggingServiceDependencies10);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str4 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str4, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertEquals(
        "'" + str6 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str6, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "query-logging" + "'", str7,
        "query-logging");
    org.junit.Assert.assertEquals(
        "'" + str8 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str8, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
  }

  @Test
  public void test0333() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0333");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    queryLoggingService0.strForEx(executingQuery9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    java.lang.Throwable throwable12 = null;
    queryLoggingService0.faleForExTh(executingQuery11, throwable12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    queryLoggingService0.strForEx(executingQuery14);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    queryLoggingService0.rolcForKe(kernelTransaction16);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction18 = null;
    queryLoggingService0.rolcForKe(kernelTransaction18);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0334() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0334");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    queryLoggingService0.faleForExTh(executingQuery3, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.faleForExTh(executingQuery6, throwable7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService0.strForEx(kernelTransaction9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    queryLoggingService0.strForEx(executingQuery11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    java.lang.Throwable throwable14 = null;
    queryLoggingService0.rolcForKe(kernelTransaction13, throwable14);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    queryLoggingService0.strForEx(executingQuery16);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction18 = null;
    queryLoggingService0.comForKe(kernelTransaction18);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction20 = null;
    queryLoggingService0.rolcForKe(kernelTransaction20);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction22 = null;
    java.lang.Throwable throwable23 = null;
    queryLoggingService0.rolcForKe(kernelTransaction22, throwable23);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0335() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0335");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    boolean boolean6 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) 0L);
    java.lang.String str7 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str8 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.Object obj9 = new java.lang.Object();
    java.lang.Class<?> wildcardClass10 = obj9.getClass();
    boolean boolean11 = queryLoggingServiceExtensionFactory0.equals(obj9);
    java.lang.String str12 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.Object obj13 = null;
    boolean boolean14 = queryLoggingServiceExtensionFactory0.equals(obj13);
    java.lang.String str15 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory16 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean18 = queryLoggingServiceExtensionFactory16.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService19 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction20 = null;
    queryLoggingService19.rolcForKe(kernelTransaction20);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction22 = null;
    java.lang.Throwable throwable23 = null;
    queryLoggingService19.rolcForKe(kernelTransaction22, throwable23);
    boolean boolean25 = queryLoggingServiceExtensionFactory16.equals(
        (java.lang.Object) queryLoggingService19);
    boolean boolean26 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory16);
    java.lang.String str27 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory28 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory29 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean31 = queryLoggingServiceExtensionFactory29.equals((java.lang.Object) (-1L));
    boolean boolean32 = queryLoggingServiceExtensionFactory28.equals((java.lang.Object) boolean31);
    java.lang.Object obj33 = new java.lang.Object();
    boolean boolean34 = queryLoggingServiceExtensionFactory28.equals(obj33);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService35 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction36 = null;
    queryLoggingService35.rolcForKe(kernelTransaction36);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction38 = null;
    java.lang.Throwable throwable39 = null;
    queryLoggingService35.rolcForKe(kernelTransaction38, throwable39);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction41 = null;
    queryLoggingService35.rolcForKe(kernelTransaction41);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery43 = null;
    queryLoggingService35.sucsForEx(executingQuery43);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction45 = null;
    queryLoggingService35.strForEx(kernelTransaction45);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery47 = null;
    queryLoggingService35.faleForExTh(executingQuery47,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction50 = null;
    java.lang.Throwable throwable51 = null;
    queryLoggingService35.rolcForKe(kernelTransaction50, throwable51);
    boolean boolean53 = queryLoggingServiceExtensionFactory28.equals(
        (java.lang.Object) kernelTransaction50);
    boolean boolean55 = queryLoggingServiceExtensionFactory28.equals((java.lang.Object) '#');
    java.lang.String str56 = queryLoggingServiceExtensionFactory28.toString();
    boolean boolean57 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) str56);
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory58 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean60 = queryLoggingServiceExtensionFactory58.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory61 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str62 = queryLoggingServiceExtensionFactory61.toString();
    boolean boolean63 = queryLoggingServiceExtensionFactory58.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory61);
    boolean boolean65 = queryLoggingServiceExtensionFactory61.equals((java.lang.Object) 100.0d);
    java.lang.String str66 = queryLoggingServiceExtensionFactory61.toString();
    java.lang.String str67 = queryLoggingServiceExtensionFactory61.toString();
    java.lang.String str68 = queryLoggingServiceExtensionFactory61.toString();
    boolean boolean69 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) str68);
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertEquals(
        "'" + str7 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str7, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "query-logging" + "'", str8,
        "query-logging");
    org.junit.Assert.assertNotNull(wildcardClass10);
    org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "query-logging" + "'", str12,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str15, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    org.junit.Assert.assertNotNull(queryLoggingService19);
    org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    org.junit.Assert.assertEquals("'" + str27 + "' != '" + "query-logging" + "'", str27,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    org.junit.Assert.assertNotNull(queryLoggingService35);
    org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    org.junit.Assert.assertEquals(
        "'" + str56 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str56, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    org.junit.Assert.assertEquals(
        "'" + str62 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str62, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    org.junit.Assert.assertEquals(
        "'" + str66 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str66, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals(
        "'" + str67 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str67, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals(
        "'" + str68 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str68, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
  }

  @Test
  public void test0336() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0336");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    boolean boolean6 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) 0L);
    java.lang.String str7 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str8 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.Object obj9 = new java.lang.Object();
    java.lang.Class<?> wildcardClass10 = obj9.getClass();
    boolean boolean11 = queryLoggingServiceExtensionFactory0.equals(obj9);
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory12 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean14 = queryLoggingServiceExtensionFactory12.equals((java.lang.Object) (short) 1);
    java.lang.String str15 = queryLoggingServiceExtensionFactory12.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService16 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery17 = null;
    queryLoggingService16.strForEx(executingQuery17);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery19 = null;
    java.lang.Throwable throwable20 = null;
    queryLoggingService16.faleForExTh(executingQuery19, throwable20);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction22 = null;
    java.lang.Throwable throwable23 = null;
    queryLoggingService16.rolcForKe(kernelTransaction22, throwable23);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction25 = null;
    queryLoggingService16.comForKe(kernelTransaction25);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery27 = null;
    queryLoggingService16.strForEx(executingQuery27);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery29 = null;
    queryLoggingService16.strForEx(executingQuery29);
    boolean boolean31 = queryLoggingServiceExtensionFactory12.equals(
        (java.lang.Object) executingQuery29);
    boolean boolean32 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) executingQuery29);
    java.lang.String str33 = queryLoggingServiceExtensionFactory0.toString();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext34 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies35 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle36 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext34, queryLoggingServiceDependencies35);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertEquals(
        "'" + str7 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str7, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "query-logging" + "'", str8,
        "query-logging");
    org.junit.Assert.assertNotNull(wildcardClass10);
    org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "query-logging" + "'", str15,
        "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService16);
    org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    org.junit.Assert.assertEquals(
        "'" + str33 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str33, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
  }

  @Test
  public void test0337() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0337");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.strForEx(kernelTransaction10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.faleForExTh(executingQuery12,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService0.faleForExTh(executingQuery15, "query-logging");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction18 = null;
    queryLoggingService0.rolcForKe(kernelTransaction18);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery20 = null;
    queryLoggingService0.strForEx(executingQuery20);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction22 = null;
    queryLoggingService0.strForEx(kernelTransaction22);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0338() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0338");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    queryLoggingService0.faleForExTh(executingQuery3, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.faleForExTh(executingQuery6, throwable7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService0.faleForExTh(executingQuery9, throwable10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    queryLoggingService0.strForEx(kernelTransaction12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    queryLoggingService0.strForEx(kernelTransaction14);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    queryLoggingService0.strForEx(kernelTransaction16);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    queryLoggingService0.strForEx(executingQuery18);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction20 = null;
    java.lang.Throwable throwable21 = null;
    queryLoggingService0.rolcForKe(kernelTransaction20, throwable21);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery23 = null;
    java.lang.Throwable throwable24 = null;
    queryLoggingService0.faleForExTh(executingQuery23, throwable24);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0339() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0339");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    java.lang.Throwable throwable5 = null;
    queryLoggingService0.faleForExTh(executingQuery4, throwable5);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery7 = null;
    java.lang.Throwable throwable8 = null;
    queryLoggingService0.faleForExTh(executingQuery7, throwable8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.strForEx(kernelTransaction10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    java.lang.Throwable throwable13 = null;
    queryLoggingService0.faleForExTh(executingQuery12, throwable13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    queryLoggingService0.rolcForKe(kernelTransaction15);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction17 = null;
    queryLoggingService0.comForKe(kernelTransaction17);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery19 = null;
    java.lang.Throwable throwable20 = null;
    queryLoggingService0.faleForExTh(executingQuery19, throwable20);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0340() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0340");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    queryLoggingService0.faleForExTh(executingQuery3, "query-logging");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.strForEx(kernelTransaction6);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction8 = null;
    queryLoggingService0.rolcForKe(kernelTransaction8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.rolcForKe(kernelTransaction10);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0341() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0341");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction4 = null;
    queryLoggingService0.comForKe(kernelTransaction4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.faleForExTh(executingQuery6, throwable7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService0.strForEx(kernelTransaction9);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    java.lang.Throwable throwable12 = null;
    queryLoggingService0.rolcForKe(kernelTransaction11, throwable12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    queryLoggingService0.strForEx(kernelTransaction14);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0342() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0342");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    queryLoggingService0.sucsForEx(executingQuery4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.sucsForEx(executingQuery6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.faleForExTh(executingQuery8, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    queryLoggingService0.rolcForKe(kernelTransaction11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService0.rolcForKe(kernelTransaction13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    queryLoggingService0.comForKe(kernelTransaction15);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0343() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0343");
    }
    io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl diagnosticsOfflineReportProviderQueryLoggingImpl0 = new io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction1 = null;
    org.neo4j.configuration.Config config3 = null;
    java.nio.file.Path path4 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction1,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config3, path4);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.configuration.Config config8 = null;
    java.nio.file.Path path9 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction6,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config8, path9);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction11 = null;
    org.neo4j.configuration.Config config13 = null;
    java.nio.file.Path path14 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction11, "", config13,
        path14);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction16 = null;
    org.neo4j.configuration.Config config18 = null;
    java.nio.file.Path path19 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction16, "", config18,
        path19);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction21 = null;
    org.neo4j.configuration.Config config23 = null;
    java.nio.file.Path path24 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction21, "query-logging",
        config23, path24);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction26 = null;
    org.neo4j.configuration.Config config28 = null;
    java.nio.file.Path path29 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction26,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config28, path29);
  }

  @Test
  public void test0344() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0344");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    queryLoggingService0.strForEx(kernelTransaction3);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery5 = null;
    java.lang.Throwable throwable6 = null;
    queryLoggingService0.faleForExTh(executingQuery5, throwable6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0345() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0345");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str1 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService2 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService2.rolcForKe(kernelTransaction3, throwable4);
    boolean boolean6 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) throwable4);
    java.lang.String str7 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str8 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService9 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery10 = null;
    queryLoggingService9.strForEx(executingQuery10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    java.lang.Throwable throwable13 = null;
    queryLoggingService9.faleForExTh(executingQuery12, throwable13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    java.lang.Throwable throwable16 = null;
    queryLoggingService9.rolcForKe(kernelTransaction15, throwable16);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    queryLoggingService9.strForEx(executingQuery18);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery20 = null;
    queryLoggingService9.strForEx(executingQuery20);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery22 = null;
    queryLoggingService9.sucsForEx(executingQuery22);
    boolean boolean24 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) executingQuery22);
    org.junit.Assert.assertEquals(
        "'" + str1 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str1, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(queryLoggingService2);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "query-logging" + "'", str7,
        "query-logging");
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "query-logging" + "'", str8,
        "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService9);
    org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
  }

  @Test
  public void test0346() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0346");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    queryLoggingService0.sucsForEx(executingQuery4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    java.lang.Throwable throwable11 = null;
    queryLoggingService0.rolcForKe(kernelTransaction10, throwable11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService0.strForEx(kernelTransaction13);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0347() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0347");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    queryLoggingService0.faleForExTh(executingQuery9, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.sucsForEx(executingQuery12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    queryLoggingService0.comForKe(kernelTransaction14);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    queryLoggingService0.rolcForKe(kernelTransaction16);
    java.lang.Class<?> wildcardClass18 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass18);
  }

  @Test
  public void test0348() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0348");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    queryLoggingService0.sucsForEx(executingQuery4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.strForEx(executingQuery6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.faleForExTh(executingQuery8, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    java.lang.Throwable throwable12 = null;
    queryLoggingService0.rolcForKe(kernelTransaction11, throwable12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    queryLoggingService0.sucsForEx(executingQuery14);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    queryLoggingService0.rolcForKe(kernelTransaction16);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction18 = null;
    java.lang.Throwable throwable19 = null;
    queryLoggingService0.rolcForKe(kernelTransaction18, throwable19);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction21 = null;
    queryLoggingService0.comForKe(kernelTransaction21);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery23 = null;
    queryLoggingService0.faleForExTh(executingQuery23, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery26 = null;
    queryLoggingService0.strForEx(executingQuery26);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction28 = null;
    queryLoggingService0.strForEx(kernelTransaction28);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0349() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0349");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.faleForExTh(executingQuery1,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    queryLoggingService0.faleForExTh(executingQuery4,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction7 = null;
    java.lang.Throwable throwable8 = null;
    queryLoggingService0.rolcForKe(kernelTransaction7, throwable8);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery10 = null;
    queryLoggingService0.faleForExTh(executingQuery10, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService0.strForEx(kernelTransaction13);
    java.lang.Class<?> wildcardClass15 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass15);
  }

  @Test
  public void test0350() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0350");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    boolean boolean6 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) 0L);
    java.lang.String str7 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str8 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.Object obj9 = new java.lang.Object();
    java.lang.Class<?> wildcardClass10 = obj9.getClass();
    boolean boolean11 = queryLoggingServiceExtensionFactory0.equals(obj9);
    java.lang.String str12 = queryLoggingServiceExtensionFactory0.getName();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext13 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies14 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle15 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext13, queryLoggingServiceDependencies14);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertEquals(
        "'" + str7 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str7, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "query-logging" + "'", str8,
        "query-logging");
    org.junit.Assert.assertNotNull(wildcardClass10);
    org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "query-logging" + "'", str12,
        "query-logging");
  }

  @Test
  public void test0351() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0351");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.faleForExTh(executingQuery1,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    queryLoggingService0.faleForExTh(executingQuery4,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction7 = null;
    java.lang.Throwable throwable8 = null;
    queryLoggingService0.rolcForKe(kernelTransaction7, throwable8);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery10 = null;
    queryLoggingService0.faleForExTh(executingQuery10, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery13 = null;
    queryLoggingService0.strForEx(executingQuery13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    java.lang.Throwable throwable16 = null;
    queryLoggingService0.faleForExTh(executingQuery15, throwable16);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0352() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0352");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    queryLoggingService0.faleForExTh(executingQuery3, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.sucsForEx(executingQuery6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    java.lang.Throwable throwable9 = null;
    queryLoggingService0.faleForExTh(executingQuery8, throwable9);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    queryLoggingService0.comForKe(kernelTransaction11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    java.lang.Throwable throwable14 = null;
    queryLoggingService0.rolcForKe(kernelTransaction13, throwable14);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    queryLoggingService0.sucsForEx(executingQuery16);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0353() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0353");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.faleForExTh(executingQuery6, "hi!");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService0.faleForExTh(executingQuery9, throwable10);
    java.lang.Class<?> wildcardClass12 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass12);
  }

  @Test
  public void test0354() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0354");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService0.comForKe(kernelTransaction9);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    java.lang.Throwable throwable12 = null;
    queryLoggingService0.rolcForKe(kernelTransaction11, throwable12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    queryLoggingService0.strForEx(executingQuery14);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    java.lang.Throwable throwable17 = null;
    queryLoggingService0.rolcForKe(kernelTransaction16, throwable17);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery19 = null;
    queryLoggingService0.faleForExTh(executingQuery19, "hi!");
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0355() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0355");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.comForKe(kernelTransaction10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    java.lang.Throwable throwable13 = null;
    queryLoggingService0.rolcForKe(kernelTransaction12, throwable13);
    java.lang.Class<?> wildcardClass15 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass15);
  }

  @Test
  public void test0356() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0356");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    java.lang.Throwable throwable5 = null;
    queryLoggingService0.faleForExTh(executingQuery4, throwable5);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery7 = null;
    java.lang.Throwable throwable8 = null;
    queryLoggingService0.faleForExTh(executingQuery7, throwable8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    java.lang.Throwable throwable11 = null;
    queryLoggingService0.rolcForKe(kernelTransaction10, throwable11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService0.strForEx(kernelTransaction13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService0.faleForExTh(executingQuery15, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    queryLoggingService0.faleForExTh(executingQuery18, "hi!");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction21 = null;
    queryLoggingService0.rolcForKe(kernelTransaction21);
    java.lang.Class<?> wildcardClass23 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass23);
  }

  @Test
  public void test0357() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0357");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    java.lang.String str5 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str6 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService7 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction8 = null;
    queryLoggingService7.rolcForKe(kernelTransaction8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    java.lang.Throwable throwable11 = null;
    queryLoggingService7.rolcForKe(kernelTransaction10, throwable11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService7.rolcForKe(kernelTransaction13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService7.sucsForEx(executingQuery15);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery17 = null;
    queryLoggingService7.faleForExTh(executingQuery17, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction20 = null;
    queryLoggingService7.strForEx(kernelTransaction20);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction22 = null;
    queryLoggingService7.rolcForKe(kernelTransaction22);
    boolean boolean24 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingService7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction25 = null;
    queryLoggingService7.rolcForKe(kernelTransaction25);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction27 = null;
    queryLoggingService7.strForEx(kernelTransaction27);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery29 = null;
    java.lang.Throwable throwable30 = null;
    queryLoggingService7.faleForExTh(executingQuery29, throwable30);
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertEquals(
        "'" + str5 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str5, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "query-logging" + "'", str6,
        "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService7);
    org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
  }

  @Test
  public void test0358() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0358");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction8 = null;
    java.lang.Throwable throwable9 = null;
    queryLoggingService0.rolcForKe(kernelTransaction8, throwable9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    queryLoggingService0.sucsForEx(executingQuery11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService0.comForKe(kernelTransaction13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    queryLoggingService0.rolcForKe(kernelTransaction15);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction17 = null;
    queryLoggingService0.comForKe(kernelTransaction17);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0359() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0359");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    queryLoggingService0.strForEx(executingQuery3);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction5 = null;
    queryLoggingService0.rolcForKe(kernelTransaction5);
    java.lang.Class<?> wildcardClass7 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass7);
  }

  @Test
  public void test0360() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0360");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.faleForExTh(executingQuery1,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    queryLoggingService0.faleForExTh(executingQuery4,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction7 = null;
    queryLoggingService0.strForEx(kernelTransaction7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService0.rolcForKe(kernelTransaction9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    queryLoggingService0.strForEx(executingQuery11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService0.rolcForKe(kernelTransaction13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService0.strForEx(executingQuery15);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery17 = null;
    queryLoggingService0.strForEx(executingQuery17);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0361() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0361");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService0.comForKe(kernelTransaction9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    queryLoggingService0.strForEx(executingQuery11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    java.lang.Throwable throwable14 = null;
    queryLoggingService0.rolcForKe(kernelTransaction13, throwable14);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    queryLoggingService0.comForKe(kernelTransaction16);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    java.lang.Throwable throwable19 = null;
    queryLoggingService0.faleForExTh(executingQuery18, throwable19);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery21 = null;
    queryLoggingService0.strForEx(executingQuery21);
    java.lang.Class<?> wildcardClass23 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass23);
  }

  @Test
  public void test0362() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0362");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.strForEx(kernelTransaction10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.faleForExTh(executingQuery12,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService0.faleForExTh(executingQuery15, "query-logging");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction18 = null;
    queryLoggingService0.rolcForKe(kernelTransaction18);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery20 = null;
    queryLoggingService0.strForEx(executingQuery20);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery22 = null;
    queryLoggingService0.faleForExTh(executingQuery22, "hi!");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction25 = null;
    queryLoggingService0.strForEx(kernelTransaction25);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery27 = null;
    queryLoggingService0.strForEx(executingQuery27);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery29 = null;
    queryLoggingService0.sucsForEx(executingQuery29);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0363() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0363");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    queryLoggingService0.sucsForEx(executingQuery4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.comForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.faleForExTh(executingQuery8, "query-logging");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    queryLoggingService0.strForEx(kernelTransaction11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService0.comForKe(kernelTransaction13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    queryLoggingService0.comForKe(kernelTransaction15);
    java.lang.Class<?> wildcardClass17 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass17);
  }

  @Test
  public void test0364() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0364");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    java.lang.String str5 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str6 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str7 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str8 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService9 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService9.rolcForKe(kernelTransaction10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    java.lang.Throwable throwable13 = null;
    queryLoggingService9.rolcForKe(kernelTransaction12, throwable13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService9.faleForExTh(executingQuery15, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction18 = null;
    queryLoggingService9.rolcForKe(kernelTransaction18);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction20 = null;
    queryLoggingService9.rolcForKe(kernelTransaction20);
    java.lang.Class<?> wildcardClass22 = queryLoggingService9.getClass();
    boolean boolean23 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) wildcardClass22);
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext24 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies25 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle26 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext24, queryLoggingServiceDependencies25);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertEquals(
        "'" + str5 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str5, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals(
        "'" + str6 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str6, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals(
        "'" + str7 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str7, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals(
        "'" + str8 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str8, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(queryLoggingService9);
    org.junit.Assert.assertNotNull(wildcardClass22);
    org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
  }

  @Test
  public void test0365() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0365");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    queryLoggingService0.faleForExTh(executingQuery3, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.faleForExTh(executingQuery6, throwable7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService0.faleForExTh(executingQuery9, throwable10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    queryLoggingService0.strForEx(kernelTransaction12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    queryLoggingService0.strForEx(kernelTransaction14);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    queryLoggingService0.strForEx(kernelTransaction16);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    queryLoggingService0.strForEx(executingQuery18);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery20 = null;
    queryLoggingService0.faleForExTh(executingQuery20, "hi!");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery23 = null;
    queryLoggingService0.sucsForEx(executingQuery23);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0366() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0366");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.sucsForEx(executingQuery6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.strForEx(executingQuery8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.strForEx(kernelTransaction10);
    java.lang.Class<?> wildcardClass12 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass12);
  }

  @Test
  public void test0367() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0367");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService5 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService5.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction8 = null;
    java.lang.Throwable throwable9 = null;
    queryLoggingService5.rolcForKe(kernelTransaction8, throwable9);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    queryLoggingService5.rolcForKe(kernelTransaction11);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery13 = null;
    queryLoggingService5.sucsForEx(executingQuery13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    queryLoggingService5.strForEx(kernelTransaction15);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery17 = null;
    queryLoggingService5.faleForExTh(executingQuery17,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    boolean boolean20 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService21 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery22 = null;
    queryLoggingService21.faleForExTh(executingQuery22,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction25 = null;
    queryLoggingService21.rolcForKe(kernelTransaction25);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction27 = null;
    java.lang.Throwable throwable28 = null;
    queryLoggingService21.rolcForKe(kernelTransaction27, throwable28);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery30 = null;
    queryLoggingService21.strForEx(executingQuery30);
    boolean boolean32 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingService21);
    java.lang.Class<?> wildcardClass33 = queryLoggingServiceExtensionFactory0.getClass();
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertNotNull(queryLoggingService5);
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    org.junit.Assert.assertNotNull(queryLoggingService21);
    org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    org.junit.Assert.assertNotNull(wildcardClass33);
  }

  @Test
  public void test0368() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0368");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    queryLoggingService0.sucsForEx(executingQuery4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction8 = null;
    java.lang.Throwable throwable9 = null;
    queryLoggingService0.rolcForKe(kernelTransaction8, throwable9);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0369() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0369");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.faleForExTh(executingQuery6, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService0.rolcForKe(kernelTransaction9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    java.lang.Throwable throwable12 = null;
    queryLoggingService0.faleForExTh(executingQuery11, throwable12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    queryLoggingService0.comForKe(kernelTransaction14);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0370() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0370");
    }
    io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl diagnosticsOfflineReportProviderQueryLoggingImpl0 = new io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction1 = null;
    org.neo4j.configuration.Config config3 = null;
    java.nio.file.Path path4 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction1, "hi!", config3,
        path4);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.configuration.Config config8 = null;
    java.nio.file.Path path9 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction6, "query-logging",
        config8, path9);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction11 = null;
    org.neo4j.configuration.Config config13 = null;
    java.nio.file.Path path14 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction11,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config13, path14);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction16 = null;
    org.neo4j.configuration.Config config18 = null;
    java.nio.file.Path path19 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction16, "", config18,
        path19);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction21 = null;
    org.neo4j.configuration.Config config23 = null;
    java.nio.file.Path path24 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction21, "", config23,
        path24);
    java.lang.Class<?> wildcardClass26 = diagnosticsOfflineReportProviderQueryLoggingImpl0.getClass();
    org.junit.Assert.assertNotNull(wildcardClass26);
  }

  @Test
  public void test0371() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0371");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (short) 1);
    java.lang.String str3 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str4 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService5 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService5.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService5.comForKe(kernelTransaction9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    java.lang.Throwable throwable12 = null;
    queryLoggingService5.faleForExTh(executingQuery11, throwable12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    queryLoggingService5.rolcForKe(kernelTransaction14);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    java.lang.Throwable throwable17 = null;
    queryLoggingService5.faleForExTh(executingQuery16, throwable17);
    java.lang.Class<?> wildcardClass19 = queryLoggingService5.getClass();
    boolean boolean20 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) wildcardClass19);
    java.lang.String str21 = queryLoggingServiceExtensionFactory0.getName();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext22 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies23 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle24 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext22, queryLoggingServiceDependencies23);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str3 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str3, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "query-logging" + "'", str4,
        "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService5);
    org.junit.Assert.assertNotNull(wildcardClass19);
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    org.junit.Assert.assertEquals("'" + str21 + "' != '" + "query-logging" + "'", str21,
        "query-logging");
  }

  @Test
  public void test0372() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0372");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory3 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str4 = queryLoggingServiceExtensionFactory3.toString();
    boolean boolean5 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory3);
    boolean boolean7 = queryLoggingServiceExtensionFactory3.equals((java.lang.Object) 100.0d);
    java.lang.String str8 = queryLoggingServiceExtensionFactory3.toString();
    java.lang.String str9 = queryLoggingServiceExtensionFactory3.getName();
    java.lang.Object obj10 = null;
    boolean boolean11 = queryLoggingServiceExtensionFactory3.equals(obj10);
    java.lang.String str12 = queryLoggingServiceExtensionFactory3.toString();
    io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl diagnosticsOfflineReportProviderQueryLoggingImpl13 = new io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction14 = null;
    org.neo4j.configuration.Config config16 = null;
    java.nio.file.Path path17 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl13.init(fileSystemAbstraction14, "hi!",
        config16, path17);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction19 = null;
    org.neo4j.configuration.Config config21 = null;
    java.nio.file.Path path22 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl13.init(fileSystemAbstraction19,
        "query-logging", config21, path22);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction24 = null;
    org.neo4j.configuration.Config config26 = null;
    java.nio.file.Path path27 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl13.init(fileSystemAbstraction24,
        "query-logging", config26, path27);
    boolean boolean29 = queryLoggingServiceExtensionFactory3.equals(
        (java.lang.Object) "query-logging");
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str4 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str4, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    org.junit.Assert.assertEquals(
        "'" + str8 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str8, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "query-logging" + "'", str9,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str12, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
  }

  @Test
  public void test0373() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0373");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str1 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService2 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService2.rolcForKe(kernelTransaction3, throwable4);
    boolean boolean6 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) throwable4);
    java.lang.String str7 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str8 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl diagnosticsOfflineReportProviderQueryLoggingImpl9 = new io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction10 = null;
    org.neo4j.configuration.Config config12 = null;
    java.nio.file.Path path13 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl9.init(fileSystemAbstraction10, "hi!", config12,
        path13);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction15 = null;
    org.neo4j.configuration.Config config17 = null;
    java.nio.file.Path path18 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl9.init(fileSystemAbstraction15,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config17, path18);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction20 = null;
    org.neo4j.configuration.Config config22 = null;
    java.nio.file.Path path23 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl9.init(fileSystemAbstraction20,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config22, path23);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction25 = null;
    org.neo4j.configuration.Config config27 = null;
    java.nio.file.Path path28 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl9.init(fileSystemAbstraction25, "query-logging",
        config27, path28);
    boolean boolean30 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) fileSystemAbstraction25);
    boolean boolean32 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) 0.0f);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService33 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery34 = null;
    queryLoggingService33.strForEx(executingQuery34);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery36 = null;
    java.lang.Throwable throwable37 = null;
    queryLoggingService33.faleForExTh(executingQuery36, throwable37);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction39 = null;
    java.lang.Throwable throwable40 = null;
    queryLoggingService33.rolcForKe(kernelTransaction39, throwable40);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery42 = null;
    queryLoggingService33.faleForExTh(executingQuery42, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery45 = null;
    queryLoggingService33.sucsForEx(executingQuery45);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery47 = null;
    java.lang.Throwable throwable48 = null;
    queryLoggingService33.faleForExTh(executingQuery47, throwable48);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery50 = null;
    queryLoggingService33.strForEx(executingQuery50);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction52 = null;
    java.lang.Throwable throwable53 = null;
    queryLoggingService33.rolcForKe(kernelTransaction52, throwable53);
    boolean boolean55 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) throwable53);
    java.lang.String str56 = queryLoggingServiceExtensionFactory0.getName();
    org.junit.Assert.assertEquals(
        "'" + str1 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str1, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(queryLoggingService2);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertEquals(
        "'" + str7 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str7, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals(
        "'" + str8 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str8, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    org.junit.Assert.assertNotNull(queryLoggingService33);
    org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    org.junit.Assert.assertEquals("'" + str56 + "' != '" + "query-logging" + "'", str56,
        "query-logging");
  }

  @Test
  public void test0374() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0374");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    java.lang.Throwable throwable5 = null;
    queryLoggingService0.faleForExTh(executingQuery4, throwable5);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery7 = null;
    java.lang.Throwable throwable8 = null;
    queryLoggingService0.faleForExTh(executingQuery7, throwable8);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery10 = null;
    queryLoggingService0.sucsForEx(executingQuery10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.sucsForEx(executingQuery12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    java.lang.Throwable throwable15 = null;
    queryLoggingService0.rolcForKe(kernelTransaction14, throwable15);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0375() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0375");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    queryLoggingService0.faleForExTh(executingQuery9, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.sucsForEx(executingQuery12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    queryLoggingService0.comForKe(kernelTransaction14);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    java.lang.Throwable throwable17 = null;
    queryLoggingService0.rolcForKe(kernelTransaction16, throwable17);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery19 = null;
    queryLoggingService0.sucsForEx(executingQuery19);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0376() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0376");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str1 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory2 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean4 = queryLoggingServiceExtensionFactory2.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory5 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str6 = queryLoggingServiceExtensionFactory5.toString();
    boolean boolean7 = queryLoggingServiceExtensionFactory2.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory5);
    java.lang.String str8 = queryLoggingServiceExtensionFactory2.getName();
    java.lang.String str9 = queryLoggingServiceExtensionFactory2.getName();
    boolean boolean10 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory2);
    java.lang.String str11 = queryLoggingServiceExtensionFactory2.toString();
    java.lang.String str12 = queryLoggingServiceExtensionFactory2.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService13 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    queryLoggingService13.rolcForKe(kernelTransaction14);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    java.lang.Throwable throwable17 = null;
    queryLoggingService13.rolcForKe(kernelTransaction16, throwable17);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction19 = null;
    java.lang.Throwable throwable20 = null;
    queryLoggingService13.rolcForKe(kernelTransaction19, throwable20);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction22 = null;
    java.lang.Throwable throwable23 = null;
    queryLoggingService13.rolcForKe(kernelTransaction22, throwable23);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction25 = null;
    queryLoggingService13.rolcForKe(kernelTransaction25);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction27 = null;
    queryLoggingService13.rolcForKe(kernelTransaction27);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction29 = null;
    java.lang.Throwable throwable30 = null;
    queryLoggingService13.rolcForKe(kernelTransaction29, throwable30);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction32 = null;
    java.lang.Throwable throwable33 = null;
    queryLoggingService13.rolcForKe(kernelTransaction32, throwable33);
    boolean boolean35 = queryLoggingServiceExtensionFactory2.equals(
        (java.lang.Object) queryLoggingService13);
    java.lang.Class<?> wildcardClass36 = queryLoggingService13.getClass();
    org.junit.Assert.assertEquals(
        "'" + str1 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str1, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertEquals(
        "'" + str6 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str6, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "query-logging" + "'", str8,
        "query-logging");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "query-logging" + "'", str9,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str11, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "query-logging" + "'", str12,
        "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService13);
    org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    org.junit.Assert.assertNotNull(wildcardClass36);
  }

  @Test
  public void test0377() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0377");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    queryLoggingService0.faleForExTh(executingQuery3, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.faleForExTh(executingQuery6, throwable7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService0.strForEx(kernelTransaction9);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    queryLoggingService0.strForEx(kernelTransaction11);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery13 = null;
    queryLoggingService0.strForEx(executingQuery13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    queryLoggingService0.strForEx(kernelTransaction15);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0378() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0378");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    queryLoggingService0.faleForExTh(executingQuery9, "query-logging");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.sucsForEx(executingQuery12);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0379() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0379");
    }
    io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl diagnosticsOfflineReportProviderQueryLoggingImpl0 = new io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction1 = null;
    org.neo4j.configuration.Config config3 = null;
    java.nio.file.Path path4 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction1,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config3, path4);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.configuration.Config config8 = null;
    java.nio.file.Path path9 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction6,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config8, path9);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction11 = null;
    org.neo4j.configuration.Config config13 = null;
    java.nio.file.Path path14 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction11, "hi!", config13,
        path14);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction16 = null;
    org.neo4j.configuration.Config config18 = null;
    java.nio.file.Path path19 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction16, "hi!", config18,
        path19);
  }

  @Test
  public void test0380() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0380");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.faleForExTh(executingQuery8, "hi!");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    queryLoggingService0.strForEx(kernelTransaction11);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery13 = null;
    java.lang.Throwable throwable14 = null;
    queryLoggingService0.faleForExTh(executingQuery13, throwable14);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    queryLoggingService0.faleForExTh(executingQuery16, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery19 = null;
    queryLoggingService0.strForEx(executingQuery19);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction21 = null;
    queryLoggingService0.strForEx(kernelTransaction21);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction23 = null;
    java.lang.Throwable throwable24 = null;
    queryLoggingService0.rolcForKe(kernelTransaction23, throwable24);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery26 = null;
    queryLoggingService0.sucsForEx(executingQuery26);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction28 = null;
    queryLoggingService0.rolcForKe(kernelTransaction28);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0381() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0381");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery10 = null;
    queryLoggingService0.strForEx(executingQuery10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.sucsForEx(executingQuery12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    queryLoggingService0.comForKe(kernelTransaction14);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    queryLoggingService0.faleForExTh(executingQuery16, "");
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0382() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0382");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    java.lang.String str3 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService4 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction5 = null;
    queryLoggingService4.rolcForKe(kernelTransaction5);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction7 = null;
    queryLoggingService4.strForEx(kernelTransaction7);
    java.lang.Class<?> wildcardClass9 = queryLoggingService4.getClass();
    boolean boolean10 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingService4);
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext11 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies12 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle13 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext11, queryLoggingServiceDependencies12);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str3 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str3, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(queryLoggingService4);
    org.junit.Assert.assertNotNull(wildcardClass9);
    org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
  }

  @Test
  public void test0383() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0383");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction4 = null;
    queryLoggingService0.comForKe(kernelTransaction4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.faleForExTh(executingQuery6, throwable7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService0.comForKe(kernelTransaction9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    queryLoggingService0.sucsForEx(executingQuery11);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery13 = null;
    queryLoggingService0.strForEx(executingQuery13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    queryLoggingService0.strForEx(kernelTransaction15);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery17 = null;
    queryLoggingService0.faleForExTh(executingQuery17, "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0384() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0384");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory3 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str4 = queryLoggingServiceExtensionFactory3.toString();
    boolean boolean5 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory3);
    boolean boolean7 = queryLoggingServiceExtensionFactory3.equals((java.lang.Object) 100.0d);
    java.lang.String str8 = queryLoggingServiceExtensionFactory3.toString();
    java.lang.String str9 = queryLoggingServiceExtensionFactory3.getName();
    java.lang.String str10 = queryLoggingServiceExtensionFactory3.getName();
    java.lang.String str11 = queryLoggingServiceExtensionFactory3.toString();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext12 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies13 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle14 = queryLoggingServiceExtensionFactory3.newInstance(
          extensionContext12, queryLoggingServiceDependencies13);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str4 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str4, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    org.junit.Assert.assertEquals(
        "'" + str8 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str8, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "query-logging" + "'", str9,
        "query-logging");
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "query-logging" + "'", str10,
        "query-logging");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str11, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
  }

  @Test
  public void test0385() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0385");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.strForEx(kernelTransaction10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.faleForExTh(executingQuery12,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService0.faleForExTh(executingQuery15, "query-logging");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    queryLoggingService0.faleForExTh(executingQuery18, "hi!");
    java.lang.Class<?> wildcardClass21 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass21);
  }

  @Test
  public void test0386() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0386");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction4 = null;
    java.lang.Throwable throwable5 = null;
    queryLoggingService0.rolcForKe(kernelTransaction4, throwable5);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService0.rolcForKe(kernelTransaction9, throwable10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.strForEx(executingQuery12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    queryLoggingService0.comForKe(kernelTransaction14);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0387() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0387");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    queryLoggingService0.strForEx(executingQuery3);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery5 = null;
    queryLoggingService0.sucsForEx(executingQuery5);
    java.lang.Class<?> wildcardClass7 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass7);
  }

  @Test
  public void test0388() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0388");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery10 = null;
    queryLoggingService0.strForEx(executingQuery10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.sucsForEx(executingQuery12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    queryLoggingService0.sucsForEx(executingQuery14);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    queryLoggingService0.sucsForEx(executingQuery16);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    queryLoggingService0.strForEx(executingQuery18);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction20 = null;
    java.lang.Throwable throwable21 = null;
    queryLoggingService0.rolcForKe(kernelTransaction20, throwable21);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction23 = null;
    java.lang.Throwable throwable24 = null;
    queryLoggingService0.rolcForKe(kernelTransaction23, throwable24);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery26 = null;
    queryLoggingService0.faleForExTh(executingQuery26, "hi!");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction29 = null;
    queryLoggingService0.strForEx(kernelTransaction29);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0389() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0389");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.faleForExTh(executingQuery6, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService0.rolcForKe(kernelTransaction9, throwable10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.strForEx(executingQuery12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    queryLoggingService0.strForEx(executingQuery14);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0390() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0390");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.strForEx(kernelTransaction10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    java.lang.Throwable throwable13 = null;
    queryLoggingService0.faleForExTh(executingQuery12, throwable13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    queryLoggingService0.comForKe(kernelTransaction15);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery17 = null;
    queryLoggingService0.faleForExTh(executingQuery17, "hi!");
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0391() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0391");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService0.comForKe(kernelTransaction9);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    java.lang.Throwable throwable12 = null;
    queryLoggingService0.rolcForKe(kernelTransaction11, throwable12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    queryLoggingService0.sucsForEx(executingQuery14);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    queryLoggingService0.rolcForKe(kernelTransaction16);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    queryLoggingService0.strForEx(executingQuery18);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0392() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0392");
    }
    io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl diagnosticsOfflineReportProviderQueryLoggingImpl0 = new io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction1 = null;
    org.neo4j.configuration.Config config3 = null;
    java.nio.file.Path path4 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction1, "hi!", config3,
        path4);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.configuration.Config config8 = null;
    java.nio.file.Path path9 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction6, "query-logging",
        config8, path9);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction11 = null;
    org.neo4j.configuration.Config config13 = null;
    java.nio.file.Path path14 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction11,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config13, path14);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction16 = null;
    org.neo4j.configuration.Config config18 = null;
    java.nio.file.Path path19 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction16, "", config18,
        path19);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction21 = null;
    org.neo4j.configuration.Config config23 = null;
    java.nio.file.Path path24 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction21, "", config23,
        path24);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction26 = null;
    org.neo4j.configuration.Config config28 = null;
    java.nio.file.Path path29 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction26, "hi!", config28,
        path29);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction31 = null;
    org.neo4j.configuration.Config config33 = null;
    java.nio.file.Path path34 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction31, "", config33,
        path34);
  }

  @Test
  public void test0393() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0393");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    queryLoggingService0.faleForExTh(executingQuery3, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.faleForExTh(executingQuery6, throwable7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService0.faleForExTh(executingQuery9, throwable10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    queryLoggingService0.strForEx(kernelTransaction12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    queryLoggingService0.strForEx(kernelTransaction14);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    queryLoggingService0.comForKe(kernelTransaction16);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    java.lang.Throwable throwable19 = null;
    queryLoggingService0.faleForExTh(executingQuery18, throwable19);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery21 = null;
    queryLoggingService0.sucsForEx(executingQuery21);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0394() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0394");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService0.faleForExTh(executingQuery9, throwable10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    queryLoggingService0.strForEx(kernelTransaction12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    queryLoggingService0.sucsForEx(executingQuery14);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    queryLoggingService0.faleForExTh(executingQuery16,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction19 = null;
    queryLoggingService0.comForKe(kernelTransaction19);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction21 = null;
    queryLoggingService0.rolcForKe(kernelTransaction21);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0395() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0395");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    queryLoggingService0.sucsForEx(executingQuery4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.sucsForEx(executingQuery6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.faleForExTh(executingQuery8, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    queryLoggingService0.rolcForKe(kernelTransaction11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService0.strForEx(kernelTransaction13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService0.faleForExTh(executingQuery15, "hi!");
    java.lang.Class<?> wildcardClass18 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass18);
  }

  @Test
  public void test0396() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0396");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.strForEx(kernelTransaction10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.faleForExTh(executingQuery12,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    queryLoggingService0.strForEx(kernelTransaction15);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery17 = null;
    queryLoggingService0.sucsForEx(executingQuery17);
    java.lang.Class<?> wildcardClass19 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass19);
  }

  @Test
  public void test0397() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0397");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    queryLoggingService0.sucsForEx(executingQuery4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.strForEx(executingQuery6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.faleForExTh(executingQuery8, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    queryLoggingService0.comForKe(kernelTransaction11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService0.rolcForKe(kernelTransaction13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    java.lang.Throwable throwable16 = null;
    queryLoggingService0.rolcForKe(kernelTransaction15, throwable16);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0398() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0398");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (short) 1);
    java.lang.String str3 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService4 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery5 = null;
    queryLoggingService4.strForEx(executingQuery5);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery7 = null;
    java.lang.Throwable throwable8 = null;
    queryLoggingService4.faleForExTh(executingQuery7, throwable8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    java.lang.Throwable throwable11 = null;
    queryLoggingService4.rolcForKe(kernelTransaction10, throwable11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService4.comForKe(kernelTransaction13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService4.strForEx(executingQuery15);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery17 = null;
    queryLoggingService4.strForEx(executingQuery17);
    boolean boolean19 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) executingQuery17);
    java.lang.String str20 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str21 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService22 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction23 = null;
    java.lang.Throwable throwable24 = null;
    queryLoggingService22.rolcForKe(kernelTransaction23, throwable24);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery26 = null;
    java.lang.Throwable throwable27 = null;
    queryLoggingService22.faleForExTh(executingQuery26, throwable27);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery29 = null;
    java.lang.Throwable throwable30 = null;
    queryLoggingService22.faleForExTh(executingQuery29, throwable30);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction32 = null;
    java.lang.Throwable throwable33 = null;
    queryLoggingService22.rolcForKe(kernelTransaction32, throwable33);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction35 = null;
    queryLoggingService22.strForEx(kernelTransaction35);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery37 = null;
    queryLoggingService22.faleForExTh(executingQuery37, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery40 = null;
    queryLoggingService22.strForEx(executingQuery40);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery42 = null;
    queryLoggingService22.faleForExTh(executingQuery42, "hi!");
    boolean boolean45 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingService22);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction46 = null;
    java.lang.Throwable throwable47 = null;
    queryLoggingService22.rolcForKe(kernelTransaction46, throwable47);
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "query-logging" + "'", str3,
        "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService4);
    org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "query-logging" + "'", str20,
        "query-logging");
    org.junit.Assert.assertEquals("'" + str21 + "' != '" + "query-logging" + "'", str21,
        "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService22);
    org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
  }

  @Test
  public void test0399() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0399");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction4 = null;
    queryLoggingService0.comForKe(kernelTransaction4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction8 = null;
    queryLoggingService0.rolcForKe(kernelTransaction8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    java.lang.Throwable throwable11 = null;
    queryLoggingService0.rolcForKe(kernelTransaction10, throwable11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService0.comForKe(kernelTransaction13);
    java.lang.Class<?> wildcardClass15 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass15);
  }

  @Test
  public void test0400() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0400");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    queryLoggingService0.sucsForEx(executingQuery4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.strForEx(executingQuery6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.faleForExTh(executingQuery8, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    java.lang.Throwable throwable12 = null;
    queryLoggingService0.rolcForKe(kernelTransaction11, throwable12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    queryLoggingService0.sucsForEx(executingQuery14);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    queryLoggingService0.rolcForKe(kernelTransaction16);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction18 = null;
    java.lang.Throwable throwable19 = null;
    queryLoggingService0.rolcForKe(kernelTransaction18, throwable19);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction21 = null;
    queryLoggingService0.comForKe(kernelTransaction21);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction23 = null;
    java.lang.Throwable throwable24 = null;
    queryLoggingService0.rolcForKe(kernelTransaction23, throwable24);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery26 = null;
    java.lang.Throwable throwable27 = null;
    queryLoggingService0.faleForExTh(executingQuery26, throwable27);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0401() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0401");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    boolean boolean6 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) 0L);
    java.lang.String str7 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str8 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str9 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService10 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    java.lang.Throwable throwable12 = null;
    queryLoggingService10.rolcForKe(kernelTransaction11, throwable12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    queryLoggingService10.comForKe(kernelTransaction14);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    java.lang.Throwable throwable17 = null;
    queryLoggingService10.faleForExTh(executingQuery16, throwable17);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction19 = null;
    queryLoggingService10.comForKe(kernelTransaction19);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery21 = null;
    queryLoggingService10.strForEx(executingQuery21);
    boolean boolean23 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingService10);
    java.lang.String str24 = queryLoggingServiceExtensionFactory0.toString();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext25 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies26 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle27 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext25, queryLoggingServiceDependencies26);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertEquals(
        "'" + str7 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str7, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "query-logging" + "'", str8,
        "query-logging");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "query-logging" + "'", str9,
        "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService10);
    org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    org.junit.Assert.assertEquals(
        "'" + str24 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str24, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
  }

  @Test
  public void test0402() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0402");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery10 = null;
    queryLoggingService0.faleForExTh(executingQuery10, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService0.strForEx(kernelTransaction13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    queryLoggingService0.comForKe(kernelTransaction15);
    java.lang.Class<?> wildcardClass17 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass17);
  }

  @Test
  public void test0403() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0403");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str1 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory2 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory3 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean5 = queryLoggingServiceExtensionFactory3.equals((java.lang.Object) (-1L));
    boolean boolean6 = queryLoggingServiceExtensionFactory2.equals((java.lang.Object) boolean5);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService7 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction8 = null;
    queryLoggingService7.rolcForKe(kernelTransaction8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    java.lang.Throwable throwable11 = null;
    queryLoggingService7.rolcForKe(kernelTransaction10, throwable11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService7.rolcForKe(kernelTransaction13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService7.sucsForEx(executingQuery15);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction17 = null;
    queryLoggingService7.strForEx(kernelTransaction17);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery19 = null;
    queryLoggingService7.faleForExTh(executingQuery19,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    boolean boolean22 = queryLoggingServiceExtensionFactory2.equals(
        (java.lang.Object) "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService23 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction24 = null;
    queryLoggingService23.rolcForKe(kernelTransaction24);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction26 = null;
    java.lang.Throwable throwable27 = null;
    queryLoggingService23.rolcForKe(kernelTransaction26, throwable27);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction29 = null;
    queryLoggingService23.rolcForKe(kernelTransaction29);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery31 = null;
    queryLoggingService23.sucsForEx(executingQuery31);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction33 = null;
    queryLoggingService23.strForEx(kernelTransaction33);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery35 = null;
    queryLoggingService23.faleForExTh(executingQuery35,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction38 = null;
    java.lang.Throwable throwable39 = null;
    queryLoggingService23.rolcForKe(kernelTransaction38, throwable39);
    boolean boolean41 = queryLoggingServiceExtensionFactory2.equals(
        (java.lang.Object) queryLoggingService23);
    java.lang.String str42 = queryLoggingServiceExtensionFactory2.getName();
    boolean boolean43 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory2);
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext44 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies45 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle46 = queryLoggingServiceExtensionFactory2.newInstance(
          extensionContext44, queryLoggingServiceDependencies45);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertEquals(
        "'" + str1 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str1, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertNotNull(queryLoggingService7);
    org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    org.junit.Assert.assertNotNull(queryLoggingService23);
    org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    org.junit.Assert.assertEquals("'" + str42 + "' != '" + "query-logging" + "'", str42,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
  }

  @Test
  public void test0404() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0404");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    queryLoggingService0.faleForExTh(executingQuery3, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.sucsForEx(executingQuery6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.faleForExTh(executingQuery8, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    java.lang.Throwable throwable12 = null;
    queryLoggingService0.faleForExTh(executingQuery11, throwable12);
    java.lang.Class<?> wildcardClass14 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass14);
  }

  @Test
  public void test0405() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0405");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    queryLoggingService0.comForKe(kernelTransaction3);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction5 = null;
    queryLoggingService0.rolcForKe(kernelTransaction5);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery7 = null;
    queryLoggingService0.strForEx(executingQuery7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService0.faleForExTh(executingQuery9, throwable10);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0406() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0406");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    java.lang.Object obj5 = new java.lang.Object();
    boolean boolean6 = queryLoggingServiceExtensionFactory0.equals(obj5);
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory7 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory8 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean10 = queryLoggingServiceExtensionFactory8.equals((java.lang.Object) (-1L));
    boolean boolean11 = queryLoggingServiceExtensionFactory7.equals((java.lang.Object) boolean10);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService12 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery13 = null;
    queryLoggingService12.strForEx(executingQuery13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    java.lang.Throwable throwable16 = null;
    queryLoggingService12.faleForExTh(executingQuery15, throwable16);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction18 = null;
    queryLoggingService12.rolcForKe(kernelTransaction18);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery20 = null;
    queryLoggingService12.sucsForEx(executingQuery20);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery22 = null;
    queryLoggingService12.strForEx(executingQuery22);
    boolean boolean24 = queryLoggingServiceExtensionFactory7.equals(
        (java.lang.Object) executingQuery22);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService25 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction26 = null;
    queryLoggingService25.rolcForKe(kernelTransaction26);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction28 = null;
    java.lang.Throwable throwable29 = null;
    queryLoggingService25.rolcForKe(kernelTransaction28, throwable29);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery31 = null;
    queryLoggingService25.faleForExTh(executingQuery31, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction34 = null;
    queryLoggingService25.rolcForKe(kernelTransaction34);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery36 = null;
    java.lang.Throwable throwable37 = null;
    queryLoggingService25.faleForExTh(executingQuery36, throwable37);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery39 = null;
    queryLoggingService25.sucsForEx(executingQuery39);
    boolean boolean41 = queryLoggingServiceExtensionFactory7.equals(
        (java.lang.Object) queryLoggingService25);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService42 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction43 = null;
    java.lang.Throwable throwable44 = null;
    queryLoggingService42.rolcForKe(kernelTransaction43, throwable44);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery46 = null;
    queryLoggingService42.sucsForEx(executingQuery46);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction48 = null;
    queryLoggingService42.comForKe(kernelTransaction48);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery50 = null;
    queryLoggingService42.faleForExTh(executingQuery50, "query-logging");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction53 = null;
    queryLoggingService42.strForEx(kernelTransaction53);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction55 = null;
    queryLoggingService42.comForKe(kernelTransaction55);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery57 = null;
    queryLoggingService42.strForEx(executingQuery57);
    boolean boolean59 = queryLoggingServiceExtensionFactory7.equals(
        (java.lang.Object) queryLoggingService42);
    boolean boolean60 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean59);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService61 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery62 = null;
    queryLoggingService61.strForEx(executingQuery62);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery64 = null;
    java.lang.Throwable throwable65 = null;
    queryLoggingService61.faleForExTh(executingQuery64, throwable65);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction67 = null;
    java.lang.Throwable throwable68 = null;
    queryLoggingService61.rolcForKe(kernelTransaction67, throwable68);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery70 = null;
    queryLoggingService61.faleForExTh(executingQuery70, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery73 = null;
    queryLoggingService61.sucsForEx(executingQuery73);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery75 = null;
    queryLoggingService61.sucsForEx(executingQuery75);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction77 = null;
    queryLoggingService61.strForEx(kernelTransaction77);
    boolean boolean79 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) kernelTransaction77);
    java.lang.String str80 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService81 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction82 = null;
    java.lang.Throwable throwable83 = null;
    queryLoggingService81.rolcForKe(kernelTransaction82, throwable83);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction85 = null;
    java.lang.Throwable throwable86 = null;
    queryLoggingService81.rolcForKe(kernelTransaction85, throwable86);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction88 = null;
    queryLoggingService81.rolcForKe(kernelTransaction88);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction90 = null;
    queryLoggingService81.rolcForKe(kernelTransaction90);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery92 = null;
    java.lang.Throwable throwable93 = null;
    queryLoggingService81.faleForExTh(executingQuery92, throwable93);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery95 = null;
    queryLoggingService81.faleForExTh(executingQuery95, "query-logging");
    boolean boolean98 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) executingQuery95);
    java.lang.String str99 = queryLoggingServiceExtensionFactory0.getName();
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    org.junit.Assert.assertNotNull(queryLoggingService12);
    org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    org.junit.Assert.assertNotNull(queryLoggingService25);
    org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    org.junit.Assert.assertNotNull(queryLoggingService42);
    org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    org.junit.Assert.assertNotNull(queryLoggingService61);
    org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    org.junit.Assert.assertEquals("'" + str80 + "' != '" + "query-logging" + "'", str80,
        "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService81);
    org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    org.junit.Assert.assertEquals("'" + str99 + "' != '" + "query-logging" + "'", str99,
        "query-logging");
  }

  @Test
  public void test0407() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0407");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str1 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str2 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService3 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction4 = null;
    queryLoggingService3.rolcForKe(kernelTransaction4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService3.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService3.rolcForKe(kernelTransaction9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    queryLoggingService3.sucsForEx(executingQuery11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService3.strForEx(kernelTransaction13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    java.lang.Throwable throwable16 = null;
    queryLoggingService3.rolcForKe(kernelTransaction15, throwable16);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction18 = null;
    java.lang.Throwable throwable19 = null;
    queryLoggingService3.rolcForKe(kernelTransaction18, throwable19);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction21 = null;
    queryLoggingService3.rolcForKe(kernelTransaction21);
    boolean boolean23 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) kernelTransaction21);
    java.lang.String str24 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory25 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory26 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean28 = queryLoggingServiceExtensionFactory26.equals((java.lang.Object) (-1L));
    boolean boolean29 = queryLoggingServiceExtensionFactory25.equals((java.lang.Object) boolean28);
    java.lang.String str30 = queryLoggingServiceExtensionFactory25.toString();
    java.lang.String str31 = queryLoggingServiceExtensionFactory25.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory32 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean34 = queryLoggingServiceExtensionFactory32.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory35 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str36 = queryLoggingServiceExtensionFactory35.toString();
    boolean boolean37 = queryLoggingServiceExtensionFactory32.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory35);
    boolean boolean38 = queryLoggingServiceExtensionFactory25.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory32);
    java.lang.String str39 = queryLoggingServiceExtensionFactory32.getName();
    java.lang.String str40 = queryLoggingServiceExtensionFactory32.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService41 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction42 = null;
    queryLoggingService41.rolcForKe(kernelTransaction42);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction44 = null;
    java.lang.Throwable throwable45 = null;
    queryLoggingService41.rolcForKe(kernelTransaction44, throwable45);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction47 = null;
    queryLoggingService41.rolcForKe(kernelTransaction47);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction49 = null;
    java.lang.Throwable throwable50 = null;
    queryLoggingService41.rolcForKe(kernelTransaction49, throwable50);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery52 = null;
    queryLoggingService41.faleForExTh(executingQuery52, "hi!");
    boolean boolean55 = queryLoggingServiceExtensionFactory32.equals(
        (java.lang.Object) queryLoggingService41);
    java.lang.String str56 = queryLoggingServiceExtensionFactory32.getName();
    boolean boolean57 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) str56);
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext58 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies59 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle60 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext58, queryLoggingServiceDependencies59);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertEquals(
        "'" + str1 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str1, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals(
        "'" + str2 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str2, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(queryLoggingService3);
    org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    org.junit.Assert.assertEquals(
        "'" + str24 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str24, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    org.junit.Assert.assertEquals(
        "'" + str30 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str30, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str31 + "' != '" + "query-logging" + "'", str31,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    org.junit.Assert.assertEquals(
        "'" + str36 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str36, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    org.junit.Assert.assertEquals("'" + str39 + "' != '" + "query-logging" + "'", str39,
        "query-logging");
    org.junit.Assert.assertEquals(
        "'" + str40 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str40, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(queryLoggingService41);
    org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    org.junit.Assert.assertEquals("'" + str56 + "' != '" + "query-logging" + "'", str56,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
  }

  @Test
  public void test0408() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0408");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    queryLoggingService0.sucsForEx(executingQuery4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.sucsForEx(executingQuery6);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction8 = null;
    java.lang.Throwable throwable9 = null;
    queryLoggingService0.rolcForKe(kernelTransaction8, throwable9);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0409() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0409");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService0.comForKe(kernelTransaction9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    queryLoggingService0.strForEx(executingQuery11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    java.lang.Throwable throwable14 = null;
    queryLoggingService0.rolcForKe(kernelTransaction13, throwable14);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    queryLoggingService0.comForKe(kernelTransaction16);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    java.lang.Throwable throwable19 = null;
    queryLoggingService0.faleForExTh(executingQuery18, throwable19);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery21 = null;
    queryLoggingService0.strForEx(executingQuery21);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction23 = null;
    java.lang.Throwable throwable24 = null;
    queryLoggingService0.rolcForKe(kernelTransaction23, throwable24);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0410() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0410");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.faleForExTh(executingQuery8, "hi!");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    queryLoggingService0.strForEx(kernelTransaction11);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery13 = null;
    java.lang.Throwable throwable14 = null;
    queryLoggingService0.faleForExTh(executingQuery13, throwable14);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    queryLoggingService0.strForEx(kernelTransaction16);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction18 = null;
    queryLoggingService0.comForKe(kernelTransaction18);
    java.lang.Class<?> wildcardClass20 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass20);
  }

  @Test
  public void test0411() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0411");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction8 = null;
    java.lang.Throwable throwable9 = null;
    queryLoggingService0.rolcForKe(kernelTransaction8, throwable9);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    queryLoggingService0.rolcForKe(kernelTransaction11);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery13 = null;
    queryLoggingService0.strForEx(executingQuery13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    java.lang.Throwable throwable16 = null;
    queryLoggingService0.rolcForKe(kernelTransaction15, throwable16);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0412() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0412");
    }
    io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl diagnosticsOfflineReportProviderQueryLoggingImpl0 = new io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction1 = null;
    org.neo4j.configuration.Config config3 = null;
    java.nio.file.Path path4 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction1, "", config3,
        path4);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.configuration.Config config8 = null;
    java.nio.file.Path path9 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction6, "hi!", config8,
        path9);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction11 = null;
    org.neo4j.configuration.Config config13 = null;
    java.nio.file.Path path14 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction11,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config13, path14);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction16 = null;
    org.neo4j.configuration.Config config18 = null;
    java.nio.file.Path path19 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction16, "query-logging",
        config18, path19);
  }

  @Test
  public void test0413() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0413");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.faleForExTh(executingQuery6, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService0.rolcForKe(kernelTransaction9);
    java.lang.Class<?> wildcardClass11 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass11);
  }

  @Test
  public void test0414() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0414");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService0.comForKe(kernelTransaction9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    queryLoggingService0.faleForExTh(executingQuery11, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    java.lang.Throwable throwable15 = null;
    queryLoggingService0.rolcForKe(kernelTransaction14, throwable15);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0415() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0415");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    queryLoggingService0.faleForExTh(executingQuery3, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.sucsForEx(executingQuery6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    java.lang.Throwable throwable9 = null;
    queryLoggingService0.faleForExTh(executingQuery8, throwable9);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    queryLoggingService0.strForEx(kernelTransaction11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService0.rolcForKe(kernelTransaction13);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0416() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0416");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (short) 1);
    java.lang.String str3 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService4 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery5 = null;
    queryLoggingService4.strForEx(executingQuery5);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery7 = null;
    java.lang.Throwable throwable8 = null;
    queryLoggingService4.faleForExTh(executingQuery7, throwable8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    java.lang.Throwable throwable11 = null;
    queryLoggingService4.rolcForKe(kernelTransaction10, throwable11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService4.comForKe(kernelTransaction13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService4.strForEx(executingQuery15);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery17 = null;
    queryLoggingService4.strForEx(executingQuery17);
    boolean boolean19 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) executingQuery17);
    java.lang.String str20 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str21 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService22 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction23 = null;
    java.lang.Throwable throwable24 = null;
    queryLoggingService22.rolcForKe(kernelTransaction23, throwable24);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction26 = null;
    queryLoggingService22.comForKe(kernelTransaction26);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction28 = null;
    queryLoggingService22.rolcForKe(kernelTransaction28);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction30 = null;
    queryLoggingService22.rolcForKe(kernelTransaction30);
    boolean boolean32 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingService22);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService33 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction34 = null;
    java.lang.Throwable throwable35 = null;
    queryLoggingService33.rolcForKe(kernelTransaction34, throwable35);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction37 = null;
    queryLoggingService33.comForKe(kernelTransaction37);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction39 = null;
    queryLoggingService33.rolcForKe(kernelTransaction39);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction41 = null;
    queryLoggingService33.rolcForKe(kernelTransaction41);
    boolean boolean43 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) kernelTransaction41);
    java.lang.String str44 = queryLoggingServiceExtensionFactory0.getName();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "query-logging" + "'", str3,
        "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService4);
    org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "query-logging" + "'", str20,
        "query-logging");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str21, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(queryLoggingService22);
    org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    org.junit.Assert.assertNotNull(queryLoggingService33);
    org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    org.junit.Assert.assertEquals("'" + str44 + "' != '" + "query-logging" + "'", str44,
        "query-logging");
  }

  @Test
  public void test0417() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0417");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    queryLoggingService0.faleForExTh(executingQuery3, "query-logging");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.strForEx(kernelTransaction6);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction8 = null;
    queryLoggingService0.strForEx(kernelTransaction8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.rolcForKe(kernelTransaction10);
    java.lang.Class<?> wildcardClass12 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass12);
  }

  @Test
  public void test0418() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0418");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    boolean boolean6 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) 0L);
    java.lang.String str7 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str8 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str9 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str10 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str11 = queryLoggingServiceExtensionFactory0.toString();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext12 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies13 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle14 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext12, queryLoggingServiceDependencies13);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertEquals(
        "'" + str7 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str7, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "query-logging" + "'", str8,
        "query-logging");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "query-logging" + "'", str9,
        "query-logging");
    org.junit.Assert.assertEquals(
        "'" + str10 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str10, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str11, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
  }

  @Test
  public void test0419() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0419");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService0.faleForExTh(executingQuery9, throwable10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    queryLoggingService0.strForEx(kernelTransaction12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    queryLoggingService0.sucsForEx(executingQuery14);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    java.lang.Throwable throwable17 = null;
    queryLoggingService0.faleForExTh(executingQuery16, throwable17);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction19 = null;
    queryLoggingService0.rolcForKe(kernelTransaction19);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery21 = null;
    queryLoggingService0.strForEx(executingQuery21);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction23 = null;
    queryLoggingService0.comForKe(kernelTransaction23);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0420() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0420");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    boolean boolean6 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) 0L);
    java.lang.String str7 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str8 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str9 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str10 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory11 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory12 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean14 = queryLoggingServiceExtensionFactory12.equals((java.lang.Object) (-1L));
    boolean boolean15 = queryLoggingServiceExtensionFactory11.equals((java.lang.Object) boolean14);
    boolean boolean17 = queryLoggingServiceExtensionFactory11.equals((java.lang.Object) 0L);
    java.lang.String str18 = queryLoggingServiceExtensionFactory11.toString();
    java.lang.String str19 = queryLoggingServiceExtensionFactory11.getName();
    java.lang.Object obj20 = new java.lang.Object();
    java.lang.Class<?> wildcardClass21 = obj20.getClass();
    boolean boolean22 = queryLoggingServiceExtensionFactory11.equals(obj20);
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory23 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean25 = queryLoggingServiceExtensionFactory23.equals((java.lang.Object) (short) 1);
    java.lang.String str26 = queryLoggingServiceExtensionFactory23.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService27 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery28 = null;
    queryLoggingService27.strForEx(executingQuery28);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery30 = null;
    java.lang.Throwable throwable31 = null;
    queryLoggingService27.faleForExTh(executingQuery30, throwable31);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction33 = null;
    java.lang.Throwable throwable34 = null;
    queryLoggingService27.rolcForKe(kernelTransaction33, throwable34);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction36 = null;
    queryLoggingService27.comForKe(kernelTransaction36);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery38 = null;
    queryLoggingService27.strForEx(executingQuery38);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery40 = null;
    queryLoggingService27.strForEx(executingQuery40);
    boolean boolean42 = queryLoggingServiceExtensionFactory23.equals(
        (java.lang.Object) executingQuery40);
    boolean boolean43 = queryLoggingServiceExtensionFactory11.equals(
        (java.lang.Object) executingQuery40);
    java.lang.String str44 = queryLoggingServiceExtensionFactory11.toString();
    boolean boolean45 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory11);
    java.lang.String str46 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService47 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery48 = null;
    queryLoggingService47.faleForExTh(executingQuery48,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction51 = null;
    queryLoggingService47.rolcForKe(kernelTransaction51);
    boolean boolean53 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) kernelTransaction51);
    java.lang.String str54 = queryLoggingServiceExtensionFactory0.toString();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext55 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies56 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle57 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext55, queryLoggingServiceDependencies56);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertEquals(
        "'" + str7 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str7, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "query-logging" + "'", str8,
        "query-logging");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "query-logging" + "'", str9,
        "query-logging");
    org.junit.Assert.assertEquals(
        "'" + str10 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str10, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str18, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "query-logging" + "'", str19,
        "query-logging");
    org.junit.Assert.assertNotNull(wildcardClass21);
    org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    org.junit.Assert.assertEquals("'" + str26 + "' != '" + "query-logging" + "'", str26,
        "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService27);
    org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    org.junit.Assert.assertEquals(
        "'" + str44 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str44, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    org.junit.Assert.assertEquals(
        "'" + str46 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str46, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(queryLoggingService47);
    org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    org.junit.Assert.assertEquals(
        "'" + str54 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str54, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
  }

  @Test
  public void test0421() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0421");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery10 = null;
    queryLoggingService0.strForEx(executingQuery10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.sucsForEx(executingQuery12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    queryLoggingService0.sucsForEx(executingQuery14);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    queryLoggingService0.rolcForKe(kernelTransaction16);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    queryLoggingService0.sucsForEx(executingQuery18);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery20 = null;
    queryLoggingService0.faleForExTh(executingQuery20, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction23 = null;
    java.lang.Throwable throwable24 = null;
    queryLoggingService0.rolcForKe(kernelTransaction23, throwable24);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0422() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0422");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    boolean boolean6 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) 0L);
    java.lang.String str7 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str8 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str9 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str10 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory11 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory12 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean14 = queryLoggingServiceExtensionFactory12.equals((java.lang.Object) (-1L));
    boolean boolean15 = queryLoggingServiceExtensionFactory11.equals((java.lang.Object) boolean14);
    boolean boolean17 = queryLoggingServiceExtensionFactory11.equals((java.lang.Object) 0L);
    java.lang.String str18 = queryLoggingServiceExtensionFactory11.toString();
    java.lang.String str19 = queryLoggingServiceExtensionFactory11.getName();
    java.lang.Object obj20 = new java.lang.Object();
    java.lang.Class<?> wildcardClass21 = obj20.getClass();
    boolean boolean22 = queryLoggingServiceExtensionFactory11.equals(obj20);
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory23 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean25 = queryLoggingServiceExtensionFactory23.equals((java.lang.Object) (short) 1);
    java.lang.String str26 = queryLoggingServiceExtensionFactory23.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService27 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery28 = null;
    queryLoggingService27.strForEx(executingQuery28);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery30 = null;
    java.lang.Throwable throwable31 = null;
    queryLoggingService27.faleForExTh(executingQuery30, throwable31);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction33 = null;
    java.lang.Throwable throwable34 = null;
    queryLoggingService27.rolcForKe(kernelTransaction33, throwable34);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction36 = null;
    queryLoggingService27.comForKe(kernelTransaction36);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery38 = null;
    queryLoggingService27.strForEx(executingQuery38);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery40 = null;
    queryLoggingService27.strForEx(executingQuery40);
    boolean boolean42 = queryLoggingServiceExtensionFactory23.equals(
        (java.lang.Object) executingQuery40);
    boolean boolean43 = queryLoggingServiceExtensionFactory11.equals(
        (java.lang.Object) executingQuery40);
    java.lang.String str44 = queryLoggingServiceExtensionFactory11.toString();
    boolean boolean45 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory11);
    java.lang.String str46 = queryLoggingServiceExtensionFactory0.toString();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext47 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies48 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle49 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext47, queryLoggingServiceDependencies48);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertEquals(
        "'" + str7 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str7, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "query-logging" + "'", str8,
        "query-logging");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "query-logging" + "'", str9,
        "query-logging");
    org.junit.Assert.assertEquals(
        "'" + str10 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str10, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str18, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "query-logging" + "'", str19,
        "query-logging");
    org.junit.Assert.assertNotNull(wildcardClass21);
    org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    org.junit.Assert.assertEquals("'" + str26 + "' != '" + "query-logging" + "'", str26,
        "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService27);
    org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    org.junit.Assert.assertEquals(
        "'" + str44 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str44, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    org.junit.Assert.assertEquals(
        "'" + str46 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str46, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
  }

  @Test
  public void test0423() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0423");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    boolean boolean6 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) 0L);
    java.lang.String str7 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str8 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.Object obj9 = new java.lang.Object();
    java.lang.Class<?> wildcardClass10 = obj9.getClass();
    boolean boolean11 = queryLoggingServiceExtensionFactory0.equals(obj9);
    java.lang.String str12 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.Object obj13 = null;
    boolean boolean14 = queryLoggingServiceExtensionFactory0.equals(obj13);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService15 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    queryLoggingService15.rolcForKe(kernelTransaction16);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction18 = null;
    java.lang.Throwable throwable19 = null;
    queryLoggingService15.rolcForKe(kernelTransaction18, throwable19);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction21 = null;
    queryLoggingService15.rolcForKe(kernelTransaction21);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery23 = null;
    queryLoggingService15.sucsForEx(executingQuery23);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction25 = null;
    queryLoggingService15.strForEx(kernelTransaction25);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction27 = null;
    java.lang.Throwable throwable28 = null;
    queryLoggingService15.rolcForKe(kernelTransaction27, throwable28);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction30 = null;
    queryLoggingService15.strForEx(kernelTransaction30);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery32 = null;
    queryLoggingService15.sucsForEx(executingQuery32);
    boolean boolean34 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) executingQuery32);
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext35 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies36 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle37 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext35, queryLoggingServiceDependencies36);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertEquals(
        "'" + str7 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str7, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "query-logging" + "'", str8,
        "query-logging");
    org.junit.Assert.assertNotNull(wildcardClass10);
    org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "query-logging" + "'", str12,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    org.junit.Assert.assertNotNull(queryLoggingService15);
    org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
  }

  @Test
  public void test0424() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0424");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction8 = null;
    java.lang.Throwable throwable9 = null;
    queryLoggingService0.rolcForKe(kernelTransaction8, throwable9);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    queryLoggingService0.rolcForKe(kernelTransaction11);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery13 = null;
    queryLoggingService0.strForEx(executingQuery13);
    java.lang.Class<?> wildcardClass15 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass15);
  }

  @Test
  public void test0425() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0425");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.strForEx(kernelTransaction10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    java.lang.Throwable throwable13 = null;
    queryLoggingService0.faleForExTh(executingQuery12, throwable13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    queryLoggingService0.strForEx(kernelTransaction15);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction17 = null;
    java.lang.Throwable throwable18 = null;
    queryLoggingService0.rolcForKe(kernelTransaction17, throwable18);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery20 = null;
    java.lang.Throwable throwable21 = null;
    queryLoggingService0.faleForExTh(executingQuery20, throwable21);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0426() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0426");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory3 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str4 = queryLoggingServiceExtensionFactory3.toString();
    boolean boolean5 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory3);
    boolean boolean7 = queryLoggingServiceExtensionFactory3.equals((java.lang.Object) 100.0d);
    java.lang.String str8 = queryLoggingServiceExtensionFactory3.toString();
    java.lang.String str9 = queryLoggingServiceExtensionFactory3.getName();
    java.lang.Object obj10 = null;
    boolean boolean11 = queryLoggingServiceExtensionFactory3.equals(obj10);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService12 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    java.lang.Throwable throwable14 = null;
    queryLoggingService12.rolcForKe(kernelTransaction13, throwable14);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    queryLoggingService12.comForKe(kernelTransaction16);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    queryLoggingService12.sucsForEx(executingQuery18);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction20 = null;
    queryLoggingService12.comForKe(kernelTransaction20);
    boolean boolean22 = queryLoggingServiceExtensionFactory3.equals(
        (java.lang.Object) queryLoggingService12);
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory23 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory24 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean26 = queryLoggingServiceExtensionFactory24.equals((java.lang.Object) (-1L));
    boolean boolean27 = queryLoggingServiceExtensionFactory23.equals((java.lang.Object) boolean26);
    boolean boolean29 = queryLoggingServiceExtensionFactory23.equals((java.lang.Object) 0L);
    java.lang.String str30 = queryLoggingServiceExtensionFactory23.toString();
    java.lang.String str31 = queryLoggingServiceExtensionFactory23.getName();
    java.lang.String str32 = queryLoggingServiceExtensionFactory23.getName();
    java.lang.Class<?> wildcardClass33 = queryLoggingServiceExtensionFactory23.getClass();
    boolean boolean34 = queryLoggingServiceExtensionFactory3.equals(
        (java.lang.Object) wildcardClass33);
    java.lang.String str35 = queryLoggingServiceExtensionFactory3.toString();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext36 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies37 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle38 = queryLoggingServiceExtensionFactory3.newInstance(
          extensionContext36, queryLoggingServiceDependencies37);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str4 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str4, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    org.junit.Assert.assertEquals(
        "'" + str8 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str8, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "query-logging" + "'", str9,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    org.junit.Assert.assertNotNull(queryLoggingService12);
    org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    org.junit.Assert.assertEquals(
        "'" + str30 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str30, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str31 + "' != '" + "query-logging" + "'", str31,
        "query-logging");
    org.junit.Assert.assertEquals("'" + str32 + "' != '" + "query-logging" + "'", str32,
        "query-logging");
    org.junit.Assert.assertNotNull(wildcardClass33);
    org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    org.junit.Assert.assertEquals(
        "'" + str35 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str35, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
  }

  @Test
  public void test0427() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0427");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    java.lang.String str5 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str6 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService7 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction8 = null;
    queryLoggingService7.rolcForKe(kernelTransaction8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    java.lang.Throwable throwable11 = null;
    queryLoggingService7.rolcForKe(kernelTransaction10, throwable11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService7.rolcForKe(kernelTransaction13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService7.sucsForEx(executingQuery15);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery17 = null;
    queryLoggingService7.faleForExTh(executingQuery17, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction20 = null;
    queryLoggingService7.strForEx(kernelTransaction20);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction22 = null;
    queryLoggingService7.rolcForKe(kernelTransaction22);
    boolean boolean24 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingService7);
    java.lang.String str25 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str26 = queryLoggingServiceExtensionFactory0.getName();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext27 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies28 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle29 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext27, queryLoggingServiceDependencies28);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertEquals(
        "'" + str5 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str5, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "query-logging" + "'", str6,
        "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService7);
    org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    org.junit.Assert.assertEquals("'" + str25 + "' != '" + "query-logging" + "'", str25,
        "query-logging");
    org.junit.Assert.assertEquals("'" + str26 + "' != '" + "query-logging" + "'", str26,
        "query-logging");
  }

  @Test
  public void test0428() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0428");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    java.lang.String str5 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str6 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService7 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction8 = null;
    java.lang.Throwable throwable9 = null;
    queryLoggingService7.rolcForKe(kernelTransaction8, throwable9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    queryLoggingService7.sucsForEx(executingQuery11);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery13 = null;
    queryLoggingService7.strForEx(executingQuery13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService7.faleForExTh(executingQuery15, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction18 = null;
    java.lang.Throwable throwable19 = null;
    queryLoggingService7.rolcForKe(kernelTransaction18, throwable19);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery21 = null;
    queryLoggingService7.sucsForEx(executingQuery21);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction23 = null;
    queryLoggingService7.rolcForKe(kernelTransaction23);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction25 = null;
    java.lang.Throwable throwable26 = null;
    queryLoggingService7.rolcForKe(kernelTransaction25, throwable26);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction28 = null;
    queryLoggingService7.comForKe(kernelTransaction28);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery30 = null;
    queryLoggingService7.sucsForEx(executingQuery30);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery32 = null;
    queryLoggingService7.strForEx(executingQuery32);
    boolean boolean34 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingService7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery35 = null;
    java.lang.Throwable throwable36 = null;
    queryLoggingService7.faleForExTh(executingQuery35, throwable36);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery38 = null;
    queryLoggingService7.faleForExTh(executingQuery38, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery41 = null;
    java.lang.Throwable throwable42 = null;
    queryLoggingService7.faleForExTh(executingQuery41, throwable42);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction44 = null;
    java.lang.Throwable throwable45 = null;
    queryLoggingService7.rolcForKe(kernelTransaction44, throwable45);
    java.lang.Class<?> wildcardClass47 = queryLoggingService7.getClass();
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertEquals(
        "'" + str5 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str5, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "query-logging" + "'", str6,
        "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService7);
    org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    org.junit.Assert.assertNotNull(wildcardClass47);
  }

  @Test
  public void test0429() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0429");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction4 = null;
    queryLoggingService0.comForKe(kernelTransaction4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.sucsForEx(executingQuery6);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction8 = null;
    java.lang.Throwable throwable9 = null;
    queryLoggingService0.rolcForKe(kernelTransaction8, throwable9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    queryLoggingService0.strForEx(executingQuery11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService0.rolcForKe(kernelTransaction13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService0.strForEx(executingQuery15);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0430() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0430");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1.0d));
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService3 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction4 = null;
    queryLoggingService3.rolcForKe(kernelTransaction4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService3.faleForExTh(executingQuery6, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService3.faleForExTh(executingQuery9, throwable10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    java.lang.Throwable throwable13 = null;
    queryLoggingService3.faleForExTh(executingQuery12, throwable13);
    boolean boolean15 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) executingQuery12);
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory16 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean18 = queryLoggingServiceExtensionFactory16.equals((java.lang.Object) (short) 1);
    java.lang.String str19 = queryLoggingServiceExtensionFactory16.getName();
    boolean boolean20 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory16);
    java.lang.String str21 = queryLoggingServiceExtensionFactory16.toString();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext22 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies23 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle24 = queryLoggingServiceExtensionFactory16.newInstance(
          extensionContext22, queryLoggingServiceDependencies23);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertNotNull(queryLoggingService3);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "query-logging" + "'", str19,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str21, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
  }

  @Test
  public void test0431() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0431");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    queryLoggingService0.comForKe(kernelTransaction3);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction5 = null;
    queryLoggingService0.rolcForKe(kernelTransaction5);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction7 = null;
    java.lang.Throwable throwable8 = null;
    queryLoggingService0.rolcForKe(kernelTransaction7, throwable8);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0432() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0432");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService0.rolcForKe(kernelTransaction9, throwable10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.faleForExTh(executingQuery12, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    java.lang.Throwable throwable16 = null;
    queryLoggingService0.faleForExTh(executingQuery15, throwable16);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    queryLoggingService0.sucsForEx(executingQuery18);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery20 = null;
    queryLoggingService0.sucsForEx(executingQuery20);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery22 = null;
    java.lang.Throwable throwable23 = null;
    queryLoggingService0.faleForExTh(executingQuery22, throwable23);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0433() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0433");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str1 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService2 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService2.rolcForKe(kernelTransaction3, throwable4);
    boolean boolean6 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) throwable4);
    java.lang.String str7 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str8 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str9 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str10 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str11 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str12 = queryLoggingServiceExtensionFactory0.getName();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext13 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies14 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle15 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext13, queryLoggingServiceDependencies14);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertEquals(
        "'" + str1 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str1, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(queryLoggingService2);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertEquals(
        "'" + str7 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str7, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "query-logging" + "'", str8,
        "query-logging");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "query-logging" + "'", str9,
        "query-logging");
    org.junit.Assert.assertEquals(
        "'" + str10 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str10, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "query-logging" + "'", str11,
        "query-logging");
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "query-logging" + "'", str12,
        "query-logging");
  }

  @Test
  public void test0434() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0434");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.faleForExTh(executingQuery6, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService0.rolcForKe(kernelTransaction9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    java.lang.Throwable throwable12 = null;
    queryLoggingService0.faleForExTh(executingQuery11, throwable12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    queryLoggingService0.sucsForEx(executingQuery14);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    queryLoggingService0.strForEx(executingQuery16);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0435() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0435");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction4 = null;
    queryLoggingService0.comForKe(kernelTransaction4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.faleForExTh(executingQuery6, throwable7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService0.comForKe(kernelTransaction9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    queryLoggingService0.sucsForEx(executingQuery11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService0.strForEx(kernelTransaction13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    queryLoggingService0.rolcForKe(kernelTransaction15);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0436() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0436");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    queryLoggingService0.faleForExTh(executingQuery9, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.sucsForEx(executingQuery12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    java.lang.Throwable throwable15 = null;
    queryLoggingService0.faleForExTh(executingQuery14, throwable15);
    java.lang.Class<?> wildcardClass17 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass17);
  }

  @Test
  public void test0437() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0437");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.strForEx(kernelTransaction10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.faleForExTh(executingQuery12,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService0.faleForExTh(executingQuery15, "query-logging");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    queryLoggingService0.sucsForEx(executingQuery18);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery20 = null;
    queryLoggingService0.faleForExTh(executingQuery20, "query-logging");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery23 = null;
    queryLoggingService0.faleForExTh(executingQuery23, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction26 = null;
    queryLoggingService0.comForKe(kernelTransaction26);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery28 = null;
    queryLoggingService0.sucsForEx(executingQuery28);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0438() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0438");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.strForEx(kernelTransaction10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.faleForExTh(executingQuery12,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService0.faleForExTh(executingQuery15, "query-logging");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction18 = null;
    queryLoggingService0.rolcForKe(kernelTransaction18);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery20 = null;
    queryLoggingService0.strForEx(executingQuery20);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery22 = null;
    queryLoggingService0.faleForExTh(executingQuery22, "hi!");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction25 = null;
    queryLoggingService0.comForKe(kernelTransaction25);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction27 = null;
    queryLoggingService0.rolcForKe(kernelTransaction27);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery29 = null;
    queryLoggingService0.strForEx(executingQuery29);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0439() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0439");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    boolean boolean6 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) 0L);
    java.lang.String str7 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str8 = queryLoggingServiceExtensionFactory0.getName();
    boolean boolean10 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (short) 100);
    java.lang.String str11 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str12 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.Class<?> wildcardClass13 = queryLoggingServiceExtensionFactory0.getClass();
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertEquals(
        "'" + str7 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str7, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "query-logging" + "'", str8,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "query-logging" + "'", str11,
        "query-logging");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str12, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(wildcardClass13);
  }

  @Test
  public void test0440() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0440");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (short) 1);
    java.lang.String str3 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str4 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str5 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str6 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.Class<?> wildcardClass7 = queryLoggingServiceExtensionFactory0.getClass();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "query-logging" + "'", str3,
        "query-logging");
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "query-logging" + "'", str4,
        "query-logging");
    org.junit.Assert.assertEquals(
        "'" + str5 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str5, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "query-logging" + "'", str6,
        "query-logging");
    org.junit.Assert.assertNotNull(wildcardClass7);
  }

  @Test
  public void test0441() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0441");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory3 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str4 = queryLoggingServiceExtensionFactory3.toString();
    boolean boolean5 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory3);
    java.lang.String str6 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory7 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory8 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean10 = queryLoggingServiceExtensionFactory8.equals((java.lang.Object) (-1L));
    boolean boolean11 = queryLoggingServiceExtensionFactory7.equals((java.lang.Object) boolean10);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService12 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery13 = null;
    queryLoggingService12.strForEx(executingQuery13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    java.lang.Throwable throwable16 = null;
    queryLoggingService12.faleForExTh(executingQuery15, throwable16);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction18 = null;
    queryLoggingService12.rolcForKe(kernelTransaction18);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery20 = null;
    queryLoggingService12.sucsForEx(executingQuery20);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery22 = null;
    queryLoggingService12.strForEx(executingQuery22);
    boolean boolean24 = queryLoggingServiceExtensionFactory7.equals(
        (java.lang.Object) executingQuery22);
    boolean boolean25 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory7);
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory26 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean28 = queryLoggingServiceExtensionFactory26.equals((java.lang.Object) (short) 1);
    java.lang.String str29 = queryLoggingServiceExtensionFactory26.toString();
    boolean boolean30 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory26);
    java.lang.String str31 = queryLoggingServiceExtensionFactory0.getName();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str4 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str4, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "query-logging" + "'", str6,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    org.junit.Assert.assertNotNull(queryLoggingService12);
    org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    org.junit.Assert.assertEquals(
        "'" + str29 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str29, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    org.junit.Assert.assertEquals("'" + str31 + "' != '" + "query-logging" + "'", str31,
        "query-logging");
  }

  @Test
  public void test0442() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0442");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str1 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory2 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean4 = queryLoggingServiceExtensionFactory2.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory5 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str6 = queryLoggingServiceExtensionFactory5.toString();
    boolean boolean7 = queryLoggingServiceExtensionFactory2.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory5);
    java.lang.String str8 = queryLoggingServiceExtensionFactory2.getName();
    java.lang.String str9 = queryLoggingServiceExtensionFactory2.getName();
    boolean boolean10 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory2);
    java.lang.String str11 = queryLoggingServiceExtensionFactory0.getName();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext12 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies13 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle14 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext12, queryLoggingServiceDependencies13);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertEquals(
        "'" + str1 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str1, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertEquals(
        "'" + str6 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str6, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "query-logging" + "'", str8,
        "query-logging");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "query-logging" + "'", str9,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "query-logging" + "'", str11,
        "query-logging");
  }

  @Test
  public void test0443() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0443");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.comForKe(kernelTransaction10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    java.lang.Throwable throwable13 = null;
    queryLoggingService0.rolcForKe(kernelTransaction12, throwable13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    java.lang.Throwable throwable16 = null;
    queryLoggingService0.faleForExTh(executingQuery15, throwable16);
    java.lang.Class<?> wildcardClass18 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass18);
  }

  @Test
  public void test0444() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0444");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str1 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService2 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService2.rolcForKe(kernelTransaction3, throwable4);
    boolean boolean6 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) throwable4);
    java.lang.String str7 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str8 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str9 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str10 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str11 = queryLoggingServiceExtensionFactory0.getName();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext12 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies13 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle14 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext12, queryLoggingServiceDependencies13);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertEquals(
        "'" + str1 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str1, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(queryLoggingService2);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertEquals(
        "'" + str7 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str7, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "query-logging" + "'", str8,
        "query-logging");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "query-logging" + "'", str9,
        "query-logging");
    org.junit.Assert.assertEquals(
        "'" + str10 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str10, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "query-logging" + "'", str11,
        "query-logging");
  }

  @Test
  public void test0445() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0445");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    java.lang.Throwable throwable5 = null;
    queryLoggingService0.faleForExTh(executingQuery4, throwable5);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery7 = null;
    java.lang.Throwable throwable8 = null;
    queryLoggingService0.faleForExTh(executingQuery7, throwable8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.strForEx(kernelTransaction10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    queryLoggingService0.strForEx(kernelTransaction12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    queryLoggingService0.comForKe(kernelTransaction14);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    java.lang.Throwable throwable17 = null;
    queryLoggingService0.rolcForKe(kernelTransaction16, throwable17);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0446() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0446");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str1 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str2 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService3 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    queryLoggingService3.faleForExTh(executingQuery4,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery7 = null;
    queryLoggingService3.faleForExTh(executingQuery7,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService3.strForEx(kernelTransaction10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    queryLoggingService3.rolcForKe(kernelTransaction12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    queryLoggingService3.faleForExTh(executingQuery14,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    boolean boolean17 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory18 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean20 = queryLoggingServiceExtensionFactory18.equals((java.lang.Object) (short) 1);
    java.lang.String str21 = queryLoggingServiceExtensionFactory18.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService22 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery23 = null;
    queryLoggingService22.strForEx(executingQuery23);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery25 = null;
    java.lang.Throwable throwable26 = null;
    queryLoggingService22.faleForExTh(executingQuery25, throwable26);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction28 = null;
    java.lang.Throwable throwable29 = null;
    queryLoggingService22.rolcForKe(kernelTransaction28, throwable29);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction31 = null;
    queryLoggingService22.comForKe(kernelTransaction31);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery33 = null;
    queryLoggingService22.strForEx(executingQuery33);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery35 = null;
    queryLoggingService22.strForEx(executingQuery35);
    boolean boolean37 = queryLoggingServiceExtensionFactory18.equals(
        (java.lang.Object) executingQuery35);
    java.lang.Class<?> wildcardClass38 = queryLoggingServiceExtensionFactory18.getClass();
    boolean boolean39 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) wildcardClass38);
    java.lang.String str40 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str41 = queryLoggingServiceExtensionFactory0.toString();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext42 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies43 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle44 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext42, queryLoggingServiceDependencies43);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertEquals(
        "'" + str1 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str1, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals(
        "'" + str2 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str2, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(queryLoggingService3);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    org.junit.Assert.assertEquals("'" + str21 + "' != '" + "query-logging" + "'", str21,
        "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService22);
    org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    org.junit.Assert.assertNotNull(wildcardClass38);
    org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    org.junit.Assert.assertEquals(
        "'" + str40 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str40, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals(
        "'" + str41 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str41, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
  }

  @Test
  public void test0447() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0447");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction4 = null;
    queryLoggingService0.comForKe(kernelTransaction4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.sucsForEx(executingQuery6);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction8 = null;
    java.lang.Throwable throwable9 = null;
    queryLoggingService0.rolcForKe(kernelTransaction8, throwable9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    queryLoggingService0.strForEx(executingQuery11);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery13 = null;
    java.lang.Throwable throwable14 = null;
    queryLoggingService0.faleForExTh(executingQuery13, throwable14);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    java.lang.Throwable throwable17 = null;
    queryLoggingService0.rolcForKe(kernelTransaction16, throwable17);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery19 = null;
    queryLoggingService0.sucsForEx(executingQuery19);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0448() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0448");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    java.lang.Throwable throwable5 = null;
    queryLoggingService0.faleForExTh(executingQuery4, throwable5);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery7 = null;
    java.lang.Throwable throwable8 = null;
    queryLoggingService0.faleForExTh(executingQuery7, throwable8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.strForEx(kernelTransaction10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    queryLoggingService0.strForEx(kernelTransaction12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    queryLoggingService0.strForEx(executingQuery14);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    java.lang.Throwable throwable17 = null;
    queryLoggingService0.rolcForKe(kernelTransaction16, throwable17);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery19 = null;
    queryLoggingService0.sucsForEx(executingQuery19);
    java.lang.Class<?> wildcardClass21 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass21);
  }

  @Test
  public void test0449() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0449");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    queryLoggingService0.sucsForEx(executingQuery4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.strForEx(executingQuery6);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction8 = null;
    queryLoggingService0.strForEx(kernelTransaction8);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery10 = null;
    queryLoggingService0.faleForExTh(executingQuery10, "");
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0450() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0450");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    queryLoggingService0.sucsForEx(executingQuery4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.strForEx(executingQuery6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.faleForExTh(executingQuery8, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    java.lang.Throwable throwable12 = null;
    queryLoggingService0.rolcForKe(kernelTransaction11, throwable12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    queryLoggingService0.sucsForEx(executingQuery14);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    queryLoggingService0.rolcForKe(kernelTransaction16);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction18 = null;
    java.lang.Throwable throwable19 = null;
    queryLoggingService0.rolcForKe(kernelTransaction18, throwable19);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction21 = null;
    queryLoggingService0.comForKe(kernelTransaction21);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction23 = null;
    java.lang.Throwable throwable24 = null;
    queryLoggingService0.rolcForKe(kernelTransaction23, throwable24);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery26 = null;
    queryLoggingService0.faleForExTh(executingQuery26, "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0451() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0451");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str1 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService2 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService2.rolcForKe(kernelTransaction3, throwable4);
    boolean boolean6 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) throwable4);
    java.lang.String str7 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str8 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl diagnosticsOfflineReportProviderQueryLoggingImpl9 = new io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction10 = null;
    org.neo4j.configuration.Config config12 = null;
    java.nio.file.Path path13 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl9.init(fileSystemAbstraction10, "hi!", config12,
        path13);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction15 = null;
    org.neo4j.configuration.Config config17 = null;
    java.nio.file.Path path18 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl9.init(fileSystemAbstraction15,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config17, path18);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction20 = null;
    org.neo4j.configuration.Config config22 = null;
    java.nio.file.Path path23 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl9.init(fileSystemAbstraction20,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config22, path23);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction25 = null;
    org.neo4j.configuration.Config config27 = null;
    java.nio.file.Path path28 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl9.init(fileSystemAbstraction25, "query-logging",
        config27, path28);
    boolean boolean30 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) fileSystemAbstraction25);
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext31 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies32 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle33 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext31, queryLoggingServiceDependencies32);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertEquals(
        "'" + str1 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str1, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(queryLoggingService2);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertEquals(
        "'" + str7 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str7, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals(
        "'" + str8 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str8, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
  }

  @Test
  public void test0452() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0452");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    java.lang.String str5 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str6 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService7 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction8 = null;
    java.lang.Throwable throwable9 = null;
    queryLoggingService7.rolcForKe(kernelTransaction8, throwable9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    queryLoggingService7.sucsForEx(executingQuery11);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery13 = null;
    queryLoggingService7.strForEx(executingQuery13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService7.faleForExTh(executingQuery15, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction18 = null;
    java.lang.Throwable throwable19 = null;
    queryLoggingService7.rolcForKe(kernelTransaction18, throwable19);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery21 = null;
    queryLoggingService7.sucsForEx(executingQuery21);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction23 = null;
    queryLoggingService7.rolcForKe(kernelTransaction23);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction25 = null;
    java.lang.Throwable throwable26 = null;
    queryLoggingService7.rolcForKe(kernelTransaction25, throwable26);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction28 = null;
    queryLoggingService7.comForKe(kernelTransaction28);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery30 = null;
    queryLoggingService7.sucsForEx(executingQuery30);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery32 = null;
    queryLoggingService7.strForEx(executingQuery32);
    boolean boolean34 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingService7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery35 = null;
    java.lang.Throwable throwable36 = null;
    queryLoggingService7.faleForExTh(executingQuery35, throwable36);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction38 = null;
    java.lang.Throwable throwable39 = null;
    queryLoggingService7.rolcForKe(kernelTransaction38, throwable39);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction41 = null;
    queryLoggingService7.strForEx(kernelTransaction41);
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertEquals(
        "'" + str5 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str5, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "query-logging" + "'", str6,
        "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService7);
    org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
  }

  @Test
  public void test0453() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0453");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService0.faleForExTh(executingQuery9, throwable10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    queryLoggingService0.strForEx(kernelTransaction12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    queryLoggingService0.strForEx(kernelTransaction14);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    queryLoggingService0.comForKe(kernelTransaction16);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction18 = null;
    queryLoggingService0.strForEx(kernelTransaction18);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery20 = null;
    queryLoggingService0.faleForExTh(executingQuery20, "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0454() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0454");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.faleForExTh(executingQuery6, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService0.rolcForKe(kernelTransaction9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    java.lang.Throwable throwable12 = null;
    queryLoggingService0.faleForExTh(executingQuery11, throwable12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    queryLoggingService0.sucsForEx(executingQuery14);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    queryLoggingService0.faleForExTh(executingQuery16,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery19 = null;
    queryLoggingService0.strForEx(executingQuery19);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction21 = null;
    java.lang.Throwable throwable22 = null;
    queryLoggingService0.rolcForKe(kernelTransaction21, throwable22);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0455() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0455");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.faleForExTh(executingQuery6, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService0.rolcForKe(kernelTransaction9, throwable10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    queryLoggingService0.rolcForKe(kernelTransaction12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    queryLoggingService0.faleForExTh(executingQuery14, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery17 = null;
    queryLoggingService0.faleForExTh(executingQuery17, "hi!");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery20 = null;
    java.lang.Throwable throwable21 = null;
    queryLoggingService0.faleForExTh(executingQuery20, throwable21);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0456() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0456");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    java.lang.String str5 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str6 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService7 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction8 = null;
    java.lang.Throwable throwable9 = null;
    queryLoggingService7.rolcForKe(kernelTransaction8, throwable9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    queryLoggingService7.sucsForEx(executingQuery11);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery13 = null;
    queryLoggingService7.strForEx(executingQuery13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService7.faleForExTh(executingQuery15, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction18 = null;
    java.lang.Throwable throwable19 = null;
    queryLoggingService7.rolcForKe(kernelTransaction18, throwable19);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery21 = null;
    queryLoggingService7.sucsForEx(executingQuery21);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction23 = null;
    queryLoggingService7.rolcForKe(kernelTransaction23);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction25 = null;
    java.lang.Throwable throwable26 = null;
    queryLoggingService7.rolcForKe(kernelTransaction25, throwable26);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction28 = null;
    queryLoggingService7.comForKe(kernelTransaction28);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery30 = null;
    queryLoggingService7.sucsForEx(executingQuery30);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery32 = null;
    queryLoggingService7.strForEx(executingQuery32);
    boolean boolean34 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingService7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery35 = null;
    java.lang.Throwable throwable36 = null;
    queryLoggingService7.faleForExTh(executingQuery35, throwable36);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery38 = null;
    queryLoggingService7.faleForExTh(executingQuery38, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery41 = null;
    queryLoggingService7.sucsForEx(executingQuery41);
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertEquals(
        "'" + str5 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str5, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "query-logging" + "'", str6,
        "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService7);
    org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
  }

  @Test
  public void test0457() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0457");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (short) 1);
    java.lang.String str3 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService4 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery5 = null;
    queryLoggingService4.strForEx(executingQuery5);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery7 = null;
    java.lang.Throwable throwable8 = null;
    queryLoggingService4.faleForExTh(executingQuery7, throwable8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    java.lang.Throwable throwable11 = null;
    queryLoggingService4.rolcForKe(kernelTransaction10, throwable11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService4.comForKe(kernelTransaction13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService4.strForEx(executingQuery15);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery17 = null;
    queryLoggingService4.strForEx(executingQuery17);
    boolean boolean19 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) executingQuery17);
    java.lang.String str20 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str21 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str22 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str23 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str24 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str25 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str26 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory27 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory28 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean30 = queryLoggingServiceExtensionFactory28.equals((java.lang.Object) (-1L));
    boolean boolean31 = queryLoggingServiceExtensionFactory27.equals((java.lang.Object) boolean30);
    boolean boolean33 = queryLoggingServiceExtensionFactory27.equals((java.lang.Object) 0L);
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory34 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory35 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean37 = queryLoggingServiceExtensionFactory35.equals((java.lang.Object) (-1L));
    boolean boolean38 = queryLoggingServiceExtensionFactory34.equals((java.lang.Object) boolean37);
    java.lang.Object obj39 = new java.lang.Object();
    boolean boolean40 = queryLoggingServiceExtensionFactory34.equals(obj39);
    java.lang.String str41 = queryLoggingServiceExtensionFactory34.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService42 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery43 = null;
    queryLoggingService42.strForEx(executingQuery43);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery45 = null;
    java.lang.Throwable throwable46 = null;
    queryLoggingService42.faleForExTh(executingQuery45, throwable46);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction48 = null;
    java.lang.Throwable throwable49 = null;
    queryLoggingService42.rolcForKe(kernelTransaction48, throwable49);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction51 = null;
    queryLoggingService42.comForKe(kernelTransaction51);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery53 = null;
    queryLoggingService42.strForEx(executingQuery53);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction55 = null;
    java.lang.Throwable throwable56 = null;
    queryLoggingService42.rolcForKe(kernelTransaction55, throwable56);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction58 = null;
    queryLoggingService42.comForKe(kernelTransaction58);
    boolean boolean60 = queryLoggingServiceExtensionFactory34.equals(
        (java.lang.Object) queryLoggingService42);
    boolean boolean61 = queryLoggingServiceExtensionFactory27.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory34);
    boolean boolean62 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory34);
    java.lang.String str63 = queryLoggingServiceExtensionFactory34.toString();
    java.lang.String str64 = queryLoggingServiceExtensionFactory34.getName();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "query-logging" + "'", str3,
        "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService4);
    org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "query-logging" + "'", str20,
        "query-logging");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str21, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str22, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str23 + "' != '" + "query-logging" + "'", str23,
        "query-logging");
    org.junit.Assert.assertEquals("'" + str24 + "' != '" + "query-logging" + "'", str24,
        "query-logging");
    org.junit.Assert.assertEquals(
        "'" + str25 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str25, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str26 + "' != '" + "query-logging" + "'", str26,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    org.junit.Assert.assertEquals("'" + str41 + "' != '" + "query-logging" + "'", str41,
        "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService42);
    org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    org.junit.Assert.assertEquals(
        "'" + str63 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str63, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str64 + "' != '" + "query-logging" + "'", str64,
        "query-logging");
  }

  @Test
  public void test0458() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0458");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    queryLoggingService0.sucsForEx(executingQuery4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.strForEx(executingQuery6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.strForEx(executingQuery8);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery10 = null;
    queryLoggingService0.faleForExTh(executingQuery10, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery13 = null;
    queryLoggingService0.faleForExTh(executingQuery13, "query-logging");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    queryLoggingService0.rolcForKe(kernelTransaction16);
    java.lang.Class<?> wildcardClass18 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass18);
  }

  @Test
  public void test0459() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0459");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction4 = null;
    queryLoggingService0.comForKe(kernelTransaction4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.faleForExTh(executingQuery6, throwable7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService0.comForKe(kernelTransaction9);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    java.lang.Throwable throwable12 = null;
    queryLoggingService0.rolcForKe(kernelTransaction11, throwable12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    queryLoggingService0.comForKe(kernelTransaction14);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    queryLoggingService0.sucsForEx(executingQuery16);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    queryLoggingService0.strForEx(executingQuery18);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery20 = null;
    java.lang.Throwable throwable21 = null;
    queryLoggingService0.faleForExTh(executingQuery20, throwable21);
    java.lang.Class<?> wildcardClass23 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass23);
  }

  @Test
  public void test0460() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0460");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.faleForExTh(executingQuery8, "hi!");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    queryLoggingService0.strForEx(kernelTransaction11);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery13 = null;
    queryLoggingService0.faleForExTh(executingQuery13, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    queryLoggingService0.sucsForEx(executingQuery16);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction18 = null;
    queryLoggingService0.rolcForKe(kernelTransaction18);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0461() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0461");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (short) 1);
    java.lang.String str3 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str4 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str5 = queryLoggingServiceExtensionFactory0.getName();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str3 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str3, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str4 + "' != '" + "query-logging" + "'", str4,
        "query-logging");
    org.junit.Assert.assertEquals("'" + str5 + "' != '" + "query-logging" + "'", str5,
        "query-logging");
  }

  @Test
  public void test0462() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0462");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.strForEx(kernelTransaction10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.faleForExTh(executingQuery12,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService0.faleForExTh(executingQuery15, "query-logging");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    queryLoggingService0.sucsForEx(executingQuery18);
    java.lang.Class<?> wildcardClass20 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass20);
  }

  @Test
  public void test0463() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0463");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (short) 1);
    java.lang.String str3 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService4 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery5 = null;
    queryLoggingService4.strForEx(executingQuery5);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery7 = null;
    java.lang.Throwable throwable8 = null;
    queryLoggingService4.faleForExTh(executingQuery7, throwable8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    java.lang.Throwable throwable11 = null;
    queryLoggingService4.rolcForKe(kernelTransaction10, throwable11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService4.comForKe(kernelTransaction13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService4.strForEx(executingQuery15);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery17 = null;
    queryLoggingService4.strForEx(executingQuery17);
    boolean boolean19 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) executingQuery17);
    java.lang.String str20 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str21 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str22 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str23 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str24 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str25 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl diagnosticsOfflineReportProviderQueryLoggingImpl26 = new io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction27 = null;
    org.neo4j.configuration.Config config29 = null;
    java.nio.file.Path path30 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl26.init(fileSystemAbstraction27, "hi!",
        config29, path30);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction32 = null;
    org.neo4j.configuration.Config config34 = null;
    java.nio.file.Path path35 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl26.init(fileSystemAbstraction32,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config34, path35);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction37 = null;
    org.neo4j.configuration.Config config39 = null;
    java.nio.file.Path path40 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl26.init(fileSystemAbstraction37, "", config39,
        path40);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction42 = null;
    org.neo4j.configuration.Config config44 = null;
    java.nio.file.Path path45 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl26.init(fileSystemAbstraction42, "hi!",
        config44, path45);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction47 = null;
    org.neo4j.configuration.Config config49 = null;
    java.nio.file.Path path50 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl26.init(fileSystemAbstraction47, "", config49,
        path50);
    boolean boolean52 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) "");
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext53 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies54 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle55 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext53, queryLoggingServiceDependencies54);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "query-logging" + "'", str3,
        "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService4);
    org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "query-logging" + "'", str20,
        "query-logging");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str21, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str22, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str23 + "' != '" + "query-logging" + "'", str23,
        "query-logging");
    org.junit.Assert.assertEquals("'" + str24 + "' != '" + "query-logging" + "'", str24,
        "query-logging");
    org.junit.Assert.assertEquals(
        "'" + str25 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str25, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
  }

  @Test
  public void test0464() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0464");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (short) 1);
    java.lang.String str3 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService4 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery5 = null;
    queryLoggingService4.strForEx(executingQuery5);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery7 = null;
    java.lang.Throwable throwable8 = null;
    queryLoggingService4.faleForExTh(executingQuery7, throwable8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    java.lang.Throwable throwable11 = null;
    queryLoggingService4.rolcForKe(kernelTransaction10, throwable11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService4.comForKe(kernelTransaction13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService4.strForEx(executingQuery15);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery17 = null;
    queryLoggingService4.strForEx(executingQuery17);
    boolean boolean19 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) executingQuery17);
    java.lang.String str20 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl diagnosticsOfflineReportProviderQueryLoggingImpl21 = new io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction22 = null;
    org.neo4j.configuration.Config config24 = null;
    java.nio.file.Path path25 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl21.init(fileSystemAbstraction22, "hi!",
        config24, path25);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction27 = null;
    org.neo4j.configuration.Config config29 = null;
    java.nio.file.Path path30 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl21.init(fileSystemAbstraction27, "", config29,
        path30);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction32 = null;
    org.neo4j.configuration.Config config34 = null;
    java.nio.file.Path path35 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl21.init(fileSystemAbstraction32,
        "query-logging", config34, path35);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction37 = null;
    org.neo4j.configuration.Config config39 = null;
    java.nio.file.Path path40 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl21.init(fileSystemAbstraction37, "", config39,
        path40);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction42 = null;
    org.neo4j.configuration.Config config44 = null;
    java.nio.file.Path path45 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl21.init(fileSystemAbstraction42,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config44, path45);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction47 = null;
    org.neo4j.configuration.Config config49 = null;
    java.nio.file.Path path50 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl21.init(fileSystemAbstraction47, "hi!",
        config49, path50);
    boolean boolean52 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) config49);
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "query-logging" + "'", str3,
        "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService4);
    org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "query-logging" + "'", str20,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
  }

  @Test
  public void test0465() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0465");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.faleForExTh(executingQuery8, "hi!");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    queryLoggingService0.strForEx(kernelTransaction11);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery13 = null;
    java.lang.Throwable throwable14 = null;
    queryLoggingService0.faleForExTh(executingQuery13, throwable14);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    queryLoggingService0.faleForExTh(executingQuery16, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction19 = null;
    queryLoggingService0.strForEx(kernelTransaction19);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery21 = null;
    java.lang.Throwable throwable22 = null;
    queryLoggingService0.faleForExTh(executingQuery21, throwable22);
    java.lang.Class<?> wildcardClass24 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass24);
  }

  @Test
  public void test0466() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0466");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    queryLoggingService0.faleForExTh(executingQuery3, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.faleForExTh(executingQuery6, throwable7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService0.faleForExTh(executingQuery9, throwable10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    queryLoggingService0.strForEx(kernelTransaction12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    queryLoggingService0.strForEx(kernelTransaction14);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    queryLoggingService0.sucsForEx(executingQuery16);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction18 = null;
    queryLoggingService0.strForEx(kernelTransaction18);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery20 = null;
    queryLoggingService0.strForEx(executingQuery20);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0467() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0467");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    boolean boolean6 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) 0L);
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory7 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory8 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean10 = queryLoggingServiceExtensionFactory8.equals((java.lang.Object) (-1L));
    boolean boolean11 = queryLoggingServiceExtensionFactory7.equals((java.lang.Object) boolean10);
    java.lang.Object obj12 = new java.lang.Object();
    boolean boolean13 = queryLoggingServiceExtensionFactory7.equals(obj12);
    java.lang.String str14 = queryLoggingServiceExtensionFactory7.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService15 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    queryLoggingService15.strForEx(executingQuery16);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    java.lang.Throwable throwable19 = null;
    queryLoggingService15.faleForExTh(executingQuery18, throwable19);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction21 = null;
    java.lang.Throwable throwable22 = null;
    queryLoggingService15.rolcForKe(kernelTransaction21, throwable22);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction24 = null;
    queryLoggingService15.comForKe(kernelTransaction24);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery26 = null;
    queryLoggingService15.strForEx(executingQuery26);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction28 = null;
    java.lang.Throwable throwable29 = null;
    queryLoggingService15.rolcForKe(kernelTransaction28, throwable29);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction31 = null;
    queryLoggingService15.comForKe(kernelTransaction31);
    boolean boolean33 = queryLoggingServiceExtensionFactory7.equals(
        (java.lang.Object) queryLoggingService15);
    boolean boolean34 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory7);
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext35 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies36 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle37 = queryLoggingServiceExtensionFactory7.newInstance(
          extensionContext35, queryLoggingServiceDependencies36);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "query-logging" + "'", str14,
        "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService15);
    org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
  }

  @Test
  public void test0468() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0468");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    queryLoggingService0.sucsForEx(executingQuery4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.sucsForEx(executingQuery6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService0.comForKe(kernelTransaction10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.faleForExTh(executingQuery12, "query-logging");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService0.strForEx(executingQuery15);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction17 = null;
    java.lang.Throwable throwable18 = null;
    queryLoggingService0.rolcForKe(kernelTransaction17, throwable18);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0469() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0469");
    }
    io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl diagnosticsOfflineReportProviderQueryLoggingImpl0 = new io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction1 = null;
    org.neo4j.configuration.Config config3 = null;
    java.nio.file.Path path4 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction1, "hi!", config3,
        path4);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.configuration.Config config8 = null;
    java.nio.file.Path path9 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction6, "query-logging",
        config8, path9);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction11 = null;
    org.neo4j.configuration.Config config13 = null;
    java.nio.file.Path path14 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction11,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config13, path14);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction16 = null;
    org.neo4j.configuration.Config config18 = null;
    java.nio.file.Path path19 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction16, "", config18,
        path19);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction21 = null;
    org.neo4j.configuration.Config config23 = null;
    java.nio.file.Path path24 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction21, "", config23,
        path24);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction26 = null;
    org.neo4j.configuration.Config config28 = null;
    java.nio.file.Path path29 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction26, "hi!", config28,
        path29);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction31 = null;
    org.neo4j.configuration.Config config33 = null;
    java.nio.file.Path path34 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction31,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config33, path34);
  }

  @Test
  public void test0470() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0470");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    queryLoggingService0.faleForExTh(executingQuery3, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.faleForExTh(executingQuery6, throwable7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService0.faleForExTh(executingQuery9, throwable10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    queryLoggingService0.strForEx(kernelTransaction12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    queryLoggingService0.faleForExTh(executingQuery14, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction17 = null;
    queryLoggingService0.comForKe(kernelTransaction17);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0471() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0471");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    java.lang.String str5 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str6 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService7 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction8 = null;
    queryLoggingService7.rolcForKe(kernelTransaction8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    java.lang.Throwable throwable11 = null;
    queryLoggingService7.rolcForKe(kernelTransaction10, throwable11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService7.rolcForKe(kernelTransaction13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService7.sucsForEx(executingQuery15);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery17 = null;
    queryLoggingService7.faleForExTh(executingQuery17, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction20 = null;
    queryLoggingService7.strForEx(kernelTransaction20);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction22 = null;
    queryLoggingService7.rolcForKe(kernelTransaction22);
    boolean boolean24 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingService7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction25 = null;
    queryLoggingService7.rolcForKe(kernelTransaction25);
    java.lang.Class<?> wildcardClass27 = queryLoggingService7.getClass();
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertEquals(
        "'" + str5 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str5, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "query-logging" + "'", str6,
        "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService7);
    org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    org.junit.Assert.assertNotNull(wildcardClass27);
  }

  @Test
  public void test0472() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0472");
    }
    io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl diagnosticsOfflineReportProviderQueryLoggingImpl0 = new io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction1 = null;
    org.neo4j.configuration.Config config3 = null;
    java.nio.file.Path path4 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction1, "hi!", config3,
        path4);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.configuration.Config config8 = null;
    java.nio.file.Path path9 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction6,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config8, path9);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction11 = null;
    org.neo4j.configuration.Config config13 = null;
    java.nio.file.Path path14 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction11, "hi!", config13,
        path14);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction16 = null;
    org.neo4j.configuration.Config config18 = null;
    java.nio.file.Path path19 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction16, "hi!", config18,
        path19);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction21 = null;
    org.neo4j.configuration.Config config23 = null;
    java.nio.file.Path path24 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction21,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config23, path24);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction26 = null;
    org.neo4j.configuration.Config config28 = null;
    java.nio.file.Path path29 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction26, "hi!", config28,
        path29);
    java.lang.Class<?> wildcardClass31 = diagnosticsOfflineReportProviderQueryLoggingImpl0.getClass();
    org.junit.Assert.assertNotNull(wildcardClass31);
  }

  @Test
  public void test0473() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0473");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory3 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str4 = queryLoggingServiceExtensionFactory3.toString();
    boolean boolean5 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory3);
    boolean boolean7 = queryLoggingServiceExtensionFactory3.equals((java.lang.Object) 100.0d);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService8 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    queryLoggingService8.strForEx(executingQuery9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    java.lang.Throwable throwable12 = null;
    queryLoggingService8.faleForExTh(executingQuery11, throwable12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    queryLoggingService8.rolcForKe(kernelTransaction14);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    queryLoggingService8.sucsForEx(executingQuery16);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    queryLoggingService8.strForEx(executingQuery18);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery20 = null;
    queryLoggingService8.sucsForEx(executingQuery20);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery22 = null;
    queryLoggingService8.sucsForEx(executingQuery22);
    boolean boolean24 = queryLoggingServiceExtensionFactory3.equals(
        (java.lang.Object) executingQuery22);
    java.lang.String str25 = queryLoggingServiceExtensionFactory3.toString();
    java.lang.String str26 = queryLoggingServiceExtensionFactory3.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory27 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean29 = queryLoggingServiceExtensionFactory27.equals((java.lang.Object) (short) 1);
    java.lang.String str30 = queryLoggingServiceExtensionFactory27.toString();
    java.lang.String str31 = queryLoggingServiceExtensionFactory27.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService32 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction33 = null;
    java.lang.Throwable throwable34 = null;
    queryLoggingService32.rolcForKe(kernelTransaction33, throwable34);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction36 = null;
    queryLoggingService32.comForKe(kernelTransaction36);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery38 = null;
    java.lang.Throwable throwable39 = null;
    queryLoggingService32.faleForExTh(executingQuery38, throwable39);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction41 = null;
    queryLoggingService32.rolcForKe(kernelTransaction41);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery43 = null;
    java.lang.Throwable throwable44 = null;
    queryLoggingService32.faleForExTh(executingQuery43, throwable44);
    java.lang.Class<?> wildcardClass46 = queryLoggingService32.getClass();
    boolean boolean47 = queryLoggingServiceExtensionFactory27.equals(
        (java.lang.Object) wildcardClass46);
    java.lang.String str48 = queryLoggingServiceExtensionFactory27.getName();
    java.lang.String str49 = queryLoggingServiceExtensionFactory27.getName();
    boolean boolean50 = queryLoggingServiceExtensionFactory3.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory27);
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str4 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str4, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    org.junit.Assert.assertNotNull(queryLoggingService8);
    org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    org.junit.Assert.assertEquals(
        "'" + str25 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str25, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals(
        "'" + str26 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str26, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    org.junit.Assert.assertEquals(
        "'" + str30 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str30, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str31 + "' != '" + "query-logging" + "'", str31,
        "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService32);
    org.junit.Assert.assertNotNull(wildcardClass46);
    org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    org.junit.Assert.assertEquals("'" + str48 + "' != '" + "query-logging" + "'", str48,
        "query-logging");
    org.junit.Assert.assertEquals("'" + str49 + "' != '" + "query-logging" + "'", str49,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
  }

  @Test
  public void test0474() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0474");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction8 = null;
    java.lang.Throwable throwable9 = null;
    queryLoggingService0.rolcForKe(kernelTransaction8, throwable9);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    queryLoggingService0.rolcForKe(kernelTransaction11);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery13 = null;
    queryLoggingService0.strForEx(executingQuery13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    java.lang.Throwable throwable16 = null;
    queryLoggingService0.faleForExTh(executingQuery15, throwable16);
    java.lang.Class<?> wildcardClass18 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass18);
  }

  @Test
  public void test0475() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0475");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    queryLoggingService0.sucsForEx(executingQuery4);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    queryLoggingService0.strForEx(executingQuery6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.faleForExTh(executingQuery8, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    java.lang.Throwable throwable12 = null;
    queryLoggingService0.rolcForKe(kernelTransaction11, throwable12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    queryLoggingService0.sucsForEx(executingQuery14);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    queryLoggingService0.rolcForKe(kernelTransaction16);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction18 = null;
    java.lang.Throwable throwable19 = null;
    queryLoggingService0.rolcForKe(kernelTransaction18, throwable19);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction21 = null;
    queryLoggingService0.comForKe(kernelTransaction21);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery23 = null;
    queryLoggingService0.sucsForEx(executingQuery23);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery25 = null;
    queryLoggingService0.strForEx(executingQuery25);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction27 = null;
    queryLoggingService0.comForKe(kernelTransaction27);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0476() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0476");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str1 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory2 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean4 = queryLoggingServiceExtensionFactory2.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory5 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str6 = queryLoggingServiceExtensionFactory5.toString();
    boolean boolean7 = queryLoggingServiceExtensionFactory2.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory5);
    java.lang.String str8 = queryLoggingServiceExtensionFactory2.getName();
    java.lang.String str9 = queryLoggingServiceExtensionFactory2.getName();
    boolean boolean10 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory2);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService11 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService11.strForEx(executingQuery12);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery14 = null;
    java.lang.Throwable throwable15 = null;
    queryLoggingService11.faleForExTh(executingQuery14, throwable15);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction17 = null;
    java.lang.Throwable throwable18 = null;
    queryLoggingService11.rolcForKe(kernelTransaction17, throwable18);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery20 = null;
    queryLoggingService11.strForEx(executingQuery20);
    boolean boolean22 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingService11);
    java.lang.String str23 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str24 = queryLoggingServiceExtensionFactory0.toString();
    org.junit.Assert.assertEquals(
        "'" + str1 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str1, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertEquals(
        "'" + str6 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str6, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "query-logging" + "'", str8,
        "query-logging");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "query-logging" + "'", str9,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    org.junit.Assert.assertNotNull(queryLoggingService11);
    org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    org.junit.Assert.assertEquals(
        "'" + str23 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str23, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals(
        "'" + str24 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str24, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
  }

  @Test
  public void test0477() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0477");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    boolean boolean6 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) 0L);
    java.lang.String str7 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str8 = queryLoggingServiceExtensionFactory0.getName();
    boolean boolean10 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (short) 100);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService11 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    queryLoggingService11.rolcForKe(kernelTransaction12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    java.lang.Throwable throwable15 = null;
    queryLoggingService11.rolcForKe(kernelTransaction14, throwable15);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction17 = null;
    queryLoggingService11.rolcForKe(kernelTransaction17);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction19 = null;
    java.lang.Throwable throwable20 = null;
    queryLoggingService11.rolcForKe(kernelTransaction19, throwable20);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery22 = null;
    queryLoggingService11.sucsForEx(executingQuery22);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction24 = null;
    queryLoggingService11.comForKe(kernelTransaction24);
    boolean boolean26 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) kernelTransaction24);
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory27 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory28 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean30 = queryLoggingServiceExtensionFactory28.equals((java.lang.Object) (-1L));
    boolean boolean31 = queryLoggingServiceExtensionFactory27.equals((java.lang.Object) boolean30);
    java.lang.String str32 = queryLoggingServiceExtensionFactory27.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService33 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery34 = null;
    queryLoggingService33.strForEx(executingQuery34);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery36 = null;
    java.lang.Throwable throwable37 = null;
    queryLoggingService33.faleForExTh(executingQuery36, throwable37);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction39 = null;
    java.lang.Throwable throwable40 = null;
    queryLoggingService33.rolcForKe(kernelTransaction39, throwable40);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery42 = null;
    queryLoggingService33.faleForExTh(executingQuery42, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery45 = null;
    queryLoggingService33.strForEx(executingQuery45);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction47 = null;
    queryLoggingService33.strForEx(kernelTransaction47);
    boolean boolean49 = queryLoggingServiceExtensionFactory27.equals(
        (java.lang.Object) queryLoggingService33);
    boolean boolean50 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingService33);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery51 = null;
    java.lang.Throwable throwable52 = null;
    queryLoggingService33.faleForExTh(executingQuery51, throwable52);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery54 = null;
    queryLoggingService33.faleForExTh(executingQuery54, "");
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertEquals(
        "'" + str7 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str7, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "query-logging" + "'", str8,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    org.junit.Assert.assertNotNull(queryLoggingService11);
    org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    org.junit.Assert.assertEquals(
        "'" + str32 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str32, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(queryLoggingService33);
    org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
  }

  @Test
  public void test0478() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0478");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService0.rolcForKe(kernelTransaction9, throwable10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService0.faleForExTh(executingQuery12, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    java.lang.Throwable throwable16 = null;
    queryLoggingService0.faleForExTh(executingQuery15, throwable16);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction18 = null;
    java.lang.Throwable throwable19 = null;
    queryLoggingService0.rolcForKe(kernelTransaction18, throwable19);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction21 = null;
    queryLoggingService0.strForEx(kernelTransaction21);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0479() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0479");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (short) 1);
    java.lang.String str3 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService4 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery5 = null;
    queryLoggingService4.strForEx(executingQuery5);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery7 = null;
    java.lang.Throwable throwable8 = null;
    queryLoggingService4.faleForExTh(executingQuery7, throwable8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    queryLoggingService4.rolcForKe(kernelTransaction10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery12 = null;
    queryLoggingService4.faleForExTh(executingQuery12, "hi!");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    queryLoggingService4.strForEx(kernelTransaction15);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery17 = null;
    queryLoggingService4.faleForExTh(executingQuery17, "");
    boolean boolean20 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) "");
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str3 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str3, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(queryLoggingService4);
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
  }

  @Test
  public void test0480() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0480");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    java.lang.Throwable throwable2 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1, throwable2);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery4 = null;
    queryLoggingService0.sucsForEx(executingQuery4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.comForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.faleForExTh(executingQuery8, "query-logging");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    queryLoggingService0.strForEx(executingQuery11);
    java.lang.Class<?> wildcardClass13 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass13);
  }

  @Test
  public void test0481() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0481");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    java.lang.String str3 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService4 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction5 = null;
    queryLoggingService4.rolcForKe(kernelTransaction5);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction7 = null;
    queryLoggingService4.strForEx(kernelTransaction7);
    java.lang.Class<?> wildcardClass9 = queryLoggingService4.getClass();
    boolean boolean10 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingService4);
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService11 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    java.lang.Throwable throwable13 = null;
    queryLoggingService11.rolcForKe(kernelTransaction12, throwable13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    java.lang.Throwable throwable16 = null;
    queryLoggingService11.faleForExTh(executingQuery15, throwable16);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery18 = null;
    java.lang.Throwable throwable19 = null;
    queryLoggingService11.faleForExTh(executingQuery18, throwable19);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction21 = null;
    java.lang.Throwable throwable22 = null;
    queryLoggingService11.rolcForKe(kernelTransaction21, throwable22);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction24 = null;
    queryLoggingService11.strForEx(kernelTransaction24);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction26 = null;
    queryLoggingService11.strForEx(kernelTransaction26);
    boolean boolean28 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) kernelTransaction26);
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str3 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str3, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(queryLoggingService4);
    org.junit.Assert.assertNotNull(wildcardClass9);
    org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    org.junit.Assert.assertNotNull(queryLoggingService11);
    org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
  }

  @Test
  public void test0482() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0482");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    queryLoggingService0.faleForExTh(executingQuery3, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.faleForExTh(executingQuery6, throwable7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService0.strForEx(kernelTransaction9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    queryLoggingService0.strForEx(executingQuery11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    java.lang.Throwable throwable14 = null;
    queryLoggingService0.rolcForKe(kernelTransaction13, throwable14);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    queryLoggingService0.strForEx(executingQuery16);
    java.lang.Class<?> wildcardClass18 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass18);
  }

  @Test
  public void test0483() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0483");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    java.lang.String str5 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str6 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService7 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction8 = null;
    queryLoggingService7.rolcForKe(kernelTransaction8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    java.lang.Throwable throwable11 = null;
    queryLoggingService7.rolcForKe(kernelTransaction10, throwable11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService7.rolcForKe(kernelTransaction13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService7.sucsForEx(executingQuery15);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery17 = null;
    queryLoggingService7.faleForExTh(executingQuery17, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction20 = null;
    queryLoggingService7.strForEx(kernelTransaction20);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction22 = null;
    queryLoggingService7.rolcForKe(kernelTransaction22);
    boolean boolean24 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingService7);
    java.lang.String str25 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str26 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str27 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str28 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str29 = queryLoggingServiceExtensionFactory0.toString();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext30 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies31 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle32 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext30, queryLoggingServiceDependencies31);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertEquals(
        "'" + str5 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str5, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "query-logging" + "'", str6,
        "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService7);
    org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    org.junit.Assert.assertEquals("'" + str25 + "' != '" + "query-logging" + "'", str25,
        "query-logging");
    org.junit.Assert.assertEquals(
        "'" + str26 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str26, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str27 + "' != '" + "query-logging" + "'", str27,
        "query-logging");
    org.junit.Assert.assertEquals(
        "'" + str28 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str28, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals(
        "'" + str29 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str29, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
  }

  @Test
  public void test0484() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0484");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str1 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str2 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService3 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction4 = null;
    java.lang.Throwable throwable5 = null;
    queryLoggingService3.rolcForKe(kernelTransaction4, throwable5);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery7 = null;
    queryLoggingService3.sucsForEx(executingQuery7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    queryLoggingService3.strForEx(executingQuery9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    queryLoggingService3.faleForExTh(executingQuery11, "");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    java.lang.Throwable throwable15 = null;
    queryLoggingService3.rolcForKe(kernelTransaction14, throwable15);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery17 = null;
    queryLoggingService3.sucsForEx(executingQuery17);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction19 = null;
    queryLoggingService3.rolcForKe(kernelTransaction19);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction21 = null;
    java.lang.Throwable throwable22 = null;
    queryLoggingService3.rolcForKe(kernelTransaction21, throwable22);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction24 = null;
    queryLoggingService3.comForKe(kernelTransaction24);
    java.lang.Class<?> wildcardClass26 = queryLoggingService3.getClass();
    boolean boolean27 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) wildcardClass26);
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory28 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory29 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean31 = queryLoggingServiceExtensionFactory29.equals((java.lang.Object) (-1L));
    boolean boolean32 = queryLoggingServiceExtensionFactory28.equals((java.lang.Object) boolean31);
    java.lang.Object obj33 = new java.lang.Object();
    boolean boolean34 = queryLoggingServiceExtensionFactory28.equals(obj33);
    boolean boolean35 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean34);
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext36 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies37 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle38 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext36, queryLoggingServiceDependencies37);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertEquals(
        "'" + str1 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str1, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals(
        "'" + str2 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str2, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(queryLoggingService3);
    org.junit.Assert.assertNotNull(wildcardClass26);
    org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
  }

  @Test
  public void test0485() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0485");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction8 = null;
    java.lang.Throwable throwable9 = null;
    queryLoggingService0.rolcForKe(kernelTransaction8, throwable9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    queryLoggingService0.sucsForEx(executingQuery11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService0.comForKe(kernelTransaction13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    queryLoggingService0.rolcForKe(kernelTransaction15);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction17 = null;
    queryLoggingService0.rolcForKe(kernelTransaction17);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery19 = null;
    queryLoggingService0.sucsForEx(executingQuery19);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery21 = null;
    queryLoggingService0.sucsForEx(executingQuery21);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction23 = null;
    java.lang.Throwable throwable24 = null;
    queryLoggingService0.rolcForKe(kernelTransaction23, throwable24);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery26 = null;
    queryLoggingService0.faleForExTh(executingQuery26, "hi!");
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0486() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0486");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    queryLoggingService0.faleForExTh(executingQuery3, "");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.faleForExTh(executingQuery6, throwable7);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction9 = null;
    queryLoggingService0.strForEx(kernelTransaction9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    queryLoggingService0.faleForExTh(executingQuery11, "query-logging");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    java.lang.Throwable throwable15 = null;
    queryLoggingService0.rolcForKe(kernelTransaction14, throwable15);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction17 = null;
    java.lang.Throwable throwable18 = null;
    queryLoggingService0.rolcForKe(kernelTransaction17, throwable18);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction20 = null;
    queryLoggingService0.rolcForKe(kernelTransaction20);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction22 = null;
    queryLoggingService0.rolcForKe(kernelTransaction22);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0487() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0487");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    queryLoggingService0.strForEx(executingQuery9);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    java.lang.Throwable throwable12 = null;
    queryLoggingService0.rolcForKe(kernelTransaction11, throwable12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    queryLoggingService0.comForKe(kernelTransaction14);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery16 = null;
    queryLoggingService0.sucsForEx(executingQuery16);
    java.lang.Class<?> wildcardClass18 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass18);
  }

  @Test
  public void test0488() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0488");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    java.lang.Throwable throwable10 = null;
    queryLoggingService0.faleForExTh(executingQuery9, throwable10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    queryLoggingService0.strForEx(kernelTransaction12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    queryLoggingService0.strForEx(kernelTransaction14);
    java.lang.Class<?> wildcardClass16 = queryLoggingService0.getClass();
    org.junit.Assert.assertNotNull(queryLoggingService0);
    org.junit.Assert.assertNotNull(wildcardClass16);
  }

  @Test
  public void test0489() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0489");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    boolean boolean6 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) 0L);
    java.lang.String str7 = queryLoggingServiceExtensionFactory0.getName();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext8 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies9 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle10 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext8, queryLoggingServiceDependencies9);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "query-logging" + "'", str7,
        "query-logging");
  }

  @Test
  public void test0490() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0490");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory1 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean3 = queryLoggingServiceExtensionFactory1.equals((java.lang.Object) (-1L));
    boolean boolean4 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) boolean3);
    java.lang.String str5 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str6 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str7 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str8 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str9 = queryLoggingServiceExtensionFactory0.getName();
    org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertEquals(
        "'" + str5 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str5, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals(
        "'" + str6 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str6, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals(
        "'" + str7 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str7, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "query-logging" + "'", str8,
        "query-logging");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "query-logging" + "'", str9,
        "query-logging");
  }

  @Test
  public void test0491() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0491");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory3 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str4 = queryLoggingServiceExtensionFactory3.toString();
    boolean boolean5 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory3);
    boolean boolean7 = queryLoggingServiceExtensionFactory3.equals((java.lang.Object) 100.0d);
    java.lang.String str8 = queryLoggingServiceExtensionFactory3.getName();
    java.lang.String str9 = queryLoggingServiceExtensionFactory3.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService10 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction11 = null;
    java.lang.Throwable throwable12 = null;
    queryLoggingService10.rolcForKe(kernelTransaction11, throwable12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    queryLoggingService10.comForKe(kernelTransaction14);
    boolean boolean16 = queryLoggingServiceExtensionFactory3.equals(
        (java.lang.Object) queryLoggingService10);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery17 = null;
    queryLoggingService10.faleForExTh(executingQuery17,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery20 = null;
    queryLoggingService10.strForEx(executingQuery20);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery22 = null;
    java.lang.Throwable throwable23 = null;
    queryLoggingService10.faleForExTh(executingQuery22, throwable23);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction25 = null;
    java.lang.Throwable throwable26 = null;
    queryLoggingService10.rolcForKe(kernelTransaction25, throwable26);
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str4 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str4, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "query-logging" + "'", str8,
        "query-logging");
    org.junit.Assert.assertEquals(
        "'" + str9 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str9, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(queryLoggingService10);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
  }

  @Test
  public void test0492() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0492");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6, throwable7);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery9 = null;
    queryLoggingService0.faleForExTh(executingQuery9, "query-logging");
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    queryLoggingService0.strForEx(kernelTransaction12);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction14 = null;
    queryLoggingService0.strForEx(kernelTransaction14);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction16 = null;
    queryLoggingService0.strForEx(kernelTransaction16);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0493() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0493");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (short) 1);
    java.lang.Class<?> wildcardClass3 = queryLoggingServiceExtensionFactory0.getClass();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertNotNull(wildcardClass3);
  }

  @Test
  public void test0494() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0494");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction1 = null;
    queryLoggingService0.rolcForKe(kernelTransaction1);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.rolcForKe(kernelTransaction3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction8 = null;
    java.lang.Throwable throwable9 = null;
    queryLoggingService0.rolcForKe(kernelTransaction8, throwable9);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery11 = null;
    queryLoggingService0.sucsForEx(executingQuery11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService0.strForEx(kernelTransaction13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    queryLoggingService0.rolcForKe(kernelTransaction15);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0495() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0495");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService0 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery1 = null;
    queryLoggingService0.strForEx(executingQuery1);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService0.faleForExTh(executingQuery3, throwable4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    queryLoggingService0.rolcForKe(kernelTransaction6);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery8 = null;
    queryLoggingService0.sucsForEx(executingQuery8);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery10 = null;
    queryLoggingService0.strForEx(executingQuery10);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction12 = null;
    java.lang.Throwable throwable13 = null;
    queryLoggingService0.rolcForKe(kernelTransaction12, throwable13);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction15 = null;
    queryLoggingService0.comForKe(kernelTransaction15);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction17 = null;
    queryLoggingService0.comForKe(kernelTransaction17);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction19 = null;
    queryLoggingService0.comForKe(kernelTransaction19);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery21 = null;
    queryLoggingService0.strForEx(executingQuery21);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction23 = null;
    java.lang.Throwable throwable24 = null;
    queryLoggingService0.rolcForKe(kernelTransaction23, throwable24);
    org.junit.Assert.assertNotNull(queryLoggingService0);
  }

  @Test
  public void test0496() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0496");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory3 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str4 = queryLoggingServiceExtensionFactory3.toString();
    boolean boolean5 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingServiceExtensionFactory3);
    boolean boolean7 = queryLoggingServiceExtensionFactory3.equals((java.lang.Object) 100.0d);
    java.lang.String str8 = queryLoggingServiceExtensionFactory3.toString();
    java.lang.String str9 = queryLoggingServiceExtensionFactory3.getName();
    java.lang.Object obj10 = null;
    boolean boolean11 = queryLoggingServiceExtensionFactory3.equals(obj10);
    java.lang.String str12 = queryLoggingServiceExtensionFactory3.toString();
    java.lang.String str13 = queryLoggingServiceExtensionFactory3.getName();
    java.lang.Class<?> wildcardClass14 = queryLoggingServiceExtensionFactory3.getClass();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals(
        "'" + str4 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str4, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    org.junit.Assert.assertEquals(
        "'" + str8 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str8, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "query-logging" + "'", str9,
        "query-logging");
    org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str12, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "query-logging" + "'", str13,
        "query-logging");
    org.junit.Assert.assertNotNull(wildcardClass14);
  }

  @Test
  public void test0497() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0497");
    }
    io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl diagnosticsOfflineReportProviderQueryLoggingImpl0 = new io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction1 = null;
    org.neo4j.configuration.Config config3 = null;
    java.nio.file.Path path4 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction1, "hi!", config3,
        path4);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.configuration.Config config8 = null;
    java.nio.file.Path path9 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction6, "query-logging",
        config8, path9);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction11 = null;
    org.neo4j.configuration.Config config13 = null;
    java.nio.file.Path path14 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction11, "query-logging",
        config13, path14);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction16 = null;
    org.neo4j.configuration.Config config18 = null;
    java.nio.file.Path path19 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction16, "", config18,
        path19);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction21 = null;
    org.neo4j.configuration.Config config23 = null;
    java.nio.file.Path path24 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl0.init(fileSystemAbstraction21, "query-logging",
        config23, path24);
  }

  @Test
  public void test0498() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0498");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (-1L));
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService3 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction4 = null;
    queryLoggingService3.rolcForKe(kernelTransaction4);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction6 = null;
    java.lang.Throwable throwable7 = null;
    queryLoggingService3.rolcForKe(kernelTransaction6, throwable7);
    boolean boolean9 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingService3);
    java.lang.String str10 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str11 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str12 = queryLoggingServiceExtensionFactory0.toString();
    org.neo4j.kernel.extension.context.ExtensionContext extensionContext13 = null;
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory.QueryLoggingServiceDependencies queryLoggingServiceDependencies14 = null;
    try {
      org.neo4j.kernel.lifecycle.Lifecycle lifecycle15 = queryLoggingServiceExtensionFactory0.newInstance(
          extensionContext13, queryLoggingServiceDependencies14);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertNotNull(queryLoggingService3);
    org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "query-logging" + "'", str10,
        "query-logging");
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "query-logging" + "'", str11,
        "query-logging");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str12, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
  }

  @Test
  public void test0499() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0499");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    java.lang.String str1 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService2 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction3 = null;
    java.lang.Throwable throwable4 = null;
    queryLoggingService2.rolcForKe(kernelTransaction3, throwable4);
    boolean boolean6 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) throwable4);
    java.lang.String str7 = queryLoggingServiceExtensionFactory0.toString();
    java.lang.String str8 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl diagnosticsOfflineReportProviderQueryLoggingImpl9 = new io.github.onograph.kernel.srv.log.query.DiagnosticsOfflineReportProviderQueryLoggingImpl();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction10 = null;
    org.neo4j.configuration.Config config12 = null;
    java.nio.file.Path path13 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl9.init(fileSystemAbstraction10, "hi!", config12,
        path13);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction15 = null;
    org.neo4j.configuration.Config config17 = null;
    java.nio.file.Path path18 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl9.init(fileSystemAbstraction15,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config17, path18);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction20 = null;
    org.neo4j.configuration.Config config22 = null;
    java.nio.file.Path path23 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl9.init(fileSystemAbstraction20,
        "Extension:QueryLoggingServiceExtensionFactory[query-logging]", config22, path23);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction25 = null;
    org.neo4j.configuration.Config config27 = null;
    java.nio.file.Path path28 = null;
    diagnosticsOfflineReportProviderQueryLoggingImpl9.init(fileSystemAbstraction25, "query-logging",
        config27, path28);
    boolean boolean30 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) fileSystemAbstraction25);
    boolean boolean32 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) 0.0f);
    java.lang.String str33 = queryLoggingServiceExtensionFactory0.getName();
    org.junit.Assert.assertEquals(
        "'" + str1 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str1, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(queryLoggingService2);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    org.junit.Assert.assertEquals(
        "'" + str7 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str7, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertEquals(
        "'" + str8 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str8, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    org.junit.Assert.assertEquals("'" + str33 + "' != '" + "query-logging" + "'", str33,
        "query-logging");
  }

  @Test
  public void test0500() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0500");
    }
    io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory queryLoggingServiceExtensionFactory0 = new io.github.onograph.kernel.srv.log.query.QueryLoggingServiceExtensionFactory();
    boolean boolean2 = queryLoggingServiceExtensionFactory0.equals((java.lang.Object) (short) 1);
    java.lang.String str3 = queryLoggingServiceExtensionFactory0.getName();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService4 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery5 = null;
    queryLoggingService4.strForEx(executingQuery5);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery7 = null;
    java.lang.Throwable throwable8 = null;
    queryLoggingService4.faleForExTh(executingQuery7, throwable8);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction10 = null;
    java.lang.Throwable throwable11 = null;
    queryLoggingService4.rolcForKe(kernelTransaction10, throwable11);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction13 = null;
    queryLoggingService4.comForKe(kernelTransaction13);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery15 = null;
    queryLoggingService4.strForEx(executingQuery15);
    org.neo4j.kernel.api.query.ExecutingQuery executingQuery17 = null;
    queryLoggingService4.strForEx(executingQuery17);
    boolean boolean19 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) executingQuery17);
    java.lang.String str20 = queryLoggingServiceExtensionFactory0.getName();
    java.lang.String str21 = queryLoggingServiceExtensionFactory0.toString();
    io.github.onograph.kernel.srv.log.query.QueryLoggingService queryLoggingService22 = io.github.onograph.kernel.srv.log.query.QueryLoggingService.NO_LG;
    org.neo4j.kernel.api.KernelTransaction kernelTransaction23 = null;
    java.lang.Throwable throwable24 = null;
    queryLoggingService22.rolcForKe(kernelTransaction23, throwable24);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction26 = null;
    queryLoggingService22.comForKe(kernelTransaction26);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction28 = null;
    queryLoggingService22.rolcForKe(kernelTransaction28);
    org.neo4j.kernel.api.KernelTransaction kernelTransaction30 = null;
    queryLoggingService22.rolcForKe(kernelTransaction30);
    boolean boolean32 = queryLoggingServiceExtensionFactory0.equals(
        (java.lang.Object) queryLoggingService22);
    java.lang.String str33 = queryLoggingServiceExtensionFactory0.getName();
    org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    org.junit.Assert.assertEquals("'" + str3 + "' != '" + "query-logging" + "'", str3,
        "query-logging");
    org.junit.Assert.assertNotNull(queryLoggingService4);
    org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "query-logging" + "'", str20,
        "query-logging");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "Extension:QueryLoggingServiceExtensionFactory[query-logging]"
            + "'", str21, "Extension:QueryLoggingServiceExtensionFactory[query-logging]");
    org.junit.Assert.assertNotNull(queryLoggingService22);
    org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    org.junit.Assert.assertEquals("'" + str33 + "' != '" + "query-logging" + "'", str33,
        "query-logging");
  }
}

