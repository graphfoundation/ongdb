package io.github.onograph.test;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ModRegTest8 {

  public static boolean debug = false;

  @Test
  public void test4001() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4001");
    }
    java.lang.Object[] objArray1 = null;
    java.lang.String str2 = io.github.onograph.I18N.format(
        "The total number of terminated write transactions. (counter)", objArray1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '"
            + "MISSING VAL FOR KEY:The total number of terminated write transactions. (counter)" + "'",
        str2, "MISSING VAL FOR KEY:The total number of terminated write transactions. (counter)");
  }

  @Test
  public void test4002() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4002");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:causal_clustering.kubernetes.label_selector");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4003() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4003");
    }
    java.lang.Object[] objArray14 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str15 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray14);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray14);
    java.lang.String str17 = io.github.onograph.I18N.format("read", objArray14);
    java.lang.String str18 = io.github.onograph.I18N.format("invisible", objArray14);
    java.lang.String str19 = io.github.onograph.I18N.format("relationship-type-distribution",
        objArray14);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "Path to the home directory for the copied database. Default is the same as the database copied from.",
        objArray14);
    java.lang.String str21 = io.github.onograph.I18N.format("connections_closed", objArray14);
    java.lang.String str22 = io.github.onograph.I18N.format("dbms.backup.listen_address",
        objArray14);
    java.lang.String str23 = io.github.onograph.I18N.format(
        "The number of operations to be processed before the state machines flush to disk",
        objArray14);
    java.lang.String str24 = io.github.onograph.I18N.format(
        "Raft Replication fail count. (counter)", objArray14);
    java.lang.Class<?> wildcardClass25 = objArray14.getClass();
    org.junit.Assert.assertNotNull(objArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str15,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str16, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str17,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str18, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:relationship-type-distribution" + "'", str19,
        "MISSING VAL FOR KEY:relationship-type-distribution");
    org.junit.Assert.assertEquals("'" + str20 + "' != '"
            + "MISSING VAL FOR KEY:Path to the home directory for the copied database. Default is the same as the database copied from."
            + "'", str20,
        "MISSING VAL FOR KEY:Path to the home directory for the copied database. Default is the same as the database copied from.");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:connections_closed" + "'", str21,
        "MISSING VAL FOR KEY:connections_closed");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "MISSING VAL FOR KEY:dbms.backup.listen_address" + "'", str22,
        "MISSING VAL FOR KEY:dbms.backup.listen_address");
    org.junit.Assert.assertEquals("'" + str23 + "' != '"
            + "MISSING VAL FOR KEY:The number of operations to be processed before the state machines flush to disk"
            + "'", str23,
        "MISSING VAL FOR KEY:The number of operations to be processed before the state machines flush to disk");
    org.junit.Assert.assertEquals(
        "'" + str24 + "' != '" + "MISSING VAL FOR KEY:Raft Replication fail count. (counter)" + "'",
        str24, "MISSING VAL FOR KEY:Raft Replication fail count. (counter)");
    org.junit.Assert.assertNotNull(wildcardClass25);
  }

  @Test
  public void test4004() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4004");
    }
    java.lang.Object[] objArray12 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str13 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray12);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray12);
    java.lang.String str15 = io.github.onograph.I18N.format("read", objArray12);
    java.lang.String str16 = io.github.onograph.I18N.format("invisible", objArray12);
    java.lang.String str17 = io.github.onograph.I18N.format(
        "The total number of rolled back read transactions. (counter)", objArray12);
    java.lang.String str18 = io.github.onograph.I18N.format("active", objArray12);
    java.lang.String str19 = io.github.onograph.I18N.format("roles", objArray12);
    java.lang.String str20 = io.github.onograph.I18N.format("queryParameters", objArray12);
    java.lang.Class<?> wildcardClass21 = objArray12.getClass();
    org.junit.Assert.assertNotNull(objArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str13,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str14, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str15,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str16, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str17 + "' != '"
            + "MISSING VAL FOR KEY:The total number of rolled back read transactions. (counter)" + "'",
        str17, "MISSING VAL FOR KEY:The total number of rolled back read transactions. (counter)");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:active" + "'",
        str18, "MISSING VAL FOR KEY:active");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MISSING VAL FOR KEY:roles" + "'", str19,
        "MISSING VAL FOR KEY:roles");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:queryParameters" + "'", str20,
        "MISSING VAL FOR KEY:queryParameters");
    org.junit.Assert.assertNotNull(wildcardClass21);
  }

  @Test
  public void test4005() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4005");
    }
    java.lang.Object[] objArray11 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str12 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray11);
    java.lang.String str13 = io.github.onograph.I18N.format("status", objArray11);
    java.lang.String str14 = io.github.onograph.I18N.format("", objArray11);
    java.lang.String str15 = io.github.onograph.I18N.format("operator_auth", objArray11);
    java.lang.String str16 = io.github.onograph.I18N.format("Restore a backed up database.",
        objArray11);
    java.lang.String str17 = io.github.onograph.I18N.format("passwordChangeRequired", objArray11);
    java.lang.String str18 = io.github.onograph.I18N.format("hours", objArray11);
    java.lang.String str19 = io.github.onograph.I18N.format("*vm.pause_time", objArray11);
    java.lang.Class<?> wildcardClass20 = objArray11.getClass();
    org.junit.Assert.assertNotNull(objArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str12 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str12,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MISSING VAL FOR KEY:status" + "'",
        str13, "MISSING VAL FOR KEY:status");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:" + "'", str14,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:operator_auth" + "'", str15,
        "MISSING VAL FOR KEY:operator_auth");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:Restore a backed up database." + "'", str16,
        "MISSING VAL FOR KEY:Restore a backed up database.");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:passwordChangeRequired" + "'", str17,
        "MISSING VAL FOR KEY:passwordChangeRequired");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:hours" + "'", str18,
        "MISSING VAL FOR KEY:hours");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:*vm.pause_time" + "'", str19,
        "MISSING VAL FOR KEY:*vm.pause_time");
    org.junit.Assert.assertNotNull(wildcardClass20);
  }

  @Test
  public void test4006() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4006");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str14 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format("read", objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format("invisible", objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format("dec_dispatch", objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format("PropertyKey", objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format("relationship-type-distribution",
        objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format("driver.api", objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format("*vm.memory.pool.g1_old_gen",
        objArray13);
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str14,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str15, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str16,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str17, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:dec_dispatch" + "'",
        str18, "MISSING VAL FOR KEY:dec_dispatch");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MISSING VAL FOR KEY:PropertyKey" + "'",
        str19, "MISSING VAL FOR KEY:PropertyKey");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:relationship-type-distribution" + "'", str20,
        "MISSING VAL FOR KEY:relationship-type-distribution");
    org.junit.Assert.assertEquals("'" + str21 + "' != '" + "MISSING VAL FOR KEY:driver.api" + "'",
        str21, "MISSING VAL FOR KEY:driver.api");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "MISSING VAL FOR KEY:*vm.memory.pool.g1_old_gen" + "'", str22,
        "MISSING VAL FOR KEY:*vm.memory.pool.g1_old_gen");
  }

  @Test
  public void test4007() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4007");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("enc_get_all_database_ids");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4008() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4008");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str14 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format("writable", objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format("--additional-config", objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format("addresses", objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format(
        "The total number of Bolt connections opened since this instance started. This includes both succeeded and failed connections. (counter)",
        objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format("", objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "Configure if the `dbms.routing.getRoutingTable()` procedure should include the leader as read endpoint or return only read replicas/followers. Note: leader is returned as read endpoint if no other member is present all. ",
        objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:Count of database operations which failed previously but have recovered. (counter)",
        objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format(
        "causal_clustering.middleware.akka.down_unreachable_on_new_joiner", objArray13);
    java.lang.Class<?> wildcardClass23 = objArray13.getClass();
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str14,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:writable" + "'",
        str15, "MISSING VAL FOR KEY:writable");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:--additional-config" + "'", str16,
        "MISSING VAL FOR KEY:--additional-config");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:addresses" + "'",
        str17, "MISSING VAL FOR KEY:addresses");
    org.junit.Assert.assertEquals("'" + str18 + "' != '"
            + "MISSING VAL FOR KEY:The total number of Bolt connections opened since this instance started. This includes both succeeded and failed connections. (counter)"
            + "'", str18,
        "MISSING VAL FOR KEY:The total number of Bolt connections opened since this instance started. This includes both succeeded and failed connections. (counter)");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MISSING VAL FOR KEY:" + "'", str19,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str20 + "' != '"
            + "MISSING VAL FOR KEY:Configure if the `dbms.routing.getRoutingTable()` procedure should include the leader as read endpoint or return only read replicas/followers. Note: leader is returned as read endpoint if no other member is present all. "
            + "'", str20,
        "MISSING VAL FOR KEY:Configure if the `dbms.routing.getRoutingTable()` procedure should include the leader as read endpoint or return only read replicas/followers. Note: leader is returned as read endpoint if no other member is present all. ");
    org.junit.Assert.assertEquals("'" + str21 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Count of database operations which failed previously but have recovered. (counter)"
            + "'", str21,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Count of database operations which failed previously but have recovered. (counter)");
    org.junit.Assert.assertEquals("'" + str22 + "' != '"
            + "MISSING VAL FOR KEY:causal_clustering.middleware.akka.down_unreachable_on_new_joiner"
            + "'", str22,
        "MISSING VAL FOR KEY:causal_clustering.middleware.akka.down_unreachable_on_new_joiner");
    org.junit.Assert.assertNotNull(wildcardClass23);
  }

  @Test
  public void test4009() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4009");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("temp-save");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4010() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4010");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "The ratio of hits to the total number of lookups in the page cache. (gauge)");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4011() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4011");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:volumetric");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4012() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4012");
    }
    java.lang.Object[] objArray15 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str16 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray15);
    java.lang.String str17 = io.github.onograph.I18N.format("status", objArray15);
    java.lang.String str18 = io.github.onograph.I18N.format("raft-server", objArray15);
    java.lang.String str19 = io.github.onograph.I18N.format("transaction.*", objArray15);
    java.lang.String str20 = io.github.onograph.I18N.format("metrics.filter", objArray15);
    java.lang.String str21 = io.github.onograph.I18N.format("Retry-After", objArray15);
    java.lang.String str22 = io.github.onograph.I18N.format(
        "Directory to hold cluster state including Raft log", objArray15);
    java.lang.String str23 = io.github.onograph.I18N.format("message_processing_timer", objArray15);
    java.lang.String str24 = io.github.onograph.I18N.format(
        "causal_clustering.akka_actor_system_restarter.initial_delay", objArray15);
    java.lang.String str25 = io.github.onograph.I18N.format("visible", objArray15);
    java.lang.String str26 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:dbms.logs.security.rotation.delay", objArray15);
    java.lang.String str27 = io.github.onograph.I18N.format("", objArray15);
    org.junit.Assert.assertNotNull(objArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str16 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str16,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:status" + "'",
        str17, "MISSING VAL FOR KEY:status");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:raft-server" + "'",
        str18, "MISSING VAL FOR KEY:raft-server");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:transaction.*" + "'", str19,
        "MISSING VAL FOR KEY:transaction.*");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:metrics.filter" + "'", str20,
        "MISSING VAL FOR KEY:metrics.filter");
    org.junit.Assert.assertEquals("'" + str21 + "' != '" + "MISSING VAL FOR KEY:Retry-After" + "'",
        str21, "MISSING VAL FOR KEY:Retry-After");
    org.junit.Assert.assertEquals("'" + str22 + "' != '"
            + "MISSING VAL FOR KEY:Directory to hold cluster state including Raft log" + "'", str22,
        "MISSING VAL FOR KEY:Directory to hold cluster state including Raft log");
    org.junit.Assert.assertEquals(
        "'" + str23 + "' != '" + "MISSING VAL FOR KEY:message_processing_timer" + "'", str23,
        "MISSING VAL FOR KEY:message_processing_timer");
    org.junit.Assert.assertEquals("'" + str24 + "' != '"
            + "MISSING VAL FOR KEY:causal_clustering.akka_actor_system_restarter.initial_delay" + "'",
        str24, "MISSING VAL FOR KEY:causal_clustering.akka_actor_system_restarter.initial_delay");
    org.junit.Assert.assertEquals("'" + str25 + "' != '" + "MISSING VAL FOR KEY:visible" + "'",
        str25, "MISSING VAL FOR KEY:visible");
    org.junit.Assert.assertEquals("'" + str26 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms.logs.security.rotation.delay" + "'", str26,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms.logs.security.rotation.delay");
    org.junit.Assert.assertEquals("'" + str27 + "' != '" + "MISSING VAL FOR KEY:" + "'", str27,
        "MISSING VAL FOR KEY:");
  }

  @Test
  public void test4013() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4013");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("List all locks at this database.");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4014() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4014");
    }
    java.lang.Object[] objArray10 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str11 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray10);
    java.lang.String str12 = io.github.onograph.I18N.format("true", objArray10);
    java.lang.String str13 = io.github.onograph.I18N.format("dbms.security.auth_provider",
        objArray10);
    java.lang.String str14 = io.github.onograph.I18N.format("", objArray10);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:Perform the recovery of the backup store by applying the latest pulled transactions. If disabled, the backup will be faster but a recovery of the backup store will be required at a later time before restoring the data (using the neo4j-admin prepare-restore command). Note: if --prepare-restore is set to false, then --check-consistency is implicitly set to false because the consistency of a none-recovered store can't be checked.",
        objArray10);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:enc_snapshot", objArray10);
    org.junit.Assert.assertNotNull(objArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str11,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MISSING VAL FOR KEY:true" + "'", str12,
        "MISSING VAL FOR KEY:true");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:dbms.security.auth_provider" + "'", str13,
        "MISSING VAL FOR KEY:dbms.security.auth_provider");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:" + "'", str14,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str15 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Perform the recovery of the backup store by applying the latest pulled transactions. If disabled, the backup will be faster but a recovery of the backup store will be required at a later time before restoring the data (using the neo4j-admin prepare-restore command). Note: if --prepare-restore is set to false, then --check-consistency is implicitly set to false because the consistency of a none-recovered store can't be checked."
            + "'", str15,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Perform the recovery of the backup store by applying the latest pulled transactions. If disabled, the backup will be faster but a recovery of the backup store will be required at a later time before restoring the data (using the neo4j-admin prepare-restore command). Note: if --prepare-restore is set to false, then --check-consistency is implicitly set to false because the consistency of a none-recovered store can't be checked.");
    org.junit.Assert.assertEquals("'" + str16 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:enc_snapshot"
            + "'", str16,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:enc_snapshot");
  }

  @Test
  public void test4015() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4015");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str14 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format("ccstate", objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format("rollbacks", objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format("error_handler_tail", objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format("dbms.dynamic.setting.allowlist",
        objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format("count", objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:iops", objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format("Log format to use for security log.",
        objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:last_leader_message", objArray13);
    java.lang.String str23 = io.github.onograph.I18N.format(
        "*causal_clustering.core.replication_fail", objArray13);
    java.lang.Class<?> wildcardClass24 = objArray13.getClass();
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str14 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str14,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:ccstate" + "'",
        str15, "MISSING VAL FOR KEY:ccstate");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:rollbacks" + "'",
        str16, "MISSING VAL FOR KEY:rollbacks");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:error_handler_tail" + "'", str17,
        "MISSING VAL FOR KEY:error_handler_tail");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:dbms.dynamic.setting.allowlist" + "'", str18,
        "MISSING VAL FOR KEY:dbms.dynamic.setting.allowlist");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MISSING VAL FOR KEY:count" + "'", str19,
        "MISSING VAL FOR KEY:count");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:iops" + "'", str20,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:iops");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:Log format to use for security log." + "'",
        str21, "MISSING VAL FOR KEY:Log format to use for security log.");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:last_leader_message"
            + "'", str22, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:last_leader_message");
    org.junit.Assert.assertEquals(
        "'" + str23 + "' != '" + "MISSING VAL FOR KEY:*causal_clustering.core.replication_fail"
            + "'", str23, "MISSING VAL FOR KEY:*causal_clustering.core.replication_fail");
    org.junit.Assert.assertNotNull(wildcardClass24);
  }

  @Test
  public void test4016() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4016");
    }
    java.lang.Object[] objArray12 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str13 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray12);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray12);
    java.lang.String str15 = io.github.onograph.I18N.format("read", objArray12);
    java.lang.String str16 = io.github.onograph.I18N.format("execute_boosted_from_config",
        objArray12);
    java.lang.String str17 = io.github.onograph.I18N.format("LabelQualifierAll", objArray12);
    java.lang.String str18 = io.github.onograph.I18N.format("dbms.upgradeDetails", objArray12);
    java.lang.String str19 = io.github.onograph.I18N.format("*dbms.pool.bolt.used_heap",
        objArray12);
    java.lang.String str20 = io.github.onograph.I18N.format("inbound", objArray12);
    java.lang.Class<?> wildcardClass21 = objArray12.getClass();
    org.junit.Assert.assertNotNull(objArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str13,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str14, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str15,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:execute_boosted_from_config" + "'", str16,
        "MISSING VAL FOR KEY:execute_boosted_from_config");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:LabelQualifierAll" + "'", str17,
        "MISSING VAL FOR KEY:LabelQualifierAll");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:dbms.upgradeDetails" + "'", str18,
        "MISSING VAL FOR KEY:dbms.upgradeDetails");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:*dbms.pool.bolt.used_heap" + "'", str19,
        "MISSING VAL FOR KEY:*dbms.pool.bolt.used_heap");
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "MISSING VAL FOR KEY:inbound" + "'",
        str20, "MISSING VAL FOR KEY:inbound");
    org.junit.Assert.assertNotNull(wildcardClass21);
  }

  @Test
  public void test4017() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4017");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:replication_maybe");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4018() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4018");
    }
    java.lang.Object[] objArray11 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str12 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray11);
    java.lang.String str13 = io.github.onograph.I18N.format("status", objArray11);
    java.lang.String str14 = io.github.onograph.I18N.format("", objArray11);
    java.lang.String str15 = io.github.onograph.I18N.format("bolt.*", objArray11);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "Include metadata in file. Can't be used for backing system database.\nroles - commands to create the roles and privileges (for both database and graph) that affect the use of the database\nusers - commands to create the users that can use the database and their role assignments \nall - include roles and users",
        objArray11);
    java.lang.String str17 = io.github.onograph.I18N.format(
        "Count of successful database create operations. (counter)", objArray11);
    java.lang.String str18 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:*transaction.last_committed_tx_id", objArray11);
    java.lang.String str19 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:writable",
        objArray11);
    java.lang.Class<?> wildcardClass20 = objArray11.getClass();
    org.junit.Assert.assertNotNull(objArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str12 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str12,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MISSING VAL FOR KEY:status" + "'",
        str13, "MISSING VAL FOR KEY:status");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:" + "'", str14,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:bolt.*" + "'",
        str15, "MISSING VAL FOR KEY:bolt.*");
    org.junit.Assert.assertEquals("'" + str16 + "' != '"
            + "MISSING VAL FOR KEY:Include metadata in file. Can't be used for backing system database.\nroles - commands to create the roles and privileges (for both database and graph) that affect the use of the database\nusers - commands to create the users that can use the database and their role assignments \nall - include roles and users"
            + "'", str16,
        "MISSING VAL FOR KEY:Include metadata in file. Can't be used for backing system database.\nroles - commands to create the roles and privileges (for both database and graph) that affect the use of the database\nusers - commands to create the users that can use the database and their role assignments \nall - include roles and users");
    org.junit.Assert.assertEquals("'" + str17 + "' != '"
            + "MISSING VAL FOR KEY:Count of successful database create operations. (counter)" + "'",
        str17, "MISSING VAL FOR KEY:Count of successful database create operations. (counter)");
    org.junit.Assert.assertEquals("'" + str18 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:*transaction.last_committed_tx_id" + "'", str18,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:*transaction.last_committed_tx_id");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:writable" + "'", str19,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:writable");
    org.junit.Assert.assertNotNull(wildcardClass20);
  }

  @Test
  public void test4019() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4019");
    }
    java.lang.Object[] objArray10 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str11 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray10);
    java.lang.String str12 = io.github.onograph.I18N.format("ccstate", objArray10);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "Use native transport if available. Epoll for Linux or Kqueue for MacOS/BSD. If this setting is set to false, or if native transport is not available, Nio transport will be used.",
        objArray10);
    java.lang.String str14 = io.github.onograph.I18N.format("Delete the specified user.",
        objArray10);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.middleware.akka.cluster.seed_node_timeout",
        objArray10);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Retry-After", objArray10);
    java.lang.String str17 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:restarting-cluster-client", objArray10);
    org.junit.Assert.assertNotNull(objArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str11 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str11,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MISSING VAL FOR KEY:ccstate" + "'",
        str12, "MISSING VAL FOR KEY:ccstate");
    org.junit.Assert.assertEquals("'" + str13 + "' != '"
            + "MISSING VAL FOR KEY:Use native transport if available. Epoll for Linux or Kqueue for MacOS/BSD. If this setting is set to false, or if native transport is not available, Nio transport will be used."
            + "'", str13,
        "MISSING VAL FOR KEY:Use native transport if available. Epoll for Linux or Kqueue for MacOS/BSD. If this setting is set to false, or if native transport is not available, Nio transport will be used.");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:Delete the specified user." + "'", str14,
        "MISSING VAL FOR KEY:Delete the specified user.");
    org.junit.Assert.assertEquals("'" + str15 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.middleware.akka.cluster.seed_node_timeout"
            + "'", str15,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.middleware.akka.cluster.seed_node_timeout");
    org.junit.Assert.assertEquals("'" + str16 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:Retry-After" + "'", str16,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:Retry-After");
    org.junit.Assert.assertEquals("'" + str17 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:restarting-cluster-client"
            + "'", str17,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:restarting-cluster-client");
  }

  @Test
  public void test4020() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4020");
    }
    java.lang.Object[] objArray7 = new java.lang.Object[]{};
    java.lang.String str8 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray7);
    java.lang.String str9 = io.github.onograph.I18N.format("Upgraded", objArray7);
    java.lang.String str10 = io.github.onograph.I18N.format(
        "Configure the discovery type used for cluster name resolution", objArray7);
    java.lang.String str11 = io.github.onograph.I18N.format("high_limitV3_4_0", objArray7);
    java.lang.String str12 = io.github.onograph.I18N.format(".Database checkpointing metrics",
        objArray7);
    java.lang.String str13 = io.github.onograph.I18N.format("tx_size_heap", objArray7);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:An LDAP system account username to use for authorization searches when `dbms.security.ldap.authorization.use_system_account` is `true`. Note that the `dbms.security.ldap.authentication.user_dn_template` will not be applied to this username, so you may have to specify a full DN.",
        objArray7);
    org.junit.Assert.assertNotNull(objArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
    org.junit.Assert.assertEquals("'" + str8 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str8,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MISSING VAL FOR KEY:Upgraded" + "'",
        str9, "MISSING VAL FOR KEY:Upgraded");
    org.junit.Assert.assertEquals("'" + str10 + "' != '"
            + "MISSING VAL FOR KEY:Configure the discovery type used for cluster name resolution" + "'",
        str10, "MISSING VAL FOR KEY:Configure the discovery type used for cluster name resolution");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:high_limitV3_4_0" + "'", str11,
        "MISSING VAL FOR KEY:high_limitV3_4_0");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:.Database checkpointing metrics" + "'", str12,
        "MISSING VAL FOR KEY:.Database checkpointing metrics");
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MISSING VAL FOR KEY:tx_size_heap" + "'",
        str13, "MISSING VAL FOR KEY:tx_size_heap");
    org.junit.Assert.assertEquals("'" + str14 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:An LDAP system account username to use for authorization searches when `dbms.security.ldap.authorization.use_system_account` is `true`. Note that the `dbms.security.ldap.authentication.user_dn_template` will not be applied to this username, so you may have to specify a full DN."
            + "'", str14,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:An LDAP system account username to use for authorization searches when `dbms.security.ldap.authorization.use_system_account` is `true`. Note that the `dbms.security.ldap.authentication.user_dn_template` will not be applied to this username, so you may have to specify a full DN.");
  }

  @Test
  public void test4021() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4021");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:An LDAP system account username to use for authorization searches when `dbms.security.ldap.authorization.use_system_account` is `true`. Note that the `dbms.security.ldap.authentication.user_dn_template` will not be applied to this username, so you may have to specify a full DN.");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4022() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4022");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str14 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format("read", objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format("invisible", objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format("relationship-type-distribution",
        objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format("read-only", objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "causal_clustering.kubernetes.label_selector", objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format("RAFT log implementation", objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format("RAFT log pruning frequency",
        objArray13);
    java.lang.Class<?> wildcardClass23 = objArray13.getClass();
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str14,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str15, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str16,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str17, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:relationship-type-distribution" + "'", str18,
        "MISSING VAL FOR KEY:relationship-type-distribution");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MISSING VAL FOR KEY:read-only" + "'",
        str19, "MISSING VAL FOR KEY:read-only");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.kubernetes.label_selector"
            + "'", str20, "MISSING VAL FOR KEY:causal_clustering.kubernetes.label_selector");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:RAFT log implementation" + "'", str21,
        "MISSING VAL FOR KEY:RAFT log implementation");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "MISSING VAL FOR KEY:RAFT log pruning frequency" + "'", str22,
        "MISSING VAL FOR KEY:RAFT log pruning frequency");
    org.junit.Assert.assertNotNull(wildcardClass23);
  }

  @Test
  public void test4023() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4023");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:snappy_encoder");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4024() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4024");
    }
    java.lang.Object[] objArray8 = new java.lang.Object[]{};
    java.lang.String str9 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray8);
    java.lang.String str10 = io.github.onograph.I18N.format("Upgraded", objArray8);
    java.lang.String str11 = io.github.onograph.I18N.format(
        "Configure the discovery type used for cluster name resolution", objArray8);
    java.lang.String str12 = io.github.onograph.I18N.format("high_limitV3_4_0", objArray8);
    java.lang.String str13 = io.github.onograph.I18N.format("logs/", objArray8);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "causal_clustering.middleware.akka.allow_any_core_to_bootstrap", objArray8);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:storeDownloadStoreIdReader", objArray8);
    java.lang.String str16 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:Retry-After",
        objArray8);
    org.junit.Assert.assertNotNull(objArray8);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
    org.junit.Assert.assertEquals("'" + str9 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str9,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MISSING VAL FOR KEY:Upgraded" + "'",
        str10, "MISSING VAL FOR KEY:Upgraded");
    org.junit.Assert.assertEquals("'" + str11 + "' != '"
            + "MISSING VAL FOR KEY:Configure the discovery type used for cluster name resolution" + "'",
        str11, "MISSING VAL FOR KEY:Configure the discovery type used for cluster name resolution");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:high_limitV3_4_0" + "'", str12,
        "MISSING VAL FOR KEY:high_limitV3_4_0");
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MISSING VAL FOR KEY:logs/" + "'", str13,
        "MISSING VAL FOR KEY:logs/");
    org.junit.Assert.assertEquals("'" + str14 + "' != '"
            + "MISSING VAL FOR KEY:causal_clustering.middleware.akka.allow_any_core_to_bootstrap" + "'",
        str14, "MISSING VAL FOR KEY:causal_clustering.middleware.akka.allow_any_core_to_bootstrap");
    org.junit.Assert.assertEquals("'" + str15 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:storeDownloadStoreIdReader"
            + "'", str15,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:storeDownloadStoreIdReader");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Retry-After" + "'", str16,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Retry-After");
  }

  @Test
  public void test4025() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4025");
    }
    java.lang.Object[] objArray7 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str8 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray7);
    java.lang.String str9 = io.github.onograph.I18N.format("", objArray7);
    java.lang.String str10 = io.github.onograph.I18N.format(
        "Maximum number of history files for the security log.", objArray7);
    java.lang.String str11 = io.github.onograph.I18N.format(
        "CREATE CONSTRAINT ... IS NODE KEY command", objArray7);
    java.lang.Class<?> wildcardClass12 = objArray7.getClass();
    org.junit.Assert.assertNotNull(objArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str8 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str8,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MISSING VAL FOR KEY:" + "'", str9,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str10 + "' != '"
            + "MISSING VAL FOR KEY:Maximum number of history files for the security log." + "'", str10,
        "MISSING VAL FOR KEY:Maximum number of history files for the security log.");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:CREATE CONSTRAINT ... IS NODE KEY command"
            + "'", str11, "MISSING VAL FOR KEY:CREATE CONSTRAINT ... IS NODE KEY command");
    org.junit.Assert.assertNotNull(wildcardClass12);
  }

  @Test
  public void test4026() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4026");
    }
    java.lang.Object[] objArray12 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str13 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray12);
    java.lang.String str14 = io.github.onograph.I18N.format("browser.credential_timeout",
        objArray12);
    java.lang.String str15 = io.github.onograph.I18N.format("", objArray12);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "Sets level for driver internal logging.", objArray12);
    java.lang.String str17 = io.github.onograph.I18N.format("max_elements", objArray12);
    java.lang.String str18 = io.github.onograph.I18N.format(
        "Used or reserved native memory in bytes. (gauge)", objArray12);
    java.lang.String str19 = io.github.onograph.I18N.format("leader-only", objArray12);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:dbms.max_databases", objArray12);
    java.lang.Class<?> wildcardClass21 = objArray12.getClass();
    org.junit.Assert.assertNotNull(objArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str13,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:browser.credential_timeout" + "'", str14,
        "MISSING VAL FOR KEY:browser.credential_timeout");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:" + "'", str15,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:Sets level for driver internal logging."
            + "'", str16, "MISSING VAL FOR KEY:Sets level for driver internal logging.");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:max_elements" + "'",
        str17, "MISSING VAL FOR KEY:max_elements");
    org.junit.Assert.assertEquals("'" + str18 + "' != '"
            + "MISSING VAL FOR KEY:Used or reserved native memory in bytes. (gauge)" + "'", str18,
        "MISSING VAL FOR KEY:Used or reserved native memory in bytes. (gauge)");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MISSING VAL FOR KEY:leader-only" + "'",
        str19, "MISSING VAL FOR KEY:leader-only");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms.max_databases" + "'",
        str20, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms.max_databases");
    org.junit.Assert.assertNotNull(wildcardClass21);
  }

  @Test
  public void test4027() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4027");
    }
    java.lang.Object[] objArray9 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str10 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray9);
    java.lang.String str11 = io.github.onograph.I18N.format("true", objArray9);
    java.lang.String str12 = io.github.onograph.I18N.format("storeDownloadStoreIdReader",
        objArray9);
    java.lang.String str13 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:Privilege",
        objArray9);
    java.lang.String str14 = io.github.onograph.I18N.format("", objArray9);
    java.lang.Class<?> wildcardClass15 = objArray9.getClass();
    org.junit.Assert.assertNotNull(objArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str10 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str10,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MISSING VAL FOR KEY:true" + "'", str11,
        "MISSING VAL FOR KEY:true");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:storeDownloadStoreIdReader" + "'", str12,
        "MISSING VAL FOR KEY:storeDownloadStoreIdReader");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Privilege" + "'", str13,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Privilege");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:" + "'", str14,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertNotNull(wildcardClass15);
  }

  @Test
  public void test4028() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4028");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.leader_transfer_interval");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4029() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4029");
    }
    java.lang.Object[] objArray8 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str9 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray8);
    java.lang.String str10 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray8);
    java.lang.String str11 = io.github.onograph.I18N.format("elapsedTimeMs", objArray8);
    java.lang.String str12 = io.github.onograph.I18N.format("newPassword", objArray8);
    java.lang.Class<?> wildcardClass13 = objArray8.getClass();
    org.junit.Assert.assertNotNull(objArray8);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str9 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str9,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str10 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str10, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:elapsedTimeMs" + "'", str11,
        "MISSING VAL FOR KEY:elapsedTimeMs");
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MISSING VAL FOR KEY:newPassword" + "'",
        str12, "MISSING VAL FOR KEY:newPassword");
    org.junit.Assert.assertNotNull(wildcardClass13);
  }

  @Test
  public void test4030() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4030");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:Prepare backup for restore by applying the latest transactions which were pulled at the time of backup, but not applied to the store.");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4031() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4031");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:hostnameOrIp");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4032() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4032");
    }
    java.lang.Object[] objArray11 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str12 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray11);
    java.lang.String str13 = io.github.onograph.I18N.format("browser.credential_timeout",
        objArray11);
    java.lang.String str14 = io.github.onograph.I18N.format("", objArray11);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "The total number of threads (both idle and busy) in the jetty pool. (gauge)", objArray11);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "causal_clustering.store_copy_chunk_size", objArray11);
    java.lang.String str17 = io.github.onograph.I18N.format(
        "logging-dispatcher.thread-pool-executor.fixed-pool-size", objArray11);
    java.lang.String str18 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:LZ_validating", objArray11);
    java.lang.Class<?> wildcardClass19 = objArray11.getClass();
    org.junit.Assert.assertNotNull(objArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str12,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:browser.credential_timeout" + "'", str13,
        "MISSING VAL FOR KEY:browser.credential_timeout");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:" + "'", str14,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str15 + "' != '"
            + "MISSING VAL FOR KEY:The total number of threads (both idle and busy) in the jetty pool. (gauge)"
            + "'", str15,
        "MISSING VAL FOR KEY:The total number of threads (both idle and busy) in the jetty pool. (gauge)");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.store_copy_chunk_size"
            + "'", str16, "MISSING VAL FOR KEY:causal_clustering.store_copy_chunk_size");
    org.junit.Assert.assertEquals("'" + str17 + "' != '"
            + "MISSING VAL FOR KEY:logging-dispatcher.thread-pool-executor.fixed-pool-size" + "'",
        str17, "MISSING VAL FOR KEY:logging-dispatcher.thread-pool-executor.fixed-pool-size");
    org.junit.Assert.assertEquals("'" + str18 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:LZ_validating" + "'", str18,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:LZ_validating");
    org.junit.Assert.assertNotNull(wildcardClass19);
  }

  @Test
  public void test4033() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4033");
    }
    java.lang.Object[] objArray7 = new java.lang.Object[]{};
    java.lang.String str8 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray7);
    java.lang.String str9 = io.github.onograph.I18N.format("function", objArray7);
    java.lang.String str10 = io.github.onograph.I18N.format(
        "Used or reserved native memory in bytes. (gauge)", objArray7);
    java.lang.String str11 = io.github.onograph.I18N.format("java.naming.security.authentication",
        objArray7);
    java.lang.String str12 = io.github.onograph.I18N.format(
        "SSL for Fabric drivers is configured using 'fabric' SSL policy.This setting can be used to instruct the driver not to use SSL even though 'fabric' SSL policy is configured.The driver will use SSL if 'fabric' SSL policy is configured and this setting is set to 'true'",
        objArray7);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "Count of successful database drop operations. (counter)", objArray7);
    java.lang.String str14 = io.github.onograph.I18N.format("pool.*", objArray7);
    java.lang.Class<?> wildcardClass15 = objArray7.getClass();
    org.junit.Assert.assertNotNull(objArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
    org.junit.Assert.assertEquals("'" + str8 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str8,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MISSING VAL FOR KEY:function" + "'",
        str9, "MISSING VAL FOR KEY:function");
    org.junit.Assert.assertEquals("'" + str10 + "' != '"
            + "MISSING VAL FOR KEY:Used or reserved native memory in bytes. (gauge)" + "'", str10,
        "MISSING VAL FOR KEY:Used or reserved native memory in bytes. (gauge)");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:java.naming.security.authentication" + "'",
        str11, "MISSING VAL FOR KEY:java.naming.security.authentication");
    org.junit.Assert.assertEquals("'" + str12 + "' != '"
            + "MISSING VAL FOR KEY:SSL for Fabric drivers is configured using 'fabric' SSL policy.This setting can be used to instruct the driver not to use SSL even though 'fabric' SSL policy is configured.The driver will use SSL if 'fabric' SSL policy is configured and this setting is set to 'true'"
            + "'", str12,
        "MISSING VAL FOR KEY:SSL for Fabric drivers is configured using 'fabric' SSL policy.This setting can be used to instruct the driver not to use SSL even though 'fabric' SSL policy is configured.The driver will use SSL if 'fabric' SSL policy is configured and this setting is set to 'true'");
    org.junit.Assert.assertEquals("'" + str13 + "' != '"
            + "MISSING VAL FOR KEY:Count of successful database drop operations. (counter)" + "'",
        str13, "MISSING VAL FOR KEY:Count of successful database drop operations. (counter)");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:pool.*" + "'",
        str14, "MISSING VAL FOR KEY:pool.*");
    org.junit.Assert.assertNotNull(wildcardClass15);
  }

  @Test
  public void test4034() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4034");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("raft_component_decoder");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4035() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4035");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:total_time");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4036() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4036");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:Security log level threshold.");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4037() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4037");
    }
    java.lang.Object[] objArray1 = null;
    java.lang.String str2 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:*dbms.pool.bolt.total_used", objArray1);
    org.junit.Assert.assertEquals(
        "'" + str2 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:*dbms.pool.bolt.total_used"
            + "'", str2, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:*dbms.pool.bolt.total_used");
  }

  @Test
  public void test4038() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4038");
    }
    java.lang.Object[] objArray12 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str13 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray12);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray12);
    java.lang.String str15 = io.github.onograph.I18N.format("read", objArray12);
    java.lang.String str16 = io.github.onograph.I18N.format("invisible", objArray12);
    java.lang.String str17 = io.github.onograph.I18N.format("dec_dispatch", objArray12);
    java.lang.String str18 = io.github.onograph.I18N.format("localhost", objArray12);
    java.lang.String str19 = io.github.onograph.I18N.format(
        "dbms.security.ldap.authorization.group_membership_attributes", objArray12);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:causal_clustering.middleware.akka.shutdown_timeout", objArray12);
    java.lang.Class<?> wildcardClass21 = objArray12.getClass();
    org.junit.Assert.assertNotNull(objArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str13,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str14, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str15,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str16, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:dec_dispatch" + "'",
        str17, "MISSING VAL FOR KEY:dec_dispatch");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:localhost" + "'",
        str18, "MISSING VAL FOR KEY:localhost");
    org.junit.Assert.assertEquals("'" + str19 + "' != '"
            + "MISSING VAL FOR KEY:dbms.security.ldap.authorization.group_membership_attributes" + "'",
        str19, "MISSING VAL FOR KEY:dbms.security.ldap.authorization.group_membership_attributes");
    org.junit.Assert.assertEquals("'" + str20 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.middleware.akka.shutdown_timeout"
            + "'", str20,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.middleware.akka.shutdown_timeout");
    org.junit.Assert.assertNotNull(wildcardClass21);
  }

  @Test
  public void test4039() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4039");
    }
    java.lang.Object[] objArray14 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str15 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray14);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray14);
    java.lang.String str17 = io.github.onograph.I18N.format("read", objArray14);
    java.lang.String str18 = io.github.onograph.I18N.format("invisible", objArray14);
    java.lang.String str19 = io.github.onograph.I18N.format("relationship-type-distribution",
        objArray14);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "Path to the home directory for the copied database. Default is the same as the database copied from.",
        objArray14);
    java.lang.String str21 = io.github.onograph.I18N.format("vm.thread.*", objArray14);
    java.lang.String str22 = io.github.onograph.I18N.format("String", objArray14);
    java.lang.String str23 = io.github.onograph.I18N.format("fork-join-executor", objArray14);
    java.lang.String str24 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:Timer for RAFT message processing. (counter, histogram)",
        objArray14);
    org.junit.Assert.assertNotNull(objArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str15,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str16, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str17,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str18, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:relationship-type-distribution" + "'", str19,
        "MISSING VAL FOR KEY:relationship-type-distribution");
    org.junit.Assert.assertEquals("'" + str20 + "' != '"
            + "MISSING VAL FOR KEY:Path to the home directory for the copied database. Default is the same as the database copied from."
            + "'", str20,
        "MISSING VAL FOR KEY:Path to the home directory for the copied database. Default is the same as the database copied from.");
    org.junit.Assert.assertEquals("'" + str21 + "' != '" + "MISSING VAL FOR KEY:vm.thread.*" + "'",
        str21, "MISSING VAL FOR KEY:vm.thread.*");
    org.junit.Assert.assertEquals("'" + str22 + "' != '" + "MISSING VAL FOR KEY:String" + "'",
        str22, "MISSING VAL FOR KEY:String");
    org.junit.Assert.assertEquals(
        "'" + str23 + "' != '" + "MISSING VAL FOR KEY:fork-join-executor" + "'", str23,
        "MISSING VAL FOR KEY:fork-join-executor");
    org.junit.Assert.assertEquals("'" + str24 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:Timer for RAFT message processing. (counter, histogram)"
            + "'", str24,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:Timer for RAFT message processing. (counter, histogram)");
  }

  @Test
  public void test4040() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4040");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str14 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format("read", objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format("invisible", objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format("dec_dispatch", objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format(
        "Maximum timeout for cluster status request execution", objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format("", objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format("Administration command: SHOW USERS",
        objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format("db.createNodeKey", objArray13);
    java.lang.Class<?> wildcardClass23 = objArray13.getClass();
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str14,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str15, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str16,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str17, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:dec_dispatch" + "'",
        str18, "MISSING VAL FOR KEY:dec_dispatch");
    org.junit.Assert.assertEquals("'" + str19 + "' != '"
            + "MISSING VAL FOR KEY:Maximum timeout for cluster status request execution" + "'", str19,
        "MISSING VAL FOR KEY:Maximum timeout for cluster status request execution");
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "MISSING VAL FOR KEY:" + "'", str20,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:Administration command: SHOW USERS" + "'",
        str21, "MISSING VAL FOR KEY:Administration command: SHOW USERS");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "MISSING VAL FOR KEY:db.createNodeKey" + "'", str22,
        "MISSING VAL FOR KEY:db.createNodeKey");
    org.junit.Assert.assertNotNull(wildcardClass23);
  }

  @Test
  public void test4041() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4041");
    }
    java.lang.Object[] objArray10 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str11 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray10);
    java.lang.String str12 = io.github.onograph.I18N.format("true", objArray10);
    java.lang.String str13 = io.github.onograph.I18N.format("metrics.neo4j.counts.enabled",
        objArray10);
    java.lang.String str14 = io.github.onograph.I18N.format("metrics.bolt.messages.enabled",
        objArray10);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:fabric.driver.connection.max_lifetime", objArray10);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "File location of namespace for Kubernetes API", objArray10);
    org.junit.Assert.assertNotNull(objArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str11,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MISSING VAL FOR KEY:true" + "'", str12,
        "MISSING VAL FOR KEY:true");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:metrics.neo4j.counts.enabled" + "'", str13,
        "MISSING VAL FOR KEY:metrics.neo4j.counts.enabled");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:metrics.bolt.messages.enabled" + "'", str14,
        "MISSING VAL FOR KEY:metrics.bolt.messages.enabled");
    org.junit.Assert.assertEquals("'" + str15 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:fabric.driver.connection.max_lifetime" + "'",
        str15, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:fabric.driver.connection.max_lifetime");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:File location of namespace for Kubernetes API"
            + "'", str16, "MISSING VAL FOR KEY:File location of namespace for Kubernetes API");
  }

  @Test
  public void test4042() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4042");
    }
    java.lang.Object[] objArray12 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str13 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray12);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray12);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "causal_clustering.middleware.akka.failure_detector.max_sample_size", objArray12);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:The LDAP group to which a user must belong to get any access to the system.Set this to restrict access to a subset of LDAP users belonging to a particular group. If this is not set, any user to successfully authenticate via LDAP will have access to the PUBLIC role and any other roles assigned to them via dbms.security.ldap.authorization.group_to_role_mapping.",
        objArray12);
    java.lang.String str17 = io.github.onograph.I18N.format(
        "dbms.security.ldap.authorization.user_search_filter", objArray12);
    java.lang.String str18 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:Path to the home directory for the copied database. Default is the same as the database copied from.",
        objArray12);
    java.lang.String str19 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:ssl_handler",
        objArray12);
    java.lang.String str20 = io.github.onograph.I18N.format("cypher.*", objArray12);
    org.junit.Assert.assertNotNull(objArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str13,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str14, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str15 + "' != '"
            + "MISSING VAL FOR KEY:causal_clustering.middleware.akka.failure_detector.max_sample_size"
            + "'", str15,
        "MISSING VAL FOR KEY:causal_clustering.middleware.akka.failure_detector.max_sample_size");
    org.junit.Assert.assertEquals("'" + str16 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:The LDAP group to which a user must belong to get any access to the system.Set this to restrict access to a subset of LDAP users belonging to a particular group. If this is not set, any user to successfully authenticate via LDAP will have access to the PUBLIC role and any other roles assigned to them via dbms.security.ldap.authorization.group_to_role_mapping."
            + "'", str16,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:The LDAP group to which a user must belong to get any access to the system.Set this to restrict access to a subset of LDAP users belonging to a particular group. If this is not set, any user to successfully authenticate via LDAP will have access to the PUBLIC role and any other roles assigned to them via dbms.security.ldap.authorization.group_to_role_mapping.");
    org.junit.Assert.assertEquals("'" + str17 + "' != '"
            + "MISSING VAL FOR KEY:dbms.security.ldap.authorization.user_search_filter" + "'", str17,
        "MISSING VAL FOR KEY:dbms.security.ldap.authorization.user_search_filter");
    org.junit.Assert.assertEquals("'" + str18 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Path to the home directory for the copied database. Default is the same as the database copied from."
            + "'", str18,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Path to the home directory for the copied database. Default is the same as the database copied from.");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:ssl_handler" + "'", str19,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:ssl_handler");
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "MISSING VAL FOR KEY:cypher.*" + "'",
        str20, "MISSING VAL FOR KEY:cypher.*");
  }

  @Test
  public void test4043() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4043");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("type");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4044() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4044");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("Node");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4045() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4045");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:halt");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4046() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4046");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "The total number of terminated write transactions. (counter)");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4047() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4047");
    }
    java.lang.Object[] objArray16 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str17 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray16);
    java.lang.String str18 = io.github.onograph.I18N.format(
        "dbms.security.ldap.authentication.attribute", objArray16);
    java.lang.String str19 = io.github.onograph.I18N.format("dbms.security.createUser", objArray16);
    java.lang.String str20 = io.github.onograph.I18N.format("BatchSize", objArray16);
    java.lang.String str21 = io.github.onograph.I18N.format("Change the current user's password.",
        objArray16);
    java.lang.String str22 = io.github.onograph.I18N.format(
        "Perform the recovery of the backup store by applying the latest pulled transactions. If disabled, the backup will be faster but a recovery of the backup store will be required at a later time before restoring the data (using the neo4j-admin prepare-restore command). Note: if --prepare-restore is set to false, then --check-consistency is implicitly set to false because the consistency of a none-recovered store can't be checked.",
        objArray16);
    java.lang.String str23 = io.github.onograph.I18N.format("", objArray16);
    java.lang.String str24 = io.github.onograph.I18N.format("snappy_validating_decoder",
        objArray16);
    java.lang.String str25 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:read-only",
        objArray16);
    java.lang.String str26 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:typically-connect-to-random-read-replica", objArray16);
    java.lang.String str27 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:.database.",
        objArray16);
    java.lang.String str28 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:database",
        objArray16);
    java.lang.Class<?> wildcardClass29 = objArray16.getClass();
    org.junit.Assert.assertNotNull(objArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str17,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute"
            + "'", str18, "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:dbms.security.createUser" + "'", str19,
        "MISSING VAL FOR KEY:dbms.security.createUser");
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "MISSING VAL FOR KEY:BatchSize" + "'",
        str20, "MISSING VAL FOR KEY:BatchSize");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:Change the current user's password." + "'",
        str21, "MISSING VAL FOR KEY:Change the current user's password.");
    org.junit.Assert.assertEquals("'" + str22 + "' != '"
            + "MISSING VAL FOR KEY:Perform the recovery of the backup store by applying the latest pulled transactions. If disabled, the backup will be faster but a recovery of the backup store will be required at a later time before restoring the data (using the neo4j-admin prepare-restore command). Note: if --prepare-restore is set to false, then --check-consistency is implicitly set to false because the consistency of a none-recovered store can't be checked."
            + "'", str22,
        "MISSING VAL FOR KEY:Perform the recovery of the backup store by applying the latest pulled transactions. If disabled, the backup will be faster but a recovery of the backup store will be required at a later time before restoring the data (using the neo4j-admin prepare-restore command). Note: if --prepare-restore is set to false, then --check-consistency is implicitly set to false because the consistency of a none-recovered store can't be checked.");
    org.junit.Assert.assertEquals("'" + str23 + "' != '" + "MISSING VAL FOR KEY:" + "'", str23,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals(
        "'" + str24 + "' != '" + "MISSING VAL FOR KEY:snappy_validating_decoder" + "'", str24,
        "MISSING VAL FOR KEY:snappy_validating_decoder");
    org.junit.Assert.assertEquals(
        "'" + str25 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:read-only" + "'", str25,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:read-only");
    org.junit.Assert.assertEquals("'" + str26 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:typically-connect-to-random-read-replica" + "'",
        str26, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:typically-connect-to-random-read-replica");
    org.junit.Assert.assertEquals(
        "'" + str27 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:.database." + "'", str27,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:.database.");
    org.junit.Assert.assertEquals(
        "'" + str28 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:database" + "'", str28,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:database");
    org.junit.Assert.assertNotNull(wildcardClass29);
  }

  @Test
  public void test4048() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4048");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:The LDAP referral behavior when creating a connection. This is one of `follow`, `ignore` or `throw`.\n* `follow` automatically follows any referrals\n* `ignore` ignores any referrals\n* `throw` throws an exception, which will lead to authentication failure");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4049() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4049");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms.security.ldap.host");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4050() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4050");
    }
    java.lang.Object[] objArray9 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str10 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray9);
    java.lang.String str11 = io.github.onograph.I18N.format(
        "dbms.security.ldap.authentication.attribute", objArray9);
    java.lang.String str12 = io.github.onograph.I18N.format("LZ_validating", objArray9);
    java.lang.String str13 = io.github.onograph.I18N.format("dbms.security.auth_cache_use_ttl",
        objArray9);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:Configure if the `dbms.routing.getRoutingTable()` procedure should include the leader as read endpoint or return only read replicas/followers. Note: leader is returned as read endpoint if no other member is present all. ",
        objArray9);
    java.lang.Class<?> wildcardClass15 = objArray9.getClass();
    org.junit.Assert.assertNotNull(objArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str10 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str10,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute"
            + "'", str11, "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:LZ_validating" + "'", str12,
        "MISSING VAL FOR KEY:LZ_validating");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:dbms.security.auth_cache_use_ttl" + "'",
        str13, "MISSING VAL FOR KEY:dbms.security.auth_cache_use_ttl");
    org.junit.Assert.assertEquals("'" + str14 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:Configure if the `dbms.routing.getRoutingTable()` procedure should include the leader as read endpoint or return only read replicas/followers. Note: leader is returned as read endpoint if no other member is present all. "
            + "'", str14,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:Configure if the `dbms.routing.getRoutingTable()` procedure should include the leader as read endpoint or return only read replicas/followers. Note: leader is returned as read endpoint if no other member is present all. ");
    org.junit.Assert.assertNotNull(wildcardClass15);
  }

  @Test
  public void test4051() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4051");
    }
    java.lang.Object[] objArray7 = new java.lang.Object[]{};
    java.lang.String str8 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray7);
    java.lang.String str9 = io.github.onograph.I18N.format(
        "The total number of live threads including daemon and non-daemon threads. (gauge)",
        objArray7);
    java.lang.String str10 = io.github.onograph.I18N.format("Number of available processors",
        objArray7);
    java.lang.String str11 = io.github.onograph.I18N.format(
        "Raft protocol implementation versions that this instance will allow in negotiation as a comma-separated list. Order is not relevant: the greatest value will be preferred. An empty list will allow all supported versions. Example value: \"1.0, 1.3, 2.0, 2.1\"",
        objArray7);
    java.lang.String str12 = io.github.onograph.I18N.format("*transaction.last_committed_tx_id",
        objArray7);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:CREATE CONSTRAINT ... IS NODE KEY command", objArray7);
    java.lang.String str14 = io.github.onograph.I18N.format("dbms.security.ldap.referral",
        objArray7);
    org.junit.Assert.assertNotNull(objArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
    org.junit.Assert.assertEquals("'" + str8 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str8,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str9 + "' != '"
            + "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)"
            + "'", str9,
        "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)");
    org.junit.Assert.assertEquals(
        "'" + str10 + "' != '" + "MISSING VAL FOR KEY:Number of available processors" + "'", str10,
        "MISSING VAL FOR KEY:Number of available processors");
    org.junit.Assert.assertEquals("'" + str11 + "' != '"
            + "MISSING VAL FOR KEY:Raft protocol implementation versions that this instance will allow in negotiation as a comma-separated list. Order is not relevant: the greatest value will be preferred. An empty list will allow all supported versions. Example value: \"1.0, 1.3, 2.0, 2.1\""
            + "'", str11,
        "MISSING VAL FOR KEY:Raft protocol implementation versions that this instance will allow in negotiation as a comma-separated list. Order is not relevant: the greatest value will be preferred. An empty list will allow all supported versions. Example value: \"1.0, 1.3, 2.0, 2.1\"");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:*transaction.last_committed_tx_id" + "'",
        str12, "MISSING VAL FOR KEY:*transaction.last_committed_tx_id");
    org.junit.Assert.assertEquals("'" + str13 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:CREATE CONSTRAINT ... IS NODE KEY command" + "'",
        str13, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:CREATE CONSTRAINT ... IS NODE KEY command");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:dbms.security.ldap.referral" + "'", str14,
        "MISSING VAL FOR KEY:dbms.security.ldap.referral");
  }

  @Test
  public void test4052() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4052");
    }
    java.lang.Object[] objArray11 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str12 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray11);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray11);
    java.lang.String str14 = io.github.onograph.I18N.format("read", objArray11);
    java.lang.String str15 = io.github.onograph.I18N.format("execute_boosted_from_config",
        objArray11);
    java.lang.String str16 = io.github.onograph.I18N.format("LabelQualifierAll", objArray11);
    java.lang.String str17 = io.github.onograph.I18N.format("vm.memory.buffer.*", objArray11);
    java.lang.String str18 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:LDAP user DN template. An LDAP object is referenced by its distinguished name (DN), and a user DN is an LDAP fully-qualified unique user identifier. This setting is used to generate an LDAP DN that conforms with the LDAP directory's schema from the user principal that is submitted with the authentication token when logging in. The special token {0} is a placeholder where the user principal will be substituted into the DN string.",
        objArray11);
    org.junit.Assert.assertNotNull(objArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str12,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str13, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str14,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:execute_boosted_from_config" + "'", str15,
        "MISSING VAL FOR KEY:execute_boosted_from_config");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:LabelQualifierAll" + "'", str16,
        "MISSING VAL FOR KEY:LabelQualifierAll");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:vm.memory.buffer.*" + "'", str17,
        "MISSING VAL FOR KEY:vm.memory.buffer.*");
    org.junit.Assert.assertEquals("'" + str18 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:LDAP user DN template. An LDAP object is referenced by its distinguished name (DN), and a user DN is an LDAP fully-qualified unique user identifier. This setting is used to generate an LDAP DN that conforms with the LDAP directory's schema from the user principal that is submitted with the authentication token when logging in. The special token {0} is a placeholder where the user principal will be substituted into the DN string."
            + "'", str18,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:LDAP user DN template. An LDAP object is referenced by its distinguished name (DN), and a user DN is an LDAP fully-qualified unique user identifier. This setting is used to generate an LDAP DN that conforms with the LDAP directory's schema from the user principal that is submitted with the authentication token when logging in. The special token {0} is a placeholder where the user principal will be substituted into the DN string.");
  }

  @Test
  public void test4053() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4053");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "Parallelism level of dispatcher used for communication from Akka based cluster topology discovery ");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4054() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4054");
    }
    java.lang.Object[] objArray9 = new java.lang.Object[]{};
    java.lang.String str10 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray9);
    java.lang.String str11 = io.github.onograph.I18N.format(
        "The total number of live threads including daemon and non-daemon threads. (gauge)",
        objArray9);
    java.lang.String str12 = io.github.onograph.I18N.format("Upgraded", objArray9);
    java.lang.String str13 = io.github.onograph.I18N.format("<label>[,<label>...]", objArray9);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "akka.remote.artery.advanced.connection-timeout", objArray9);
    java.lang.String str15 = io.github.onograph.I18N.format("8m", objArray9);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:causal_clustering.connect_randomly_to_server_group", objArray9);
    java.lang.String str17 = io.github.onograph.I18N.format("defragment", objArray9);
    java.lang.String str18 = io.github.onograph.I18N.format("neo4j.conf", objArray9);
    java.lang.Class<?> wildcardClass19 = objArray9.getClass();
    org.junit.Assert.assertNotNull(objArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
    org.junit.Assert.assertEquals("'" + str10 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str10,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str11 + "' != '"
            + "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)"
            + "'", str11,
        "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)");
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MISSING VAL FOR KEY:Upgraded" + "'",
        str12, "MISSING VAL FOR KEY:Upgraded");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:<label>[,<label>...]" + "'", str13,
        "MISSING VAL FOR KEY:<label>[,<label>...]");
    org.junit.Assert.assertEquals("'" + str14 + "' != '"
            + "MISSING VAL FOR KEY:akka.remote.artery.advanced.connection-timeout" + "'", str14,
        "MISSING VAL FOR KEY:akka.remote.artery.advanced.connection-timeout");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:8m" + "'", str15,
        "MISSING VAL FOR KEY:8m");
    org.junit.Assert.assertEquals("'" + str16 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.connect_randomly_to_server_group"
            + "'", str16,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.connect_randomly_to_server_group");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:defragment" + "'",
        str17, "MISSING VAL FOR KEY:defragment");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:neo4j.conf" + "'",
        str18, "MISSING VAL FOR KEY:neo4j.conf");
    org.junit.Assert.assertNotNull(wildcardClass19);
  }

  @Test
  public void test4055() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4055");
    }
    java.lang.Object[] objArray9 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str10 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray9);
    java.lang.String str11 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray9);
    java.lang.String str12 = io.github.onograph.I18N.format(
        "causal_clustering.middleware.akka.failure_detector.max_sample_size", objArray9);
    java.lang.String str13 = io.github.onograph.I18N.format("causal_clustering.core.*", objArray9);
    java.lang.String str14 = io.github.onograph.I18N.format("threads.jetty.all", objArray9);
    java.lang.Class<?> wildcardClass15 = objArray9.getClass();
    org.junit.Assert.assertNotNull(objArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str10 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str10,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str11, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str12 + "' != '"
            + "MISSING VAL FOR KEY:causal_clustering.middleware.akka.failure_detector.max_sample_size"
            + "'", str12,
        "MISSING VAL FOR KEY:causal_clustering.middleware.akka.failure_detector.max_sample_size");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.core.*" + "'", str13,
        "MISSING VAL FOR KEY:causal_clustering.core.*");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:threads.jetty.all" + "'", str14,
        "MISSING VAL FOR KEY:threads.jetty.all");
    org.junit.Assert.assertNotNull(wildcardClass15);
  }

  @Test
  public void test4056() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4056");
    }
    java.lang.Object[] objArray7 = new java.lang.Object[]{};
    java.lang.String str8 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray7);
    java.lang.String str9 = io.github.onograph.I18N.format("Upgraded", objArray7);
    java.lang.String str10 = io.github.onograph.I18N.format(
        "Configure the discovery type used for cluster name resolution", objArray7);
    java.lang.String str11 = io.github.onograph.I18N.format("high_limitV3_4_0", objArray7);
    java.lang.String str12 = io.github.onograph.I18N.format("logs/", objArray7);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "causal_clustering.middleware.akka.allow_any_core_to_bootstrap", objArray7);
    java.lang.String str14 = io.github.onograph.I18N.format("fabric.driver.connection.max_lifetime",
        objArray7);
    java.lang.Class<?> wildcardClass15 = objArray7.getClass();
    org.junit.Assert.assertNotNull(objArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
    org.junit.Assert.assertEquals("'" + str8 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str8,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MISSING VAL FOR KEY:Upgraded" + "'",
        str9, "MISSING VAL FOR KEY:Upgraded");
    org.junit.Assert.assertEquals("'" + str10 + "' != '"
            + "MISSING VAL FOR KEY:Configure the discovery type used for cluster name resolution" + "'",
        str10, "MISSING VAL FOR KEY:Configure the discovery type used for cluster name resolution");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:high_limitV3_4_0" + "'", str11,
        "MISSING VAL FOR KEY:high_limitV3_4_0");
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MISSING VAL FOR KEY:logs/" + "'", str12,
        "MISSING VAL FOR KEY:logs/");
    org.junit.Assert.assertEquals("'" + str13 + "' != '"
            + "MISSING VAL FOR KEY:causal_clustering.middleware.akka.allow_any_core_to_bootstrap" + "'",
        str13, "MISSING VAL FOR KEY:causal_clustering.middleware.akka.allow_any_core_to_bootstrap");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:fabric.driver.connection.max_lifetime" + "'",
        str14, "MISSING VAL FOR KEY:fabric.driver.connection.max_lifetime");
    org.junit.Assert.assertNotNull(wildcardClass15);
  }

  @Test
  public void test4057() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4057");
    }
    java.lang.Object[] objArray4 = new java.lang.Object[]{};
    java.lang.String str5 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray4);
    java.lang.String str6 = io.github.onograph.I18N.format("function", objArray4);
    java.lang.String str7 = io.github.onograph.I18N.format(
        "Parallelism level of dispatcher used for communication from Akka based cluster topology discovery ",
        objArray4);
    java.lang.String str8 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:This command will create a copy of a database.%nIf your labels, properties or relationships contain dots or commas you can use ` to escape them, e.g. `My,label`.property ",
        objArray4);
    java.lang.Class<?> wildcardClass9 = objArray4.getClass();
    org.junit.Assert.assertNotNull(objArray4);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
    org.junit.Assert.assertEquals("'" + str5 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str5,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "MISSING VAL FOR KEY:function" + "'",
        str6, "MISSING VAL FOR KEY:function");
    org.junit.Assert.assertEquals("'" + str7 + "' != '"
            + "MISSING VAL FOR KEY:Parallelism level of dispatcher used for communication from Akka based cluster topology discovery "
            + "'", str7,
        "MISSING VAL FOR KEY:Parallelism level of dispatcher used for communication from Akka based cluster topology discovery ");
    org.junit.Assert.assertEquals("'" + str8 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:This command will create a copy of a database.%nIf your labels, properties or relationships contain dots or commas you can use ` to escape them, e.g. `My,label`.property "
            + "'", str8,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:This command will create a copy of a database.%nIf your labels, properties or relationships contain dots or commas you can use ` to escape them, e.g. `My,label`.property ");
    org.junit.Assert.assertNotNull(wildcardClass9);
  }

  @Test
  public void test4058() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4058");
    }
    java.lang.Object[] objArray9 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str10 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray9);
    java.lang.String str11 = io.github.onograph.I18N.format(
        "dbms.security.ldap.authentication.attribute", objArray9);
    java.lang.String str12 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:Number of available processors", objArray9);
    java.lang.String str13 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:handshake_server",
        objArray9);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:cc-client-topology-actor", objArray9);
    org.junit.Assert.assertNotNull(objArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str10 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str10,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute"
            + "'", str11, "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute");
    org.junit.Assert.assertEquals("'" + str12 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Number of available processors" + "'", str12,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Number of available processors");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:handshake_server" + "'",
        str13, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:handshake_server");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:cc-client-topology-actor"
            + "'", str14, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:cc-client-topology-actor");
  }

  @Test
  public void test4059() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4059");
    }
    java.lang.Object[] objArray10 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str11 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray10);
    java.lang.String str12 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray10);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "causal_clustering.middleware.akka.failure_detector.max_sample_size", objArray10);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:The LDAP group to which a user must belong to get any access to the system.Set this to restrict access to a subset of LDAP users belonging to a particular group. If this is not set, any user to successfully authenticate via LDAP will have access to the PUBLIC role and any other roles assigned to them via dbms.security.ldap.authorization.group_to_role_mapping.",
        objArray10);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "dbms.security.ldap.authorization.user_search_filter", objArray10);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "causal_clustering.raft_handler_parallelism", objArray10);
    java.lang.Class<?> wildcardClass17 = objArray10.getClass();
    org.junit.Assert.assertNotNull(objArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str11,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str12, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str13 + "' != '"
            + "MISSING VAL FOR KEY:causal_clustering.middleware.akka.failure_detector.max_sample_size"
            + "'", str13,
        "MISSING VAL FOR KEY:causal_clustering.middleware.akka.failure_detector.max_sample_size");
    org.junit.Assert.assertEquals("'" + str14 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:The LDAP group to which a user must belong to get any access to the system.Set this to restrict access to a subset of LDAP users belonging to a particular group. If this is not set, any user to successfully authenticate via LDAP will have access to the PUBLIC role and any other roles assigned to them via dbms.security.ldap.authorization.group_to_role_mapping."
            + "'", str14,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:The LDAP group to which a user must belong to get any access to the system.Set this to restrict access to a subset of LDAP users belonging to a particular group. If this is not set, any user to successfully authenticate via LDAP will have access to the PUBLIC role and any other roles assigned to them via dbms.security.ldap.authorization.group_to_role_mapping.");
    org.junit.Assert.assertEquals("'" + str15 + "' != '"
            + "MISSING VAL FOR KEY:dbms.security.ldap.authorization.user_search_filter" + "'", str15,
        "MISSING VAL FOR KEY:dbms.security.ldap.authorization.user_search_filter");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.raft_handler_parallelism"
            + "'", str16, "MISSING VAL FOR KEY:causal_clustering.raft_handler_parallelism");
    org.junit.Assert.assertNotNull(wildcardClass17);
  }

  @Test
  public void test4060() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4060");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:causal_clustering.protocol_implementations.compression");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4061() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4061");
    }
    java.lang.Object[] objArray15 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str16 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray15);
    java.lang.String str17 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray15);
    java.lang.String str18 = io.github.onograph.I18N.format("read", objArray15);
    java.lang.String str19 = io.github.onograph.I18N.format("invisible", objArray15);
    java.lang.String str20 = io.github.onograph.I18N.format("relationship-type-distribution",
        objArray15);
    java.lang.String str21 = io.github.onograph.I18N.format(
        "Path to the home directory for the copied database. Default is the same as the database copied from.",
        objArray15);
    java.lang.String str22 = io.github.onograph.I18N.format("connections_closed", objArray15);
    java.lang.String str23 = io.github.onograph.I18N.format("dbms.backup.listen_address",
        objArray15);
    java.lang.String str24 = io.github.onograph.I18N.format(
        "The number of operations to be processed before the state machines flush to disk",
        objArray15);
    java.lang.String str25 = io.github.onograph.I18N.format("throttled.millis", objArray15);
    java.lang.String str26 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:The total number of terminated write transactions. (counter)",
        objArray15);
    org.junit.Assert.assertNotNull(objArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str16,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str17, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str18,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str19, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:relationship-type-distribution" + "'", str20,
        "MISSING VAL FOR KEY:relationship-type-distribution");
    org.junit.Assert.assertEquals("'" + str21 + "' != '"
            + "MISSING VAL FOR KEY:Path to the home directory for the copied database. Default is the same as the database copied from."
            + "'", str21,
        "MISSING VAL FOR KEY:Path to the home directory for the copied database. Default is the same as the database copied from.");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "MISSING VAL FOR KEY:connections_closed" + "'", str22,
        "MISSING VAL FOR KEY:connections_closed");
    org.junit.Assert.assertEquals(
        "'" + str23 + "' != '" + "MISSING VAL FOR KEY:dbms.backup.listen_address" + "'", str23,
        "MISSING VAL FOR KEY:dbms.backup.listen_address");
    org.junit.Assert.assertEquals("'" + str24 + "' != '"
            + "MISSING VAL FOR KEY:The number of operations to be processed before the state machines flush to disk"
            + "'", str24,
        "MISSING VAL FOR KEY:The number of operations to be processed before the state machines flush to disk");
    org.junit.Assert.assertEquals(
        "'" + str25 + "' != '" + "MISSING VAL FOR KEY:throttled.millis" + "'", str25,
        "MISSING VAL FOR KEY:throttled.millis");
    org.junit.Assert.assertEquals("'" + str26 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:The total number of terminated write transactions. (counter)"
            + "'", str26,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:The total number of terminated write transactions. (counter)");
  }

  @Test
  public void test4062() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4062");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "causal_clustering.store_copy_chunk_size");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4063() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4063");
    }
    java.lang.Object[] objArray11 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str12 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray11);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray11);
    java.lang.String str14 = io.github.onograph.I18N.format("read", objArray11);
    java.lang.String str15 = io.github.onograph.I18N.format("invisible", objArray11);
    java.lang.String str16 = io.github.onograph.I18N.format("false", objArray11);
    java.lang.String str17 = io.github.onograph.I18N.format("INBOUND", objArray11);
    java.lang.String str18 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:metrics",
        objArray11);
    java.lang.Class<?> wildcardClass19 = objArray11.getClass();
    org.junit.Assert.assertNotNull(objArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str12,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str13, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str14,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str15, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:false" + "'", str16,
        "MISSING VAL FOR KEY:false");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:INBOUND" + "'",
        str17, "MISSING VAL FOR KEY:INBOUND");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:metrics" + "'", str18,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:metrics");
    org.junit.Assert.assertNotNull(wildcardClass19);
  }

  @Test
  public void test4064() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4064");
    }
    java.lang.Object[] objArray11 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str12 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray11);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray11);
    java.lang.String str14 = io.github.onograph.I18N.format("read", objArray11);
    java.lang.String str15 = io.github.onograph.I18N.format("invisible", objArray11);
    java.lang.String str16 = io.github.onograph.I18N.format("relationship-type-distribution",
        objArray11);
    java.lang.String str17 = io.github.onograph.I18N.format("node", objArray11);
    java.lang.String str18 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:akka.remote.artery.bind.port", objArray11);
    java.lang.Class<?> wildcardClass19 = objArray11.getClass();
    org.junit.Assert.assertNotNull(objArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str12,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str13, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str14,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str15, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:relationship-type-distribution" + "'", str16,
        "MISSING VAL FOR KEY:relationship-type-distribution");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:node" + "'", str17,
        "MISSING VAL FOR KEY:node");
    org.junit.Assert.assertEquals("'" + str18 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:akka.remote.artery.bind.port"
            + "'", str18,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:akka.remote.artery.bind.port");
    org.junit.Assert.assertNotNull(wildcardClass19);
  }

  @Test
  public void test4065() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4065");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:Akka cluster phi accrual failure detector. After the heartbeat request has been sent the first failure detection will start after this period, even though no heartbeat message has been received.");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4066() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4066");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:active_write");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4067() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4067");
    }
    java.lang.Object[] objArray9 = new java.lang.Object[]{};
    java.lang.String str10 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray9);
    java.lang.String str11 = io.github.onograph.I18N.format(
        "The total number of live threads including daemon and non-daemon threads. (gauge)",
        objArray9);
    java.lang.String str12 = io.github.onograph.I18N.format("Upgraded", objArray9);
    java.lang.String str13 = io.github.onograph.I18N.format("<label>[,<label>...]", objArray9);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "akka.remote.artery.advanced.connection-timeout", objArray9);
    java.lang.String str15 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:dbms.procedures",
        objArray9);
    java.lang.String str16 = io.github.onograph.I18N.format("roleName", objArray9);
    java.lang.String str17 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:RAFT log pruning frequency", objArray9);
    java.lang.String str18 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:editor",
        objArray9);
    java.lang.Class<?> wildcardClass19 = objArray9.getClass();
    org.junit.Assert.assertNotNull(objArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
    org.junit.Assert.assertEquals("'" + str10 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str10,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str11 + "' != '"
            + "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)"
            + "'", str11,
        "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)");
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MISSING VAL FOR KEY:Upgraded" + "'",
        str12, "MISSING VAL FOR KEY:Upgraded");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:<label>[,<label>...]" + "'", str13,
        "MISSING VAL FOR KEY:<label>[,<label>...]");
    org.junit.Assert.assertEquals("'" + str14 + "' != '"
            + "MISSING VAL FOR KEY:akka.remote.artery.advanced.connection-timeout" + "'", str14,
        "MISSING VAL FOR KEY:akka.remote.artery.advanced.connection-timeout");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms.procedures" + "'",
        str15, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms.procedures");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:roleName" + "'",
        str16, "MISSING VAL FOR KEY:roleName");
    org.junit.Assert.assertEquals("'" + str17 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:RAFT log pruning frequency"
            + "'", str17,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:RAFT log pruning frequency");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:editor" + "'", str18,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:editor");
    org.junit.Assert.assertNotNull(wildcardClass19);
  }

  @Test
  public void test4068() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4068");
    }
    java.lang.Object[] objArray7 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str8 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray7);
    java.lang.String str9 = io.github.onograph.I18N.format(
        "Raft replication attempt count. (counter)", objArray7);
    java.lang.String str10 = io.github.onograph.I18N.format("com.sun.jndi.ldap.read.timeout",
        objArray7);
    java.lang.String str11 = io.github.onograph.I18N.format("", objArray7);
    java.lang.Class<?> wildcardClass12 = objArray7.getClass();
    org.junit.Assert.assertNotNull(objArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str8 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str8,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals(
        "'" + str9 + "' != '" + "MISSING VAL FOR KEY:Raft replication attempt count. (counter)"
            + "'", str9, "MISSING VAL FOR KEY:Raft replication attempt count. (counter)");
    org.junit.Assert.assertEquals(
        "'" + str10 + "' != '" + "MISSING VAL FOR KEY:com.sun.jndi.ldap.read.timeout" + "'", str10,
        "MISSING VAL FOR KEY:com.sun.jndi.ldap.read.timeout");
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MISSING VAL FOR KEY:" + "'", str11,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertNotNull(wildcardClass12);
  }

  @Test
  public void test4069() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4069");
    }
    java.lang.Object[] objArray6 = new java.lang.Object[]{};
    java.lang.String str7 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray6);
    java.lang.String str8 = io.github.onograph.I18N.format(
        "The total number of live threads including daemon and non-daemon threads. (gauge)",
        objArray6);
    java.lang.String str9 = io.github.onograph.I18N.format("Upgraded", objArray6);
    java.lang.String str10 = io.github.onograph.I18N.format("store_random_id", objArray6);
    java.lang.String str11 = io.github.onograph.I18N.format("replicated_data", objArray6);
    java.lang.String str12 = io.github.onograph.I18N.format(
        "Advertised hostname/IP address and port for the RAFT server.", objArray6);
    java.lang.Class<?> wildcardClass13 = objArray6.getClass();
    org.junit.Assert.assertNotNull(objArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
    org.junit.Assert.assertEquals("'" + str7 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str7,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str8 + "' != '"
            + "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)"
            + "'", str8,
        "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MISSING VAL FOR KEY:Upgraded" + "'",
        str9, "MISSING VAL FOR KEY:Upgraded");
    org.junit.Assert.assertEquals(
        "'" + str10 + "' != '" + "MISSING VAL FOR KEY:store_random_id" + "'", str10,
        "MISSING VAL FOR KEY:store_random_id");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:replicated_data" + "'", str11,
        "MISSING VAL FOR KEY:replicated_data");
    org.junit.Assert.assertEquals("'" + str12 + "' != '"
            + "MISSING VAL FOR KEY:Advertised hostname/IP address and port for the RAFT server." + "'",
        str12, "MISSING VAL FOR KEY:Advertised hostname/IP address and port for the RAFT server.");
    org.junit.Assert.assertNotNull(wildcardClass13);
  }

  @Test
  public void test4070() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4070");
    }
    java.lang.Object[] objArray8 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str9 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray8);
    java.lang.String str10 = io.github.onograph.I18N.format("status", objArray8);
    java.lang.String str11 = io.github.onograph.I18N.format("snappy_encoder", objArray8);
    java.lang.String str12 = io.github.onograph.I18N.format("akka.jvm-shutdown-hooks", objArray8);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:The total number of IO operations performed by page cache.",
        objArray8);
    java.lang.Class<?> wildcardClass14 = objArray8.getClass();
    org.junit.Assert.assertNotNull(objArray8);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str9 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str9,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MISSING VAL FOR KEY:status" + "'",
        str10, "MISSING VAL FOR KEY:status");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:snappy_encoder" + "'", str11,
        "MISSING VAL FOR KEY:snappy_encoder");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:akka.jvm-shutdown-hooks" + "'", str12,
        "MISSING VAL FOR KEY:akka.jvm-shutdown-hooks");
    org.junit.Assert.assertEquals("'" + str13 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:The total number of IO operations performed by page cache."
            + "'", str13,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:The total number of IO operations performed by page cache.");
    org.junit.Assert.assertNotNull(wildcardClass14);
  }

  @Test
  public void test4071() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4071");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("--skip-node-properties");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4072() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4072");
    }
    java.lang.Object[] objArray12 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str13 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray12);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray12);
    java.lang.String str15 = io.github.onograph.I18N.format("read", objArray12);
    java.lang.String str16 = io.github.onograph.I18N.format("invisible", objArray12);
    java.lang.String str17 = io.github.onograph.I18N.format("metrics.graphite.enabled", objArray12);
    java.lang.String str18 = io.github.onograph.I18N.format("dbms.clustering.enable", objArray12);
    java.lang.String str19 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:com.sun.jndi.ldap.read.timeout", objArray12);
    java.lang.String str20 = io.github.onograph.I18N.format("committed_read", objArray12);
    org.junit.Assert.assertNotNull(objArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str13,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str14, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str15,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str16, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:metrics.graphite.enabled" + "'", str17,
        "MISSING VAL FOR KEY:metrics.graphite.enabled");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:dbms.clustering.enable" + "'", str18,
        "MISSING VAL FOR KEY:dbms.clustering.enable");
    org.junit.Assert.assertEquals("'" + str19 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:com.sun.jndi.ldap.read.timeout" + "'", str19,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:com.sun.jndi.ldap.read.timeout");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:committed_read" + "'", str20,
        "MISSING VAL FOR KEY:committed_read");
  }

  @Test
  public void test4073() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4073");
    }
    java.lang.Object[] objArray6 = new java.lang.Object[]{};
    java.lang.String str7 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray6);
    java.lang.String str8 = io.github.onograph.I18N.format(
        "The total number of live threads including daemon and non-daemon threads. (gauge)",
        objArray6);
    java.lang.String str9 = io.github.onograph.I18N.format("Upgraded", objArray6);
    java.lang.String str10 = io.github.onograph.I18N.format("", objArray6);
    java.lang.String str11 = io.github.onograph.I18N.format(
        "Enable reporting metrics about the store size of each database. Deprecated - use metrics.filter instead.",
        objArray6);
    java.lang.String str12 = io.github.onograph.I18N.format("orientation", objArray6);
    java.lang.Class<?> wildcardClass13 = objArray6.getClass();
    org.junit.Assert.assertNotNull(objArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
    org.junit.Assert.assertEquals("'" + str7 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str7,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str8 + "' != '"
            + "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)"
            + "'", str8,
        "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MISSING VAL FOR KEY:Upgraded" + "'",
        str9, "MISSING VAL FOR KEY:Upgraded");
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MISSING VAL FOR KEY:" + "'", str10,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str11 + "' != '"
            + "MISSING VAL FOR KEY:Enable reporting metrics about the store size of each database. Deprecated - use metrics.filter instead."
            + "'", str11,
        "MISSING VAL FOR KEY:Enable reporting metrics about the store size of each database. Deprecated - use metrics.filter instead.");
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MISSING VAL FOR KEY:orientation" + "'",
        str12, "MISSING VAL FOR KEY:orientation");
    org.junit.Assert.assertNotNull(wildcardClass13);
  }

  @Test
  public void test4074() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4074");
    }
    java.lang.Object[] objArray10 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str11 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray10);
    java.lang.String str12 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray10);
    java.lang.String str13 = io.github.onograph.I18N.format("read", objArray10);
    java.lang.String str14 = io.github.onograph.I18N.format("ssl_handler", objArray10);
    java.lang.String str15 = io.github.onograph.I18N.format("", objArray10);
    java.lang.String str16 = io.github.onograph.I18N.format("off", objArray10);
    java.lang.Class<?> wildcardClass17 = objArray10.getClass();
    org.junit.Assert.assertNotNull(objArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str11,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str12, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str13,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:ssl_handler" + "'",
        str14, "MISSING VAL FOR KEY:ssl_handler");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:" + "'", str15,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:off" + "'", str16,
        "MISSING VAL FOR KEY:off");
    org.junit.Assert.assertNotNull(wildcardClass17);
  }

  @Test
  public void test4075() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4075");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str14 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format("read", objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format("invisible", objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format("relationship-type-distribution",
        objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format(
        "Path to the home directory for the copied database. Default is the same as the database copied from.",
        objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format("vm.thread.*", objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format("", objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format(
        "Display ServerId of instance. The ServerId can be used to identify this server in cypher commands.",
        objArray13);
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str14,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str15, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str16,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str17, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:relationship-type-distribution" + "'", str18,
        "MISSING VAL FOR KEY:relationship-type-distribution");
    org.junit.Assert.assertEquals("'" + str19 + "' != '"
            + "MISSING VAL FOR KEY:Path to the home directory for the copied database. Default is the same as the database copied from."
            + "'", str19,
        "MISSING VAL FOR KEY:Path to the home directory for the copied database. Default is the same as the database copied from.");
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "MISSING VAL FOR KEY:vm.thread.*" + "'",
        str20, "MISSING VAL FOR KEY:vm.thread.*");
    org.junit.Assert.assertEquals("'" + str21 + "' != '" + "MISSING VAL FOR KEY:" + "'", str21,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str22 + "' != '"
            + "MISSING VAL FOR KEY:Display ServerId of instance. The ServerId can be used to identify this server in cypher commands."
            + "'", str22,
        "MISSING VAL FOR KEY:Display ServerId of instance. The ServerId can be used to identify this server in cypher commands.");
  }

  @Test
  public void test4076() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4076");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("create");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4077() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4077");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "Estimated number of buffers in the pool. (gauge)");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4078() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4078");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:StoreCopy");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4079() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4079");
    }
    java.lang.Object[] objArray11 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str12 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray11);
    java.lang.String str13 = io.github.onograph.I18N.format("writable", objArray11);
    java.lang.String str14 = io.github.onograph.I18N.format("--additional-config", objArray11);
    java.lang.String str15 = io.github.onograph.I18N.format("publisher", objArray11);
    java.lang.String str16 = io.github.onograph.I18N.format("discovery-to-neo4j-dispatcher",
        objArray11);
    java.lang.String str17 = io.github.onograph.I18N.format("off", objArray11);
    java.lang.String str18 = io.github.onograph.I18N.format(
        "The timeout for establishing an LDAP connection. If a connection with the LDAP server cannot be established within the given time the attempt is aborted. A value of 0 means to use the network protocol's (i.e., TCP's) timeout value.",
        objArray11);
    org.junit.Assert.assertNotNull(objArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str12,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MISSING VAL FOR KEY:writable" + "'",
        str13, "MISSING VAL FOR KEY:writable");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:--additional-config" + "'", str14,
        "MISSING VAL FOR KEY:--additional-config");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:publisher" + "'",
        str15, "MISSING VAL FOR KEY:publisher");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:discovery-to-neo4j-dispatcher" + "'", str16,
        "MISSING VAL FOR KEY:discovery-to-neo4j-dispatcher");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:off" + "'", str17,
        "MISSING VAL FOR KEY:off");
    org.junit.Assert.assertEquals("'" + str18 + "' != '"
            + "MISSING VAL FOR KEY:The timeout for establishing an LDAP connection. If a connection with the LDAP server cannot be established within the given time the attempt is aborted. A value of 0 means to use the network protocol's (i.e., TCP's) timeout value."
            + "'", str18,
        "MISSING VAL FOR KEY:The timeout for establishing an LDAP connection. If a connection with the LDAP server cannot be established within the given time the attempt is aborted. A value of 0 means to use the network protocol's (i.e., TCP's) timeout value.");
  }

  @Test
  public void test4080() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4080");
    }
    java.lang.Object[] objArray10 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str11 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray10);
    java.lang.String str12 = io.github.onograph.I18N.format("ccstate", objArray10);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "Use native transport if available. Epoll for Linux or Kqueue for MacOS/BSD. If this setting is set to false, or if native transport is not available, Nio transport will be used.",
        objArray10);
    java.lang.String str14 = io.github.onograph.I18N.format("Delete the specified user.",
        objArray10);
    java.lang.String str15 = io.github.onograph.I18N.format("", objArray10);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:--skip-relationships", objArray10);
    java.lang.String str17 = io.github.onograph.I18N.format("RAFT log reader pool size",
        objArray10);
    java.lang.Class<?> wildcardClass18 = objArray10.getClass();
    org.junit.Assert.assertNotNull(objArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str11 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str11,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MISSING VAL FOR KEY:ccstate" + "'",
        str12, "MISSING VAL FOR KEY:ccstate");
    org.junit.Assert.assertEquals("'" + str13 + "' != '"
            + "MISSING VAL FOR KEY:Use native transport if available. Epoll for Linux or Kqueue for MacOS/BSD. If this setting is set to false, or if native transport is not available, Nio transport will be used."
            + "'", str13,
        "MISSING VAL FOR KEY:Use native transport if available. Epoll for Linux or Kqueue for MacOS/BSD. If this setting is set to false, or if native transport is not available, Nio transport will be used.");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:Delete the specified user." + "'", str14,
        "MISSING VAL FOR KEY:Delete the specified user.");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:" + "'", str15,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:--skip-relationships"
            + "'", str16, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:--skip-relationships");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:RAFT log reader pool size" + "'", str17,
        "MISSING VAL FOR KEY:RAFT log reader pool size");
    org.junit.Assert.assertNotNull(wildcardClass18);
  }

  @Test
  public void test4081() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4081");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("causal_clustering.kubernetes.ca_crt");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4082() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4082");
    }
    java.lang.Object[] objArray10 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str11 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray10);
    java.lang.String str12 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray10);
    java.lang.String str13 = io.github.onograph.I18N.format("read", objArray10);
    java.lang.String str14 = io.github.onograph.I18N.format("invisible", objArray10);
    java.lang.String str15 = io.github.onograph.I18N.format("false", objArray10);
    java.lang.String str16 = io.github.onograph.I18N.format("yyyyMMddHHmmss", objArray10);
    java.lang.Class<?> wildcardClass17 = objArray10.getClass();
    org.junit.Assert.assertNotNull(objArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str11,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str12, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str13,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str14, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:false" + "'", str15,
        "MISSING VAL FOR KEY:false");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:yyyyMMddHHmmss" + "'", str16,
        "MISSING VAL FOR KEY:yyyyMMddHHmmss");
    org.junit.Assert.assertNotNull(wildcardClass17);
  }

  @Test
  public void test4083() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4083");
    }
    java.lang.Object[] objArray17 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str18 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray17);
    java.lang.String str19 = io.github.onograph.I18N.format(
        "dbms.security.ldap.authentication.attribute", objArray17);
    java.lang.String str20 = io.github.onograph.I18N.format("dbms.security.createUser", objArray17);
    java.lang.String str21 = io.github.onograph.I18N.format("BatchSize", objArray17);
    java.lang.String str22 = io.github.onograph.I18N.format("Change the current user's password.",
        objArray17);
    java.lang.String str23 = io.github.onograph.I18N.format("metrics.prometheus.enabled",
        objArray17);
    java.lang.String str24 = io.github.onograph.I18N.format("modifierProtocols", objArray17);
    java.lang.String str25 = io.github.onograph.I18N.format("Is this server the leader? (gauge)",
        objArray17);
    java.lang.String str26 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms.max_databases", objArray17);
    java.lang.String str27 = io.github.onograph.I18N.format("dbms.security.ldap.read_timeout",
        objArray17);
    java.lang.String str28 = io.github.onograph.I18N.format("dbms.showCurrentUser", objArray17);
    java.lang.String str29 = io.github.onograph.I18N.format(
        "Removes and archives all cluster state, so that the instance can rebind to a cluster.",
        objArray17);
    java.lang.String str30 = io.github.onograph.I18N.format("/server/causalclustering", objArray17);
    org.junit.Assert.assertNotNull(objArray17);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str18,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute"
            + "'", str19, "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:dbms.security.createUser" + "'", str20,
        "MISSING VAL FOR KEY:dbms.security.createUser");
    org.junit.Assert.assertEquals("'" + str21 + "' != '" + "MISSING VAL FOR KEY:BatchSize" + "'",
        str21, "MISSING VAL FOR KEY:BatchSize");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "MISSING VAL FOR KEY:Change the current user's password." + "'",
        str22, "MISSING VAL FOR KEY:Change the current user's password.");
    org.junit.Assert.assertEquals(
        "'" + str23 + "' != '" + "MISSING VAL FOR KEY:metrics.prometheus.enabled" + "'", str23,
        "MISSING VAL FOR KEY:metrics.prometheus.enabled");
    org.junit.Assert.assertEquals(
        "'" + str24 + "' != '" + "MISSING VAL FOR KEY:modifierProtocols" + "'", str24,
        "MISSING VAL FOR KEY:modifierProtocols");
    org.junit.Assert.assertEquals(
        "'" + str25 + "' != '" + "MISSING VAL FOR KEY:Is this server the leader? (gauge)" + "'",
        str25, "MISSING VAL FOR KEY:Is this server the leader? (gauge)");
    org.junit.Assert.assertEquals("'" + str26 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms.max_databases" + "'",
        str26, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms.max_databases");
    org.junit.Assert.assertEquals(
        "'" + str27 + "' != '" + "MISSING VAL FOR KEY:dbms.security.ldap.read_timeout" + "'", str27,
        "MISSING VAL FOR KEY:dbms.security.ldap.read_timeout");
    org.junit.Assert.assertEquals(
        "'" + str28 + "' != '" + "MISSING VAL FOR KEY:dbms.showCurrentUser" + "'", str28,
        "MISSING VAL FOR KEY:dbms.showCurrentUser");
    org.junit.Assert.assertEquals("'" + str29 + "' != '"
            + "MISSING VAL FOR KEY:Removes and archives all cluster state, so that the instance can rebind to a cluster."
            + "'", str29,
        "MISSING VAL FOR KEY:Removes and archives all cluster state, so that the instance can rebind to a cluster.");
    org.junit.Assert.assertEquals(
        "'" + str30 + "' != '" + "MISSING VAL FOR KEY:/server/causalclustering" + "'", str30,
        "MISSING VAL FOR KEY:/server/causalclustering");
  }

  @Test
  public void test4084() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4084");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:metrics.neo4j.checkpointing.enabled");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4085() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4085");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Network interface and port for the transaction shipping server to listen on. Please note that it is also possible to run the backup client against this port so always limit access to it via the firewall and configure an ssl policy.");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4086() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4086");
    }
    java.lang.Object[] objArray8 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str9 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray8);
    java.lang.String str10 = io.github.onograph.I18N.format("status", objArray8);
    java.lang.String str11 = io.github.onograph.I18N.format(
        "Maximum number of akka restart attempts before we panic the DBMS. Set to -1 to retry forever",
        objArray8);
    java.lang.String str12 = io.github.onograph.I18N.format(
        "Maximum number of history files for the csv files.", objArray8);
    java.lang.String str13 = io.github.onograph.I18N.format("transactionLogCatchup", objArray8);
    java.lang.Class<?> wildcardClass14 = objArray8.getClass();
    org.junit.Assert.assertNotNull(objArray8);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str9 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str9,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MISSING VAL FOR KEY:status" + "'",
        str10, "MISSING VAL FOR KEY:status");
    org.junit.Assert.assertEquals("'" + str11 + "' != '"
            + "MISSING VAL FOR KEY:Maximum number of akka restart attempts before we panic the DBMS. Set to -1 to retry forever"
            + "'", str11,
        "MISSING VAL FOR KEY:Maximum number of akka restart attempts before we panic the DBMS. Set to -1 to retry forever");
    org.junit.Assert.assertEquals("'" + str12 + "' != '"
            + "MISSING VAL FOR KEY:Maximum number of history files for the csv files." + "'", str12,
        "MISSING VAL FOR KEY:Maximum number of history files for the csv files.");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:transactionLogCatchup" + "'", str13,
        "MISSING VAL FOR KEY:transactionLogCatchup");
    org.junit.Assert.assertNotNull(wildcardClass14);
  }

  @Test
  public void test4087() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4087");
    }
    java.lang.Object[] objArray7 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str8 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray7);
    java.lang.String str9 = io.github.onograph.I18N.format("ccstate", objArray7);
    java.lang.String str10 = io.github.onograph.I18N.format(
        "Use native transport if available. Epoll for Linux or Kqueue for MacOS/BSD. If this setting is set to false, or if native transport is not available, Nio transport will be used.",
        objArray7);
    java.lang.String str11 = io.github.onograph.I18N.format("database", objArray7);
    java.lang.Class<?> wildcardClass12 = objArray7.getClass();
    org.junit.Assert.assertNotNull(objArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str8 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str8,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MISSING VAL FOR KEY:ccstate" + "'", str9,
        "MISSING VAL FOR KEY:ccstate");
    org.junit.Assert.assertEquals("'" + str10 + "' != '"
            + "MISSING VAL FOR KEY:Use native transport if available. Epoll for Linux or Kqueue for MacOS/BSD. If this setting is set to false, or if native transport is not available, Nio transport will be used."
            + "'", str10,
        "MISSING VAL FOR KEY:Use native transport if available. Epoll for Linux or Kqueue for MacOS/BSD. If this setting is set to false, or if native transport is not available, Nio transport will be used.");
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MISSING VAL FOR KEY:database" + "'",
        str11, "MISSING VAL FOR KEY:database");
    org.junit.Assert.assertNotNull(wildcardClass12);
  }

  @Test
  public void test4088() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4088");
    }
    java.lang.Object[] objArray9 = new java.lang.Object[]{};
    java.lang.String str10 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray9);
    java.lang.String str11 = io.github.onograph.I18N.format(
        "The total number of live threads including daemon and non-daemon threads. (gauge)",
        objArray9);
    java.lang.String str12 = io.github.onograph.I18N.format("Upgraded", objArray9);
    java.lang.String str13 = io.github.onograph.I18N.format("<label>[,<label>...]", objArray9);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "akka.remote.artery.advanced.connection-timeout", objArray9);
    java.lang.String str15 = io.github.onograph.I18N.format("8m", objArray9);
    java.lang.String str16 = io.github.onograph.I18N.format("metrics.neo4j.tx.enabled", objArray9);
    java.lang.String str17 = io.github.onograph.I18N.format("FOR", objArray9);
    java.lang.String str18 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:member-data",
        objArray9);
    org.junit.Assert.assertNotNull(objArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
    org.junit.Assert.assertEquals("'" + str10 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str10,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str11 + "' != '"
            + "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)"
            + "'", str11,
        "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)");
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MISSING VAL FOR KEY:Upgraded" + "'",
        str12, "MISSING VAL FOR KEY:Upgraded");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:<label>[,<label>...]" + "'", str13,
        "MISSING VAL FOR KEY:<label>[,<label>...]");
    org.junit.Assert.assertEquals("'" + str14 + "' != '"
            + "MISSING VAL FOR KEY:akka.remote.artery.advanced.connection-timeout" + "'", str14,
        "MISSING VAL FOR KEY:akka.remote.artery.advanced.connection-timeout");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:8m" + "'", str15,
        "MISSING VAL FOR KEY:8m");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:metrics.neo4j.tx.enabled" + "'", str16,
        "MISSING VAL FOR KEY:metrics.neo4j.tx.enabled");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:FOR" + "'", str17,
        "MISSING VAL FOR KEY:FOR");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:member-data" + "'", str18,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:member-data");
  }

  @Test
  public void test4089() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4089");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str14 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format("read", objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format("invisible", objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format("false", objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format("INBOUND", objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "Time between scanning the cluster to refresh current server's view of topology",
        objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format("metrics.neo4j.logrotation.enabled",
        objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.leader_transfer_interval",
        objArray13);
    java.lang.Class<?> wildcardClass23 = objArray13.getClass();
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str14,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str15, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str16,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str17, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:false" + "'", str18,
        "MISSING VAL FOR KEY:false");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MISSING VAL FOR KEY:INBOUND" + "'",
        str19, "MISSING VAL FOR KEY:INBOUND");
    org.junit.Assert.assertEquals("'" + str20 + "' != '"
            + "MISSING VAL FOR KEY:Time between scanning the cluster to refresh current server's view of topology"
            + "'", str20,
        "MISSING VAL FOR KEY:Time between scanning the cluster to refresh current server's view of topology");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:metrics.neo4j.logrotation.enabled" + "'",
        str21, "MISSING VAL FOR KEY:metrics.neo4j.logrotation.enabled");
    org.junit.Assert.assertEquals("'" + str22 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.leader_transfer_interval"
            + "'", str22,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.leader_transfer_interval");
    org.junit.Assert.assertNotNull(wildcardClass23);
  }

  @Test
  public void test4090() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4090");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str14 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format("read", objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format("invisible", objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format("metrics.graphite.enabled", objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format("dbms.clustering.enable", objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "akka.cluster.failure-detector.heartbeat-interval", objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:Allows a core to down all unreachable members if it needs to do that to allow a new core to join",
        objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format("*bolt.messages_received*", objArray13);
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str14,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str15, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str16,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str17, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:metrics.graphite.enabled" + "'", str18,
        "MISSING VAL FOR KEY:metrics.graphite.enabled");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:dbms.clustering.enable" + "'", str19,
        "MISSING VAL FOR KEY:dbms.clustering.enable");
    org.junit.Assert.assertEquals("'" + str20 + "' != '"
            + "MISSING VAL FOR KEY:akka.cluster.failure-detector.heartbeat-interval" + "'", str20,
        "MISSING VAL FOR KEY:akka.cluster.failure-detector.heartbeat-interval");
    org.junit.Assert.assertEquals("'" + str21 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Allows a core to down all unreachable members if it needs to do that to allow a new core to join"
            + "'", str21,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Allows a core to down all unreachable members if it needs to do that to allow a new core to join");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "MISSING VAL FOR KEY:*bolt.messages_received*" + "'", str22,
        "MISSING VAL FOR KEY:*bolt.messages_received*");
  }

  @Test
  public void test4091() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4091");
    }
    java.lang.Object[] objArray9 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str10 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray9);
    java.lang.String str11 = io.github.onograph.I18N.format(
        "dbms.security.ldap.authentication.attribute", objArray9);
    java.lang.String str12 = io.github.onograph.I18N.format("dbms.security.createUser", objArray9);
    java.lang.String str13 = io.github.onograph.I18N.format("messages_started", objArray9);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "Retry time for log shipping to followers after a stall", objArray9);
    java.lang.Class<?> wildcardClass15 = objArray9.getClass();
    org.junit.Assert.assertNotNull(objArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str10 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str10,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute"
            + "'", str11, "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:dbms.security.createUser" + "'", str12,
        "MISSING VAL FOR KEY:dbms.security.createUser");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:messages_started" + "'", str13,
        "MISSING VAL FOR KEY:messages_started");
    org.junit.Assert.assertEquals("'" + str14 + "' != '"
            + "MISSING VAL FOR KEY:Retry time for log shipping to followers after a stall" + "'", str14,
        "MISSING VAL FOR KEY:Retry time for log shipping to followers after a stall");
    org.junit.Assert.assertNotNull(wildcardClass15);
  }

  @Test
  public void test4092() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4092");
    }
    java.lang.Object[] objArray9 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str10 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray9);
    java.lang.String str11 = io.github.onograph.I18N.format("status", objArray9);
    java.lang.String str12 = io.github.onograph.I18N.format("snappy_encoder", objArray9);
    java.lang.String str13 = io.github.onograph.I18N.format("The level of middleware logging",
        objArray9);
    java.lang.String str14 = io.github.onograph.I18N.format("", objArray9);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:causal_clustering.middleware.akka.allow_any_core_to_bootstrap",
        objArray9);
    java.lang.Class<?> wildcardClass16 = objArray9.getClass();
    org.junit.Assert.assertNotNull(objArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str10 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str10,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MISSING VAL FOR KEY:status" + "'",
        str11, "MISSING VAL FOR KEY:status");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:snappy_encoder" + "'", str12,
        "MISSING VAL FOR KEY:snappy_encoder");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:The level of middleware logging" + "'", str13,
        "MISSING VAL FOR KEY:The level of middleware logging");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:" + "'", str14,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str15 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.middleware.akka.allow_any_core_to_bootstrap"
            + "'", str15,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.middleware.akka.allow_any_core_to_bootstrap");
    org.junit.Assert.assertNotNull(wildcardClass16);
  }

  @Test
  public void test4093() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4093");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:dbms.max_databases");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4094() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4094");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:List all roles assigned to the specified user.");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4095() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4095");
    }
    java.lang.Object[] objArray9 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str10 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray9);
    java.lang.String str11 = io.github.onograph.I18N.format(
        "Discovery cluster member size. (gauge)", objArray9);
    java.lang.String str12 = io.github.onograph.I18N.format("akka", objArray9);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:read-only", objArray9);
    java.lang.String str14 = io.github.onograph.I18N.format("", objArray9);
    java.lang.String str15 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:log.*", objArray9);
    org.junit.Assert.assertNotNull(objArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str10 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str10,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:Discovery cluster member size. (gauge)" + "'",
        str11, "MISSING VAL FOR KEY:Discovery cluster member size. (gauge)");
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MISSING VAL FOR KEY:akka" + "'", str12,
        "MISSING VAL FOR KEY:akka");
    org.junit.Assert.assertEquals("'" + str13 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:read-only" + "'", str13,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:read-only");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:" + "'", str14,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:log.*" + "'", str15,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:log.*");
  }

  @Test
  public void test4096() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4096");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str14 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format("read", objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format("invisible", objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format(
        "Count of database operations which failed previously but have recovered. (counter)",
        objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format("profiles", objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format("metrics.bolt.messages.enabled",
        objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format("LZ4", objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:yyyy-MM-dd.HH.mm.ss", objArray13);
    java.lang.Class<?> wildcardClass23 = objArray13.getClass();
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str14,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str15, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str16,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str17, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str18 + "' != '"
            + "MISSING VAL FOR KEY:Count of database operations which failed previously but have recovered. (counter)"
            + "'", str18,
        "MISSING VAL FOR KEY:Count of database operations which failed previously but have recovered. (counter)");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MISSING VAL FOR KEY:profiles" + "'",
        str19, "MISSING VAL FOR KEY:profiles");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:metrics.bolt.messages.enabled" + "'", str20,
        "MISSING VAL FOR KEY:metrics.bolt.messages.enabled");
    org.junit.Assert.assertEquals("'" + str21 + "' != '" + "MISSING VAL FOR KEY:LZ4" + "'", str21,
        "MISSING VAL FOR KEY:LZ4");
    org.junit.Assert.assertEquals("'" + str22 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:yyyy-MM-dd.HH.mm.ss" + "'",
        str22, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:yyyy-MM-dd.HH.mm.ss");
    org.junit.Assert.assertNotNull(wildcardClass23);
  }

  @Test
  public void test4097() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4097");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("--prepare-restore");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4098() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4098");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Parallelism level of dispatcher used for communication from Akka based cluster topology discovery ");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4099() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4099");
    }
    java.lang.Object[] objArray12 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str13 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray12);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray12);
    java.lang.String str15 = io.github.onograph.I18N.format("read", objArray12);
    java.lang.String str16 = io.github.onograph.I18N.format("execute_boosted_from_config",
        objArray12);
    java.lang.String str17 = io.github.onograph.I18N.format("replication_maybe", objArray12);
    java.lang.String str18 = io.github.onograph.I18N.format("editor", objArray12);
    java.lang.String str19 = io.github.onograph.I18N.format("Boolean", objArray12);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:RelationshipQualifier", objArray12);
    org.junit.Assert.assertNotNull(objArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str13,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str14, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str15,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:execute_boosted_from_config" + "'", str16,
        "MISSING VAL FOR KEY:execute_boosted_from_config");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:replication_maybe" + "'", str17,
        "MISSING VAL FOR KEY:replication_maybe");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:editor" + "'",
        str18, "MISSING VAL FOR KEY:editor");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MISSING VAL FOR KEY:Boolean" + "'",
        str19, "MISSING VAL FOR KEY:Boolean");
    org.junit.Assert.assertEquals("'" + str20 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:RelationshipQualifier" + "'",
        str20, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:RelationshipQualifier");
  }

  @Test
  public void test4100() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4100");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms.security.removeRoleFromUser");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4101() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4101");
    }
    java.lang.Object[] objArray14 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str15 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray14);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray14);
    java.lang.String str17 = io.github.onograph.I18N.format("read", objArray14);
    java.lang.String str18 = io.github.onograph.I18N.format("execute_boosted_from_config",
        objArray14);
    java.lang.String str19 = io.github.onograph.I18N.format("replication_maybe", objArray14);
    java.lang.String str20 = io.github.onograph.I18N.format("PROTOCOL_STACK", objArray14);
    java.lang.String str21 = io.github.onograph.I18N.format("off", objArray14);
    java.lang.String str22 = io.github.onograph.I18N.format("causal_clustering.read_replica",
        objArray14);
    java.lang.String str23 = io.github.onograph.I18N.format("success", objArray14);
    java.lang.String str24 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:metrics.filter", objArray14);
    org.junit.Assert.assertNotNull(objArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str15,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str16, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str17,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:execute_boosted_from_config" + "'", str18,
        "MISSING VAL FOR KEY:execute_boosted_from_config");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:replication_maybe" + "'", str19,
        "MISSING VAL FOR KEY:replication_maybe");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:PROTOCOL_STACK" + "'", str20,
        "MISSING VAL FOR KEY:PROTOCOL_STACK");
    org.junit.Assert.assertEquals("'" + str21 + "' != '" + "MISSING VAL FOR KEY:off" + "'", str21,
        "MISSING VAL FOR KEY:off");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.read_replica" + "'", str22,
        "MISSING VAL FOR KEY:causal_clustering.read_replica");
    org.junit.Assert.assertEquals("'" + str23 + "' != '" + "MISSING VAL FOR KEY:success" + "'",
        str23, "MISSING VAL FOR KEY:success");
    org.junit.Assert.assertEquals("'" + str24 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:metrics.filter" + "'", str24,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:metrics.filter");
  }

  @Test
  public void test4102() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4102");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "causal_clustering.status_throughput_window");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4103() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4103");
    }
    java.lang.Object[] objArray9 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str10 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray9);
    java.lang.String str11 = io.github.onograph.I18N.format("status", objArray9);
    java.lang.String str12 = io.github.onograph.I18N.format("raft-server", objArray9);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "causal_clustering.join_catch_up_timeout", objArray9);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "Configuration of a user-defined upstream selection strategy. The user-defined strategy is used if the list of strategies (`causal_clustering.upstream_selection_strategy`) includes the value `user_defined`. ",
        objArray9);
    java.lang.String str15 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:*store.size*",
        objArray9);
    java.lang.Class<?> wildcardClass16 = objArray9.getClass();
    org.junit.Assert.assertNotNull(objArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str10 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str10,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MISSING VAL FOR KEY:status" + "'",
        str11, "MISSING VAL FOR KEY:status");
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MISSING VAL FOR KEY:raft-server" + "'",
        str12, "MISSING VAL FOR KEY:raft-server");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.join_catch_up_timeout"
            + "'", str13, "MISSING VAL FOR KEY:causal_clustering.join_catch_up_timeout");
    org.junit.Assert.assertEquals("'" + str14 + "' != '"
            + "MISSING VAL FOR KEY:Configuration of a user-defined upstream selection strategy. The user-defined strategy is used if the list of strategies (`causal_clustering.upstream_selection_strategy`) includes the value `user_defined`. "
            + "'", str14,
        "MISSING VAL FOR KEY:Configuration of a user-defined upstream selection strategy. The user-defined strategy is used if the list of strategies (`causal_clustering.upstream_selection_strategy`) includes the value `user_defined`. ");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:*store.size*" + "'",
        str15, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:*store.size*");
    org.junit.Assert.assertNotNull(wildcardClass16);
  }

  @Test
  public void test4104() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4104");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("vm.pause_time.*");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4105() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4105");
    }
    java.lang.Object[] objArray14 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str15 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray14);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray14);
    java.lang.String str17 = io.github.onograph.I18N.format("read", objArray14);
    java.lang.String str18 = io.github.onograph.I18N.format("invisible", objArray14);
    java.lang.String str19 = io.github.onograph.I18N.format("relationship-type-distribution",
        objArray14);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:<label>[,<label>...]", objArray14);
    java.lang.String str21 = io.github.onograph.I18N.format(
        "causal_clustering.cluster_topology_refresh", objArray14);
    java.lang.String str22 = io.github.onograph.I18N.format(
        "A common prefix for the reported metrics field names.", objArray14);
    java.lang.String str23 = io.github.onograph.I18N.format("--from-path-tx", objArray14);
    java.lang.String str24 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:appended_bytes",
        objArray14);
    java.lang.Class<?> wildcardClass25 = objArray14.getClass();
    org.junit.Assert.assertNotNull(objArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str15,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str16, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str17,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str18, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:relationship-type-distribution" + "'", str19,
        "MISSING VAL FOR KEY:relationship-type-distribution");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:<label>[,<label>...]"
            + "'", str20, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:<label>[,<label>...]");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.cluster_topology_refresh"
            + "'", str21, "MISSING VAL FOR KEY:causal_clustering.cluster_topology_refresh");
    org.junit.Assert.assertEquals("'" + str22 + "' != '"
            + "MISSING VAL FOR KEY:A common prefix for the reported metrics field names." + "'", str22,
        "MISSING VAL FOR KEY:A common prefix for the reported metrics field names.");
    org.junit.Assert.assertEquals(
        "'" + str23 + "' != '" + "MISSING VAL FOR KEY:--from-path-tx" + "'", str23,
        "MISSING VAL FOR KEY:--from-path-tx");
    org.junit.Assert.assertEquals(
        "'" + str24 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:appended_bytes" + "'",
        str24, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:appended_bytes");
    org.junit.Assert.assertNotNull(wildcardClass25);
  }

  @Test
  public void test4106() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4106");
    }
    java.lang.Object[] objArray15 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str16 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray15);
    java.lang.String str17 = io.github.onograph.I18N.format("status", objArray15);
    java.lang.String str18 = io.github.onograph.I18N.format("raft-server", objArray15);
    java.lang.String str19 = io.github.onograph.I18N.format("transaction.*", objArray15);
    java.lang.String str20 = io.github.onograph.I18N.format("metrics.filter", objArray15);
    java.lang.String str21 = io.github.onograph.I18N.format("Retry-After", objArray15);
    java.lang.String str22 = io.github.onograph.I18N.format(
        "Directory to hold cluster state including Raft log", objArray15);
    java.lang.String str23 = io.github.onograph.I18N.format("message_processing_timer", objArray15);
    java.lang.String str24 = io.github.onograph.I18N.format(
        "causal_clustering.akka_actor_system_restarter.initial_delay", objArray15);
    java.lang.String str25 = io.github.onograph.I18N.format("visible", objArray15);
    java.lang.String str26 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:dbms.logs.security.rotation.delay", objArray15);
    java.lang.String str27 = io.github.onograph.I18N.format("Number of available processors",
        objArray15);
    org.junit.Assert.assertNotNull(objArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str16 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str16,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:status" + "'",
        str17, "MISSING VAL FOR KEY:status");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:raft-server" + "'",
        str18, "MISSING VAL FOR KEY:raft-server");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:transaction.*" + "'", str19,
        "MISSING VAL FOR KEY:transaction.*");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:metrics.filter" + "'", str20,
        "MISSING VAL FOR KEY:metrics.filter");
    org.junit.Assert.assertEquals("'" + str21 + "' != '" + "MISSING VAL FOR KEY:Retry-After" + "'",
        str21, "MISSING VAL FOR KEY:Retry-After");
    org.junit.Assert.assertEquals("'" + str22 + "' != '"
            + "MISSING VAL FOR KEY:Directory to hold cluster state including Raft log" + "'", str22,
        "MISSING VAL FOR KEY:Directory to hold cluster state including Raft log");
    org.junit.Assert.assertEquals(
        "'" + str23 + "' != '" + "MISSING VAL FOR KEY:message_processing_timer" + "'", str23,
        "MISSING VAL FOR KEY:message_processing_timer");
    org.junit.Assert.assertEquals("'" + str24 + "' != '"
            + "MISSING VAL FOR KEY:causal_clustering.akka_actor_system_restarter.initial_delay" + "'",
        str24, "MISSING VAL FOR KEY:causal_clustering.akka_actor_system_restarter.initial_delay");
    org.junit.Assert.assertEquals("'" + str25 + "' != '" + "MISSING VAL FOR KEY:visible" + "'",
        str25, "MISSING VAL FOR KEY:visible");
    org.junit.Assert.assertEquals("'" + str26 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms.logs.security.rotation.delay" + "'", str26,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms.logs.security.rotation.delay");
    org.junit.Assert.assertEquals(
        "'" + str27 + "' != '" + "MISSING VAL FOR KEY:Number of available processors" + "'", str27,
        "MISSING VAL FOR KEY:Number of available processors");
  }

  @Test
  public void test4107() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4107");
    }
    java.lang.Object[] objArray1 = null;
    java.lang.String str2 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:*vm.memory.pool.g1_eden_space",
        objArray1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:*vm.memory.pool.g1_eden_space"
            + "'", str2,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:*vm.memory.pool.g1_eden_space");
  }

  @Test
  public void test4108() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4108");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:snappy_encoder");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4109() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4109");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "causal_clustering.middleware.akka.bind_timeout");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4110() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4110");
    }
    java.lang.Object[] objArray9 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str10 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray9);
    java.lang.String str11 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray9);
    java.lang.String str12 = io.github.onograph.I18N.format(".Database operation count metrics",
        objArray9);
    java.lang.String str13 = io.github.onograph.I18N.format("SCHEMA", objArray9);
    java.lang.String str14 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:databaseName",
        objArray9);
    java.lang.Class<?> wildcardClass15 = objArray9.getClass();
    org.junit.Assert.assertNotNull(objArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str10 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str10,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str11, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:.Database operation count metrics" + "'",
        str12, "MISSING VAL FOR KEY:.Database operation count metrics");
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MISSING VAL FOR KEY:SCHEMA" + "'",
        str13, "MISSING VAL FOR KEY:SCHEMA");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:databaseName" + "'",
        str14, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:databaseName");
    org.junit.Assert.assertNotNull(wildcardClass15);
  }

  @Test
  public void test4111() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4111");
    }
    java.lang.Object[] objArray11 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str12 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray11);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray11);
    java.lang.String str14 = io.github.onograph.I18N.format("read", objArray11);
    java.lang.String str15 = io.github.onograph.I18N.format("ssl_handler", objArray11);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "causal_clustering.middleware.akka.failure_detector.min_std_deviation", objArray11);
    java.lang.String str17 = io.github.onograph.I18N.format("RelationshipQualifier", objArray11);
    java.lang.String str18 = io.github.onograph.I18N.format("error_handler_tail", objArray11);
    org.junit.Assert.assertNotNull(objArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str12,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str13, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str14,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:ssl_handler" + "'",
        str15, "MISSING VAL FOR KEY:ssl_handler");
    org.junit.Assert.assertEquals("'" + str16 + "' != '"
            + "MISSING VAL FOR KEY:causal_clustering.middleware.akka.failure_detector.min_std_deviation"
            + "'", str16,
        "MISSING VAL FOR KEY:causal_clustering.middleware.akka.failure_detector.min_std_deviation");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:RelationshipQualifier" + "'", str17,
        "MISSING VAL FOR KEY:RelationshipQualifier");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:error_handler_tail" + "'", str18,
        "MISSING VAL FOR KEY:error_handler_tail");
  }

  @Test
  public void test4112() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4112");
    }
    java.lang.Object[] objArray11 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str12 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray11);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray11);
    java.lang.String str14 = io.github.onograph.I18N.format("read", objArray11);
    java.lang.String str15 = io.github.onograph.I18N.format("invisible", objArray11);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "The total number of rolled back read transactions. (counter)", objArray11);
    java.lang.String str17 = io.github.onograph.I18N.format("active", objArray11);
    java.lang.String str18 = io.github.onograph.I18N.format(
        "Configures the time taken attempting to publish a cluster id to the discovery service before potentially retrying.",
        objArray11);
    java.lang.Class<?> wildcardClass19 = objArray11.getClass();
    org.junit.Assert.assertNotNull(objArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str12,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str13, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str14,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str15, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str16 + "' != '"
            + "MISSING VAL FOR KEY:The total number of rolled back read transactions. (counter)" + "'",
        str16, "MISSING VAL FOR KEY:The total number of rolled back read transactions. (counter)");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:active" + "'",
        str17, "MISSING VAL FOR KEY:active");
    org.junit.Assert.assertEquals("'" + str18 + "' != '"
            + "MISSING VAL FOR KEY:Configures the time taken attempting to publish a cluster id to the discovery service before potentially retrying."
            + "'", str18,
        "MISSING VAL FOR KEY:Configures the time taken attempting to publish a cluster id to the discovery service before potentially retrying.");
    org.junit.Assert.assertNotNull(wildcardClass19);
  }

  @Test
  public void test4113() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4113");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:is_suspended");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4114() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4114");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("dbms.pool");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4115() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4115");
    }
    java.lang.Object[] objArray5 = new java.lang.Object[]{};
    java.lang.String str6 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray5);
    java.lang.String str7 = io.github.onograph.I18N.format(
        "The total number of live threads including daemon and non-daemon threads. (gauge)",
        objArray5);
    java.lang.String str8 = io.github.onograph.I18N.format("volumetric", objArray5);
    java.lang.String str9 = io.github.onograph.I18N.format(
        "The total number of pull requests made by this instance. (counter)", objArray5);
    java.lang.String str10 = io.github.onograph.I18N.format("", objArray5);
    java.lang.Class<?> wildcardClass11 = objArray5.getClass();
    org.junit.Assert.assertNotNull(objArray5);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
    org.junit.Assert.assertEquals("'" + str6 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str6,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str7 + "' != '"
            + "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)"
            + "'", str7,
        "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)");
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "MISSING VAL FOR KEY:volumetric" + "'",
        str8, "MISSING VAL FOR KEY:volumetric");
    org.junit.Assert.assertEquals("'" + str9 + "' != '"
            + "MISSING VAL FOR KEY:The total number of pull requests made by this instance. (counter)"
            + "'", str9,
        "MISSING VAL FOR KEY:The total number of pull requests made by this instance. (counter)");
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MISSING VAL FOR KEY:" + "'", str10,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertNotNull(wildcardClass11);
  }

  @Test
  public void test4116() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4116");
    }
    java.lang.Object[] objArray9 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str10 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray9);
    java.lang.String str11 = io.github.onograph.I18N.format(
        "dbms.security.ldap.authentication.attribute", objArray9);
    java.lang.String str12 = io.github.onograph.I18N.format("TRACKING_RESPONSE_HANDLER", objArray9);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "Specifies which metrics should be enabled by using a comma separated list of globbing patterns. Only the metrics matching the filter will be enabled. For example '*check_point*,neo4j.page_cache.evictions' will enable any checkpoint metrics and the pagecache eviction metric.",
        objArray9);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "Enable reporting metrics about Bolt Protocol message processing. Deprecated - use metrics.filter instead.",
        objArray9);
    java.lang.Class<?> wildcardClass15 = objArray9.getClass();
    org.junit.Assert.assertNotNull(objArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str10 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str10,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute"
            + "'", str11, "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:TRACKING_RESPONSE_HANDLER" + "'", str12,
        "MISSING VAL FOR KEY:TRACKING_RESPONSE_HANDLER");
    org.junit.Assert.assertEquals("'" + str13 + "' != '"
            + "MISSING VAL FOR KEY:Specifies which metrics should be enabled by using a comma separated list of globbing patterns. Only the metrics matching the filter will be enabled. For example '*check_point*,neo4j.page_cache.evictions' will enable any checkpoint metrics and the pagecache eviction metric."
            + "'", str13,
        "MISSING VAL FOR KEY:Specifies which metrics should be enabled by using a comma separated list of globbing patterns. Only the metrics matching the filter will be enabled. For example '*check_point*,neo4j.page_cache.evictions' will enable any checkpoint metrics and the pagecache eviction metric.");
    org.junit.Assert.assertEquals("'" + str14 + "' != '"
            + "MISSING VAL FOR KEY:Enable reporting metrics about Bolt Protocol message processing. Deprecated - use metrics.filter instead."
            + "'", str14,
        "MISSING VAL FOR KEY:Enable reporting metrics about Bolt Protocol message processing. Deprecated - use metrics.filter instead.");
    org.junit.Assert.assertNotNull(wildcardClass15);
  }

  @Test
  public void test4117() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4117");
    }
    java.lang.Object[] objArray11 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str12 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray11);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray11);
    java.lang.String str14 = io.github.onograph.I18N.format("read", objArray11);
    java.lang.String str15 = io.github.onograph.I18N.format("invisible", objArray11);
    java.lang.String str16 = io.github.onograph.I18N.format("BatchSize", objArray11);
    java.lang.String str17 = io.github.onograph.I18N.format("", objArray11);
    java.lang.String str18 = io.github.onograph.I18N.format("", objArray11);
    org.junit.Assert.assertNotNull(objArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str12,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str13, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str14,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str15, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:BatchSize" + "'",
        str16, "MISSING VAL FOR KEY:BatchSize");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:" + "'", str17,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:" + "'", str18,
        "MISSING VAL FOR KEY:");
  }

  @Test
  public void test4118() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4118");
    }
    java.lang.Object[] objArray12 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str13 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray12);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray12);
    java.lang.String str15 = io.github.onograph.I18N.format("read", objArray12);
    java.lang.String str16 = io.github.onograph.I18N.format("invisible", objArray12);
    java.lang.String str17 = io.github.onograph.I18N.format("dec_dispatch", objArray12);
    java.lang.String str18 = io.github.onograph.I18N.format("RAFT log reader pool size",
        objArray12);
    java.lang.String str19 = io.github.onograph.I18N.format(
        "causal_clustering.middleware.akka.sink_parallelism", objArray12);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "The LDAP referral behavior when creating a connection. This is one of `follow`, `ignore` or `throw`.\n* `follow` automatically follows any referrals\n* `ignore` ignores any referrals\n* `throw` throws an exception, which will lead to authentication failure",
        objArray12);
    java.lang.Class<?> wildcardClass21 = objArray12.getClass();
    org.junit.Assert.assertNotNull(objArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str13,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str14, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str15,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str16, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:dec_dispatch" + "'",
        str17, "MISSING VAL FOR KEY:dec_dispatch");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:RAFT log reader pool size" + "'", str18,
        "MISSING VAL FOR KEY:RAFT log reader pool size");
    org.junit.Assert.assertEquals("'" + str19 + "' != '"
            + "MISSING VAL FOR KEY:causal_clustering.middleware.akka.sink_parallelism" + "'", str19,
        "MISSING VAL FOR KEY:causal_clustering.middleware.akka.sink_parallelism");
    org.junit.Assert.assertEquals("'" + str20 + "' != '"
            + "MISSING VAL FOR KEY:The LDAP referral behavior when creating a connection. This is one of `follow`, `ignore` or `throw`.\n* `follow` automatically follows any referrals\n* `ignore` ignores any referrals\n* `throw` throws an exception, which will lead to authentication failure"
            + "'", str20,
        "MISSING VAL FOR KEY:The LDAP referral behavior when creating a connection. This is one of `follow`, `ignore` or `throw`.\n* `follow` automatically follows any referrals\n* `ignore` ignores any referrals\n* `throw` throws an exception, which will lead to authentication failure");
    org.junit.Assert.assertNotNull(wildcardClass21);
  }

  @Test
  public void test4119() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4119");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:hnd_req_store_listing");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4120() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4120");
    }
    java.lang.Object[] objArray6 = new java.lang.Object[]{};
    java.lang.String str7 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray6);
    java.lang.String str8 = io.github.onograph.I18N.format("function", objArray6);
    java.lang.String str9 = io.github.onograph.I18N.format(
        "Used or reserved native memory in bytes. (gauge)", objArray6);
    java.lang.String str10 = io.github.onograph.I18N.format("causal_clustering.multi_dc_license",
        objArray6);
    java.lang.String str11 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:days", objArray6);
    java.lang.String str12 = io.github.onograph.I18N.format("hour", objArray6);
    org.junit.Assert.assertNotNull(objArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
    org.junit.Assert.assertEquals("'" + str7 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str7,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "MISSING VAL FOR KEY:function" + "'",
        str8, "MISSING VAL FOR KEY:function");
    org.junit.Assert.assertEquals("'" + str9 + "' != '"
            + "MISSING VAL FOR KEY:Used or reserved native memory in bytes. (gauge)" + "'", str9,
        "MISSING VAL FOR KEY:Used or reserved native memory in bytes. (gauge)");
    org.junit.Assert.assertEquals(
        "'" + str10 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.multi_dc_license" + "'",
        str10, "MISSING VAL FOR KEY:causal_clustering.multi_dc_license");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:days"
            + "'", str11, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:days");
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MISSING VAL FOR KEY:hour" + "'", str12,
        "MISSING VAL FOR KEY:hour");
  }

  @Test
  public void test4121() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4121");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str14 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format("read", objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format("invisible", objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format("relationship-type-distribution",
        objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:<label>[,<label>...]", objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "Report the current status of the system database sub-graph schema, providing details for each sub-graph component.",
        objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format("4.0.3", objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:member-data", objArray13);
    java.lang.Class<?> wildcardClass23 = objArray13.getClass();
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str14,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str15, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str16,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str17, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:relationship-type-distribution" + "'", str18,
        "MISSING VAL FOR KEY:relationship-type-distribution");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:<label>[,<label>...]"
            + "'", str19, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:<label>[,<label>...]");
    org.junit.Assert.assertEquals("'" + str20 + "' != '"
            + "MISSING VAL FOR KEY:Report the current status of the system database sub-graph schema, providing details for each sub-graph component."
            + "'", str20,
        "MISSING VAL FOR KEY:Report the current status of the system database sub-graph schema, providing details for each sub-graph component.");
    org.junit.Assert.assertEquals("'" + str21 + "' != '" + "MISSING VAL FOR KEY:4.0.3" + "'", str21,
        "MISSING VAL FOR KEY:4.0.3");
    org.junit.Assert.assertEquals("'" + str22 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:member-data" + "'", str22,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:member-data");
    org.junit.Assert.assertNotNull(wildcardClass23);
  }

  @Test
  public void test4122() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4122");
    }
    java.lang.Object[] objArray10 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str11 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray10);
    java.lang.String str12 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray10);
    java.lang.String str13 = io.github.onograph.I18N.format("read", objArray10);
    java.lang.String str14 = io.github.onograph.I18N.format("execute_boosted_from_config",
        objArray10);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "Base directory for transaction logs. Usage of this option is only allowed if --from parameter point to exact one directory",
        objArray10);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:fabric.stream.concurrency", objArray10);
    java.lang.Class<?> wildcardClass17 = objArray10.getClass();
    org.junit.Assert.assertNotNull(objArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str11,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str12, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str13,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:execute_boosted_from_config" + "'", str14,
        "MISSING VAL FOR KEY:execute_boosted_from_config");
    org.junit.Assert.assertEquals("'" + str15 + "' != '"
            + "MISSING VAL FOR KEY:Base directory for transaction logs. Usage of this option is only allowed if --from parameter point to exact one directory"
            + "'", str15,
        "MISSING VAL FOR KEY:Base directory for transaction logs. Usage of this option is only allowed if --from parameter point to exact one directory");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:fabric.stream.concurrency"
            + "'", str16, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:fabric.stream.concurrency");
    org.junit.Assert.assertNotNull(wildcardClass17);
  }

  @Test
  public void test4123() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4123");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:Directory to hold cluster state including Raft log");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4124() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4124");
    }
    java.lang.Object[] objArray12 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str13 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray12);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray12);
    java.lang.String str15 = io.github.onograph.I18N.format(".Database operation count metrics",
        objArray12);
    java.lang.String str16 = io.github.onograph.I18N.format("SCHEMA", objArray12);
    java.lang.String str17 = io.github.onograph.I18N.format("total_bytes", objArray12);
    java.lang.String str18 = io.github.onograph.I18N.format("thread.count", objArray12);
    java.lang.String str19 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)",
        objArray12);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:handshake_server_encoder", objArray12);
    java.lang.Class<?> wildcardClass21 = objArray12.getClass();
    org.junit.Assert.assertNotNull(objArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str13,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str14, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:.Database operation count metrics" + "'",
        str15, "MISSING VAL FOR KEY:.Database operation count metrics");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:SCHEMA" + "'",
        str16, "MISSING VAL FOR KEY:SCHEMA");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:total_bytes" + "'",
        str17, "MISSING VAL FOR KEY:total_bytes");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:thread.count" + "'",
        str18, "MISSING VAL FOR KEY:thread.count");
    org.junit.Assert.assertEquals("'" + str19 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)"
            + "'", str19,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)");
    org.junit.Assert.assertEquals("'" + str20 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:handshake_server_encoder"
            + "'", str20,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:handshake_server_encoder");
    org.junit.Assert.assertNotNull(wildcardClass21);
  }

  @Test
  public void test4125() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4125");
    }
    java.lang.Object[] objArray11 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str12 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray11);
    java.lang.String str13 = io.github.onograph.I18N.format("status", objArray11);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "Maximum number of akka restart attempts before we panic the DBMS. Set to -1 to retry forever",
        objArray11);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "Maximum number of history files for the csv files.", objArray11);
    java.lang.String str16 = io.github.onograph.I18N.format("elapsedTimeMs", objArray11);
    java.lang.String str17 = io.github.onograph.I18N.format(
        "The total number of Bolt connections sitting idle. (gauge)", objArray11);
    java.lang.String str18 = io.github.onograph.I18N.format(".GC metrics.", objArray11);
    java.lang.String str19 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:causal_clustering.akka_actor_system_restarter.max_acceptable_failures",
        objArray11);
    org.junit.Assert.assertNotNull(objArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str12 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str12,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MISSING VAL FOR KEY:status" + "'",
        str13, "MISSING VAL FOR KEY:status");
    org.junit.Assert.assertEquals("'" + str14 + "' != '"
            + "MISSING VAL FOR KEY:Maximum number of akka restart attempts before we panic the DBMS. Set to -1 to retry forever"
            + "'", str14,
        "MISSING VAL FOR KEY:Maximum number of akka restart attempts before we panic the DBMS. Set to -1 to retry forever");
    org.junit.Assert.assertEquals("'" + str15 + "' != '"
            + "MISSING VAL FOR KEY:Maximum number of history files for the csv files." + "'", str15,
        "MISSING VAL FOR KEY:Maximum number of history files for the csv files.");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:elapsedTimeMs" + "'", str16,
        "MISSING VAL FOR KEY:elapsedTimeMs");
    org.junit.Assert.assertEquals("'" + str17 + "' != '"
            + "MISSING VAL FOR KEY:The total number of Bolt connections sitting idle. (gauge)" + "'",
        str17, "MISSING VAL FOR KEY:The total number of Bolt connections sitting idle. (gauge)");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:.GC metrics." + "'",
        str18, "MISSING VAL FOR KEY:.GC metrics.");
    org.junit.Assert.assertEquals("'" + str19 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.akka_actor_system_restarter.max_acceptable_failures"
            + "'", str19,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.akka_actor_system_restarter.max_acceptable_failures");
  }

  @Test
  public void test4126() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4126");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "Perform an online backup from a running Neo4j enterprise server. Neo4j's backup service must have been configured on the server beforehand.%n%nAll consistency checks except 'cc-graph' can be quite expensive so it may be useful to turn them off for very large databases. Increasing the heap size can also be a good idea. See 'neo4j-admin help' for details.%n%nFor more information see: https://neo4j.com/docs/operations-manual/current/backup/");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4127() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4127");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms.security.ldap.referral");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4128() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4128");
    }
    java.lang.Object[] objArray12 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str13 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray12);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray12);
    java.lang.String str15 = io.github.onograph.I18N.format("read", objArray12);
    java.lang.String str16 = io.github.onograph.I18N.format("execute_boosted_from_config",
        objArray12);
    java.lang.String str17 = io.github.onograph.I18N.format("replication_maybe", objArray12);
    java.lang.String str18 = io.github.onograph.I18N.format("metrics.prometheus.endpoint",
        objArray12);
    java.lang.String str19 = io.github.onograph.I18N.format("iops", objArray12);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "The total number of page flushes executed by the page cache. (counter)", objArray12);
    java.lang.Class<?> wildcardClass21 = objArray12.getClass();
    org.junit.Assert.assertNotNull(objArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str13,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str14, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str15,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:execute_boosted_from_config" + "'", str16,
        "MISSING VAL FOR KEY:execute_boosted_from_config");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:replication_maybe" + "'", str17,
        "MISSING VAL FOR KEY:replication_maybe");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:metrics.prometheus.endpoint" + "'", str18,
        "MISSING VAL FOR KEY:metrics.prometheus.endpoint");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MISSING VAL FOR KEY:iops" + "'", str19,
        "MISSING VAL FOR KEY:iops");
    org.junit.Assert.assertEquals("'" + str20 + "' != '"
            + "MISSING VAL FOR KEY:The total number of page flushes executed by the page cache. (counter)"
            + "'", str20,
        "MISSING VAL FOR KEY:The total number of page flushes executed by the page cache. (counter)");
    org.junit.Assert.assertNotNull(wildcardClass21);
  }

  @Test
  public void test4129() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4129");
    }
    java.lang.Object[] objArray1 = null;
    java.lang.String str2 = io.github.onograph.I18N.format("Discovery cluster convergence. (gauge)",
        objArray1);
    org.junit.Assert.assertEquals(
        "'" + str2 + "' != '" + "MISSING VAL FOR KEY:Discovery cluster convergence. (gauge)" + "'",
        str2, "MISSING VAL FOR KEY:Discovery cluster convergence. (gauge)");
  }

  @Test
  public void test4130() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4130");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("committed_write");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4131() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4131");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("DbRole");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4132() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4132");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("aeron-udp");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4133() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4133");
    }
    java.lang.Object[] objArray12 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str13 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray12);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray12);
    java.lang.String str15 = io.github.onograph.I18N.format("read", objArray12);
    java.lang.String str16 = io.github.onograph.I18N.format("invisible", objArray12);
    java.lang.String str17 = io.github.onograph.I18N.format("metrics.graphite.enabled", objArray12);
    java.lang.String str18 = io.github.onograph.I18N.format("dbms.clustering.enable", objArray12);
    java.lang.String str19 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:The total number of page flushes executed by the page cache. (counter)",
        objArray12);
    java.lang.String str20 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:raft-log",
        objArray12);
    org.junit.Assert.assertNotNull(objArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str13,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str14, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str15,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str16, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:metrics.graphite.enabled" + "'", str17,
        "MISSING VAL FOR KEY:metrics.graphite.enabled");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:dbms.clustering.enable" + "'", str18,
        "MISSING VAL FOR KEY:dbms.clustering.enable");
    org.junit.Assert.assertEquals("'" + str19 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:The total number of page flushes executed by the page cache. (counter)"
            + "'", str19,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:The total number of page flushes executed by the page cache. (counter)");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:raft-log" + "'", str20,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:raft-log");
  }

  @Test
  public void test4134() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4134");
    }
    java.lang.Object[] objArray11 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str12 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray11);
    java.lang.String str13 = io.github.onograph.I18N.format("browser.credential_timeout",
        objArray11);
    java.lang.String str14 = io.github.onograph.I18N.format("", objArray11);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "Sets level for driver internal logging.", objArray11);
    java.lang.String str16 = io.github.onograph.I18N.format("max_elements", objArray11);
    java.lang.String str17 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:driver.api", objArray11);
    java.lang.String str18 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:Use native transport if available. Epoll for Linux or Kqueue for MacOS/BSD. If this setting is set to false, or if native transport is not available, Nio transport will be used.",
        objArray11);
    org.junit.Assert.assertNotNull(objArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str12,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:browser.credential_timeout" + "'", str13,
        "MISSING VAL FOR KEY:browser.credential_timeout");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:" + "'", str14,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:Sets level for driver internal logging."
            + "'", str15, "MISSING VAL FOR KEY:Sets level for driver internal logging.");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:max_elements" + "'",
        str16, "MISSING VAL FOR KEY:max_elements");
    org.junit.Assert.assertEquals("'" + str17 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:driver.api" + "'", str17,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:driver.api");
    org.junit.Assert.assertEquals("'" + str18 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Use native transport if available. Epoll for Linux or Kqueue for MacOS/BSD. If this setting is set to false, or if native transport is not available, Nio transport will be used."
            + "'", str18,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Use native transport if available. Epoll for Linux or Kqueue for MacOS/BSD. If this setting is set to false, or if native transport is not available, Nio transport will be used.");
  }

  @Test
  public void test4135() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4135");
    }
    java.lang.Object[] objArray8 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str9 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray8);
    java.lang.String str10 = io.github.onograph.I18N.format("", objArray8);
    java.lang.String str11 = io.github.onograph.I18N.format(".Database transaction metrics",
        objArray8);
    java.lang.String str12 = io.github.onograph.I18N.format("unreachable", objArray8);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "unsupported.dbms.security.ldap.authorization.connection_pooling", objArray8);
    org.junit.Assert.assertNotNull(objArray8);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str9 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str9,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MISSING VAL FOR KEY:" + "'", str10,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:.Database transaction metrics" + "'", str11,
        "MISSING VAL FOR KEY:.Database transaction metrics");
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MISSING VAL FOR KEY:unreachable" + "'",
        str12, "MISSING VAL FOR KEY:unreachable");
    org.junit.Assert.assertEquals("'" + str13 + "' != '"
            + "MISSING VAL FOR KEY:unsupported.dbms.security.ldap.authorization.connection_pooling"
            + "'", str13,
        "MISSING VAL FOR KEY:unsupported.dbms.security.ldap.authorization.connection_pooling");
  }

  @Test
  public void test4136() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4136");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("copyStoreReader");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4137() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4137");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:principal");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4138() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4138");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("credentials");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4139() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4139");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.akka_actor_system_restarter.max_acceptable_failures");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4140() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4140");
    }
    java.lang.Object[] objArray9 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str10 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray9);
    java.lang.String str11 = io.github.onograph.I18N.format("status", objArray9);
    java.lang.String str12 = io.github.onograph.I18N.format("raft-server", objArray9);
    java.lang.String str13 = io.github.onograph.I18N.format("bytes_written", objArray9);
    java.lang.String str14 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:writable",
        objArray9);
    java.lang.String str15 = io.github.onograph.I18N.format("resource", objArray9);
    org.junit.Assert.assertNotNull(objArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str10 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str10,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MISSING VAL FOR KEY:status" + "'",
        str11, "MISSING VAL FOR KEY:status");
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MISSING VAL FOR KEY:raft-server" + "'",
        str12, "MISSING VAL FOR KEY:raft-server");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:bytes_written" + "'", str13,
        "MISSING VAL FOR KEY:bytes_written");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:writable" + "'", str14,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:writable");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:resource" + "'",
        str15, "MISSING VAL FOR KEY:resource");
  }

  @Test
  public void test4141() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4141");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("restarting-cluster-client");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4142() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4142");
    }
    java.lang.Object[] objArray12 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str13 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray12);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray12);
    java.lang.String str15 = io.github.onograph.I18N.format("read", objArray12);
    java.lang.String str16 = io.github.onograph.I18N.format("invisible", objArray12);
    java.lang.String str17 = io.github.onograph.I18N.format("dec_dispatch", objArray12);
    java.lang.String str18 = io.github.onograph.I18N.format("localhost", objArray12);
    java.lang.String str19 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:The ID of the last closed transaction. (counter)", objArray12);
    java.lang.String str20 = io.github.onograph.I18N.format("enc_res_store_id", objArray12);
    org.junit.Assert.assertNotNull(objArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str13,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str14, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str15,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str16, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:dec_dispatch" + "'",
        str17, "MISSING VAL FOR KEY:dec_dispatch");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:localhost" + "'",
        str18, "MISSING VAL FOR KEY:localhost");
    org.junit.Assert.assertEquals("'" + str19 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:The ID of the last closed transaction. (counter)"
            + "'", str19,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:The ID of the last closed transaction. (counter)");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:enc_res_store_id" + "'", str20,
        "MISSING VAL FOR KEY:enc_res_store_id");
  }

  @Test
  public void test4143() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4143");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:The target location of the CSV files: a path to a directory wherein a CSV file per reported field  will be written.");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4144() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4144");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("dbms.security.addRoleToUser");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4145() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4145");
    }
    java.lang.Object[] objArray12 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str13 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray12);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray12);
    java.lang.String str15 = io.github.onograph.I18N.format("read", objArray12);
    java.lang.String str16 = io.github.onograph.I18N.format("invisible", objArray12);
    java.lang.String str17 = io.github.onograph.I18N.format("dec_dispatch", objArray12);
    java.lang.String str18 = io.github.onograph.I18N.format("init_server_handler", objArray12);
    java.lang.String str19 = io.github.onograph.I18N.format("<path>", objArray12);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:SSL for Fabric drivers is configured using 'fabric' SSL policy.This setting can be used to instruct the driver not to use SSL even though 'fabric' SSL policy is configured.The driver will use SSL if 'fabric' SSL policy is configured and this setting is set to 'true'",
        objArray12);
    java.lang.Class<?> wildcardClass21 = objArray12.getClass();
    org.junit.Assert.assertNotNull(objArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str13,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str14, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str15,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str16, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:dec_dispatch" + "'",
        str17, "MISSING VAL FOR KEY:dec_dispatch");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:init_server_handler" + "'", str18,
        "MISSING VAL FOR KEY:init_server_handler");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MISSING VAL FOR KEY:<path>" + "'",
        str19, "MISSING VAL FOR KEY:<path>");
    org.junit.Assert.assertEquals("'" + str20 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:SSL for Fabric drivers is configured using 'fabric' SSL policy.This setting can be used to instruct the driver not to use SSL even though 'fabric' SSL policy is configured.The driver will use SSL if 'fabric' SSL policy is configured and this setting is set to 'true'"
            + "'", str20,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:SSL for Fabric drivers is configured using 'fabric' SSL policy.This setting can be used to instruct the driver not to use SSL even though 'fabric' SSL policy is configured.The driver will use SSL if 'fabric' SSL policy is configured and this setting is set to 'true'");
    org.junit.Assert.assertNotNull(wildcardClass21);
  }

  @Test
  public void test4146() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4146");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "causal_clustering.in_flight_cache.max_bytes");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4147() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4147");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("transactionLogCatchup");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4148() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4148");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("last_leader_message");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4149() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4149");
    }
    java.lang.Object[] objArray9 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str10 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray9);
    java.lang.String str11 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray9);
    java.lang.String str12 = io.github.onograph.I18N.format("", objArray9);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:Enable multi-data center features. Requires appropriate licensing.",
        objArray9);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:The reporting interval for Graphite. That is, how often to send updated metrics to Graphite.",
        objArray9);
    java.lang.Class<?> wildcardClass15 = objArray9.getClass();
    org.junit.Assert.assertNotNull(objArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str10 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str10,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str11, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MISSING VAL FOR KEY:" + "'", str12,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str13 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Enable multi-data center features. Requires appropriate licensing."
            + "'", str13,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Enable multi-data center features. Requires appropriate licensing.");
    org.junit.Assert.assertEquals("'" + str14 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:The reporting interval for Graphite. That is, how often to send updated metrics to Graphite."
            + "'", str14,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:The reporting interval for Graphite. That is, how often to send updated metrics to Graphite.");
    org.junit.Assert.assertNotNull(wildcardClass15);
  }

  @Test
  public void test4150() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4150");
    }
    java.lang.Object[] objArray12 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str13 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray12);
    java.lang.String str14 = io.github.onograph.I18N.format("status", objArray12);
    java.lang.String str15 = io.github.onograph.I18N.format("", objArray12);
    java.lang.String str16 = io.github.onograph.I18N.format("bolt.*", objArray12);
    java.lang.String str17 = io.github.onograph.I18N.format(
        "Include metadata in file. Can't be used for backing system database.\nroles - commands to create the roles and privileges (for both database and graph) that affect the use of the database\nusers - commands to create the users that can use the database and their role assignments \nall - include roles and users",
        objArray12);
    java.lang.String str18 = io.github.onograph.I18N.format("false", objArray12);
    java.lang.String str19 = io.github.onograph.I18N.format("metrics.graphite.interval",
        objArray12);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "The highest peak of concurrent transactions. (counter)", objArray12);
    java.lang.String str21 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:akka.remote.artery.bind.port", objArray12);
    java.lang.Class<?> wildcardClass22 = objArray12.getClass();
    org.junit.Assert.assertNotNull(objArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str13 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str13,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:status" + "'",
        str14, "MISSING VAL FOR KEY:status");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:" + "'", str15,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:bolt.*" + "'",
        str16, "MISSING VAL FOR KEY:bolt.*");
    org.junit.Assert.assertEquals("'" + str17 + "' != '"
            + "MISSING VAL FOR KEY:Include metadata in file. Can't be used for backing system database.\nroles - commands to create the roles and privileges (for both database and graph) that affect the use of the database\nusers - commands to create the users that can use the database and their role assignments \nall - include roles and users"
            + "'", str17,
        "MISSING VAL FOR KEY:Include metadata in file. Can't be used for backing system database.\nroles - commands to create the roles and privileges (for both database and graph) that affect the use of the database\nusers - commands to create the users that can use the database and their role assignments \nall - include roles and users");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:false" + "'", str18,
        "MISSING VAL FOR KEY:false");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:metrics.graphite.interval" + "'", str19,
        "MISSING VAL FOR KEY:metrics.graphite.interval");
    org.junit.Assert.assertEquals("'" + str20 + "' != '"
            + "MISSING VAL FOR KEY:The highest peak of concurrent transactions. (counter)" + "'", str20,
        "MISSING VAL FOR KEY:The highest peak of concurrent transactions. (counter)");
    org.junit.Assert.assertEquals("'" + str21 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:akka.remote.artery.bind.port"
            + "'", str21,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:akka.remote.artery.bind.port");
    org.junit.Assert.assertNotNull(wildcardClass22);
  }

  @Test
  public void test4151() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4151");
    }
    java.lang.Object[] objArray10 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str11 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray10);
    java.lang.String str12 = io.github.onograph.I18N.format("true", objArray10);
    java.lang.String str13 = io.github.onograph.I18N.format("dbms.security.auth_provider",
        objArray10);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "The total size of the database and transaction logs, in bytes. (gauge)", objArray10);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:snappy_encoder", objArray10);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:An LDAP system account password to use for authorization searches when `dbms.security.ldap.authorization.use_system_account` is `true`.",
        objArray10);
    org.junit.Assert.assertNotNull(objArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str11,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MISSING VAL FOR KEY:true" + "'", str12,
        "MISSING VAL FOR KEY:true");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:dbms.security.auth_provider" + "'", str13,
        "MISSING VAL FOR KEY:dbms.security.auth_provider");
    org.junit.Assert.assertEquals("'" + str14 + "' != '"
            + "MISSING VAL FOR KEY:The total size of the database and transaction logs, in bytes. (gauge)"
            + "'", str14,
        "MISSING VAL FOR KEY:The total size of the database and transaction logs, in bytes. (gauge)");
    org.junit.Assert.assertEquals("'" + str15 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:snappy_encoder"
            + "'", str15,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:snappy_encoder");
    org.junit.Assert.assertEquals("'" + str16 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:An LDAP system account password to use for authorization searches when `dbms.security.ldap.authorization.use_system_account` is `true`."
            + "'", str16,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:An LDAP system account password to use for authorization searches when `dbms.security.ldap.authorization.use_system_account` is `true`.");
  }

  @Test
  public void test4152() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4152");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:LZ_validating");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4153() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4153");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:unreachable");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4154() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4154");
    }
    java.lang.Object[] objArray9 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str10 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray9);
    java.lang.String str11 = io.github.onograph.I18N.format("time", objArray9);
    java.lang.String str12 = io.github.onograph.I18N.format(
        "Host and port to bind the cluster member discovery management communication.", objArray9);
    java.lang.String str13 = io.github.onograph.I18N.format("", objArray9);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:Threshold for rotation of the security log.", objArray9);
    java.lang.String str15 = io.github.onograph.I18N.format("RelationshipQualifierAll", objArray9);
    org.junit.Assert.assertNotNull(objArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str10 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str10,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MISSING VAL FOR KEY:time" + "'", str11,
        "MISSING VAL FOR KEY:time");
    org.junit.Assert.assertEquals("'" + str12 + "' != '"
            + "MISSING VAL FOR KEY:Host and port to bind the cluster member discovery management communication."
            + "'", str12,
        "MISSING VAL FOR KEY:Host and port to bind the cluster member discovery management communication.");
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MISSING VAL FOR KEY:" + "'", str13,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str14 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Threshold for rotation of the security log."
            + "'", str14,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Threshold for rotation of the security log.");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:RelationshipQualifierAll" + "'", str15,
        "MISSING VAL FOR KEY:RelationshipQualifierAll");
  }

  @Test
  public void test4155() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4155");
    }
    java.lang.Object[] objArray12 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str13 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray12);
    java.lang.String str14 = io.github.onograph.I18N.format("browser.credential_timeout",
        objArray12);
    java.lang.String str15 = io.github.onograph.I18N.format("", objArray12);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:Raft protocol implementation versions that this instance will allow in negotiation as a comma-separated list. Order is not relevant: the greatest value will be preferred. An empty list will allow all supported versions. Example value: \"1.0, 1.3, 2.0, 2.1\"",
        objArray12);
    java.lang.String str17 = io.github.onograph.I18N.format(
        "A common prefix for the reported metrics field names.", objArray12);
    java.lang.String str18 = io.github.onograph.I18N.format(
        "The highest peak of concurrent transactions. (counter)", objArray12);
    java.lang.String str19 = io.github.onograph.I18N.format("traverse", objArray12);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "The total number of different relationship types stored in the database. (gauge)",
        objArray12);
    java.lang.Class<?> wildcardClass21 = objArray12.getClass();
    org.junit.Assert.assertNotNull(objArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str13,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:browser.credential_timeout" + "'", str14,
        "MISSING VAL FOR KEY:browser.credential_timeout");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:" + "'", str15,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str16 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Raft protocol implementation versions that this instance will allow in negotiation as a comma-separated list. Order is not relevant: the greatest value will be preferred. An empty list will allow all supported versions. Example value: \"1.0, 1.3, 2.0, 2.1\""
            + "'", str16,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Raft protocol implementation versions that this instance will allow in negotiation as a comma-separated list. Order is not relevant: the greatest value will be preferred. An empty list will allow all supported versions. Example value: \"1.0, 1.3, 2.0, 2.1\"");
    org.junit.Assert.assertEquals("'" + str17 + "' != '"
            + "MISSING VAL FOR KEY:A common prefix for the reported metrics field names." + "'", str17,
        "MISSING VAL FOR KEY:A common prefix for the reported metrics field names.");
    org.junit.Assert.assertEquals("'" + str18 + "' != '"
            + "MISSING VAL FOR KEY:The highest peak of concurrent transactions. (counter)" + "'", str18,
        "MISSING VAL FOR KEY:The highest peak of concurrent transactions. (counter)");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MISSING VAL FOR KEY:traverse" + "'",
        str19, "MISSING VAL FOR KEY:traverse");
    org.junit.Assert.assertEquals("'" + str20 + "' != '"
            + "MISSING VAL FOR KEY:The total number of different relationship types stored in the database. (gauge)"
            + "'", str20,
        "MISSING VAL FOR KEY:The total number of different relationship types stored in the database. (gauge)");
    org.junit.Assert.assertNotNull(wildcardClass21);
  }

  @Test
  public void test4156() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4156");
    }
    java.lang.Object[] objArray10 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str11 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray10);
    java.lang.String str12 = io.github.onograph.I18N.format("true", objArray10);
    java.lang.String str13 = io.github.onograph.I18N.format("dbms.security.auth_provider",
        objArray10);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "The total size of the database and transaction logs, in bytes. (gauge)", objArray10);
    java.lang.String str15 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:<host:port>",
        objArray10);
    java.lang.String str16 = io.github.onograph.I18N.format("", objArray10);
    java.lang.Class<?> wildcardClass17 = objArray10.getClass();
    org.junit.Assert.assertNotNull(objArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str11,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MISSING VAL FOR KEY:true" + "'", str12,
        "MISSING VAL FOR KEY:true");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:dbms.security.auth_provider" + "'", str13,
        "MISSING VAL FOR KEY:dbms.security.auth_provider");
    org.junit.Assert.assertEquals("'" + str14 + "' != '"
            + "MISSING VAL FOR KEY:The total size of the database and transaction logs, in bytes. (gauge)"
            + "'", str14,
        "MISSING VAL FOR KEY:The total size of the database and transaction logs, in bytes. (gauge)");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:<host:port>" + "'", str15,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:<host:port>");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:" + "'", str16,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertNotNull(wildcardClass17);
  }

  @Test
  public void test4157() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4157");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str14 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format("read", objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format("invisible", objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format(
        "Count of database operations which failed previously but have recovered. (counter)",
        objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format("profiles", objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format("metrics.bolt.messages.enabled",
        objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format("operator_auth", objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format("createProperty", objArray13);
    java.lang.Class<?> wildcardClass23 = objArray13.getClass();
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str14,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str15, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str16,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str17, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str18 + "' != '"
            + "MISSING VAL FOR KEY:Count of database operations which failed previously but have recovered. (counter)"
            + "'", str18,
        "MISSING VAL FOR KEY:Count of database operations which failed previously but have recovered. (counter)");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MISSING VAL FOR KEY:profiles" + "'",
        str19, "MISSING VAL FOR KEY:profiles");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:metrics.bolt.messages.enabled" + "'", str20,
        "MISSING VAL FOR KEY:metrics.bolt.messages.enabled");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:operator_auth" + "'", str21,
        "MISSING VAL FOR KEY:operator_auth");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "MISSING VAL FOR KEY:createProperty" + "'", str22,
        "MISSING VAL FOR KEY:createProperty");
    org.junit.Assert.assertNotNull(wildcardClass23);
  }

  @Test
  public void test4158() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4158");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:elapsedTimeMs");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4159() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4159");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:raft_message_composer");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4160() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4160");
    }
    java.lang.Object[] objArray12 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str13 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray12);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray12);
    java.lang.String str15 = io.github.onograph.I18N.format("read", objArray12);
    java.lang.String str16 = io.github.onograph.I18N.format("invisible", objArray12);
    java.lang.String str17 = io.github.onograph.I18N.format("relationship-type-distribution",
        objArray12);
    java.lang.String str18 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:<label>[,<label>...]", objArray12);
    java.lang.String str19 = io.github.onograph.I18N.format(
        "causal_clustering.cluster_topology_refresh", objArray12);
    java.lang.String str20 = io.github.onograph.I18N.format("localhost:6362", objArray12);
    java.lang.Class<?> wildcardClass21 = objArray12.getClass();
    org.junit.Assert.assertNotNull(objArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str13,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str14, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str15,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str16, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:relationship-type-distribution" + "'", str17,
        "MISSING VAL FOR KEY:relationship-type-distribution");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:<label>[,<label>...]"
            + "'", str18, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:<label>[,<label>...]");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.cluster_topology_refresh"
            + "'", str19, "MISSING VAL FOR KEY:causal_clustering.cluster_topology_refresh");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:localhost:6362" + "'", str20,
        "MISSING VAL FOR KEY:localhost:6362");
    org.junit.Assert.assertNotNull(wildcardClass21);
  }

  @Test
  public void test4161() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4161");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("4.3.0");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4162() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4162");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(".Database operation count metrics");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4163() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4163");
    }
    java.lang.Object[] objArray14 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str15 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray14);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray14);
    java.lang.String str17 = io.github.onograph.I18N.format("read", objArray14);
    java.lang.String str18 = io.github.onograph.I18N.format("invisible", objArray14);
    java.lang.String str19 = io.github.onograph.I18N.format("relationship-type-distribution",
        objArray14);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:<label>[,<label>...]", objArray14);
    java.lang.String str21 = io.github.onograph.I18N.format(
        "causal_clustering.cluster_topology_refresh", objArray14);
    java.lang.String str22 = io.github.onograph.I18N.format(
        "A common prefix for the reported metrics field names.", objArray14);
    java.lang.String str23 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:error_handler_tail", objArray14);
    java.lang.String str24 = io.github.onograph.I18N.format(
        "The total number of seconds waited between query replans. (counter)", objArray14);
    org.junit.Assert.assertNotNull(objArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str15,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str16, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str17,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str18, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:relationship-type-distribution" + "'", str19,
        "MISSING VAL FOR KEY:relationship-type-distribution");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:<label>[,<label>...]"
            + "'", str20, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:<label>[,<label>...]");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.cluster_topology_refresh"
            + "'", str21, "MISSING VAL FOR KEY:causal_clustering.cluster_topology_refresh");
    org.junit.Assert.assertEquals("'" + str22 + "' != '"
            + "MISSING VAL FOR KEY:A common prefix for the reported metrics field names." + "'", str22,
        "MISSING VAL FOR KEY:A common prefix for the reported metrics field names.");
    org.junit.Assert.assertEquals(
        "'" + str23 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:error_handler_tail" + "'",
        str23, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:error_handler_tail");
    org.junit.Assert.assertEquals("'" + str24 + "' != '"
            + "MISSING VAL FOR KEY:The total number of seconds waited between query replans. (counter)"
            + "'", str24,
        "MISSING VAL FOR KEY:The total number of seconds waited between query replans. (counter)");
  }

  @Test
  public void test4164() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4164");
    }
    java.lang.Object[] objArray11 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str12 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray11);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray11);
    java.lang.String str14 = io.github.onograph.I18N.format("read", objArray11);
    java.lang.String str15 = io.github.onograph.I18N.format("invisible", objArray11);
    java.lang.String str16 = io.github.onograph.I18N.format("fabric.routing.ttl", objArray11);
    java.lang.String str17 = io.github.onograph.I18N.format("continuous", objArray11);
    java.lang.String str18 = io.github.onograph.I18N.format("messages_failed", objArray11);
    java.lang.Class<?> wildcardClass19 = objArray11.getClass();
    org.junit.Assert.assertNotNull(objArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str12,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str13, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str14,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str15, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:fabric.routing.ttl" + "'", str16,
        "MISSING VAL FOR KEY:fabric.routing.ttl");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:continuous" + "'",
        str17, "MISSING VAL FOR KEY:continuous");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:messages_failed" + "'", str18,
        "MISSING VAL FOR KEY:messages_failed");
    org.junit.Assert.assertNotNull(wildcardClass19);
  }

  @Test
  public void test4165() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4165");
    }
    java.lang.Object[] objArray7 = new java.lang.Object[]{};
    java.lang.String str8 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray7);
    java.lang.String str9 = io.github.onograph.I18N.format(
        "The total number of live threads including daemon and non-daemon threads. (gauge)",
        objArray7);
    java.lang.String str10 = io.github.onograph.I18N.format("Upgraded", objArray7);
    java.lang.String str11 = io.github.onograph.I18N.format("", objArray7);
    java.lang.String str12 = io.github.onograph.I18N.format(
        "Enable reporting metrics about the store size of each database. Deprecated - use metrics.filter instead.",
        objArray7);
    java.lang.String str13 = io.github.onograph.I18N.format("orientation", objArray7);
    java.lang.String str14 = io.github.onograph.I18N.format("raft-log", objArray7);
    org.junit.Assert.assertNotNull(objArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
    org.junit.Assert.assertEquals("'" + str8 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str8,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str9 + "' != '"
            + "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)"
            + "'", str9,
        "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)");
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MISSING VAL FOR KEY:Upgraded" + "'",
        str10, "MISSING VAL FOR KEY:Upgraded");
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MISSING VAL FOR KEY:" + "'", str11,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str12 + "' != '"
            + "MISSING VAL FOR KEY:Enable reporting metrics about the store size of each database. Deprecated - use metrics.filter instead."
            + "'", str12,
        "MISSING VAL FOR KEY:Enable reporting metrics about the store size of each database. Deprecated - use metrics.filter instead.");
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MISSING VAL FOR KEY:orientation" + "'",
        str13, "MISSING VAL FOR KEY:orientation");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:raft-log" + "'",
        str14, "MISSING VAL FOR KEY:raft-log");
  }

  @Test
  public void test4166() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4166");
    }
    java.lang.Object[] objArray5 = new java.lang.Object[]{};
    java.lang.String str6 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray5);
    java.lang.String str7 = io.github.onograph.I18N.format("function", objArray5);
    java.lang.String str8 = io.github.onograph.I18N.format("FOR_DATABASE", objArray5);
    java.lang.String str9 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:Base directory for transaction logs. Usage of this option is only allowed if --from parameter point to exact one directory",
        objArray5);
    java.lang.String str10 = io.github.onograph.I18N.format("uuid", objArray5);
    java.lang.Class<?> wildcardClass11 = objArray5.getClass();
    org.junit.Assert.assertNotNull(objArray5);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
    org.junit.Assert.assertEquals("'" + str6 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str6,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "MISSING VAL FOR KEY:function" + "'",
        str7, "MISSING VAL FOR KEY:function");
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "MISSING VAL FOR KEY:FOR_DATABASE" + "'",
        str8, "MISSING VAL FOR KEY:FOR_DATABASE");
    org.junit.Assert.assertEquals("'" + str9 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Base directory for transaction logs. Usage of this option is only allowed if --from parameter point to exact one directory"
            + "'", str9,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Base directory for transaction logs. Usage of this option is only allowed if --from parameter point to exact one directory");
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MISSING VAL FOR KEY:uuid" + "'", str10,
        "MISSING VAL FOR KEY:uuid");
    org.junit.Assert.assertNotNull(wildcardClass11);
  }

  @Test
  public void test4167() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4167");
    }
    java.lang.Object[] objArray9 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str10 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray9);
    java.lang.String str11 = io.github.onograph.I18N.format("status", objArray9);
    java.lang.String str12 = io.github.onograph.I18N.format("", objArray9);
    java.lang.String str13 = io.github.onograph.I18N.format("operator_auth", objArray9);
    java.lang.String str14 = io.github.onograph.I18N.format("Restore a backed up database.",
        objArray9);
    java.lang.String str15 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:ccstate",
        objArray9);
    org.junit.Assert.assertNotNull(objArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str10 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str10,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MISSING VAL FOR KEY:status" + "'",
        str11, "MISSING VAL FOR KEY:status");
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MISSING VAL FOR KEY:" + "'", str12,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:operator_auth" + "'", str13,
        "MISSING VAL FOR KEY:operator_auth");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:Restore a backed up database." + "'", str14,
        "MISSING VAL FOR KEY:Restore a backed up database.");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:ccstate" + "'", str15,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:ccstate");
  }

  @Test
  public void test4168() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4168");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "Pooled connections older than this threshold will be closed and removed from the pool.\nSetting this option to a low value will cause a high connection churn and might result in a performance hit.\nIt is recommended to set maximum lifetime to a slightly smaller value than the one configured in network\nequipment (load balancer, proxy, firewall, etc. can also limit maximum connection lifetime).\nZero and negative values result in lifetime not being checked.");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4169() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4169");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:<relationship>[,<relationship>...]");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4170() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4170");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:visible");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4171() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4171");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:samaccountname");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4172() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4172");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:fabric.stream.concurrency");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4173() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4173");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str14 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format("writable", objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format("--additional-config", objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format("addresses", objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format(
        "The total number of Bolt connections opened since this instance started. This includes both succeeded and failed connections. (counter)",
        objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format("", objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format("capacity", objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format("dbms.security.ldap.use_starttls",
        objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:HAS_DB_ROLE",
        objArray13);
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str14,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:writable" + "'",
        str15, "MISSING VAL FOR KEY:writable");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:--additional-config" + "'", str16,
        "MISSING VAL FOR KEY:--additional-config");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:addresses" + "'",
        str17, "MISSING VAL FOR KEY:addresses");
    org.junit.Assert.assertEquals("'" + str18 + "' != '"
            + "MISSING VAL FOR KEY:The total number of Bolt connections opened since this instance started. This includes both succeeded and failed connections. (counter)"
            + "'", str18,
        "MISSING VAL FOR KEY:The total number of Bolt connections opened since this instance started. This includes both succeeded and failed connections. (counter)");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MISSING VAL FOR KEY:" + "'", str19,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "MISSING VAL FOR KEY:capacity" + "'",
        str20, "MISSING VAL FOR KEY:capacity");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:dbms.security.ldap.use_starttls" + "'", str21,
        "MISSING VAL FOR KEY:dbms.security.ldap.use_starttls");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:HAS_DB_ROLE" + "'", str22,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:HAS_DB_ROLE");
  }

  @Test
  public void test4174() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4174");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("message_processing_delay");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4175() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4175");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "The total number of IO operations performed by page cache.");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4176() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4176");
    }
    java.lang.Object[] objArray12 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str13 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray12);
    java.lang.String str14 = io.github.onograph.I18N.format("status", objArray12);
    java.lang.String str15 = io.github.onograph.I18N.format("raft-server", objArray12);
    java.lang.String str16 = io.github.onograph.I18N.format("transaction.*", objArray12);
    java.lang.String str17 = io.github.onograph.I18N.format("metrics.filter", objArray12);
    java.lang.String str18 = io.github.onograph.I18N.format("Retry-After", objArray12);
    java.lang.String str19 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:causal_clustering.core.*", objArray12);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:causal_clustering.middleware.akka.failure_detector.max_sample_size",
        objArray12);
    java.lang.String str21 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:typically-connect-to-random-read-replica",
        objArray12);
    java.lang.Class<?> wildcardClass22 = objArray12.getClass();
    org.junit.Assert.assertNotNull(objArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str13 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str13,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:status" + "'",
        str14, "MISSING VAL FOR KEY:status");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:raft-server" + "'",
        str15, "MISSING VAL FOR KEY:raft-server");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:transaction.*" + "'", str16,
        "MISSING VAL FOR KEY:transaction.*");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:metrics.filter" + "'", str17,
        "MISSING VAL FOR KEY:metrics.filter");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:Retry-After" + "'",
        str18, "MISSING VAL FOR KEY:Retry-After");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.core.*"
            + "'", str19, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.core.*");
    org.junit.Assert.assertEquals("'" + str20 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.middleware.akka.failure_detector.max_sample_size"
            + "'", str20,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.middleware.akka.failure_detector.max_sample_size");
    org.junit.Assert.assertEquals("'" + str21 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:typically-connect-to-random-read-replica"
            + "'", str21,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:typically-connect-to-random-read-replica");
    org.junit.Assert.assertNotNull(wildcardClass22);
  }

  @Test
  public void test4177() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4177");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "unsupported.causal_clustering.experimental_catchup_protocol_enabled");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4178() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4178");
    }
    java.lang.Object[] objArray14 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str15 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray14);
    java.lang.String str16 = io.github.onograph.I18N.format("writable", objArray14);
    java.lang.String str17 = io.github.onograph.I18N.format("--additional-config", objArray14);
    java.lang.String str18 = io.github.onograph.I18N.format(
        "causal_clustering.connect_randomly_to_server_group", objArray14);
    java.lang.String str19 = io.github.onograph.I18N.format("RelationshipType", objArray14);
    java.lang.String str20 = io.github.onograph.I18N.format("dbms.", objArray14);
    java.lang.String str21 = io.github.onograph.I18N.format("store.size", objArray14);
    java.lang.String str22 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:initial_members",
        objArray14);
    java.lang.String str23 = io.github.onograph.I18N.format(
        "causal_clustering.middleware.akka.failure_detector.acceptable_heartbeat_pause",
        objArray14);
    java.lang.String str24 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms", objArray14);
    java.lang.Class<?> wildcardClass25 = objArray14.getClass();
    org.junit.Assert.assertNotNull(objArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str15,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:writable" + "'",
        str16, "MISSING VAL FOR KEY:writable");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:--additional-config" + "'", str17,
        "MISSING VAL FOR KEY:--additional-config");
    org.junit.Assert.assertEquals("'" + str18 + "' != '"
            + "MISSING VAL FOR KEY:causal_clustering.connect_randomly_to_server_group" + "'", str18,
        "MISSING VAL FOR KEY:causal_clustering.connect_randomly_to_server_group");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:RelationshipType" + "'", str19,
        "MISSING VAL FOR KEY:RelationshipType");
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "MISSING VAL FOR KEY:dbms." + "'", str20,
        "MISSING VAL FOR KEY:dbms.");
    org.junit.Assert.assertEquals("'" + str21 + "' != '" + "MISSING VAL FOR KEY:store.size" + "'",
        str21, "MISSING VAL FOR KEY:store.size");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:initial_members" + "'",
        str22, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:initial_members");
    org.junit.Assert.assertEquals("'" + str23 + "' != '"
            + "MISSING VAL FOR KEY:causal_clustering.middleware.akka.failure_detector.acceptable_heartbeat_pause"
            + "'", str23,
        "MISSING VAL FOR KEY:causal_clustering.middleware.akka.failure_detector.acceptable_heartbeat_pause");
    org.junit.Assert.assertEquals(
        "'" + str24 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms"
            + "'", str24, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms");
    org.junit.Assert.assertNotNull(wildcardClass25);
  }

  @Test
  public void test4179() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4179");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str14 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format("read", objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format("invisible", objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format("dec_dispatch", objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format("localhost", objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "dbms.security.ldap.authorization.group_membership_attributes", objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format("", objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format("high_limitV3_2_0", objArray13);
    java.lang.Class<?> wildcardClass23 = objArray13.getClass();
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str14,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str15, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str16,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str17, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:dec_dispatch" + "'",
        str18, "MISSING VAL FOR KEY:dec_dispatch");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MISSING VAL FOR KEY:localhost" + "'",
        str19, "MISSING VAL FOR KEY:localhost");
    org.junit.Assert.assertEquals("'" + str20 + "' != '"
            + "MISSING VAL FOR KEY:dbms.security.ldap.authorization.group_membership_attributes" + "'",
        str20, "MISSING VAL FOR KEY:dbms.security.ldap.authorization.group_membership_attributes");
    org.junit.Assert.assertEquals("'" + str21 + "' != '" + "MISSING VAL FOR KEY:" + "'", str21,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "MISSING VAL FOR KEY:high_limitV3_2_0" + "'", str22,
        "MISSING VAL FOR KEY:high_limitV3_2_0");
    org.junit.Assert.assertNotNull(wildcardClass23);
  }

  @Test
  public void test4180() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4180");
    }
    java.lang.Object[] objArray14 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str15 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray14);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray14);
    java.lang.String str17 = io.github.onograph.I18N.format("read", objArray14);
    java.lang.String str18 = io.github.onograph.I18N.format("invisible", objArray14);
    java.lang.String str19 = io.github.onograph.I18N.format("relationship-type-distribution",
        objArray14);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:<label>[,<label>...]", objArray14);
    java.lang.String str21 = io.github.onograph.I18N.format("metrics.jmx.enabled", objArray14);
    java.lang.String str22 = io.github.onograph.I18N.format(
        "<relationship.property>[,<relationship.property>...]", objArray14);
    java.lang.String str23 = io.github.onograph.I18N.format("successful", objArray14);
    java.lang.String str24 = io.github.onograph.I18N.format(
        "metrics.neo4j.causal_clustering.enabled", objArray14);
    java.lang.Class<?> wildcardClass25 = objArray14.getClass();
    org.junit.Assert.assertNotNull(objArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str15,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str16, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str17,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str18, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:relationship-type-distribution" + "'", str19,
        "MISSING VAL FOR KEY:relationship-type-distribution");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:<label>[,<label>...]"
            + "'", str20, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:<label>[,<label>...]");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:metrics.jmx.enabled" + "'", str21,
        "MISSING VAL FOR KEY:metrics.jmx.enabled");
    org.junit.Assert.assertEquals("'" + str22 + "' != '"
            + "MISSING VAL FOR KEY:<relationship.property>[,<relationship.property>...]" + "'", str22,
        "MISSING VAL FOR KEY:<relationship.property>[,<relationship.property>...]");
    org.junit.Assert.assertEquals("'" + str23 + "' != '" + "MISSING VAL FOR KEY:successful" + "'",
        str23, "MISSING VAL FOR KEY:successful");
    org.junit.Assert.assertEquals(
        "'" + str24 + "' != '" + "MISSING VAL FOR KEY:metrics.neo4j.causal_clustering.enabled"
            + "'", str24, "MISSING VAL FOR KEY:metrics.neo4j.causal_clustering.enabled");
    org.junit.Assert.assertNotNull(wildcardClass25);
  }

  @Test
  public void test4181() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4181");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str14 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "dbms.security.ldap.authentication.attribute", objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format("dbms.security.createUser", objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format("BatchSize", objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:replication_maybe",
        objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format("iops", objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:false",
        objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format(
        "The total number of seconds waited between query replans. (counter)", objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format("dbms.security.listUsers", objArray13);
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str14,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute"
            + "'", str15, "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:dbms.security.createUser" + "'", str16,
        "MISSING VAL FOR KEY:dbms.security.createUser");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:BatchSize" + "'",
        str17, "MISSING VAL FOR KEY:BatchSize");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:replication_maybe" + "'",
        str18, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:replication_maybe");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MISSING VAL FOR KEY:iops" + "'", str19,
        "MISSING VAL FOR KEY:iops");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:false" + "'", str20,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:false");
    org.junit.Assert.assertEquals("'" + str21 + "' != '"
            + "MISSING VAL FOR KEY:The total number of seconds waited between query replans. (counter)"
            + "'", str21,
        "MISSING VAL FOR KEY:The total number of seconds waited between query replans. (counter)");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "MISSING VAL FOR KEY:dbms.security.listUsers" + "'", str22,
        "MISSING VAL FOR KEY:dbms.security.listUsers");
  }

  @Test
  public void test4182() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4182");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str14 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "dbms.security.ldap.authentication.attribute", objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:Number of available processors", objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format("action", objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format(
        "The total size of the database and transaction logs, in bytes. (gauge)", objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format("Privilege", objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:causal_clustering.middleware.logging.level", objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms", objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:thread-pool-executor", objArray13);
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str14,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute"
            + "'", str15, "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute");
    org.junit.Assert.assertEquals("'" + str16 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Number of available processors" + "'", str16,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Number of available processors");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:action" + "'",
        str17, "MISSING VAL FOR KEY:action");
    org.junit.Assert.assertEquals("'" + str18 + "' != '"
            + "MISSING VAL FOR KEY:The total size of the database and transaction logs, in bytes. (gauge)"
            + "'", str18,
        "MISSING VAL FOR KEY:The total size of the database and transaction logs, in bytes. (gauge)");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MISSING VAL FOR KEY:Privilege" + "'",
        str19, "MISSING VAL FOR KEY:Privilege");
    org.junit.Assert.assertEquals("'" + str20 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.middleware.logging.level"
            + "'", str20,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.middleware.logging.level");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms"
            + "'", str21, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:thread-pool-executor"
            + "'", str22, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:thread-pool-executor");
  }

  @Test
  public void test4183() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4183");
    }
    java.lang.Object[] objArray9 = new java.lang.Object[]{};
    java.lang.String str10 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray9);
    java.lang.String str11 = io.github.onograph.I18N.format("Upgraded", objArray9);
    java.lang.String str12 = io.github.onograph.I18N.format(
        "Configure the discovery type used for cluster name resolution", objArray9);
    java.lang.String str13 = io.github.onograph.I18N.format("high_limitV3_4_0", objArray9);
    java.lang.String str14 = io.github.onograph.I18N.format("logs/", objArray9);
    java.lang.String str15 = io.github.onograph.I18N.format("metrics", objArray9);
    java.lang.String str16 = io.github.onograph.I18N.format("StoreCopy", objArray9);
    java.lang.String str17 = io.github.onograph.I18N.format(
        "The time limit within which a leadership transfer request should be completed, otherwise the leader will resume accepting writes.",
        objArray9);
    java.lang.String str18 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:store_random_id",
        objArray9);
    java.lang.Class<?> wildcardClass19 = objArray9.getClass();
    org.junit.Assert.assertNotNull(objArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
    org.junit.Assert.assertEquals("'" + str10 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str10,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MISSING VAL FOR KEY:Upgraded" + "'",
        str11, "MISSING VAL FOR KEY:Upgraded");
    org.junit.Assert.assertEquals("'" + str12 + "' != '"
            + "MISSING VAL FOR KEY:Configure the discovery type used for cluster name resolution" + "'",
        str12, "MISSING VAL FOR KEY:Configure the discovery type used for cluster name resolution");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:high_limitV3_4_0" + "'", str13,
        "MISSING VAL FOR KEY:high_limitV3_4_0");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:logs/" + "'", str14,
        "MISSING VAL FOR KEY:logs/");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:metrics" + "'",
        str15, "MISSING VAL FOR KEY:metrics");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:StoreCopy" + "'",
        str16, "MISSING VAL FOR KEY:StoreCopy");
    org.junit.Assert.assertEquals("'" + str17 + "' != '"
            + "MISSING VAL FOR KEY:The time limit within which a leadership transfer request should be completed, otherwise the leader will resume accepting writes."
            + "'", str17,
        "MISSING VAL FOR KEY:The time limit within which a leadership transfer request should be completed, otherwise the leader will resume accepting writes.");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:store_random_id" + "'",
        str18, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:store_random_id");
    org.junit.Assert.assertNotNull(wildcardClass19);
  }

  @Test
  public void test4184() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4184");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("dbms.security.listUsers");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4185() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4185");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str14 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "dbms.security.ldap.authentication.attribute", objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:Number of available processors", objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format("action", objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format(
        "The total size of the database and transaction logs, in bytes. (gauge)", objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format("Privilege", objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format("idCacheClusterCleanup", objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format(
        "causal_clustering.akka_actor_system_restarter.max_acceptable_failures", objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format("", objArray13);
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str14,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute"
            + "'", str15, "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute");
    org.junit.Assert.assertEquals("'" + str16 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Number of available processors" + "'", str16,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Number of available processors");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:action" + "'",
        str17, "MISSING VAL FOR KEY:action");
    org.junit.Assert.assertEquals("'" + str18 + "' != '"
            + "MISSING VAL FOR KEY:The total size of the database and transaction logs, in bytes. (gauge)"
            + "'", str18,
        "MISSING VAL FOR KEY:The total size of the database and transaction logs, in bytes. (gauge)");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MISSING VAL FOR KEY:Privilege" + "'",
        str19, "MISSING VAL FOR KEY:Privilege");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:idCacheClusterCleanup" + "'", str20,
        "MISSING VAL FOR KEY:idCacheClusterCleanup");
    org.junit.Assert.assertEquals("'" + str21 + "' != '"
            + "MISSING VAL FOR KEY:causal_clustering.akka_actor_system_restarter.max_acceptable_failures"
            + "'", str21,
        "MISSING VAL FOR KEY:causal_clustering.akka_actor_system_restarter.max_acceptable_failures");
    org.junit.Assert.assertEquals("'" + str22 + "' != '" + "MISSING VAL FOR KEY:" + "'", str22,
        "MISSING VAL FOR KEY:");
  }

  @Test
  public void test4186() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4186");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str14 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format("status", objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format("", objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format("operator_auth", objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format("Restore a backed up database.",
        objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format("passwordChangeRequired", objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format("hours", objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format("RAFT log implementation", objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format(
        "The total number of page merges executed by the page cache. (counter)", objArray13);
    java.lang.String str23 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:browser.credential_timeout", objArray13);
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str14 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str14,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:status" + "'",
        str15, "MISSING VAL FOR KEY:status");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:" + "'", str16,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:operator_auth" + "'", str17,
        "MISSING VAL FOR KEY:operator_auth");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:Restore a backed up database." + "'", str18,
        "MISSING VAL FOR KEY:Restore a backed up database.");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:passwordChangeRequired" + "'", str19,
        "MISSING VAL FOR KEY:passwordChangeRequired");
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "MISSING VAL FOR KEY:hours" + "'", str20,
        "MISSING VAL FOR KEY:hours");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:RAFT log implementation" + "'", str21,
        "MISSING VAL FOR KEY:RAFT log implementation");
    org.junit.Assert.assertEquals("'" + str22 + "' != '"
            + "MISSING VAL FOR KEY:The total number of page merges executed by the page cache. (counter)"
            + "'", str22,
        "MISSING VAL FOR KEY:The total number of page merges executed by the page cache. (counter)");
    org.junit.Assert.assertEquals("'" + str23 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:browser.credential_timeout" + "'", str23,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:browser.credential_timeout");
  }

  @Test
  public void test4187() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4187");
    }
    java.lang.Object[] objArray12 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str13 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray12);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "dbms.security.ldap.authentication.attribute", objArray12);
    java.lang.String str15 = io.github.onograph.I18N.format("dbms.security.createUser", objArray12);
    java.lang.String str16 = io.github.onograph.I18N.format("BatchSize", objArray12);
    java.lang.String str17 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:replication_maybe",
        objArray12);
    java.lang.String str18 = io.github.onograph.I18N.format("dbms.clustering.enable", objArray12);
    java.lang.String str19 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:fabric.stream.buffer.size", objArray12);
    java.lang.String str20 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:*ids_in_use.node",
        objArray12);
    java.lang.Class<?> wildcardClass21 = objArray12.getClass();
    org.junit.Assert.assertNotNull(objArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str13,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute"
            + "'", str14, "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:dbms.security.createUser" + "'", str15,
        "MISSING VAL FOR KEY:dbms.security.createUser");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:BatchSize" + "'",
        str16, "MISSING VAL FOR KEY:BatchSize");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:replication_maybe" + "'",
        str17, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:replication_maybe");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:dbms.clustering.enable" + "'", str18,
        "MISSING VAL FOR KEY:dbms.clustering.enable");
    org.junit.Assert.assertEquals("'" + str19 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:fabric.stream.buffer.size"
            + "'", str19,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:fabric.stream.buffer.size");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:*ids_in_use.node" + "'",
        str20, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:*ids_in_use.node");
    org.junit.Assert.assertNotNull(wildcardClass21);
  }

  @Test
  public void test4188() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4188");
    }
    java.lang.Object[] objArray1 = null;
    java.lang.String str2 = io.github.onograph.I18N.format("log", objArray1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '" + "MISSING VAL FOR KEY:log" + "'", str2,
        "MISSING VAL FOR KEY:log");
  }

  @Test
  public void test4189() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4189");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:off");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4190() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4190");
    }
    java.lang.Object[] objArray4 = new java.lang.Object[]{};
    java.lang.String str5 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray4);
    java.lang.String str6 = io.github.onograph.I18N.format("function", objArray4);
    java.lang.String str7 = io.github.onograph.I18N.format("continuous", objArray4);
    java.lang.String str8 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:read-only",
        objArray4);
    java.lang.Class<?> wildcardClass9 = objArray4.getClass();
    org.junit.Assert.assertNotNull(objArray4);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
    org.junit.Assert.assertEquals("'" + str5 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str5,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "MISSING VAL FOR KEY:function" + "'",
        str6, "MISSING VAL FOR KEY:function");
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "MISSING VAL FOR KEY:continuous" + "'",
        str7, "MISSING VAL FOR KEY:continuous");
    org.junit.Assert.assertEquals(
        "'" + str8 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:read-only" + "'", str8,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:read-only");
    org.junit.Assert.assertNotNull(wildcardClass9);
  }

  @Test
  public void test4191() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4191");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("dbms.cluster.benchmark.start");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4192() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4192");
    }
    java.lang.Object[] objArray7 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str8 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray7);
    java.lang.String str9 = io.github.onograph.I18N.format("ccstate", objArray7);
    java.lang.String str10 = io.github.onograph.I18N.format("rollbacks", objArray7);
    java.lang.String str11 = io.github.onograph.I18N.format(
        "Require authorization for access to the Causal Clustering status endpoints.", objArray7);
    java.lang.Class<?> wildcardClass12 = objArray7.getClass();
    org.junit.Assert.assertNotNull(objArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str8 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str8,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MISSING VAL FOR KEY:ccstate" + "'", str9,
        "MISSING VAL FOR KEY:ccstate");
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MISSING VAL FOR KEY:rollbacks" + "'",
        str10, "MISSING VAL FOR KEY:rollbacks");
    org.junit.Assert.assertEquals("'" + str11 + "' != '"
            + "MISSING VAL FOR KEY:Require authorization for access to the Causal Clustering status endpoints."
            + "'", str11,
        "MISSING VAL FOR KEY:Require authorization for access to the Causal Clustering status endpoints.");
    org.junit.Assert.assertNotNull(wildcardClass12);
  }

  @Test
  public void test4193() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4193");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("pre-vote");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4194() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4194");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("driver.connection.max_lifetime");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4195() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4195");
    }
    java.lang.Object[] objArray11 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str12 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray11);
    java.lang.String str13 = io.github.onograph.I18N.format("status", objArray11);
    java.lang.String str14 = io.github.onograph.I18N.format("", objArray11);
    java.lang.String str15 = io.github.onograph.I18N.format("operator_auth", objArray11);
    java.lang.String str16 = io.github.onograph.I18N.format("Restore a backed up database.",
        objArray11);
    java.lang.String str17 = io.github.onograph.I18N.format("passwordChangeRequired", objArray11);
    java.lang.String str18 = io.github.onograph.I18N.format("hours", objArray11);
    java.lang.String str19 = io.github.onograph.I18N.format(
        "The total number of Bolt connections currently being executed. (gauge)", objArray11);
    java.lang.Class<?> wildcardClass20 = objArray11.getClass();
    org.junit.Assert.assertNotNull(objArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str12 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str12,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MISSING VAL FOR KEY:status" + "'",
        str13, "MISSING VAL FOR KEY:status");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:" + "'", str14,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:operator_auth" + "'", str15,
        "MISSING VAL FOR KEY:operator_auth");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:Restore a backed up database." + "'", str16,
        "MISSING VAL FOR KEY:Restore a backed up database.");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:passwordChangeRequired" + "'", str17,
        "MISSING VAL FOR KEY:passwordChangeRequired");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:hours" + "'", str18,
        "MISSING VAL FOR KEY:hours");
    org.junit.Assert.assertEquals("'" + str19 + "' != '"
            + "MISSING VAL FOR KEY:The total number of Bolt connections currently being executed. (gauge)"
            + "'", str19,
        "MISSING VAL FOR KEY:The total number of Bolt connections currently being executed. (gauge)");
    org.junit.Assert.assertNotNull(wildcardClass20);
  }

  @Test
  public void test4196() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4196");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "Copy a database and optionally apply filters.");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4197() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4197");
    }
    java.lang.Object[] objArray8 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str9 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray8);
    java.lang.String str10 = io.github.onograph.I18N.format("true", objArray8);
    java.lang.String str11 = io.github.onograph.I18N.format("metrics.neo4j.counts.enabled",
        objArray8);
    java.lang.String str12 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:graph", objArray8);
    java.lang.Class<?> wildcardClass13 = objArray8.getClass();
    org.junit.Assert.assertNotNull(objArray8);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str9 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str9,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MISSING VAL FOR KEY:true" + "'", str10,
        "MISSING VAL FOR KEY:true");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:metrics.neo4j.counts.enabled" + "'", str11,
        "MISSING VAL FOR KEY:metrics.neo4j.counts.enabled");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:graph" + "'", str12,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:graph");
    org.junit.Assert.assertNotNull(wildcardClass13);
  }

  @Test
  public void test4198() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4198");
    }
    java.lang.Object[] objArray9 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str10 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray9);
    java.lang.String str11 = io.github.onograph.I18N.format("ccstate", objArray9);
    java.lang.String str12 = io.github.onograph.I18N.format(
        "Use native transport if available. Epoll for Linux or Kqueue for MacOS/BSD. If this setting is set to false, or if native transport is not available, Nio transport will be used.",
        objArray9);
    java.lang.String str13 = io.github.onograph.I18N.format("Delete the specified user.",
        objArray9);
    java.lang.String str14 = io.github.onograph.I18N.format("", objArray9);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:--skip-relationships", objArray9);
    java.lang.Class<?> wildcardClass16 = objArray9.getClass();
    org.junit.Assert.assertNotNull(objArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str10 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str10,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MISSING VAL FOR KEY:ccstate" + "'",
        str11, "MISSING VAL FOR KEY:ccstate");
    org.junit.Assert.assertEquals("'" + str12 + "' != '"
            + "MISSING VAL FOR KEY:Use native transport if available. Epoll for Linux or Kqueue for MacOS/BSD. If this setting is set to false, or if native transport is not available, Nio transport will be used."
            + "'", str12,
        "MISSING VAL FOR KEY:Use native transport if available. Epoll for Linux or Kqueue for MacOS/BSD. If this setting is set to false, or if native transport is not available, Nio transport will be used.");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:Delete the specified user." + "'", str13,
        "MISSING VAL FOR KEY:Delete the specified user.");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:" + "'", str14,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:--skip-relationships"
            + "'", str15, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:--skip-relationships");
    org.junit.Assert.assertNotNull(wildcardClass16);
  }

  @Test
  public void test4199() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4199");
    }
    java.lang.Object[] objArray10 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str11 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray10);
    java.lang.String str12 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray10);
    java.lang.String str13 = io.github.onograph.I18N.format("read", objArray10);
    java.lang.String str14 = io.github.onograph.I18N.format("ssl_handler", objArray10);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "causal_clustering.middleware.akka.failure_detector.min_std_deviation", objArray10);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "Sum total used heap and native memory in bytes. (gauge)", objArray10);
    org.junit.Assert.assertNotNull(objArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str11,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str12, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str13,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:ssl_handler" + "'",
        str14, "MISSING VAL FOR KEY:ssl_handler");
    org.junit.Assert.assertEquals("'" + str15 + "' != '"
            + "MISSING VAL FOR KEY:causal_clustering.middleware.akka.failure_detector.min_std_deviation"
            + "'", str15,
        "MISSING VAL FOR KEY:causal_clustering.middleware.akka.failure_detector.min_std_deviation");
    org.junit.Assert.assertEquals("'" + str16 + "' != '"
            + "MISSING VAL FOR KEY:Sum total used heap and native memory in bytes. (gauge)" + "'",
        str16, "MISSING VAL FOR KEY:Sum total used heap and native memory in bytes. (gauge)");
  }

  @Test
  public void test4200() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4200");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:akka.remote.artery.enabled");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4201() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4201");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("causal_clustering.core.discovery.*");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4202() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4202");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("dbms.backup.listen_address");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4203() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4203");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("LabelQualifier");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4204() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4204");
    }
    java.lang.Object[] objArray11 = new java.lang.Object[]{};
    java.lang.String str12 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray11);
    java.lang.String str13 = io.github.onograph.I18N.format("Upgraded", objArray11);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "Configure the discovery type used for cluster name resolution", objArray11);
    java.lang.String str15 = io.github.onograph.I18N.format("high_limitV3_4_0", objArray11);
    java.lang.String str16 = io.github.onograph.I18N.format("logs/", objArray11);
    java.lang.String str17 = io.github.onograph.I18N.format(
        "causal_clustering.middleware.akka.allow_any_core_to_bootstrap", objArray11);
    java.lang.String str18 = io.github.onograph.I18N.format("resource", objArray11);
    java.lang.String str19 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)",
        objArray11);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "causal_clustering.middleware.akka.sink_parallelism", objArray11);
    java.lang.String str21 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:snappy_validating_decoder", objArray11);
    java.lang.String str22 = io.github.onograph.I18N.format("last_committed_tx_id", objArray11);
    java.lang.Class<?> wildcardClass23 = objArray11.getClass();
    org.junit.Assert.assertNotNull(objArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
    org.junit.Assert.assertEquals("'" + str12 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str12,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MISSING VAL FOR KEY:Upgraded" + "'",
        str13, "MISSING VAL FOR KEY:Upgraded");
    org.junit.Assert.assertEquals("'" + str14 + "' != '"
            + "MISSING VAL FOR KEY:Configure the discovery type used for cluster name resolution" + "'",
        str14, "MISSING VAL FOR KEY:Configure the discovery type used for cluster name resolution");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:high_limitV3_4_0" + "'", str15,
        "MISSING VAL FOR KEY:high_limitV3_4_0");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:logs/" + "'", str16,
        "MISSING VAL FOR KEY:logs/");
    org.junit.Assert.assertEquals("'" + str17 + "' != '"
            + "MISSING VAL FOR KEY:causal_clustering.middleware.akka.allow_any_core_to_bootstrap" + "'",
        str17, "MISSING VAL FOR KEY:causal_clustering.middleware.akka.allow_any_core_to_bootstrap");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:resource" + "'",
        str18, "MISSING VAL FOR KEY:resource");
    org.junit.Assert.assertEquals("'" + str19 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)"
            + "'", str19,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)");
    org.junit.Assert.assertEquals("'" + str20 + "' != '"
            + "MISSING VAL FOR KEY:causal_clustering.middleware.akka.sink_parallelism" + "'", str20,
        "MISSING VAL FOR KEY:causal_clustering.middleware.akka.sink_parallelism");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:snappy_validating_decoder"
            + "'", str21, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:snappy_validating_decoder");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "MISSING VAL FOR KEY:last_committed_tx_id" + "'", str22,
        "MISSING VAL FOR KEY:last_committed_tx_id");
    org.junit.Assert.assertNotNull(wildcardClass23);
  }

  @Test
  public void test4205() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4205");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "causal_clustering.catch_up_client_inactivity_timeout");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4206() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4206");
    }
    java.lang.Object[] objArray1 = null;
    java.lang.String str2 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:dbms.dynamic.setting.allowlist", objArray1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms.dynamic.setting.allowlist" + "'", str2,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms.dynamic.setting.allowlist");
  }

  @Test
  public void test4207() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4207");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("cc-discovery-actor-system");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4208() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4208");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str14 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format("read", objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format("invisible", objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format("dec_dispatch", objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:causal_clustering.cluster_topology_refresh", objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format("storeCopy", objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:Set to `true` to enable exporting metrics to Graphite.", objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format("cc-discovery-actor-system",
        objArray13);
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str14,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str15, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str16,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str17, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:dec_dispatch" + "'",
        str18, "MISSING VAL FOR KEY:dec_dispatch");
    org.junit.Assert.assertEquals("'" + str19 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.cluster_topology_refresh"
            + "'", str19,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.cluster_topology_refresh");
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "MISSING VAL FOR KEY:storeCopy" + "'",
        str20, "MISSING VAL FOR KEY:storeCopy");
    org.junit.Assert.assertEquals("'" + str21 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Set to `true` to enable exporting metrics to Graphite."
            + "'", str21,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Set to `true` to enable exporting metrics to Graphite.");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "MISSING VAL FOR KEY:cc-discovery-actor-system" + "'", str22,
        "MISSING VAL FOR KEY:cc-discovery-actor-system");
  }

  @Test
  public void test4209() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4209");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str14 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format("read", objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format("execute_boosted_from_config",
        objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format("LabelQualifierAll", objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format("vm.memory.buffer.*", objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "Maximum timeout for cluster status request execution", objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:enc_res_database_id", objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format("--skip-relationship-properties",
        objArray13);
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str14,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str15, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str16,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:execute_boosted_from_config" + "'", str17,
        "MISSING VAL FOR KEY:execute_boosted_from_config");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:LabelQualifierAll" + "'", str18,
        "MISSING VAL FOR KEY:LabelQualifierAll");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:vm.memory.buffer.*" + "'", str19,
        "MISSING VAL FOR KEY:vm.memory.buffer.*");
    org.junit.Assert.assertEquals("'" + str20 + "' != '"
            + "MISSING VAL FOR KEY:Maximum timeout for cluster status request execution" + "'", str20,
        "MISSING VAL FOR KEY:Maximum timeout for cluster status request execution");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:enc_res_database_id"
            + "'", str21, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:enc_res_database_id");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "MISSING VAL FOR KEY:--skip-relationship-properties" + "'", str22,
        "MISSING VAL FOR KEY:--skip-relationship-properties");
  }

  @Test
  public void test4210() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4210");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:The total number of Bolt connections closed since this instance started. This includes both properly and abnormally ended connections. (counter)");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4211() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4211");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("metrics.graphite.interval");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4212() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4212");
    }
    java.lang.Object[] objArray12 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str13 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray12);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "dbms.security.ldap.authentication.attribute", objArray12);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:Number of available processors", objArray12);
    java.lang.String str16 = io.github.onograph.I18N.format("action", objArray12);
    java.lang.String str17 = io.github.onograph.I18N.format(
        "The total size of the database and transaction logs, in bytes. (gauge)", objArray12);
    java.lang.String str18 = io.github.onograph.I18N.format("Privilege", objArray12);
    java.lang.String str19 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:enc_req_database_id", objArray12);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:causal_clustering.akka_actor_system_restarter.initial_delay",
        objArray12);
    java.lang.Class<?> wildcardClass21 = objArray12.getClass();
    org.junit.Assert.assertNotNull(objArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str13,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute"
            + "'", str14, "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute");
    org.junit.Assert.assertEquals("'" + str15 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Number of available processors" + "'", str15,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Number of available processors");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:action" + "'",
        str16, "MISSING VAL FOR KEY:action");
    org.junit.Assert.assertEquals("'" + str17 + "' != '"
            + "MISSING VAL FOR KEY:The total size of the database and transaction logs, in bytes. (gauge)"
            + "'", str17,
        "MISSING VAL FOR KEY:The total size of the database and transaction logs, in bytes. (gauge)");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:Privilege" + "'",
        str18, "MISSING VAL FOR KEY:Privilege");
    org.junit.Assert.assertEquals("'" + str19 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:enc_req_database_id" + "'",
        str19, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:enc_req_database_id");
    org.junit.Assert.assertEquals("'" + str20 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.akka_actor_system_restarter.initial_delay"
            + "'", str20,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.akka_actor_system_restarter.initial_delay");
    org.junit.Assert.assertNotNull(wildcardClass21);
  }

  @Test
  public void test4213() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4213");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "causal_clustering.middleware.akka.failure_detector.heartbeat_interval");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4214() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4214");
    }
    java.lang.Object[] objArray11 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str12 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray11);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray11);
    java.lang.String str14 = io.github.onograph.I18N.format("read", objArray11);
    java.lang.String str15 = io.github.onograph.I18N.format("invisible", objArray11);
    java.lang.String str16 = io.github.onograph.I18N.format("false", objArray11);
    java.lang.String str17 = io.github.onograph.I18N.format("INBOUND", objArray11);
    java.lang.String str18 = io.github.onograph.I18N.format("createLabel", objArray11);
    java.lang.Class<?> wildcardClass19 = objArray11.getClass();
    org.junit.Assert.assertNotNull(objArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str12,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str13, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str14,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str15, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:false" + "'", str16,
        "MISSING VAL FOR KEY:false");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:INBOUND" + "'",
        str17, "MISSING VAL FOR KEY:INBOUND");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:createLabel" + "'",
        str18, "MISSING VAL FOR KEY:createLabel");
    org.junit.Assert.assertNotNull(wildcardClass19);
  }

  @Test
  public void test4215() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4215");
    }
    java.lang.Object[] objArray10 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str11 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray10);
    java.lang.String str12 = io.github.onograph.I18N.format("*ids_in_use.node", objArray10);
    java.lang.String str13 = io.github.onograph.I18N.format("temp-copy", objArray10);
    java.lang.String str14 = io.github.onograph.I18N.format("dbms.logs.security.format",
        objArray10);
    java.lang.String str15 = io.github.onograph.I18N.format("", objArray10);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "Set to `true` to enable the Prometheus endpoint", objArray10);
    java.lang.String str17 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Count of successful database create operations. (counter)",
        objArray10);
    org.junit.Assert.assertNotNull(objArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str11 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str11,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:*ids_in_use.node" + "'", str12,
        "MISSING VAL FOR KEY:*ids_in_use.node");
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MISSING VAL FOR KEY:temp-copy" + "'",
        str13, "MISSING VAL FOR KEY:temp-copy");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:dbms.logs.security.format" + "'", str14,
        "MISSING VAL FOR KEY:dbms.logs.security.format");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:" + "'", str15,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str16 + "' != '"
            + "MISSING VAL FOR KEY:Set to `true` to enable the Prometheus endpoint" + "'", str16,
        "MISSING VAL FOR KEY:Set to `true` to enable the Prometheus endpoint");
    org.junit.Assert.assertEquals("'" + str17 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:Count of successful database create operations. (counter)"
            + "'", str17,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:Count of successful database create operations. (counter)");
  }

  @Test
  public void test4216() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4216");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "The total number of committed read transactions. (counter)");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4217() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4217");
    }
    java.lang.Object[] objArray9 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str10 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray9);
    java.lang.String str11 = io.github.onograph.I18N.format("ccstate", objArray9);
    java.lang.String str12 = io.github.onograph.I18N.format(
        "Use native transport if available. Epoll for Linux or Kqueue for MacOS/BSD. If this setting is set to false, or if native transport is not available, Nio transport will be used.",
        objArray9);
    java.lang.String str13 = io.github.onograph.I18N.format("Delete the specified user.",
        objArray9);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.middleware.akka.cluster.seed_node_timeout",
        objArray9);
    java.lang.String str15 = io.github.onograph.I18N.format("", objArray9);
    java.lang.Class<?> wildcardClass16 = objArray9.getClass();
    org.junit.Assert.assertNotNull(objArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str10 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str10,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MISSING VAL FOR KEY:ccstate" + "'",
        str11, "MISSING VAL FOR KEY:ccstate");
    org.junit.Assert.assertEquals("'" + str12 + "' != '"
            + "MISSING VAL FOR KEY:Use native transport if available. Epoll for Linux or Kqueue for MacOS/BSD. If this setting is set to false, or if native transport is not available, Nio transport will be used."
            + "'", str12,
        "MISSING VAL FOR KEY:Use native transport if available. Epoll for Linux or Kqueue for MacOS/BSD. If this setting is set to false, or if native transport is not available, Nio transport will be used.");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:Delete the specified user." + "'", str13,
        "MISSING VAL FOR KEY:Delete the specified user.");
    org.junit.Assert.assertEquals("'" + str14 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.middleware.akka.cluster.seed_node_timeout"
            + "'", str14,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.middleware.akka.cluster.seed_node_timeout");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:" + "'", str15,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertNotNull(wildcardClass16);
  }

  @Test
  public void test4218() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4218");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "dbms.security.ldap.authentication.use_samaccountname");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4219() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4219");
    }
    java.lang.Object[] objArray12 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str13 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray12);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray12);
    java.lang.String str15 = io.github.onograph.I18N.format("read", objArray12);
    java.lang.String str16 = io.github.onograph.I18N.format("execute_boosted_from_config",
        objArray12);
    java.lang.String str17 = io.github.onograph.I18N.format("replication_maybe", objArray12);
    java.lang.String str18 = io.github.onograph.I18N.format("PROTOCOL_STACK", objArray12);
    java.lang.String str19 = io.github.onograph.I18N.format("replication_maybe", objArray12);
    java.lang.String str20 = io.github.onograph.I18N.format("unavailable", objArray12);
    org.junit.Assert.assertNotNull(objArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str13,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str14, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str15,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:execute_boosted_from_config" + "'", str16,
        "MISSING VAL FOR KEY:execute_boosted_from_config");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:replication_maybe" + "'", str17,
        "MISSING VAL FOR KEY:replication_maybe");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:PROTOCOL_STACK" + "'", str18,
        "MISSING VAL FOR KEY:PROTOCOL_STACK");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:replication_maybe" + "'", str19,
        "MISSING VAL FOR KEY:replication_maybe");
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "MISSING VAL FOR KEY:unavailable" + "'",
        str20, "MISSING VAL FOR KEY:unavailable");
  }

  @Test
  public void test4220() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4220");
    }
    java.lang.Object[] objArray9 = new java.lang.Object[]{};
    java.lang.String str10 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray9);
    java.lang.String str11 = io.github.onograph.I18N.format(
        "The total number of live threads including daemon and non-daemon threads. (gauge)",
        objArray9);
    java.lang.String str12 = io.github.onograph.I18N.format("Upgraded", objArray9);
    java.lang.String str13 = io.github.onograph.I18N.format("", objArray9);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "Enable reporting metrics about the store size of each database. Deprecated - use metrics.filter instead.",
        objArray9);
    java.lang.String str15 = io.github.onograph.I18N.format("messages_received", objArray9);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "causal_clustering.leadership_priority_group", objArray9);
    java.lang.String str17 = io.github.onograph.I18N.format("source", objArray9);
    java.lang.String str18 = io.github.onograph.I18N.format("Start the benchmark.", objArray9);
    org.junit.Assert.assertNotNull(objArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
    org.junit.Assert.assertEquals("'" + str10 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str10,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str11 + "' != '"
            + "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)"
            + "'", str11,
        "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)");
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MISSING VAL FOR KEY:Upgraded" + "'",
        str12, "MISSING VAL FOR KEY:Upgraded");
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MISSING VAL FOR KEY:" + "'", str13,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str14 + "' != '"
            + "MISSING VAL FOR KEY:Enable reporting metrics about the store size of each database. Deprecated - use metrics.filter instead."
            + "'", str14,
        "MISSING VAL FOR KEY:Enable reporting metrics about the store size of each database. Deprecated - use metrics.filter instead.");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:messages_received" + "'", str15,
        "MISSING VAL FOR KEY:messages_received");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.leadership_priority_group"
            + "'", str16, "MISSING VAL FOR KEY:causal_clustering.leadership_priority_group");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:source" + "'",
        str17, "MISSING VAL FOR KEY:source");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:Start the benchmark." + "'", str18,
        "MISSING VAL FOR KEY:Start the benchmark.");
  }

  @Test
  public void test4221() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4221");
    }
    java.lang.Object[] objArray9 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str10 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray9);
    java.lang.String str11 = io.github.onograph.I18N.format("status", objArray9);
    java.lang.String str12 = io.github.onograph.I18N.format("countAllRelationshipMetrics",
        objArray9);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:causal_clustering.middleware.akka.allow_any_core_to_bootstrap",
        objArray9);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "causal_clustering.raft_messages_log_path", objArray9);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "The name of the base object or named context to search for user objects when LDAP authorization is enabled. A common case is that this matches the last part of `dbms.security.ldap.authentication.user_dn_template`.",
        objArray9);
    java.lang.Class<?> wildcardClass16 = objArray9.getClass();
    org.junit.Assert.assertNotNull(objArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str10 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str10,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MISSING VAL FOR KEY:status" + "'",
        str11, "MISSING VAL FOR KEY:status");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:countAllRelationshipMetrics" + "'", str12,
        "MISSING VAL FOR KEY:countAllRelationshipMetrics");
    org.junit.Assert.assertEquals("'" + str13 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.middleware.akka.allow_any_core_to_bootstrap"
            + "'", str13,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.middleware.akka.allow_any_core_to_bootstrap");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.raft_messages_log_path"
            + "'", str14, "MISSING VAL FOR KEY:causal_clustering.raft_messages_log_path");
    org.junit.Assert.assertEquals("'" + str15 + "' != '"
            + "MISSING VAL FOR KEY:The name of the base object or named context to search for user objects when LDAP authorization is enabled. A common case is that this matches the last part of `dbms.security.ldap.authentication.user_dn_template`."
            + "'", str15,
        "MISSING VAL FOR KEY:The name of the base object or named context to search for user objects when LDAP authorization is enabled. A common case is that this matches the last part of `dbms.security.ldap.authentication.user_dn_template`.");
    org.junit.Assert.assertNotNull(wildcardClass16);
  }

  @Test
  public void test4222() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4222");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:List the active lock requests granted for the transaction executing the query with the given query id.");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4223() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4223");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("committed");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4224() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4224");
    }
    java.lang.Object[] objArray9 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str10 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray9);
    java.lang.String str11 = io.github.onograph.I18N.format("", objArray9);
    java.lang.String str12 = io.github.onograph.I18N.format(".Database transaction metrics",
        objArray9);
    java.lang.String str13 = io.github.onograph.I18N.format("metrics.jvm.memory.enabled",
        objArray9);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "Enable reporting metrics about number of occurred replanning events. Deprecated - use metrics.filter instead.",
        objArray9);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:logging-dispatcher.type", objArray9);
    java.lang.Class<?> wildcardClass16 = objArray9.getClass();
    org.junit.Assert.assertNotNull(objArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str10 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str10,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MISSING VAL FOR KEY:" + "'", str11,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:.Database transaction metrics" + "'", str12,
        "MISSING VAL FOR KEY:.Database transaction metrics");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:metrics.jvm.memory.enabled" + "'", str13,
        "MISSING VAL FOR KEY:metrics.jvm.memory.enabled");
    org.junit.Assert.assertEquals("'" + str14 + "' != '"
            + "MISSING VAL FOR KEY:Enable reporting metrics about number of occurred replanning events. Deprecated - use metrics.filter instead."
            + "'", str14,
        "MISSING VAL FOR KEY:Enable reporting metrics about number of occurred replanning events. Deprecated - use metrics.filter instead.");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:logging-dispatcher.type"
            + "'", str15, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:logging-dispatcher.type");
    org.junit.Assert.assertNotNull(wildcardClass16);
  }

  @Test
  public void test4225() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4225");
    }
    java.lang.Object[] objArray12 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str13 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray12);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray12);
    java.lang.String str15 = io.github.onograph.I18N.format("read", objArray12);
    java.lang.String str16 = io.github.onograph.I18N.format("invisible", objArray12);
    java.lang.String str17 = io.github.onograph.I18N.format(
        "Count of database operations which failed previously but have recovered. (counter)",
        objArray12);
    java.lang.String str18 = io.github.onograph.I18N.format(
        "The LDAP group to which a user must belong to get any access to the system.Set this to restrict access to a subset of LDAP users belonging to a particular group. If this is not set, any user to successfully authenticate via LDAP will have access to the PUBLIC role and any other roles assigned to them via dbms.security.ldap.authorization.group_to_role_mapping.",
        objArray12);
    java.lang.String str19 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:The ID of the last closed transaction. (counter)", objArray12);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "Estimated amount of memory used by the pool. (gauge)", objArray12);
    java.lang.Class<?> wildcardClass21 = objArray12.getClass();
    org.junit.Assert.assertNotNull(objArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str13,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str14, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str15,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str16, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str17 + "' != '"
            + "MISSING VAL FOR KEY:Count of database operations which failed previously but have recovered. (counter)"
            + "'", str17,
        "MISSING VAL FOR KEY:Count of database operations which failed previously but have recovered. (counter)");
    org.junit.Assert.assertEquals("'" + str18 + "' != '"
            + "MISSING VAL FOR KEY:The LDAP group to which a user must belong to get any access to the system.Set this to restrict access to a subset of LDAP users belonging to a particular group. If this is not set, any user to successfully authenticate via LDAP will have access to the PUBLIC role and any other roles assigned to them via dbms.security.ldap.authorization.group_to_role_mapping."
            + "'", str18,
        "MISSING VAL FOR KEY:The LDAP group to which a user must belong to get any access to the system.Set this to restrict access to a subset of LDAP users belonging to a particular group. If this is not set, any user to successfully authenticate via LDAP will have access to the PUBLIC role and any other roles assigned to them via dbms.security.ldap.authorization.group_to_role_mapping.");
    org.junit.Assert.assertEquals("'" + str19 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:The ID of the last closed transaction. (counter)"
            + "'", str19,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:The ID of the last closed transaction. (counter)");
    org.junit.Assert.assertEquals("'" + str20 + "' != '"
            + "MISSING VAL FOR KEY:Estimated amount of memory used by the pool. (gauge)" + "'", str20,
        "MISSING VAL FOR KEY:Estimated amount of memory used by the pool. (gauge)");
    org.junit.Assert.assertNotNull(wildcardClass21);
  }

  @Test
  public void test4226() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4226");
    }
    java.lang.Object[] objArray11 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str12 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray11);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "dbms.security.ldap.authentication.attribute", objArray11);
    java.lang.String str14 = io.github.onograph.I18N.format("dbms.security.createUser", objArray11);
    java.lang.String str15 = io.github.onograph.I18N.format("BatchSize", objArray11);
    java.lang.String str16 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:replication_maybe",
        objArray11);
    java.lang.String str17 = io.github.onograph.I18N.format("dbms.clustering.enable", objArray11);
    java.lang.String str18 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:fabric.stream.buffer.size", objArray11);
    java.lang.Class<?> wildcardClass19 = objArray11.getClass();
    org.junit.Assert.assertNotNull(objArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str12,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute"
            + "'", str13, "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:dbms.security.createUser" + "'", str14,
        "MISSING VAL FOR KEY:dbms.security.createUser");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:BatchSize" + "'",
        str15, "MISSING VAL FOR KEY:BatchSize");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:replication_maybe" + "'",
        str16, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:replication_maybe");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:dbms.clustering.enable" + "'", str17,
        "MISSING VAL FOR KEY:dbms.clustering.enable");
    org.junit.Assert.assertEquals("'" + str18 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:fabric.stream.buffer.size"
            + "'", str18,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:fabric.stream.buffer.size");
    org.junit.Assert.assertNotNull(wildcardClass19);
  }

  @Test
  public void test4227() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4227");
    }
    java.lang.Object[] objArray11 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str12 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray11);
    java.lang.String str13 = io.github.onograph.I18N.format("true", objArray11);
    java.lang.String str14 = io.github.onograph.I18N.format("dbms.security.auth_provider",
        objArray11);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "The total size of the database and transaction logs, in bytes. (gauge)", objArray11);
    java.lang.String str16 = io.github.onograph.I18N.format("dbms.max_databases", objArray11);
    java.lang.String str17 = io.github.onograph.I18N.format("handshake_initializer", objArray11);
    java.lang.String str18 = io.github.onograph.I18N.format("", objArray11);
    java.lang.Class<?> wildcardClass19 = objArray11.getClass();
    org.junit.Assert.assertNotNull(objArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str12,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MISSING VAL FOR KEY:true" + "'", str13,
        "MISSING VAL FOR KEY:true");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:dbms.security.auth_provider" + "'", str14,
        "MISSING VAL FOR KEY:dbms.security.auth_provider");
    org.junit.Assert.assertEquals("'" + str15 + "' != '"
            + "MISSING VAL FOR KEY:The total size of the database and transaction logs, in bytes. (gauge)"
            + "'", str15,
        "MISSING VAL FOR KEY:The total size of the database and transaction logs, in bytes. (gauge)");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:dbms.max_databases" + "'", str16,
        "MISSING VAL FOR KEY:dbms.max_databases");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:handshake_initializer" + "'", str17,
        "MISSING VAL FOR KEY:handshake_initializer");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:" + "'", str18,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertNotNull(wildcardClass19);
  }

  @Test
  public void test4228() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4228");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "An LDAP system account username to use for authorization searches when `dbms.security.ldap.authorization.use_system_account` is `true`. Note that the `dbms.security.ldap.authentication.user_dn_template` will not be applied to this username, so you may have to specify a full DN.");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4229() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4229");
    }
    java.lang.Object[] objArray12 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str13 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray12);
    java.lang.String str14 = io.github.onograph.I18N.format("writable", objArray12);
    java.lang.String str15 = io.github.onograph.I18N.format("--additional-config", objArray12);
    java.lang.String str16 = io.github.onograph.I18N.format("addresses", objArray12);
    java.lang.String str17 = io.github.onograph.I18N.format(
        "The total number of Bolt connections opened since this instance started. This includes both succeeded and failed connections. (counter)",
        objArray12);
    java.lang.String str18 = io.github.onograph.I18N.format("", objArray12);
    java.lang.String str19 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:Upgrade the system database schema if it is not the current schema, providing upgrade status results for each sub-graph component.",
        objArray12);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "The total number of check point events executed so far. (counter)", objArray12);
    org.junit.Assert.assertNotNull(objArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str13,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:writable" + "'",
        str14, "MISSING VAL FOR KEY:writable");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:--additional-config" + "'", str15,
        "MISSING VAL FOR KEY:--additional-config");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:addresses" + "'",
        str16, "MISSING VAL FOR KEY:addresses");
    org.junit.Assert.assertEquals("'" + str17 + "' != '"
            + "MISSING VAL FOR KEY:The total number of Bolt connections opened since this instance started. This includes both succeeded and failed connections. (counter)"
            + "'", str17,
        "MISSING VAL FOR KEY:The total number of Bolt connections opened since this instance started. This includes both succeeded and failed connections. (counter)");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:" + "'", str18,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str19 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Upgrade the system database schema if it is not the current schema, providing upgrade status results for each sub-graph component."
            + "'", str19,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Upgrade the system database schema if it is not the current schema, providing upgrade status results for each sub-graph component.");
    org.junit.Assert.assertEquals("'" + str20 + "' != '"
            + "MISSING VAL FOR KEY:The total number of check point events executed so far. (counter)"
            + "'", str20,
        "MISSING VAL FOR KEY:The total number of check point events executed so far. (counter)");
  }

  @Test
  public void test4230() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4230");
    }
    java.lang.Object[] objArray10 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str11 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray10);
    java.lang.String str12 = io.github.onograph.I18N.format("browser.credential_timeout",
        objArray10);
    java.lang.String str13 = io.github.onograph.I18N.format("", objArray10);
    java.lang.String str14 = io.github.onograph.I18N.format("ssl_handler", objArray10);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "Retry time for log shipping to followers after a stall", objArray10);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:logging-dispatcher.thread-pool-executor.fixed-pool-size", objArray10);
    java.lang.Class<?> wildcardClass17 = objArray10.getClass();
    org.junit.Assert.assertNotNull(objArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str11,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:browser.credential_timeout" + "'", str12,
        "MISSING VAL FOR KEY:browser.credential_timeout");
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MISSING VAL FOR KEY:" + "'", str13,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:ssl_handler" + "'",
        str14, "MISSING VAL FOR KEY:ssl_handler");
    org.junit.Assert.assertEquals("'" + str15 + "' != '"
            + "MISSING VAL FOR KEY:Retry time for log shipping to followers after a stall" + "'", str15,
        "MISSING VAL FOR KEY:Retry time for log shipping to followers after a stall");
    org.junit.Assert.assertEquals("'" + str16 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:logging-dispatcher.thread-pool-executor.fixed-pool-size"
            + "'", str16,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:logging-dispatcher.thread-pool-executor.fixed-pool-size");
    org.junit.Assert.assertNotNull(wildcardClass17);
  }

  @Test
  public void test4231() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4231");
    }
    java.lang.Object[] objArray11 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str12 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray11);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray11);
    java.lang.String str14 = io.github.onograph.I18N.format("read", objArray11);
    java.lang.String str15 = io.github.onograph.I18N.format("invisible", objArray11);
    java.lang.String str16 = io.github.onograph.I18N.format("dec_dispatch", objArray11);
    java.lang.String str17 = io.github.onograph.I18N.format("procedure", objArray11);
    java.lang.String str18 = io.github.onograph.I18N.format(
        "Number of cores required for initial Akka cluster formation", objArray11);
    java.lang.Class<?> wildcardClass19 = objArray11.getClass();
    org.junit.Assert.assertNotNull(objArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str12,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str13, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str14,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str15, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:dec_dispatch" + "'",
        str16, "MISSING VAL FOR KEY:dec_dispatch");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:procedure" + "'",
        str17, "MISSING VAL FOR KEY:procedure");
    org.junit.Assert.assertEquals("'" + str18 + "' != '"
            + "MISSING VAL FOR KEY:Number of cores required for initial Akka cluster formation" + "'",
        str18, "MISSING VAL FOR KEY:Number of cores required for initial Akka cluster formation");
    org.junit.Assert.assertNotNull(wildcardClass19);
  }

  @Test
  public void test4232() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4232");
    }
    java.lang.Object[] objArray6 = new java.lang.Object[]{};
    java.lang.String str7 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray6);
    java.lang.String str8 = io.github.onograph.I18N.format("function", objArray6);
    java.lang.String str9 = io.github.onograph.I18N.format("admin.ini", objArray6);
    java.lang.String str10 = io.github.onograph.I18N.format("member-data", objArray6);
    java.lang.String str11 = io.github.onograph.I18N.format(
        "The timeout for establishing an LDAP connection. If a connection with the LDAP server cannot be established within the given time the attempt is aborted. A value of 0 means to use the network protocol's (i.e., TCP's) timeout value.",
        objArray6);
    java.lang.String str12 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:transaction.*",
        objArray6);
    java.lang.Class<?> wildcardClass13 = objArray6.getClass();
    org.junit.Assert.assertNotNull(objArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
    org.junit.Assert.assertEquals("'" + str7 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str7,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "MISSING VAL FOR KEY:function" + "'",
        str8, "MISSING VAL FOR KEY:function");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MISSING VAL FOR KEY:admin.ini" + "'",
        str9, "MISSING VAL FOR KEY:admin.ini");
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MISSING VAL FOR KEY:member-data" + "'",
        str10, "MISSING VAL FOR KEY:member-data");
    org.junit.Assert.assertEquals("'" + str11 + "' != '"
            + "MISSING VAL FOR KEY:The timeout for establishing an LDAP connection. If a connection with the LDAP server cannot be established within the given time the attempt is aborted. A value of 0 means to use the network protocol's (i.e., TCP's) timeout value."
            + "'", str11,
        "MISSING VAL FOR KEY:The timeout for establishing an LDAP connection. If a connection with the LDAP server cannot be established within the given time the attempt is aborted. A value of 0 means to use the network protocol's (i.e., TCP's) timeout value.");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:transaction.*" + "'",
        str12, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:transaction.*");
    org.junit.Assert.assertNotNull(wildcardClass13);
  }

  @Test
  public void test4233() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4233");
    }
    java.lang.Object[] objArray11 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str12 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray11);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray11);
    java.lang.String str14 = io.github.onograph.I18N.format("read", objArray11);
    java.lang.String str15 = io.github.onograph.I18N.format("invisible", objArray11);
    java.lang.String str16 = io.github.onograph.I18N.format("metrics.graphite.enabled", objArray11);
    java.lang.String str17 = io.github.onograph.I18N.format("dbms.clustering.enable", objArray11);
    java.lang.String str18 = io.github.onograph.I18N.format("init_client_handler", objArray11);
    java.lang.Class<?> wildcardClass19 = objArray11.getClass();
    org.junit.Assert.assertNotNull(objArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str12,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str13, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str14,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str15, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:metrics.graphite.enabled" + "'", str16,
        "MISSING VAL FOR KEY:metrics.graphite.enabled");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:dbms.clustering.enable" + "'", str17,
        "MISSING VAL FOR KEY:dbms.clustering.enable");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:init_client_handler" + "'", str18,
        "MISSING VAL FOR KEY:init_client_handler");
    org.junit.Assert.assertNotNull(wildcardClass19);
  }

  @Test
  public void test4234() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4234");
    }
    java.lang.Object[] objArray10 = new java.lang.Object[]{};
    java.lang.String str11 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray10);
    java.lang.String str12 = io.github.onograph.I18N.format(
        "The total number of live threads including daemon and non-daemon threads. (gauge)",
        objArray10);
    java.lang.String str13 = io.github.onograph.I18N.format("Upgraded", objArray10);
    java.lang.String str14 = io.github.onograph.I18N.format("", objArray10);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "Enable reporting metrics about the store size of each database. Deprecated - use metrics.filter instead.",
        objArray10);
    java.lang.String str16 = io.github.onograph.I18N.format("catchup-server", objArray10);
    java.lang.String str17 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:Name of the database associated to the Fabric graph.", objArray10);
    java.lang.String str18 = io.github.onograph.I18N.format("", objArray10);
    java.lang.String str19 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:cypher", objArray10);
    java.lang.String str20 = io.github.onograph.I18N.format("*transaction.active_write",
        objArray10);
    org.junit.Assert.assertNotNull(objArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
    org.junit.Assert.assertEquals("'" + str11 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str11,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str12 + "' != '"
            + "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)"
            + "'", str12,
        "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)");
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MISSING VAL FOR KEY:Upgraded" + "'",
        str13, "MISSING VAL FOR KEY:Upgraded");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:" + "'", str14,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str15 + "' != '"
            + "MISSING VAL FOR KEY:Enable reporting metrics about the store size of each database. Deprecated - use metrics.filter instead."
            + "'", str15,
        "MISSING VAL FOR KEY:Enable reporting metrics about the store size of each database. Deprecated - use metrics.filter instead.");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:catchup-server" + "'", str16,
        "MISSING VAL FOR KEY:catchup-server");
    org.junit.Assert.assertEquals("'" + str17 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Name of the database associated to the Fabric graph."
            + "'", str17,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Name of the database associated to the Fabric graph.");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:" + "'", str18,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str19 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:cypher" + "'", str19,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:cypher");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:*transaction.active_write" + "'", str20,
        "MISSING VAL FOR KEY:*transaction.active_write");
  }

  @Test
  public void test4235() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4235");
    }
    java.lang.Object[] objArray12 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str13 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray12);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray12);
    java.lang.String str15 = io.github.onograph.I18N.format("read", objArray12);
    java.lang.String str16 = io.github.onograph.I18N.format("invisible", objArray12);
    java.lang.String str17 = io.github.onograph.I18N.format("relationship-type-distribution",
        objArray12);
    java.lang.String str18 = io.github.onograph.I18N.format("Number of available processors",
        objArray12);
    java.lang.String str19 = io.github.onograph.I18N.format("logging-dispatcher", objArray12);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "Perform the recovery of the backup store by applying the latest pulled transactions. If disabled, the backup will be faster but a recovery of the backup store will be required at a later time before restoring the data (using the neo4j-admin prepare-restore command). Note: if --prepare-restore is set to false, then --check-consistency is implicitly set to false because the consistency of a none-recovered store can't be checked.",
        objArray12);
    java.lang.Class<?> wildcardClass21 = objArray12.getClass();
    org.junit.Assert.assertNotNull(objArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str13,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str14, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str15,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str16, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:relationship-type-distribution" + "'", str17,
        "MISSING VAL FOR KEY:relationship-type-distribution");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:Number of available processors" + "'", str18,
        "MISSING VAL FOR KEY:Number of available processors");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:logging-dispatcher" + "'", str19,
        "MISSING VAL FOR KEY:logging-dispatcher");
    org.junit.Assert.assertEquals("'" + str20 + "' != '"
            + "MISSING VAL FOR KEY:Perform the recovery of the backup store by applying the latest pulled transactions. If disabled, the backup will be faster but a recovery of the backup store will be required at a later time before restoring the data (using the neo4j-admin prepare-restore command). Note: if --prepare-restore is set to false, then --check-consistency is implicitly set to false because the consistency of a none-recovered store can't be checked."
            + "'", str20,
        "MISSING VAL FOR KEY:Perform the recovery of the backup store by applying the latest pulled transactions. If disabled, the backup will be faster but a recovery of the backup store will be required at a later time before restoring the data (using the neo4j-admin prepare-restore command). Note: if --prepare-restore is set to false, then --check-consistency is implicitly set to false because the consistency of a none-recovered store can't be checked.");
    org.junit.Assert.assertNotNull(wildcardClass21);
  }

  @Test
  public void test4236() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4236");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:arg1");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4237() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4237");
    }
    java.lang.Object[] objArray11 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str12 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray11);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray11);
    java.lang.String str14 = io.github.onograph.I18N.format("read", objArray11);
    java.lang.String str15 = io.github.onograph.I18N.format("invisible", objArray11);
    java.lang.String str16 = io.github.onograph.I18N.format("relationship-type-distribution",
        objArray11);
    java.lang.String str17 = io.github.onograph.I18N.format(
        "Path to the home directory for the copied database. Default is the same as the database copied from.",
        objArray11);
    java.lang.String str18 = io.github.onograph.I18N.format("vm.thread.*", objArray11);
    java.lang.Class<?> wildcardClass19 = objArray11.getClass();
    org.junit.Assert.assertNotNull(objArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str12,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str13, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str14,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str15, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:relationship-type-distribution" + "'", str16,
        "MISSING VAL FOR KEY:relationship-type-distribution");
    org.junit.Assert.assertEquals("'" + str17 + "' != '"
            + "MISSING VAL FOR KEY:Path to the home directory for the copied database. Default is the same as the database copied from."
            + "'", str17,
        "MISSING VAL FOR KEY:Path to the home directory for the copied database. Default is the same as the database copied from.");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:vm.thread.*" + "'",
        str18, "MISSING VAL FOR KEY:vm.thread.*");
    org.junit.Assert.assertNotNull(wildcardClass19);
  }

  @Test
  public void test4238() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4238");
    }
    java.lang.Object[] objArray14 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str15 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray14);
    java.lang.String str16 = io.github.onograph.I18N.format("status", objArray14);
    java.lang.String str17 = io.github.onograph.I18N.format(
        "Maximum number of akka restart attempts before we panic the DBMS. Set to -1 to retry forever",
        objArray14);
    java.lang.String str18 = io.github.onograph.I18N.format(
        "Maximum number of history files for the csv files.", objArray14);
    java.lang.String str19 = io.github.onograph.I18N.format("elapsedTimeMs", objArray14);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "The total number of Bolt connections sitting idle. (gauge)", objArray14);
    java.lang.String str21 = io.github.onograph.I18N.format(
        "causal_clustering.cluster_binding_retry_timeout", objArray14);
    java.lang.String str22 = io.github.onograph.I18N.format("Store copy chunk size", objArray14);
    java.lang.String str23 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:follow",
        objArray14);
    java.lang.String str24 = io.github.onograph.I18N.format(
        "causal_clustering.protocol_implementations.raft", objArray14);
    java.lang.String str25 = io.github.onograph.I18N.format("core-member-id", objArray14);
    org.junit.Assert.assertNotNull(objArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str15 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str15,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:status" + "'",
        str16, "MISSING VAL FOR KEY:status");
    org.junit.Assert.assertEquals("'" + str17 + "' != '"
            + "MISSING VAL FOR KEY:Maximum number of akka restart attempts before we panic the DBMS. Set to -1 to retry forever"
            + "'", str17,
        "MISSING VAL FOR KEY:Maximum number of akka restart attempts before we panic the DBMS. Set to -1 to retry forever");
    org.junit.Assert.assertEquals("'" + str18 + "' != '"
            + "MISSING VAL FOR KEY:Maximum number of history files for the csv files." + "'", str18,
        "MISSING VAL FOR KEY:Maximum number of history files for the csv files.");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:elapsedTimeMs" + "'", str19,
        "MISSING VAL FOR KEY:elapsedTimeMs");
    org.junit.Assert.assertEquals("'" + str20 + "' != '"
            + "MISSING VAL FOR KEY:The total number of Bolt connections sitting idle. (gauge)" + "'",
        str20, "MISSING VAL FOR KEY:The total number of Bolt connections sitting idle. (gauge)");
    org.junit.Assert.assertEquals("'" + str21 + "' != '"
            + "MISSING VAL FOR KEY:causal_clustering.cluster_binding_retry_timeout" + "'", str21,
        "MISSING VAL FOR KEY:causal_clustering.cluster_binding_retry_timeout");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "MISSING VAL FOR KEY:Store copy chunk size" + "'", str22,
        "MISSING VAL FOR KEY:Store copy chunk size");
    org.junit.Assert.assertEquals(
        "'" + str23 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:follow" + "'", str23,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:follow");
    org.junit.Assert.assertEquals("'" + str24 + "' != '"
            + "MISSING VAL FOR KEY:causal_clustering.protocol_implementations.raft" + "'", str24,
        "MISSING VAL FOR KEY:causal_clustering.protocol_implementations.raft");
    org.junit.Assert.assertEquals(
        "'" + str25 + "' != '" + "MISSING VAL FOR KEY:core-member-id" + "'", str25,
        "MISSING VAL FOR KEY:core-member-id");
  }

  @Test
  public void test4239() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4239");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:RAFT log pruning frequency");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4240() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4240");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:driver.api");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4241() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4241");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Maximum timeout for akka shutdown");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4242() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4242");
    }
    java.lang.Object[] objArray12 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str13 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray12);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray12);
    java.lang.String str15 = io.github.onograph.I18N.format("read", objArray12);
    java.lang.String str16 = io.github.onograph.I18N.format("execute_boosted_from_config",
        objArray12);
    java.lang.String str17 = io.github.onograph.I18N.format("replication_maybe", objArray12);
    java.lang.String str18 = io.github.onograph.I18N.format("metrics.prometheus.endpoint",
        objArray12);
    java.lang.String str19 = io.github.onograph.I18N.format("evictions", objArray12);
    java.lang.String str20 = io.github.onograph.I18N.format("size", objArray12);
    org.junit.Assert.assertNotNull(objArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str13,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str14, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str15,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:execute_boosted_from_config" + "'", str16,
        "MISSING VAL FOR KEY:execute_boosted_from_config");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:replication_maybe" + "'", str17,
        "MISSING VAL FOR KEY:replication_maybe");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:metrics.prometheus.endpoint" + "'", str18,
        "MISSING VAL FOR KEY:metrics.prometheus.endpoint");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MISSING VAL FOR KEY:evictions" + "'",
        str19, "MISSING VAL FOR KEY:evictions");
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "MISSING VAL FOR KEY:size" + "'", str20,
        "MISSING VAL FOR KEY:size");
  }

  @Test
  public void test4243() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4243");
    }
    java.lang.Object[] objArray12 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str13 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray12);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray12);
    java.lang.String str15 = io.github.onograph.I18N.format("read", objArray12);
    java.lang.String str16 = io.github.onograph.I18N.format("invisible", objArray12);
    java.lang.String str17 = io.github.onograph.I18N.format("dec_dispatch", objArray12);
    java.lang.String str18 = io.github.onograph.I18N.format("RAFT log reader pool size",
        objArray12);
    java.lang.String str19 = io.github.onograph.I18N.format(
        "causal_clustering.middleware.akka.sink_parallelism", objArray12);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:causal_clustering.kubernetes.service_port_name", objArray12);
    org.junit.Assert.assertNotNull(objArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str13,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str14, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str15,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str16, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:dec_dispatch" + "'",
        str17, "MISSING VAL FOR KEY:dec_dispatch");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:RAFT log reader pool size" + "'", str18,
        "MISSING VAL FOR KEY:RAFT log reader pool size");
    org.junit.Assert.assertEquals("'" + str19 + "' != '"
            + "MISSING VAL FOR KEY:causal_clustering.middleware.akka.sink_parallelism" + "'", str19,
        "MISSING VAL FOR KEY:causal_clustering.middleware.akka.sink_parallelism");
    org.junit.Assert.assertEquals("'" + str20 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.kubernetes.service_port_name"
            + "'", str20,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.kubernetes.service_port_name");
  }

  @Test
  public void test4244() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4244");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:raftBootstrap");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4245() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4245");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.refuse_to_be_leader");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4246() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4246");
    }
    java.lang.Object[] objArray6 = new java.lang.Object[]{};
    java.lang.String str7 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray6);
    java.lang.String str8 = io.github.onograph.I18N.format(
        "The total number of live threads including daemon and non-daemon threads. (gauge)",
        objArray6);
    java.lang.String str9 = io.github.onograph.I18N.format("Upgraded", objArray6);
    java.lang.String str10 = io.github.onograph.I18N.format("<label>[,<label>...]", objArray6);
    java.lang.String str11 = io.github.onograph.I18N.format(
        "akka.remote.artery.advanced.connection-timeout", objArray6);
    java.lang.String str12 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:java.naming.provider.url", objArray6);
    java.lang.Class<?> wildcardClass13 = objArray6.getClass();
    org.junit.Assert.assertNotNull(objArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
    org.junit.Assert.assertEquals("'" + str7 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str7,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str8 + "' != '"
            + "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)"
            + "'", str8,
        "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MISSING VAL FOR KEY:Upgraded" + "'",
        str9, "MISSING VAL FOR KEY:Upgraded");
    org.junit.Assert.assertEquals(
        "'" + str10 + "' != '" + "MISSING VAL FOR KEY:<label>[,<label>...]" + "'", str10,
        "MISSING VAL FOR KEY:<label>[,<label>...]");
    org.junit.Assert.assertEquals("'" + str11 + "' != '"
            + "MISSING VAL FOR KEY:akka.remote.artery.advanced.connection-timeout" + "'", str11,
        "MISSING VAL FOR KEY:akka.remote.artery.advanced.connection-timeout");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:java.naming.provider.url"
            + "'", str12, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:java.naming.provider.url");
    org.junit.Assert.assertNotNull(wildcardClass13);
  }

  @Test
  public void test4247() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4247");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms.security.auth_provider");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4248() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4248");
    }
    java.lang.Object[] objArray10 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str11 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray10);
    java.lang.String str12 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray10);
    java.lang.String str13 = io.github.onograph.I18N.format("read", objArray10);
    java.lang.String str14 = io.github.onograph.I18N.format("invisible", objArray10);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "Count of database operations which failed previously but have recovered. (counter)",
        objArray10);
    java.lang.String str16 = io.github.onograph.I18N.format("causal_clustering.raft_in_queue_size",
        objArray10);
    java.lang.Class<?> wildcardClass17 = objArray10.getClass();
    org.junit.Assert.assertNotNull(objArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str11,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str12, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str13,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str14, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str15 + "' != '"
            + "MISSING VAL FOR KEY:Count of database operations which failed previously but have recovered. (counter)"
            + "'", str15,
        "MISSING VAL FOR KEY:Count of database operations which failed previously but have recovered. (counter)");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.raft_in_queue_size" + "'",
        str16, "MISSING VAL FOR KEY:causal_clustering.raft_in_queue_size");
    org.junit.Assert.assertNotNull(wildcardClass17);
  }

  @Test
  public void test4249() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4249");
    }
    java.lang.Object[] objArray1 = null;
    java.lang.String str2 = io.github.onograph.I18N.format(
        "The name of a server_group whose members should be prioritized as leaders for the given database. This does not guarantee that members of this group will be leader at all times, but the cluster will attempt to transfer leadership to such a member when possible.",
        objArray1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '"
            + "MISSING VAL FOR KEY:The name of a server_group whose members should be prioritized as leaders for the given database. This does not guarantee that members of this group will be leader at all times, but the cluster will attempt to transfer leadership to such a member when possible."
            + "'", str2,
        "MISSING VAL FOR KEY:The name of a server_group whose members should be prioritized as leaders for the given database. This does not guarantee that members of this group will be leader at all times, but the cluster will attempt to transfer leadership to such a member when possible.");
  }

  @Test
  public void test4250() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4250");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:snappy_validating_decoder");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4251() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4251");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:Raft Replication fail count. (counter)");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4252() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4252");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str14 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format("status", objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "Maximum number of akka restart attempts before we panic the DBMS. Set to -1 to retry forever",
        objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format(
        "Maximum number of history files for the csv files.", objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format("elapsedTimeMs", objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format(
        "The total number of Bolt connections sitting idle. (gauge)", objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "causal_clustering.cluster_binding_retry_timeout", objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format("Store copy chunk size", objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:follow",
        objArray13);
    java.lang.String str23 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:database.",
        objArray13);
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str14 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str14,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:status" + "'",
        str15, "MISSING VAL FOR KEY:status");
    org.junit.Assert.assertEquals("'" + str16 + "' != '"
            + "MISSING VAL FOR KEY:Maximum number of akka restart attempts before we panic the DBMS. Set to -1 to retry forever"
            + "'", str16,
        "MISSING VAL FOR KEY:Maximum number of akka restart attempts before we panic the DBMS. Set to -1 to retry forever");
    org.junit.Assert.assertEquals("'" + str17 + "' != '"
            + "MISSING VAL FOR KEY:Maximum number of history files for the csv files." + "'", str17,
        "MISSING VAL FOR KEY:Maximum number of history files for the csv files.");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:elapsedTimeMs" + "'", str18,
        "MISSING VAL FOR KEY:elapsedTimeMs");
    org.junit.Assert.assertEquals("'" + str19 + "' != '"
            + "MISSING VAL FOR KEY:The total number of Bolt connections sitting idle. (gauge)" + "'",
        str19, "MISSING VAL FOR KEY:The total number of Bolt connections sitting idle. (gauge)");
    org.junit.Assert.assertEquals("'" + str20 + "' != '"
            + "MISSING VAL FOR KEY:causal_clustering.cluster_binding_retry_timeout" + "'", str20,
        "MISSING VAL FOR KEY:causal_clustering.cluster_binding_retry_timeout");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:Store copy chunk size" + "'", str21,
        "MISSING VAL FOR KEY:Store copy chunk size");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:follow" + "'", str22,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:follow");
    org.junit.Assert.assertEquals(
        "'" + str23 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:database." + "'", str23,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:database.");
  }

  @Test
  public void test4253() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4253");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:*vm.memory.pool.g1_eden_space");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4254() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4254");
    }
    java.lang.Object[] objArray5 = new java.lang.Object[]{};
    java.lang.String str6 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray5);
    java.lang.String str7 = io.github.onograph.I18N.format("function", objArray5);
    java.lang.String str8 = io.github.onograph.I18N.format("admin.ini", objArray5);
    java.lang.String str9 = io.github.onograph.I18N.format("member-data", objArray5);
    java.lang.String str10 = io.github.onograph.I18N.format("", objArray5);
    java.lang.Class<?> wildcardClass11 = objArray5.getClass();
    org.junit.Assert.assertNotNull(objArray5);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
    org.junit.Assert.assertEquals("'" + str6 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str6,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "MISSING VAL FOR KEY:function" + "'",
        str7, "MISSING VAL FOR KEY:function");
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "MISSING VAL FOR KEY:admin.ini" + "'",
        str8, "MISSING VAL FOR KEY:admin.ini");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MISSING VAL FOR KEY:member-data" + "'",
        str9, "MISSING VAL FOR KEY:member-data");
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MISSING VAL FOR KEY:" + "'", str10,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertNotNull(wildcardClass11);
  }

  @Test
  public void test4255() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4255");
    }
    java.lang.Object[] objArray9 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str10 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray9);
    java.lang.String str11 = io.github.onograph.I18N.format("ccstate", objArray9);
    java.lang.String str12 = io.github.onograph.I18N.format(
        "Use native transport if available. Epoll for Linux or Kqueue for MacOS/BSD. If this setting is set to false, or if native transport is not available, Nio transport will be used.",
        objArray9);
    java.lang.String str13 = io.github.onograph.I18N.format("Delete the specified user.",
        objArray9);
    java.lang.String str14 = io.github.onograph.I18N.format("", objArray9);
    java.lang.String str15 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:raft-messages.log",
        objArray9);
    java.lang.Class<?> wildcardClass16 = objArray9.getClass();
    org.junit.Assert.assertNotNull(objArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str10 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str10,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MISSING VAL FOR KEY:ccstate" + "'",
        str11, "MISSING VAL FOR KEY:ccstate");
    org.junit.Assert.assertEquals("'" + str12 + "' != '"
            + "MISSING VAL FOR KEY:Use native transport if available. Epoll for Linux or Kqueue for MacOS/BSD. If this setting is set to false, or if native transport is not available, Nio transport will be used."
            + "'", str12,
        "MISSING VAL FOR KEY:Use native transport if available. Epoll for Linux or Kqueue for MacOS/BSD. If this setting is set to false, or if native transport is not available, Nio transport will be used.");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:Delete the specified user." + "'", str13,
        "MISSING VAL FOR KEY:Delete the specified user.");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:" + "'", str14,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:raft-messages.log" + "'",
        str15, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:raft-messages.log");
    org.junit.Assert.assertNotNull(wildcardClass16);
  }

  @Test
  public void test4256() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4256");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "Time that seed nodes will spend trying to find an existing cluster before forming a new cluster");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4257() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4257");
    }
    java.lang.Object[] objArray8 = new java.lang.Object[]{};
    java.lang.String str9 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray8);
    java.lang.String str10 = io.github.onograph.I18N.format("Upgraded", objArray8);
    java.lang.String str11 = io.github.onograph.I18N.format(
        "Configure the discovery type used for cluster name resolution", objArray8);
    java.lang.String str12 = io.github.onograph.I18N.format("high_limitV3_4_0", objArray8);
    java.lang.String str13 = io.github.onograph.I18N.format("logs/", objArray8);
    java.lang.String str14 = io.github.onograph.I18N.format("metrics", objArray8);
    java.lang.String str15 = io.github.onograph.I18N.format("designated_seeder", objArray8);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:total", objArray8);
    java.lang.Class<?> wildcardClass17 = objArray8.getClass();
    org.junit.Assert.assertNotNull(objArray8);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
    org.junit.Assert.assertEquals("'" + str9 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str9,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MISSING VAL FOR KEY:Upgraded" + "'",
        str10, "MISSING VAL FOR KEY:Upgraded");
    org.junit.Assert.assertEquals("'" + str11 + "' != '"
            + "MISSING VAL FOR KEY:Configure the discovery type used for cluster name resolution" + "'",
        str11, "MISSING VAL FOR KEY:Configure the discovery type used for cluster name resolution");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:high_limitV3_4_0" + "'", str12,
        "MISSING VAL FOR KEY:high_limitV3_4_0");
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MISSING VAL FOR KEY:logs/" + "'", str13,
        "MISSING VAL FOR KEY:logs/");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:metrics" + "'",
        str14, "MISSING VAL FOR KEY:metrics");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:designated_seeder" + "'", str15,
        "MISSING VAL FOR KEY:designated_seeder");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:total"
            + "'", str16, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:total");
    org.junit.Assert.assertNotNull(wildcardClass17);
  }

  @Test
  public void test4258() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4258");
    }
    java.lang.Object[] objArray10 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str11 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray10);
    java.lang.String str12 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray10);
    java.lang.String str13 = io.github.onograph.I18N.format("elapsedTimeMs", objArray10);
    java.lang.String str14 = io.github.onograph.I18N.format("authorization", objArray10);
    java.lang.String str15 = io.github.onograph.I18N.format("backup", objArray10);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:raftBootstrap", objArray10);
    java.lang.Class<?> wildcardClass17 = objArray10.getClass();
    org.junit.Assert.assertNotNull(objArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str11,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str12, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:elapsedTimeMs" + "'", str13,
        "MISSING VAL FOR KEY:elapsedTimeMs");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:authorization" + "'", str14,
        "MISSING VAL FOR KEY:authorization");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:backup" + "'",
        str15, "MISSING VAL FOR KEY:backup");
    org.junit.Assert.assertEquals("'" + str16 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:raftBootstrap" + "'", str16,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:raftBootstrap");
    org.junit.Assert.assertNotNull(wildcardClass17);
  }

  @Test
  public void test4259() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4259");
    }
    java.lang.Object[] objArray14 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str15 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray14);
    java.lang.String str16 = io.github.onograph.I18N.format("status", objArray14);
    java.lang.String str17 = io.github.onograph.I18N.format("raft-server", objArray14);
    java.lang.String str18 = io.github.onograph.I18N.format("transaction.*", objArray14);
    java.lang.String str19 = io.github.onograph.I18N.format("metrics.filter", objArray14);
    java.lang.String str20 = io.github.onograph.I18N.format("Retry-After", objArray14);
    java.lang.String str21 = io.github.onograph.I18N.format(
        "Directory to hold cluster state including Raft log", objArray14);
    java.lang.String str22 = io.github.onograph.I18N.format("*vm.memory.pool.g1_eden_space",
        objArray14);
    java.lang.String str23 = io.github.onograph.I18N.format(
        "This command will create a copy of a database.%nIf your labels, properties or relationships contain dots or commas you can use ` to escape them, e.g. `My,label`.property ",
        objArray14);
    java.lang.String str24 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:core", objArray14);
    java.lang.String str25 = io.github.onograph.I18N.format(
        "The maximum batch size when catching up (in unit of entries)", objArray14);
    java.lang.Class<?> wildcardClass26 = objArray14.getClass();
    org.junit.Assert.assertNotNull(objArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str15 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str15,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:status" + "'",
        str16, "MISSING VAL FOR KEY:status");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:raft-server" + "'",
        str17, "MISSING VAL FOR KEY:raft-server");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:transaction.*" + "'", str18,
        "MISSING VAL FOR KEY:transaction.*");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:metrics.filter" + "'", str19,
        "MISSING VAL FOR KEY:metrics.filter");
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "MISSING VAL FOR KEY:Retry-After" + "'",
        str20, "MISSING VAL FOR KEY:Retry-After");
    org.junit.Assert.assertEquals("'" + str21 + "' != '"
            + "MISSING VAL FOR KEY:Directory to hold cluster state including Raft log" + "'", str21,
        "MISSING VAL FOR KEY:Directory to hold cluster state including Raft log");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "MISSING VAL FOR KEY:*vm.memory.pool.g1_eden_space" + "'", str22,
        "MISSING VAL FOR KEY:*vm.memory.pool.g1_eden_space");
    org.junit.Assert.assertEquals("'" + str23 + "' != '"
            + "MISSING VAL FOR KEY:This command will create a copy of a database.%nIf your labels, properties or relationships contain dots or commas you can use ` to escape them, e.g. `My,label`.property "
            + "'", str23,
        "MISSING VAL FOR KEY:This command will create a copy of a database.%nIf your labels, properties or relationships contain dots or commas you can use ` to escape them, e.g. `My,label`.property ");
    org.junit.Assert.assertEquals(
        "'" + str24 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:core" + "'", str24,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:core");
    org.junit.Assert.assertEquals("'" + str25 + "' != '"
            + "MISSING VAL FOR KEY:The maximum batch size when catching up (in unit of entries)" + "'",
        str25, "MISSING VAL FOR KEY:The maximum batch size when catching up (in unit of entries)");
    org.junit.Assert.assertNotNull(wildcardClass26);
  }

  @Test
  public void test4260() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4260");
    }
    java.lang.Object[] objArray8 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str9 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray8);
    java.lang.String str10 = io.github.onograph.I18N.format("writable", objArray8);
    java.lang.String str11 = io.github.onograph.I18N.format("native", objArray8);
    java.lang.String str12 = io.github.onograph.I18N.format(".Server metrics", objArray8);
    java.lang.Class<?> wildcardClass13 = objArray8.getClass();
    org.junit.Assert.assertNotNull(objArray8);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str9 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str9,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MISSING VAL FOR KEY:writable" + "'",
        str10, "MISSING VAL FOR KEY:writable");
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MISSING VAL FOR KEY:native" + "'",
        str11, "MISSING VAL FOR KEY:native");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:.Server metrics" + "'", str12,
        "MISSING VAL FOR KEY:.Server metrics");
    org.junit.Assert.assertNotNull(wildcardClass13);
  }

  @Test
  public void test4261() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4261");
    }
    java.lang.Object[] objArray10 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str11 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray10);
    java.lang.String str12 = io.github.onograph.I18N.format(
        "dbms.security.ldap.authentication.attribute", objArray10);
    java.lang.String str13 = io.github.onograph.I18N.format("dbms.security.createUser", objArray10);
    java.lang.String str14 = io.github.onograph.I18N.format("BatchSize", objArray10);
    java.lang.String str15 = io.github.onograph.I18N.format("publisher", objArray10);
    java.lang.String str16 = io.github.onograph.I18N.format("--skip-relationship-properties",
        objArray10);
    java.lang.Class<?> wildcardClass17 = objArray10.getClass();
    org.junit.Assert.assertNotNull(objArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str11,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute"
            + "'", str12, "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:dbms.security.createUser" + "'", str13,
        "MISSING VAL FOR KEY:dbms.security.createUser");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:BatchSize" + "'",
        str14, "MISSING VAL FOR KEY:BatchSize");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:publisher" + "'",
        str15, "MISSING VAL FOR KEY:publisher");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:--skip-relationship-properties" + "'", str16,
        "MISSING VAL FOR KEY:--skip-relationship-properties");
    org.junit.Assert.assertNotNull(wildcardClass17);
  }

  @Test
  public void test4262() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4262");
    }
    java.lang.Object[] objArray11 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str12 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray11);
    java.lang.String str13 = io.github.onograph.I18N.format("true", objArray11);
    java.lang.String str14 = io.github.onograph.I18N.format("storeDownloadStoreIdReader",
        objArray11);
    java.lang.String str15 = io.github.onograph.I18N.format("vm.memory.pool.*", objArray11);
    java.lang.String str16 = io.github.onograph.I18N.format("--to-data-tx-directory", objArray11);
    java.lang.String str17 = io.github.onograph.I18N.format("metadata_script.cypher", objArray11);
    java.lang.String str18 = io.github.onograph.I18N.format("success", objArray11);
    org.junit.Assert.assertNotNull(objArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str12,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MISSING VAL FOR KEY:true" + "'", str13,
        "MISSING VAL FOR KEY:true");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:storeDownloadStoreIdReader" + "'", str14,
        "MISSING VAL FOR KEY:storeDownloadStoreIdReader");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:vm.memory.pool.*" + "'", str15,
        "MISSING VAL FOR KEY:vm.memory.pool.*");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:--to-data-tx-directory" + "'", str16,
        "MISSING VAL FOR KEY:--to-data-tx-directory");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:metadata_script.cypher" + "'", str17,
        "MISSING VAL FOR KEY:metadata_script.cypher");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:success" + "'",
        str18, "MISSING VAL FOR KEY:success");
  }

  @Test
  public void test4263() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4263");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:raft-log");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4264() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4264");
    }
    java.lang.Object[] objArray10 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str11 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray10);
    java.lang.String str12 = io.github.onograph.I18N.format("status", objArray10);
    java.lang.String str13 = io.github.onograph.I18N.format("", objArray10);
    java.lang.String str14 = io.github.onograph.I18N.format("bolt.*", objArray10);
    java.lang.String str15 = io.github.onograph.I18N.format("*vm.thread*", objArray10);
    java.lang.String str16 = io.github.onograph.I18N.format("In-flight cache total bytes. (gauge)",
        objArray10);
    java.lang.String str17 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:dbms.backup.address", objArray10);
    java.lang.Class<?> wildcardClass18 = objArray10.getClass();
    org.junit.Assert.assertNotNull(objArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str11 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str11,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MISSING VAL FOR KEY:status" + "'",
        str12, "MISSING VAL FOR KEY:status");
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MISSING VAL FOR KEY:" + "'", str13,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:bolt.*" + "'",
        str14, "MISSING VAL FOR KEY:bolt.*");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:*vm.thread*" + "'",
        str15, "MISSING VAL FOR KEY:*vm.thread*");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:In-flight cache total bytes. (gauge)" + "'",
        str16, "MISSING VAL FOR KEY:In-flight cache total bytes. (gauge)");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms.backup.address"
            + "'", str17, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms.backup.address");
    org.junit.Assert.assertNotNull(wildcardClass18);
  }

  @Test
  public void test4265() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4265");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Name of the database associated to the Fabric graph.");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4266() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4266");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:*transaction.active_read");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4267() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4267");
    }
    java.lang.Object[] objArray8 = new java.lang.Object[]{};
    java.lang.String str9 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray8);
    java.lang.String str10 = io.github.onograph.I18N.format(
        "The total number of live threads including daemon and non-daemon threads. (gauge)",
        objArray8);
    java.lang.String str11 = io.github.onograph.I18N.format("Upgraded", objArray8);
    java.lang.String str12 = io.github.onograph.I18N.format("<label>[,<label>...]", objArray8);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "akka.remote.artery.advanced.connection-timeout", objArray8);
    java.lang.String str14 = io.github.onograph.I18N.format("*pool.transaction.*.used_heap",
        objArray8);
    java.lang.String str15 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:iops", objArray8);
    java.lang.String str16 = io.github.onograph.I18N.format("dbms.security.auth_provider",
        objArray8);
    org.junit.Assert.assertNotNull(objArray8);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
    org.junit.Assert.assertEquals("'" + str9 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str9,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str10 + "' != '"
            + "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)"
            + "'", str10,
        "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)");
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MISSING VAL FOR KEY:Upgraded" + "'",
        str11, "MISSING VAL FOR KEY:Upgraded");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:<label>[,<label>...]" + "'", str12,
        "MISSING VAL FOR KEY:<label>[,<label>...]");
    org.junit.Assert.assertEquals("'" + str13 + "' != '"
            + "MISSING VAL FOR KEY:akka.remote.artery.advanced.connection-timeout" + "'", str13,
        "MISSING VAL FOR KEY:akka.remote.artery.advanced.connection-timeout");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:*pool.transaction.*.used_heap" + "'", str14,
        "MISSING VAL FOR KEY:*pool.transaction.*.used_heap");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:iops" + "'", str15,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:iops");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:dbms.security.auth_provider" + "'", str16,
        "MISSING VAL FOR KEY:dbms.security.auth_provider");
  }

  @Test
  public void test4268() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4268");
    }
    java.lang.Object[] objArray12 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str13 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray12);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray12);
    java.lang.String str15 = io.github.onograph.I18N.format("read", objArray12);
    java.lang.String str16 = io.github.onograph.I18N.format("invisible", objArray12);
    java.lang.String str17 = io.github.onograph.I18N.format("dec_dispatch", objArray12);
    java.lang.String str18 = io.github.onograph.I18N.format("localhost", objArray12);
    java.lang.String str19 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:OUTBOUND",
        objArray12);
    java.lang.String str20 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:designated_seeder",
        objArray12);
    java.lang.Class<?> wildcardClass21 = objArray12.getClass();
    org.junit.Assert.assertNotNull(objArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str13,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str14, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str15,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str16, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:dec_dispatch" + "'",
        str17, "MISSING VAL FOR KEY:dec_dispatch");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:localhost" + "'",
        str18, "MISSING VAL FOR KEY:localhost");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:OUTBOUND" + "'", str19,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:OUTBOUND");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:designated_seeder" + "'",
        str20, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:designated_seeder");
    org.junit.Assert.assertNotNull(wildcardClass21);
  }

  @Test
  public void test4269() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4269");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:enc_catchup_error");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4270() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4270");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("countAllNodesMetrics");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4271() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4271");
    }
    java.lang.Object[] objArray1 = null;
    java.lang.String str2 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:Akka cluster phi accrual failure detector. Defines the failure detector threshold. A low threshold is prone to generate many wrong suspicions but ensures a quick detection in the event of a real crash. Conversely, a high threshold generates fewer mistakes but needs more time to detect actual crashes.",
        objArray1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Akka cluster phi accrual failure detector. Defines the failure detector threshold. A low threshold is prone to generate many wrong suspicions but ensures a quick detection in the event of a real crash. Conversely, a high threshold generates fewer mistakes but needs more time to detect actual crashes."
            + "'", str2,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Akka cluster phi accrual failure detector. Defines the failure detector threshold. A low threshold is prone to generate many wrong suspicions but ensures a quick detection in the event of a real crash. Conversely, a high threshold generates fewer mistakes but needs more time to detect actual crashes.");
  }

  @Test
  public void test4272() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4272");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:The total number of relationships in the database. (gauge)");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4273() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4273");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("uuid");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4274() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4274");
    }
    java.lang.Object[] objArray11 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str12 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray11);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray11);
    java.lang.String str14 = io.github.onograph.I18N.format("read", objArray11);
    java.lang.String str15 = io.github.onograph.I18N.format("execute_boosted_from_config",
        objArray11);
    java.lang.String str16 = io.github.onograph.I18N.format("LabelQualifierAll", objArray11);
    java.lang.String str17 = io.github.onograph.I18N.format("terminated_read", objArray11);
    java.lang.String str18 = io.github.onograph.I18N.format("RelationshipQualifier", objArray11);
    java.lang.Class<?> wildcardClass19 = objArray11.getClass();
    org.junit.Assert.assertNotNull(objArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str12,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str13, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str14,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:execute_boosted_from_config" + "'", str15,
        "MISSING VAL FOR KEY:execute_boosted_from_config");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:LabelQualifierAll" + "'", str16,
        "MISSING VAL FOR KEY:LabelQualifierAll");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:terminated_read" + "'", str17,
        "MISSING VAL FOR KEY:terminated_read");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:RelationshipQualifier" + "'", str18,
        "MISSING VAL FOR KEY:RelationshipQualifier");
    org.junit.Assert.assertNotNull(wildcardClass19);
  }

  @Test
  public void test4275() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4275");
    }
    java.lang.Object[] objArray7 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str8 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray7);
    java.lang.String str9 = io.github.onograph.I18N.format("ccstate", objArray7);
    java.lang.String str10 = io.github.onograph.I18N.format("rollbacks", objArray7);
    java.lang.String str11 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:dbms.security.property_level.enabled", objArray7);
    org.junit.Assert.assertNotNull(objArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str8 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str8,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MISSING VAL FOR KEY:ccstate" + "'", str9,
        "MISSING VAL FOR KEY:ccstate");
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MISSING VAL FOR KEY:rollbacks" + "'",
        str10, "MISSING VAL FOR KEY:rollbacks");
    org.junit.Assert.assertEquals("'" + str11 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms.security.property_level.enabled" + "'",
        str11, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms.security.property_level.enabled");
  }

  @Test
  public void test4276() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4276");
    }
    java.lang.Object[] objArray16 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str17 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray16);
    java.lang.String str18 = io.github.onograph.I18N.format(
        "dbms.security.ldap.authentication.attribute", objArray16);
    java.lang.String str19 = io.github.onograph.I18N.format("dbms.security.createUser", objArray16);
    java.lang.String str20 = io.github.onograph.I18N.format("BatchSize", objArray16);
    java.lang.String str21 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:replication_maybe",
        objArray16);
    java.lang.String str22 = io.github.onograph.I18N.format("dbms.clustering.enable", objArray16);
    java.lang.String str23 = io.github.onograph.I18N.format("database.", objArray16);
    java.lang.String str24 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Enable multi-data center features. Requires appropriate licensing.",
        objArray16);
    java.lang.String str25 = io.github.onograph.I18N.format("driver.api", objArray16);
    java.lang.String str26 = io.github.onograph.I18N.format("raftBootstrap", objArray16);
    java.lang.String str27 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:terminated_read",
        objArray16);
    java.lang.String str28 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:causal_clustering.middleware.akka.cluster.min_nr_of_members",
        objArray16);
    org.junit.Assert.assertNotNull(objArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str17,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute"
            + "'", str18, "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:dbms.security.createUser" + "'", str19,
        "MISSING VAL FOR KEY:dbms.security.createUser");
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "MISSING VAL FOR KEY:BatchSize" + "'",
        str20, "MISSING VAL FOR KEY:BatchSize");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:replication_maybe" + "'",
        str21, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:replication_maybe");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "MISSING VAL FOR KEY:dbms.clustering.enable" + "'", str22,
        "MISSING VAL FOR KEY:dbms.clustering.enable");
    org.junit.Assert.assertEquals("'" + str23 + "' != '" + "MISSING VAL FOR KEY:database." + "'",
        str23, "MISSING VAL FOR KEY:database.");
    org.junit.Assert.assertEquals("'" + str24 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:Enable multi-data center features. Requires appropriate licensing."
            + "'", str24,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:Enable multi-data center features. Requires appropriate licensing.");
    org.junit.Assert.assertEquals("'" + str25 + "' != '" + "MISSING VAL FOR KEY:driver.api" + "'",
        str25, "MISSING VAL FOR KEY:driver.api");
    org.junit.Assert.assertEquals(
        "'" + str26 + "' != '" + "MISSING VAL FOR KEY:raftBootstrap" + "'", str26,
        "MISSING VAL FOR KEY:raftBootstrap");
    org.junit.Assert.assertEquals(
        "'" + str27 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:terminated_read" + "'",
        str27, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:terminated_read");
    org.junit.Assert.assertEquals("'" + str28 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.middleware.akka.cluster.min_nr_of_members"
            + "'", str28,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.middleware.akka.cluster.min_nr_of_members");
  }

  @Test
  public void test4277() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4277");
    }
    java.lang.Object[] objArray12 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str13 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray12);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray12);
    java.lang.String str15 = io.github.onograph.I18N.format("read", objArray12);
    java.lang.String str16 = io.github.onograph.I18N.format("invisible", objArray12);
    java.lang.String str17 = io.github.onograph.I18N.format("dec_dispatch", objArray12);
    java.lang.String str18 = io.github.onograph.I18N.format("RAFT log reader pool size",
        objArray12);
    java.lang.String str19 = io.github.onograph.I18N.format(
        "causal_clustering.middleware.akka.sink_parallelism", objArray12);
    java.lang.String str20 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:server",
        objArray12);
    java.lang.Class<?> wildcardClass21 = objArray12.getClass();
    org.junit.Assert.assertNotNull(objArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str13,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str14, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str15,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str16, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:dec_dispatch" + "'",
        str17, "MISSING VAL FOR KEY:dec_dispatch");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:RAFT log reader pool size" + "'", str18,
        "MISSING VAL FOR KEY:RAFT log reader pool size");
    org.junit.Assert.assertEquals("'" + str19 + "' != '"
            + "MISSING VAL FOR KEY:causal_clustering.middleware.akka.sink_parallelism" + "'", str19,
        "MISSING VAL FOR KEY:causal_clustering.middleware.akka.sink_parallelism");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:server" + "'", str20,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:server");
    org.junit.Assert.assertNotNull(wildcardClass21);
  }

  @Test
  public void test4278() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4278");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str14 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format("read", objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format("invisible", objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format(
        "Count of database operations which failed previously but have recovered. (counter)",
        objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format("profiles", objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format("metrics.bolt.messages.enabled",
        objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format("LZ4", objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:*dbms.pool.bolt.total_used", objArray13);
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str14,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str15, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str16,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str17, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str18 + "' != '"
            + "MISSING VAL FOR KEY:Count of database operations which failed previously but have recovered. (counter)"
            + "'", str18,
        "MISSING VAL FOR KEY:Count of database operations which failed previously but have recovered. (counter)");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MISSING VAL FOR KEY:profiles" + "'",
        str19, "MISSING VAL FOR KEY:profiles");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:metrics.bolt.messages.enabled" + "'", str20,
        "MISSING VAL FOR KEY:metrics.bolt.messages.enabled");
    org.junit.Assert.assertEquals("'" + str21 + "' != '" + "MISSING VAL FOR KEY:LZ4" + "'", str21,
        "MISSING VAL FOR KEY:LZ4");
    org.junit.Assert.assertEquals("'" + str22 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:*dbms.pool.bolt.total_used" + "'", str22,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:*dbms.pool.bolt.total_used");
  }

  @Test
  public void test4279() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4279");
    }
    java.lang.Object[] objArray8 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str9 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray8);
    java.lang.String str10 = io.github.onograph.I18N.format("writable", objArray8);
    java.lang.String str11 = io.github.onograph.I18N.format("User", objArray8);
    java.lang.String str12 = io.github.onograph.I18N.format("basic", objArray8);
    org.junit.Assert.assertNotNull(objArray8);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str9 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str9,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MISSING VAL FOR KEY:writable" + "'",
        str10, "MISSING VAL FOR KEY:writable");
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MISSING VAL FOR KEY:User" + "'", str11,
        "MISSING VAL FOR KEY:User");
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MISSING VAL FOR KEY:basic" + "'", str12,
        "MISSING VAL FOR KEY:basic");
  }

  @Test
  public void test4280() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4280");
    }
    java.lang.Object[] objArray9 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str10 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray9);
    java.lang.String str11 = io.github.onograph.I18N.format("status", objArray9);
    java.lang.String str12 = io.github.onograph.I18N.format("raft-server", objArray9);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "causal_clustering.join_catch_up_timeout", objArray9);
    java.lang.String str14 = io.github.onograph.I18N.format("dbms.scheduler.groups", objArray9);
    java.lang.String str15 = io.github.onograph.I18N.format("min", objArray9);
    org.junit.Assert.assertNotNull(objArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str10 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str10,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MISSING VAL FOR KEY:status" + "'",
        str11, "MISSING VAL FOR KEY:status");
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MISSING VAL FOR KEY:raft-server" + "'",
        str12, "MISSING VAL FOR KEY:raft-server");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.join_catch_up_timeout"
            + "'", str13, "MISSING VAL FOR KEY:causal_clustering.join_catch_up_timeout");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:dbms.scheduler.groups" + "'", str14,
        "MISSING VAL FOR KEY:dbms.scheduler.groups");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:min" + "'", str15,
        "MISSING VAL FOR KEY:min");
  }

  @Test
  public void test4281() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4281");
    }
    java.lang.Object[] objArray11 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str12 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray11);
    java.lang.String str13 = io.github.onograph.I18N.format("status", objArray11);
    java.lang.String str14 = io.github.onograph.I18N.format("raft-server", objArray11);
    java.lang.String str15 = io.github.onograph.I18N.format("transaction.*", objArray11);
    java.lang.String str16 = io.github.onograph.I18N.format("metrics.filter", objArray11);
    java.lang.String str17 = io.github.onograph.I18N.format("Retry-After", objArray11);
    java.lang.String str18 = io.github.onograph.I18N.format(
        "Directory to hold cluster state including Raft log", objArray11);
    java.lang.String str19 = io.github.onograph.I18N.format(
        "Count of database operations which failed previously but have recovered. (counter)",
        objArray11);
    org.junit.Assert.assertNotNull(objArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str12 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str12,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MISSING VAL FOR KEY:status" + "'",
        str13, "MISSING VAL FOR KEY:status");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:raft-server" + "'",
        str14, "MISSING VAL FOR KEY:raft-server");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:transaction.*" + "'", str15,
        "MISSING VAL FOR KEY:transaction.*");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:metrics.filter" + "'", str16,
        "MISSING VAL FOR KEY:metrics.filter");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:Retry-After" + "'",
        str17, "MISSING VAL FOR KEY:Retry-After");
    org.junit.Assert.assertEquals("'" + str18 + "' != '"
            + "MISSING VAL FOR KEY:Directory to hold cluster state including Raft log" + "'", str18,
        "MISSING VAL FOR KEY:Directory to hold cluster state including Raft log");
    org.junit.Assert.assertEquals("'" + str19 + "' != '"
            + "MISSING VAL FOR KEY:Count of database operations which failed previously but have recovered. (counter)"
            + "'", str19,
        "MISSING VAL FOR KEY:Count of database operations which failed previously but have recovered. (counter)");
  }

  @Test
  public void test4282() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4282");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str14 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format("read", objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format("execute_boosted_from_config",
        objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format("replication_maybe", objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format("PROTOCOL_STACK", objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format("replication_maybe", objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format("Security log level threshold.",
        objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format("*causal_clustering.core.is_leader",
        objArray13);
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str14,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str15, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str16,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:execute_boosted_from_config" + "'", str17,
        "MISSING VAL FOR KEY:execute_boosted_from_config");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:replication_maybe" + "'", str18,
        "MISSING VAL FOR KEY:replication_maybe");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:PROTOCOL_STACK" + "'", str19,
        "MISSING VAL FOR KEY:PROTOCOL_STACK");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:replication_maybe" + "'", str20,
        "MISSING VAL FOR KEY:replication_maybe");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:Security log level threshold." + "'", str21,
        "MISSING VAL FOR KEY:Security log level threshold.");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "MISSING VAL FOR KEY:*causal_clustering.core.is_leader" + "'",
        str22, "MISSING VAL FOR KEY:*causal_clustering.core.is_leader");
  }

  @Test
  public void test4283() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4283");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str14 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format("read", objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format("invisible", objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format("dec_dispatch", objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format(
        "Maximum timeout for cluster status request execution", objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format("", objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format("Administration command: SHOW USERS",
        objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format("List all available roles.",
        objArray13);
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str14,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str15, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str16,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str17, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:dec_dispatch" + "'",
        str18, "MISSING VAL FOR KEY:dec_dispatch");
    org.junit.Assert.assertEquals("'" + str19 + "' != '"
            + "MISSING VAL FOR KEY:Maximum timeout for cluster status request execution" + "'", str19,
        "MISSING VAL FOR KEY:Maximum timeout for cluster status request execution");
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "MISSING VAL FOR KEY:" + "'", str20,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:Administration command: SHOW USERS" + "'",
        str21, "MISSING VAL FOR KEY:Administration command: SHOW USERS");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "MISSING VAL FOR KEY:List all available roles." + "'", str22,
        "MISSING VAL FOR KEY:List all available roles.");
  }

  @Test
  public void test4284() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4284");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "Name assigned to the Fabric graph. The name can be used in Fabric queries.");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4285() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4285");
    }
    java.lang.Object[] objArray16 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str17 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray16);
    java.lang.String str18 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray16);
    java.lang.String str19 = io.github.onograph.I18N.format("read", objArray16);
    java.lang.String str20 = io.github.onograph.I18N.format("invisible", objArray16);
    java.lang.String str21 = io.github.onograph.I18N.format("false", objArray16);
    java.lang.String str22 = io.github.onograph.I18N.format("INBOUND", objArray16);
    java.lang.String str23 = io.github.onograph.I18N.format("*bolt.messages_started*", objArray16);
    java.lang.String str24 = io.github.onograph.I18N.format("metrics.prefix", objArray16);
    java.lang.String str25 = io.github.onograph.I18N.format(
        "No connection liveliness check is done by default.", objArray16);
    java.lang.String str26 = io.github.onograph.I18N.format("dirty", objArray16);
    java.lang.String str27 = io.github.onograph.I18N.format("dbms.security.ldap.host", objArray16);
    java.lang.String str28 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:hnd_res_snapshot",
        objArray16);
    java.lang.Class<?> wildcardClass29 = objArray16.getClass();
    org.junit.Assert.assertNotNull(objArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str17,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str18, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str19,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str20, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str21 + "' != '" + "MISSING VAL FOR KEY:false" + "'", str21,
        "MISSING VAL FOR KEY:false");
    org.junit.Assert.assertEquals("'" + str22 + "' != '" + "MISSING VAL FOR KEY:INBOUND" + "'",
        str22, "MISSING VAL FOR KEY:INBOUND");
    org.junit.Assert.assertEquals(
        "'" + str23 + "' != '" + "MISSING VAL FOR KEY:*bolt.messages_started*" + "'", str23,
        "MISSING VAL FOR KEY:*bolt.messages_started*");
    org.junit.Assert.assertEquals(
        "'" + str24 + "' != '" + "MISSING VAL FOR KEY:metrics.prefix" + "'", str24,
        "MISSING VAL FOR KEY:metrics.prefix");
    org.junit.Assert.assertEquals("'" + str25 + "' != '"
            + "MISSING VAL FOR KEY:No connection liveliness check is done by default." + "'", str25,
        "MISSING VAL FOR KEY:No connection liveliness check is done by default.");
    org.junit.Assert.assertEquals("'" + str26 + "' != '" + "MISSING VAL FOR KEY:dirty" + "'", str26,
        "MISSING VAL FOR KEY:dirty");
    org.junit.Assert.assertEquals(
        "'" + str27 + "' != '" + "MISSING VAL FOR KEY:dbms.security.ldap.host" + "'", str27,
        "MISSING VAL FOR KEY:dbms.security.ldap.host");
    org.junit.Assert.assertEquals(
        "'" + str28 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:hnd_res_snapshot" + "'",
        str28, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:hnd_res_snapshot");
    org.junit.Assert.assertNotNull(wildcardClass29);
  }

  @Test
  public void test4286() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4286");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("BATCH_LOG_TIMER");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4287() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4287");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:The total number of page faults happened in the page cache. (counter)");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4288() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4288");
    }
    java.lang.Object[] objArray8 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str9 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray8);
    java.lang.String str10 = io.github.onograph.I18N.format("", objArray8);
    java.lang.String str11 = io.github.onograph.I18N.format(".Database transaction metrics",
        objArray8);
    java.lang.String str12 = io.github.onograph.I18N.format("metrics.jvm.memory.enabled",
        objArray8);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "Enable reporting metrics about number of occurred replanning events. Deprecated - use metrics.filter instead.",
        objArray8);
    java.lang.Class<?> wildcardClass14 = objArray8.getClass();
    org.junit.Assert.assertNotNull(objArray8);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str9 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str9,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MISSING VAL FOR KEY:" + "'", str10,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:.Database transaction metrics" + "'", str11,
        "MISSING VAL FOR KEY:.Database transaction metrics");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:metrics.jvm.memory.enabled" + "'", str12,
        "MISSING VAL FOR KEY:metrics.jvm.memory.enabled");
    org.junit.Assert.assertEquals("'" + str13 + "' != '"
            + "MISSING VAL FOR KEY:Enable reporting metrics about number of occurred replanning events. Deprecated - use metrics.filter instead."
            + "'", str13,
        "MISSING VAL FOR KEY:Enable reporting metrics about number of occurred replanning events. Deprecated - use metrics.filter instead.");
    org.junit.Assert.assertNotNull(wildcardClass14);
  }

  @Test
  public void test4289() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4289");
    }
    java.lang.Object[] objArray11 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str12 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray11);
    java.lang.String str13 = io.github.onograph.I18N.format("status", objArray11);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "Maximum number of akka restart attempts before we panic the DBMS. Set to -1 to retry forever",
        objArray11);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "Maximum number of history files for the csv files.", objArray11);
    java.lang.String str16 = io.github.onograph.I18N.format("elapsedTimeMs", objArray11);
    java.lang.String str17 = io.github.onograph.I18N.format("query-logging", objArray11);
    java.lang.String str18 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:Count of successful database create operations. (counter)",
        objArray11);
    java.lang.String str19 = io.github.onograph.I18N.format("--keep-only-nodes-with-labels",
        objArray11);
    org.junit.Assert.assertNotNull(objArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str12 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str12,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MISSING VAL FOR KEY:status" + "'",
        str13, "MISSING VAL FOR KEY:status");
    org.junit.Assert.assertEquals("'" + str14 + "' != '"
            + "MISSING VAL FOR KEY:Maximum number of akka restart attempts before we panic the DBMS. Set to -1 to retry forever"
            + "'", str14,
        "MISSING VAL FOR KEY:Maximum number of akka restart attempts before we panic the DBMS. Set to -1 to retry forever");
    org.junit.Assert.assertEquals("'" + str15 + "' != '"
            + "MISSING VAL FOR KEY:Maximum number of history files for the csv files." + "'", str15,
        "MISSING VAL FOR KEY:Maximum number of history files for the csv files.");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:elapsedTimeMs" + "'", str16,
        "MISSING VAL FOR KEY:elapsedTimeMs");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:query-logging" + "'", str17,
        "MISSING VAL FOR KEY:query-logging");
    org.junit.Assert.assertEquals("'" + str18 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:Count of successful database create operations. (counter)"
            + "'", str18,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:Count of successful database create operations. (counter)");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:--keep-only-nodes-with-labels" + "'", str19,
        "MISSING VAL FOR KEY:--keep-only-nodes-with-labels");
  }

  @Test
  public void test4290() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4290");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:security.log");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4291() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4291");
    }
    java.lang.Object[] objArray11 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str12 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray11);
    java.lang.String str13 = io.github.onograph.I18N.format("browser.credential_timeout",
        objArray11);
    java.lang.String str14 = io.github.onograph.I18N.format("", objArray11);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:Raft protocol implementation versions that this instance will allow in negotiation as a comma-separated list. Order is not relevant: the greatest value will be preferred. An empty list will allow all supported versions. Example value: \"1.0, 1.3, 2.0, 2.1\"",
        objArray11);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "A common prefix for the reported metrics field names.", objArray11);
    java.lang.String str17 = io.github.onograph.I18N.format("thread-pool-executor", objArray11);
    java.lang.String str18 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:transactionLogCatchup", objArray11);
    org.junit.Assert.assertNotNull(objArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str12,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:browser.credential_timeout" + "'", str13,
        "MISSING VAL FOR KEY:browser.credential_timeout");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:" + "'", str14,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str15 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Raft protocol implementation versions that this instance will allow in negotiation as a comma-separated list. Order is not relevant: the greatest value will be preferred. An empty list will allow all supported versions. Example value: \"1.0, 1.3, 2.0, 2.1\""
            + "'", str15,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Raft protocol implementation versions that this instance will allow in negotiation as a comma-separated list. Order is not relevant: the greatest value will be preferred. An empty list will allow all supported versions. Example value: \"1.0, 1.3, 2.0, 2.1\"");
    org.junit.Assert.assertEquals("'" + str16 + "' != '"
            + "MISSING VAL FOR KEY:A common prefix for the reported metrics field names." + "'", str16,
        "MISSING VAL FOR KEY:A common prefix for the reported metrics field names.");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:thread-pool-executor" + "'", str17,
        "MISSING VAL FOR KEY:thread-pool-executor");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:transactionLogCatchup"
            + "'", str18, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:transactionLogCatchup");
  }

  @Test
  public void test4292() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4292");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:*dbms.pool.bolt.total_used");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4293() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4293");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("Restore a backed up database.");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4294() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4294");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:enc_res_tx_fin");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4295() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4295");
    }
    java.lang.Object[] objArray9 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str10 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray9);
    java.lang.String str11 = io.github.onograph.I18N.format("browser.credential_timeout",
        objArray9);
    java.lang.String str12 = io.github.onograph.I18N.format("", objArray9);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "The total number of threads (both idle and busy) in the jetty pool. (gauge)", objArray9);
    java.lang.String str14 = io.github.onograph.I18N.format("high_limitV3_1_0", objArray9);
    java.lang.Class<?> wildcardClass15 = objArray9.getClass();
    org.junit.Assert.assertNotNull(objArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str10 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str10,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:browser.credential_timeout" + "'", str11,
        "MISSING VAL FOR KEY:browser.credential_timeout");
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MISSING VAL FOR KEY:" + "'", str12,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str13 + "' != '"
            + "MISSING VAL FOR KEY:The total number of threads (both idle and busy) in the jetty pool. (gauge)"
            + "'", str13,
        "MISSING VAL FOR KEY:The total number of threads (both idle and busy) in the jetty pool. (gauge)");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:high_limitV3_1_0" + "'", str14,
        "MISSING VAL FOR KEY:high_limitV3_1_0");
    org.junit.Assert.assertNotNull(wildcardClass15);
  }

  @Test
  public void test4296() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4296");
    }
    java.lang.Object[] objArray10 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str11 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray10);
    java.lang.String str12 = io.github.onograph.I18N.format("status", objArray10);
    java.lang.String str13 = io.github.onograph.I18N.format("", objArray10);
    java.lang.String str14 = io.github.onograph.I18N.format("bolt.*", objArray10);
    java.lang.String str15 = io.github.onograph.I18N.format("Activate a suspended user.",
        objArray10);
    java.lang.String str16 = io.github.onograph.I18N.format("handshake_client_decoder", objArray10);
    java.lang.String str17 = io.github.onograph.I18N.format("queryPlan", objArray10);
    java.lang.Class<?> wildcardClass18 = objArray10.getClass();
    org.junit.Assert.assertNotNull(objArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str11 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str11,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MISSING VAL FOR KEY:status" + "'",
        str12, "MISSING VAL FOR KEY:status");
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MISSING VAL FOR KEY:" + "'", str13,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:bolt.*" + "'",
        str14, "MISSING VAL FOR KEY:bolt.*");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:Activate a suspended user." + "'", str15,
        "MISSING VAL FOR KEY:Activate a suspended user.");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:handshake_client_decoder" + "'", str16,
        "MISSING VAL FOR KEY:handshake_client_decoder");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:queryPlan" + "'",
        str17, "MISSING VAL FOR KEY:queryPlan");
    org.junit.Assert.assertNotNull(wildcardClass18);
  }

  @Test
  public void test4297() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4297");
    }
    java.lang.Object[] objArray8 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str9 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray8);
    java.lang.String str10 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray8);
    java.lang.String str11 = io.github.onograph.I18N.format("", objArray8);
    java.lang.String str12 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:Enable multi-data center features. Requires appropriate licensing.",
        objArray8);
    java.lang.Class<?> wildcardClass13 = objArray8.getClass();
    org.junit.Assert.assertNotNull(objArray8);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str9 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str9,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str10 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str10, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MISSING VAL FOR KEY:" + "'", str11,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str12 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Enable multi-data center features. Requires appropriate licensing."
            + "'", str12,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Enable multi-data center features. Requires appropriate licensing.");
    org.junit.Assert.assertNotNull(wildcardClass13);
  }

  @Test
  public void test4298() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4298");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str14 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format("read", objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format("invisible", objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format("dec_dispatch", objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format("PropertyKey", objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format("relationship-type-distribution",
        objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format("causal_clustering.refuse_to_be_leader",
        objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format("DEFAULT", objArray13);
    java.lang.Class<?> wildcardClass23 = objArray13.getClass();
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str14,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str15, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str16,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str17, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:dec_dispatch" + "'",
        str18, "MISSING VAL FOR KEY:dec_dispatch");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MISSING VAL FOR KEY:PropertyKey" + "'",
        str19, "MISSING VAL FOR KEY:PropertyKey");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:relationship-type-distribution" + "'", str20,
        "MISSING VAL FOR KEY:relationship-type-distribution");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.refuse_to_be_leader" + "'",
        str21, "MISSING VAL FOR KEY:causal_clustering.refuse_to_be_leader");
    org.junit.Assert.assertEquals("'" + str22 + "' != '" + "MISSING VAL FOR KEY:DEFAULT" + "'",
        str22, "MISSING VAL FOR KEY:DEFAULT");
    org.junit.Assert.assertNotNull(wildcardClass23);
  }

  @Test
  public void test4299() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4299");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:readReplicaStoreIdReader");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4300() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4300");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("--to-database");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4301() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4301");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:.Database operation count metrics");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4302() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4302");
    }
    java.lang.Object[] objArray14 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str15 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray14);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray14);
    java.lang.String str17 = io.github.onograph.I18N.format(".Database operation count metrics",
        objArray14);
    java.lang.String str18 = io.github.onograph.I18N.format("SCHEMA", objArray14);
    java.lang.String str19 = io.github.onograph.I18N.format("total_bytes", objArray14);
    java.lang.String str20 = io.github.onograph.I18N.format("thread.count", objArray14);
    java.lang.String str21 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)",
        objArray14);
    java.lang.String str22 = io.github.onograph.I18N.format("vm.pause_time.*", objArray14);
    java.lang.String str23 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:causal_clustering.kubernetes.namespace", objArray14);
    java.lang.String str24 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.leader_transfer_interval",
        objArray14);
    org.junit.Assert.assertNotNull(objArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str15,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str16, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:.Database operation count metrics" + "'",
        str17, "MISSING VAL FOR KEY:.Database operation count metrics");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:SCHEMA" + "'",
        str18, "MISSING VAL FOR KEY:SCHEMA");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MISSING VAL FOR KEY:total_bytes" + "'",
        str19, "MISSING VAL FOR KEY:total_bytes");
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "MISSING VAL FOR KEY:thread.count" + "'",
        str20, "MISSING VAL FOR KEY:thread.count");
    org.junit.Assert.assertEquals("'" + str21 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)"
            + "'", str21,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "MISSING VAL FOR KEY:vm.pause_time.*" + "'", str22,
        "MISSING VAL FOR KEY:vm.pause_time.*");
    org.junit.Assert.assertEquals("'" + str23 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.kubernetes.namespace" + "'",
        str23, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.kubernetes.namespace");
    org.junit.Assert.assertEquals("'" + str24 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.leader_transfer_interval"
            + "'", str24,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.leader_transfer_interval");
  }

  @Test
  public void test4303() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4303");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:java.naming.security.credentials");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4304() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4304");
    }
    java.lang.Object[] objArray12 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str13 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray12);
    java.lang.String str14 = io.github.onograph.I18N.format("writable", objArray12);
    java.lang.String str15 = io.github.onograph.I18N.format("--additional-config", objArray12);
    java.lang.String str16 = io.github.onograph.I18N.format("addresses", objArray12);
    java.lang.String str17 = io.github.onograph.I18N.format(
        "The total number of Bolt connections opened since this instance started. This includes both succeeded and failed connections. (counter)",
        objArray12);
    java.lang.String str18 = io.github.onograph.I18N.format("", objArray12);
    java.lang.String str19 = io.github.onograph.I18N.format("capacity", objArray12);
    java.lang.String str20 = io.github.onograph.I18N.format("visible", objArray12);
    java.lang.Class<?> wildcardClass21 = objArray12.getClass();
    org.junit.Assert.assertNotNull(objArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str13,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:writable" + "'",
        str14, "MISSING VAL FOR KEY:writable");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:--additional-config" + "'", str15,
        "MISSING VAL FOR KEY:--additional-config");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:addresses" + "'",
        str16, "MISSING VAL FOR KEY:addresses");
    org.junit.Assert.assertEquals("'" + str17 + "' != '"
            + "MISSING VAL FOR KEY:The total number of Bolt connections opened since this instance started. This includes both succeeded and failed connections. (counter)"
            + "'", str17,
        "MISSING VAL FOR KEY:The total number of Bolt connections opened since this instance started. This includes both succeeded and failed connections. (counter)");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:" + "'", str18,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MISSING VAL FOR KEY:capacity" + "'",
        str19, "MISSING VAL FOR KEY:capacity");
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "MISSING VAL FOR KEY:visible" + "'",
        str20, "MISSING VAL FOR KEY:visible");
    org.junit.Assert.assertNotNull(wildcardClass21);
  }

  @Test
  public void test4305() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4305");
    }
    java.lang.Object[] objArray1 = null;
    java.lang.String str2 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:*check_point.duration", objArray1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:*check_point.duration" + "'",
        str2, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:*check_point.duration");
  }

  @Test
  public void test4306() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4306");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("cc-database-status-actor");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4307() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4307");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str14 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format("browser.credential_timeout",
        objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format("", objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format(
        "The total number of threads (both idle and busy) in the jetty pool. (gauge)", objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format(
        "causal_clustering.store_copy_chunk_size", objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format(
        "causal_clustering.in_flight_cache.max_entries", objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:GRANTED",
        objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:LabelQualifierAll",
        objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format("", objArray13);
    java.lang.Class<?> wildcardClass23 = objArray13.getClass();
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str14,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:browser.credential_timeout" + "'", str15,
        "MISSING VAL FOR KEY:browser.credential_timeout");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:" + "'", str16,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str17 + "' != '"
            + "MISSING VAL FOR KEY:The total number of threads (both idle and busy) in the jetty pool. (gauge)"
            + "'", str17,
        "MISSING VAL FOR KEY:The total number of threads (both idle and busy) in the jetty pool. (gauge)");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.store_copy_chunk_size"
            + "'", str18, "MISSING VAL FOR KEY:causal_clustering.store_copy_chunk_size");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.in_flight_cache.max_entries"
            + "'", str19, "MISSING VAL FOR KEY:causal_clustering.in_flight_cache.max_entries");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:GRANTED" + "'", str20,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:GRANTED");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:LabelQualifierAll" + "'",
        str21, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:LabelQualifierAll");
    org.junit.Assert.assertEquals("'" + str22 + "' != '" + "MISSING VAL FOR KEY:" + "'", str22,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertNotNull(wildcardClass23);
  }

  @Test
  public void test4308() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4308");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("applicationProtocolVersion");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4309() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4309");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:high_limit");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4310() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4310");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("User");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4311() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4311");
    }
    java.lang.Object[] objArray9 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str10 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray9);
    java.lang.String str11 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray9);
    java.lang.String str12 = io.github.onograph.I18N.format(
        "causal_clustering.middleware.akka.failure_detector.max_sample_size", objArray9);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "The attribute to use when looking up users.\nUsing this setting requires `dbms.security.ldap.authentication.search_for_attribute` to be true and thus `dbms.security.ldap.authorization.system_username` and `dbms.security.ldap.authorization.system_password` to be configured.",
        objArray9);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.middleware.akka.allow_any_core_to_bootstrap",
        objArray9);
    java.lang.Class<?> wildcardClass15 = objArray9.getClass();
    org.junit.Assert.assertNotNull(objArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str10 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str10,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str11, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str12 + "' != '"
            + "MISSING VAL FOR KEY:causal_clustering.middleware.akka.failure_detector.max_sample_size"
            + "'", str12,
        "MISSING VAL FOR KEY:causal_clustering.middleware.akka.failure_detector.max_sample_size");
    org.junit.Assert.assertEquals("'" + str13 + "' != '"
            + "MISSING VAL FOR KEY:The attribute to use when looking up users.\nUsing this setting requires `dbms.security.ldap.authentication.search_for_attribute` to be true and thus `dbms.security.ldap.authorization.system_username` and `dbms.security.ldap.authorization.system_password` to be configured."
            + "'", str13,
        "MISSING VAL FOR KEY:The attribute to use when looking up users.\nUsing this setting requires `dbms.security.ldap.authentication.search_for_attribute` to be true and thus `dbms.security.ldap.authorization.system_username` and `dbms.security.ldap.authorization.system_password` to be configured.");
    org.junit.Assert.assertEquals("'" + str14 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.middleware.akka.allow_any_core_to_bootstrap"
            + "'", str14,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.middleware.akka.allow_any_core_to_bootstrap");
    org.junit.Assert.assertNotNull(wildcardClass15);
  }

  @Test
  public void test4312() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4312");
    }
    java.lang.Object[] objArray14 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str15 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray14);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray14);
    java.lang.String str17 = io.github.onograph.I18N.format("read", objArray14);
    java.lang.String str18 = io.github.onograph.I18N.format("invisible", objArray14);
    java.lang.String str19 = io.github.onograph.I18N.format("relationship-type-distribution",
        objArray14);
    java.lang.String str20 = io.github.onograph.I18N.format("read-only", objArray14);
    java.lang.String str21 = io.github.onograph.I18N.format(
        "causal_clustering.kubernetes.label_selector", objArray14);
    java.lang.String str22 = io.github.onograph.I18N.format("RAFT log implementation", objArray14);
    java.lang.String str23 = io.github.onograph.I18N.format("RAFT log pruning frequency",
        objArray14);
    java.lang.String str24 = io.github.onograph.I18N.format("", objArray14);
    java.lang.Class<?> wildcardClass25 = objArray14.getClass();
    org.junit.Assert.assertNotNull(objArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str15,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str16, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str17,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str18, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:relationship-type-distribution" + "'", str19,
        "MISSING VAL FOR KEY:relationship-type-distribution");
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "MISSING VAL FOR KEY:read-only" + "'",
        str20, "MISSING VAL FOR KEY:read-only");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.kubernetes.label_selector"
            + "'", str21, "MISSING VAL FOR KEY:causal_clustering.kubernetes.label_selector");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "MISSING VAL FOR KEY:RAFT log implementation" + "'", str22,
        "MISSING VAL FOR KEY:RAFT log implementation");
    org.junit.Assert.assertEquals(
        "'" + str23 + "' != '" + "MISSING VAL FOR KEY:RAFT log pruning frequency" + "'", str23,
        "MISSING VAL FOR KEY:RAFT log pruning frequency");
    org.junit.Assert.assertEquals("'" + str24 + "' != '" + "MISSING VAL FOR KEY:" + "'", str24,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertNotNull(wildcardClass25);
  }

  @Test
  public void test4313() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4313");
    }
    java.lang.Object[] objArray14 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str15 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray14);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray14);
    java.lang.String str17 = io.github.onograph.I18N.format("read", objArray14);
    java.lang.String str18 = io.github.onograph.I18N.format("execute_boosted_from_config",
        objArray14);
    java.lang.String str19 = io.github.onograph.I18N.format("replication_maybe", objArray14);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "driver.connection.pool.acquisition_timeout", objArray14);
    java.lang.String str21 = io.github.onograph.I18N.format("NewLeaderBarrier", objArray14);
    java.lang.String str22 = io.github.onograph.I18N.format("hi!", objArray14);
    java.lang.String str23 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:Perform the recovery of the backup store by applying the latest pulled transactions. If disabled, the backup will be faster but a recovery of the backup store will be required at a later time before restoring the data (using the neo4j-admin prepare-restore command). Note: if --prepare-restore is set to false, then --check-consistency is implicitly set to false because the consistency of a none-recovered store can't be checked.",
        objArray14);
    java.lang.String str24 = io.github.onograph.I18N.format(
        "The total number of started transactions. (counter)", objArray14);
    java.lang.Class<?> wildcardClass25 = objArray14.getClass();
    org.junit.Assert.assertNotNull(objArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str15,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str16, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str17,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:execute_boosted_from_config" + "'", str18,
        "MISSING VAL FOR KEY:execute_boosted_from_config");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:replication_maybe" + "'", str19,
        "MISSING VAL FOR KEY:replication_maybe");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:driver.connection.pool.acquisition_timeout"
            + "'", str20, "MISSING VAL FOR KEY:driver.connection.pool.acquisition_timeout");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:NewLeaderBarrier" + "'", str21,
        "MISSING VAL FOR KEY:NewLeaderBarrier");
    org.junit.Assert.assertEquals("'" + str22 + "' != '" + "MISSING VAL FOR KEY:hi!" + "'", str22,
        "MISSING VAL FOR KEY:hi!");
    org.junit.Assert.assertEquals("'" + str23 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Perform the recovery of the backup store by applying the latest pulled transactions. If disabled, the backup will be faster but a recovery of the backup store will be required at a later time before restoring the data (using the neo4j-admin prepare-restore command). Note: if --prepare-restore is set to false, then --check-consistency is implicitly set to false because the consistency of a none-recovered store can't be checked."
            + "'", str23,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Perform the recovery of the backup store by applying the latest pulled transactions. If disabled, the backup will be faster but a recovery of the backup store will be required at a later time before restoring the data (using the neo4j-admin prepare-restore command). Note: if --prepare-restore is set to false, then --check-consistency is implicitly set to false because the consistency of a none-recovered store can't be checked.");
    org.junit.Assert.assertEquals("'" + str24 + "' != '"
            + "MISSING VAL FOR KEY:The total number of started transactions. (counter)" + "'", str24,
        "MISSING VAL FOR KEY:The total number of started transactions. (counter)");
    org.junit.Assert.assertNotNull(wildcardClass25);
  }

  @Test
  public void test4314() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4314");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:fork-join-executor");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4315() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4315");
    }
    java.lang.Object[] objArray12 = new java.lang.Object[]{};
    java.lang.String str13 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray12);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "The total number of live threads including daemon and non-daemon threads. (gauge)",
        objArray12);
    java.lang.String str15 = io.github.onograph.I18N.format("Upgraded", objArray12);
    java.lang.String str16 = io.github.onograph.I18N.format("<label>[,<label>...]", objArray12);
    java.lang.String str17 = io.github.onograph.I18N.format(
        "akka.remote.artery.advanced.connection-timeout", objArray12);
    java.lang.String str18 = io.github.onograph.I18N.format("8m", objArray12);
    java.lang.String str19 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:causal_clustering.connect_randomly_to_server_group", objArray12);
    java.lang.String str20 = io.github.onograph.I18N.format("defragment", objArray12);
    java.lang.String str21 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:Initiate and wait for a new check point, or wait any already on-going check point to complete. Note that this temporarily disables the `dbms.checkpoint.iops.limit` setting in order to make the check point complete faster. This might cause transaction throughput to degrade slightly, due to increased IO load.",
        objArray12);
    java.lang.String str22 = io.github.onograph.I18N.format("segment", objArray12);
    java.lang.String str23 = io.github.onograph.I18N.format("HAS_ROLE", objArray12);
    java.lang.String str24 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.refuse_to_be_leader",
        objArray12);
    java.lang.Class<?> wildcardClass25 = objArray12.getClass();
    org.junit.Assert.assertNotNull(objArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
    org.junit.Assert.assertEquals("'" + str13 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str13,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str14 + "' != '"
            + "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)"
            + "'", str14,
        "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:Upgraded" + "'",
        str15, "MISSING VAL FOR KEY:Upgraded");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:<label>[,<label>...]" + "'", str16,
        "MISSING VAL FOR KEY:<label>[,<label>...]");
    org.junit.Assert.assertEquals("'" + str17 + "' != '"
            + "MISSING VAL FOR KEY:akka.remote.artery.advanced.connection-timeout" + "'", str17,
        "MISSING VAL FOR KEY:akka.remote.artery.advanced.connection-timeout");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:8m" + "'", str18,
        "MISSING VAL FOR KEY:8m");
    org.junit.Assert.assertEquals("'" + str19 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.connect_randomly_to_server_group"
            + "'", str19,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.connect_randomly_to_server_group");
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "MISSING VAL FOR KEY:defragment" + "'",
        str20, "MISSING VAL FOR KEY:defragment");
    org.junit.Assert.assertEquals("'" + str21 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Initiate and wait for a new check point, or wait any already on-going check point to complete. Note that this temporarily disables the `dbms.checkpoint.iops.limit` setting in order to make the check point complete faster. This might cause transaction throughput to degrade slightly, due to increased IO load."
            + "'", str21,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Initiate and wait for a new check point, or wait any already on-going check point to complete. Note that this temporarily disables the `dbms.checkpoint.iops.limit` setting in order to make the check point complete faster. This might cause transaction throughput to degrade slightly, due to increased IO load.");
    org.junit.Assert.assertEquals("'" + str22 + "' != '" + "MISSING VAL FOR KEY:segment" + "'",
        str22, "MISSING VAL FOR KEY:segment");
    org.junit.Assert.assertEquals("'" + str23 + "' != '" + "MISSING VAL FOR KEY:HAS_ROLE" + "'",
        str23, "MISSING VAL FOR KEY:HAS_ROLE");
    org.junit.Assert.assertEquals("'" + str24 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.refuse_to_be_leader"
            + "'", str24,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.refuse_to_be_leader");
    org.junit.Assert.assertNotNull(wildcardClass25);
  }

  @Test
  public void test4316() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4316");
    }
    java.lang.Object[] objArray11 = new java.lang.Object[]{};
    java.lang.String str12 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray11);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "The total number of live threads including daemon and non-daemon threads. (gauge)",
        objArray11);
    java.lang.String str14 = io.github.onograph.I18N.format("Upgraded", objArray11);
    java.lang.String str15 = io.github.onograph.I18N.format("<label>[,<label>...]", objArray11);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "akka.remote.artery.advanced.connection-timeout", objArray11);
    java.lang.String str17 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:dbms.procedures",
        objArray11);
    java.lang.String str18 = io.github.onograph.I18N.format("roleName", objArray11);
    java.lang.String str19 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:RAFT log pruning frequency", objArray11);
    java.lang.String str20 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:editor",
        objArray11);
    java.lang.String str21 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:dbms.max_databases", objArray11);
    java.lang.String str22 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:authentication", objArray11);
    java.lang.Class<?> wildcardClass23 = objArray11.getClass();
    org.junit.Assert.assertNotNull(objArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
    org.junit.Assert.assertEquals("'" + str12 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str12,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str13 + "' != '"
            + "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)"
            + "'", str13,
        "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:Upgraded" + "'",
        str14, "MISSING VAL FOR KEY:Upgraded");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:<label>[,<label>...]" + "'", str15,
        "MISSING VAL FOR KEY:<label>[,<label>...]");
    org.junit.Assert.assertEquals("'" + str16 + "' != '"
            + "MISSING VAL FOR KEY:akka.remote.artery.advanced.connection-timeout" + "'", str16,
        "MISSING VAL FOR KEY:akka.remote.artery.advanced.connection-timeout");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms.procedures" + "'",
        str17, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms.procedures");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:roleName" + "'",
        str18, "MISSING VAL FOR KEY:roleName");
    org.junit.Assert.assertEquals("'" + str19 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:RAFT log pruning frequency"
            + "'", str19,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:RAFT log pruning frequency");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:editor" + "'", str20,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:editor");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms.max_databases" + "'",
        str21, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms.max_databases");
    org.junit.Assert.assertEquals("'" + str22 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:authentication" + "'", str22,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:authentication");
    org.junit.Assert.assertNotNull(wildcardClass23);
  }

  @Test
  public void test4317() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4317");
    }
    java.lang.Object[] objArray11 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str12 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray11);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray11);
    java.lang.String str14 = io.github.onograph.I18N.format("read", objArray11);
    java.lang.String str15 = io.github.onograph.I18N.format("invisible", objArray11);
    java.lang.String str16 = io.github.onograph.I18N.format("fabric.routing.ttl", objArray11);
    java.lang.String str17 = io.github.onograph.I18N.format("is_suspended", objArray11);
    java.lang.String str18 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:verbose",
        objArray11);
    java.lang.Class<?> wildcardClass19 = objArray11.getClass();
    org.junit.Assert.assertNotNull(objArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str12,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str13, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str14,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str15, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:fabric.routing.ttl" + "'", str16,
        "MISSING VAL FOR KEY:fabric.routing.ttl");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:is_suspended" + "'",
        str17, "MISSING VAL FOR KEY:is_suspended");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:verbose" + "'", str18,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:verbose");
    org.junit.Assert.assertNotNull(wildcardClass19);
  }

  @Test
  public void test4318() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4318");
    }
    java.lang.Object[] objArray4 = new java.lang.Object[]{};
    java.lang.String str5 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray4);
    java.lang.String str6 = io.github.onograph.I18N.format("Upgraded", objArray4);
    java.lang.String str7 = io.github.onograph.I18N.format("lz4_encoder", objArray4);
    java.lang.String str8 = io.github.onograph.I18N.format("database.", objArray4);
    java.lang.Class<?> wildcardClass9 = objArray4.getClass();
    org.junit.Assert.assertNotNull(objArray4);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
    org.junit.Assert.assertEquals("'" + str5 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str5,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "MISSING VAL FOR KEY:Upgraded" + "'",
        str6, "MISSING VAL FOR KEY:Upgraded");
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "MISSING VAL FOR KEY:lz4_encoder" + "'",
        str7, "MISSING VAL FOR KEY:lz4_encoder");
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "MISSING VAL FOR KEY:database." + "'",
        str8, "MISSING VAL FOR KEY:database.");
    org.junit.Assert.assertNotNull(wildcardClass9);
  }

  @Test
  public void test4319() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4319");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("free");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4320() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4320");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:storeStateReader");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4321() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4321");
    }
    java.lang.Object[] objArray14 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str15 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray14);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray14);
    java.lang.String str17 = io.github.onograph.I18N.format("read", objArray14);
    java.lang.String str18 = io.github.onograph.I18N.format("invisible", objArray14);
    java.lang.String str19 = io.github.onograph.I18N.format("relationship-type-distribution",
        objArray14);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:<label>[,<label>...]", objArray14);
    java.lang.String str21 = io.github.onograph.I18N.format(
        "causal_clustering.cluster_topology_refresh", objArray14);
    java.lang.String str22 = io.github.onograph.I18N.format("PUBLIC", objArray14);
    java.lang.String str23 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:server_policies",
        objArray14);
    java.lang.String str24 = io.github.onograph.I18N.format("127.0.0.1", objArray14);
    java.lang.Class<?> wildcardClass25 = objArray14.getClass();
    org.junit.Assert.assertNotNull(objArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str15,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str16, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str17,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str18, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:relationship-type-distribution" + "'", str19,
        "MISSING VAL FOR KEY:relationship-type-distribution");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:<label>[,<label>...]"
            + "'", str20, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:<label>[,<label>...]");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.cluster_topology_refresh"
            + "'", str21, "MISSING VAL FOR KEY:causal_clustering.cluster_topology_refresh");
    org.junit.Assert.assertEquals("'" + str22 + "' != '" + "MISSING VAL FOR KEY:PUBLIC" + "'",
        str22, "MISSING VAL FOR KEY:PUBLIC");
    org.junit.Assert.assertEquals(
        "'" + str23 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:server_policies" + "'",
        str23, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:server_policies");
    org.junit.Assert.assertEquals("'" + str24 + "' != '" + "MISSING VAL FOR KEY:127.0.0.1" + "'",
        str24, "MISSING VAL FOR KEY:127.0.0.1");
    org.junit.Assert.assertNotNull(wildcardClass25);
  }

  @Test
  public void test4322() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4322");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "causal_clustering.middleware.akka.failure_detector.monitored_by_nr_of_members");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4323() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4323");
    }
    java.lang.Object[] objArray12 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str13 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray12);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray12);
    java.lang.String str15 = io.github.onograph.I18N.format("read", objArray12);
    java.lang.String str16 = io.github.onograph.I18N.format("invisible", objArray12);
    java.lang.String str17 = io.github.onograph.I18N.format("dec_dispatch", objArray12);
    java.lang.String str18 = io.github.onograph.I18N.format("RAFT log reader pool size",
        objArray12);
    java.lang.String str19 = io.github.onograph.I18N.format(
        "causal_clustering.middleware.akka.sink_parallelism", objArray12);
    java.lang.String str20 = io.github.onograph.I18N.format("*page_cache.usage_ratio", objArray12);
    java.lang.Class<?> wildcardClass21 = objArray12.getClass();
    org.junit.Assert.assertNotNull(objArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str13,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str14, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str15,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str16, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:dec_dispatch" + "'",
        str17, "MISSING VAL FOR KEY:dec_dispatch");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:RAFT log reader pool size" + "'", str18,
        "MISSING VAL FOR KEY:RAFT log reader pool size");
    org.junit.Assert.assertEquals("'" + str19 + "' != '"
            + "MISSING VAL FOR KEY:causal_clustering.middleware.akka.sink_parallelism" + "'", str19,
        "MISSING VAL FOR KEY:causal_clustering.middleware.akka.sink_parallelism");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:*page_cache.usage_ratio" + "'", str20,
        "MISSING VAL FOR KEY:*page_cache.usage_ratio");
    org.junit.Assert.assertNotNull(wildcardClass21);
  }

  @Test
  public void test4324() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4324");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str14 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "dbms.security.ldap.authentication.attribute", objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:Number of available processors", objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format("action", objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format(
        "The total size of the database and transaction logs, in bytes. (gauge)", objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format("Privilege", objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:causal_clustering.middleware.logging.level", objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms", objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:cypher", objArray13);
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str14,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute"
            + "'", str15, "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute");
    org.junit.Assert.assertEquals("'" + str16 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Number of available processors" + "'", str16,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Number of available processors");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:action" + "'",
        str17, "MISSING VAL FOR KEY:action");
    org.junit.Assert.assertEquals("'" + str18 + "' != '"
            + "MISSING VAL FOR KEY:The total size of the database and transaction logs, in bytes. (gauge)"
            + "'", str18,
        "MISSING VAL FOR KEY:The total size of the database and transaction logs, in bytes. (gauge)");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MISSING VAL FOR KEY:Privilege" + "'",
        str19, "MISSING VAL FOR KEY:Privilege");
    org.junit.Assert.assertEquals("'" + str20 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.middleware.logging.level"
            + "'", str20,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.middleware.logging.level");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms"
            + "'", str21, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms");
    org.junit.Assert.assertEquals("'" + str22 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:cypher" + "'", str22,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:cypher");
  }

  @Test
  public void test4325() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4325");
    }
    java.lang.Object[] objArray6 = new java.lang.Object[]{};
    java.lang.String str7 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray6);
    java.lang.String str8 = io.github.onograph.I18N.format("function", objArray6);
    java.lang.String str9 = io.github.onograph.I18N.format("FOR_DATABASE", objArray6);
    java.lang.String str10 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:Base directory for transaction logs. Usage of this option is only allowed if --from parameter point to exact one directory",
        objArray6);
    java.lang.String str11 = io.github.onograph.I18N.format("metrics.csv.interval", objArray6);
    java.lang.String str12 = io.github.onograph.I18N.format("dbms.max_databases", objArray6);
    org.junit.Assert.assertNotNull(objArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
    org.junit.Assert.assertEquals("'" + str7 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str7,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "MISSING VAL FOR KEY:function" + "'",
        str8, "MISSING VAL FOR KEY:function");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MISSING VAL FOR KEY:FOR_DATABASE" + "'",
        str9, "MISSING VAL FOR KEY:FOR_DATABASE");
    org.junit.Assert.assertEquals("'" + str10 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Base directory for transaction logs. Usage of this option is only allowed if --from parameter point to exact one directory"
            + "'", str10,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Base directory for transaction logs. Usage of this option is only allowed if --from parameter point to exact one directory");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:metrics.csv.interval" + "'", str11,
        "MISSING VAL FOR KEY:metrics.csv.interval");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:dbms.max_databases" + "'", str12,
        "MISSING VAL FOR KEY:dbms.max_databases");
  }

  @Test
  public void test4326() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4326");
    }
    java.lang.Object[] objArray6 = new java.lang.Object[]{};
    java.lang.String str7 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray6);
    java.lang.String str8 = io.github.onograph.I18N.format("function", objArray6);
    java.lang.String str9 = io.github.onograph.I18N.format("admin.ini", objArray6);
    java.lang.String str10 = io.github.onograph.I18N.format(
        "List the job groups that are active in the database internal job scheduler.", objArray6);
    java.lang.String str11 = io.github.onograph.I18N.format(
        "The target location of the CSV files: a path to a directory wherein a CSV file per reported field  will be written.",
        objArray6);
    java.lang.String str12 = io.github.onograph.I18N.format("raft_message_composer", objArray6);
    java.lang.Class<?> wildcardClass13 = objArray6.getClass();
    org.junit.Assert.assertNotNull(objArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
    org.junit.Assert.assertEquals("'" + str7 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str7,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "MISSING VAL FOR KEY:function" + "'",
        str8, "MISSING VAL FOR KEY:function");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MISSING VAL FOR KEY:admin.ini" + "'",
        str9, "MISSING VAL FOR KEY:admin.ini");
    org.junit.Assert.assertEquals("'" + str10 + "' != '"
            + "MISSING VAL FOR KEY:List the job groups that are active in the database internal job scheduler."
            + "'", str10,
        "MISSING VAL FOR KEY:List the job groups that are active in the database internal job scheduler.");
    org.junit.Assert.assertEquals("'" + str11 + "' != '"
            + "MISSING VAL FOR KEY:The target location of the CSV files: a path to a directory wherein a CSV file per reported field  will be written."
            + "'", str11,
        "MISSING VAL FOR KEY:The target location of the CSV files: a path to a directory wherein a CSV file per reported field  will be written.");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:raft_message_composer" + "'", str12,
        "MISSING VAL FOR KEY:raft_message_composer");
    org.junit.Assert.assertNotNull(wildcardClass13);
  }

  @Test
  public void test4327() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4327");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms.security.createUser");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4328() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4328");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:dbms.clustering.enable");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4329() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4329");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:A list of group names for the server used when configuring load balancing and replication policies.");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4330() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4330");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("fabric.routing.ttl");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4331() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4331");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:causal_clustering.middleware.akka.sink_parallelism");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4332() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4332");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str14 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format("read", objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format("invisible", objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format("dec_dispatch", objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format("RAFT log reader pool size",
        objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "causal_clustering.middleware.akka.sink_parallelism", objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format(
        "The LDAP referral behavior when creating a connection. This is one of `follow`, `ignore` or `throw`.\n* `follow` automatically follows any referrals\n* `ignore` ignores any referrals\n* `throw` throws an exception, which will lead to authentication failure",
        objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format("Path to RAFT messages log.",
        objArray13);
    java.lang.Class<?> wildcardClass23 = objArray13.getClass();
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str14,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str15, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str16,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str17, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:dec_dispatch" + "'",
        str18, "MISSING VAL FOR KEY:dec_dispatch");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:RAFT log reader pool size" + "'", str19,
        "MISSING VAL FOR KEY:RAFT log reader pool size");
    org.junit.Assert.assertEquals("'" + str20 + "' != '"
            + "MISSING VAL FOR KEY:causal_clustering.middleware.akka.sink_parallelism" + "'", str20,
        "MISSING VAL FOR KEY:causal_clustering.middleware.akka.sink_parallelism");
    org.junit.Assert.assertEquals("'" + str21 + "' != '"
            + "MISSING VAL FOR KEY:The LDAP referral behavior when creating a connection. This is one of `follow`, `ignore` or `throw`.\n* `follow` automatically follows any referrals\n* `ignore` ignores any referrals\n* `throw` throws an exception, which will lead to authentication failure"
            + "'", str21,
        "MISSING VAL FOR KEY:The LDAP referral behavior when creating a connection. This is one of `follow`, `ignore` or `throw`.\n* `follow` automatically follows any referrals\n* `ignore` ignores any referrals\n* `throw` throws an exception, which will lead to authentication failure");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "MISSING VAL FOR KEY:Path to RAFT messages log." + "'", str22,
        "MISSING VAL FOR KEY:Path to RAFT messages log.");
    org.junit.Assert.assertNotNull(wildcardClass23);
  }

  @Test
  public void test4333() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4333");
    }
    java.lang.Object[] objArray6 = new java.lang.Object[]{};
    java.lang.String str7 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray6);
    java.lang.String str8 = io.github.onograph.I18N.format("function", objArray6);
    java.lang.String str9 = io.github.onograph.I18N.format("*transaction.rollbacks*", objArray6);
    java.lang.String str10 = io.github.onograph.I18N.format(
        "The total number of page evictions executed by the page cache. (counter)", objArray6);
    java.lang.String str11 = io.github.onograph.I18N.format("", objArray6);
    java.lang.String str12 = io.github.onograph.I18N.format("group", objArray6);
    org.junit.Assert.assertNotNull(objArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
    org.junit.Assert.assertEquals("'" + str7 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str7,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str8 + "' != '" + "MISSING VAL FOR KEY:function" + "'",
        str8, "MISSING VAL FOR KEY:function");
    org.junit.Assert.assertEquals(
        "'" + str9 + "' != '" + "MISSING VAL FOR KEY:*transaction.rollbacks*" + "'", str9,
        "MISSING VAL FOR KEY:*transaction.rollbacks*");
    org.junit.Assert.assertEquals("'" + str10 + "' != '"
            + "MISSING VAL FOR KEY:The total number of page evictions executed by the page cache. (counter)"
            + "'", str10,
        "MISSING VAL FOR KEY:The total number of page evictions executed by the page cache. (counter)");
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MISSING VAL FOR KEY:" + "'", str11,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MISSING VAL FOR KEY:group" + "'", str12,
        "MISSING VAL FOR KEY:group");
  }

  @Test
  public void test4334() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4334");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:uuid");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4335() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4335");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str14 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "dbms.security.ldap.authentication.attribute", objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format("dbms.security.createUser", objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format("BatchSize", objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format("Change the current user's password.",
        objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format(
        "Perform the recovery of the backup store by applying the latest pulled transactions. If disabled, the backup will be faster but a recovery of the backup store will be required at a later time before restoring the data (using the neo4j-admin prepare-restore command). Note: if --prepare-restore is set to false, then --check-consistency is implicitly set to false because the consistency of a none-recovered store can't be checked.",
        objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format("", objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format("snappy_validating_decoder",
        objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:read-only",
        objArray13);
    java.lang.Class<?> wildcardClass23 = objArray13.getClass();
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str14,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute"
            + "'", str15, "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:dbms.security.createUser" + "'", str16,
        "MISSING VAL FOR KEY:dbms.security.createUser");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:BatchSize" + "'",
        str17, "MISSING VAL FOR KEY:BatchSize");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:Change the current user's password." + "'",
        str18, "MISSING VAL FOR KEY:Change the current user's password.");
    org.junit.Assert.assertEquals("'" + str19 + "' != '"
            + "MISSING VAL FOR KEY:Perform the recovery of the backup store by applying the latest pulled transactions. If disabled, the backup will be faster but a recovery of the backup store will be required at a later time before restoring the data (using the neo4j-admin prepare-restore command). Note: if --prepare-restore is set to false, then --check-consistency is implicitly set to false because the consistency of a none-recovered store can't be checked."
            + "'", str19,
        "MISSING VAL FOR KEY:Perform the recovery of the backup store by applying the latest pulled transactions. If disabled, the backup will be faster but a recovery of the backup store will be required at a later time before restoring the data (using the neo4j-admin prepare-restore command). Note: if --prepare-restore is set to false, then --check-consistency is implicitly set to false because the consistency of a none-recovered store can't be checked.");
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "MISSING VAL FOR KEY:" + "'", str20,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:snappy_validating_decoder" + "'", str21,
        "MISSING VAL FOR KEY:snappy_validating_decoder");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:read-only" + "'", str22,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:read-only");
    org.junit.Assert.assertNotNull(wildcardClass23);
  }

  @Test
  public void test4336() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4336");
    }
    java.lang.Object[] objArray12 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str13 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray12);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray12);
    java.lang.String str15 = io.github.onograph.I18N.format("read", objArray12);
    java.lang.String str16 = io.github.onograph.I18N.format("invisible", objArray12);
    java.lang.String str17 = io.github.onograph.I18N.format("dec_dispatch", objArray12);
    java.lang.String str18 = io.github.onograph.I18N.format("PropertyKey", objArray12);
    java.lang.String str19 = io.github.onograph.I18N.format("*db.query.execution*", objArray12);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "The duration for which the replicator will await a new leader.", objArray12);
    org.junit.Assert.assertNotNull(objArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str13,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str14, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str15,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str16, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:dec_dispatch" + "'",
        str17, "MISSING VAL FOR KEY:dec_dispatch");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:PropertyKey" + "'",
        str18, "MISSING VAL FOR KEY:PropertyKey");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:*db.query.execution*" + "'", str19,
        "MISSING VAL FOR KEY:*db.query.execution*");
    org.junit.Assert.assertEquals("'" + str20 + "' != '"
            + "MISSING VAL FOR KEY:The duration for which the replicator will await a new leader."
            + "'", str20,
        "MISSING VAL FOR KEY:The duration for which the replicator will await a new leader.");
  }

  @Test
  public void test4337() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4337");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("dbms.security.removeRoleFromUser");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4338() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4338");
    }
    java.lang.Object[] objArray7 = new java.lang.Object[]{};
    java.lang.String str8 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray7);
    java.lang.String str9 = io.github.onograph.I18N.format(
        "The total number of live threads including daemon and non-daemon threads. (gauge)",
        objArray7);
    java.lang.String str10 = io.github.onograph.I18N.format("Upgraded", objArray7);
    java.lang.String str11 = io.github.onograph.I18N.format("", objArray7);
    java.lang.String str12 = io.github.onograph.I18N.format(
        "Enable reporting metrics about the store size of each database. Deprecated - use metrics.filter instead.",
        objArray7);
    java.lang.String str13 = io.github.onograph.I18N.format("total", objArray7);
    java.lang.String str14 = io.github.onograph.I18N.format("active_write", objArray7);
    java.lang.Class<?> wildcardClass15 = objArray7.getClass();
    org.junit.Assert.assertNotNull(objArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
    org.junit.Assert.assertEquals("'" + str8 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str8,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str9 + "' != '"
            + "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)"
            + "'", str9,
        "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)");
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MISSING VAL FOR KEY:Upgraded" + "'",
        str10, "MISSING VAL FOR KEY:Upgraded");
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MISSING VAL FOR KEY:" + "'", str11,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str12 + "' != '"
            + "MISSING VAL FOR KEY:Enable reporting metrics about the store size of each database. Deprecated - use metrics.filter instead."
            + "'", str12,
        "MISSING VAL FOR KEY:Enable reporting metrics about the store size of each database. Deprecated - use metrics.filter instead.");
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MISSING VAL FOR KEY:total" + "'", str13,
        "MISSING VAL FOR KEY:total");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:active_write" + "'",
        str14, "MISSING VAL FOR KEY:active_write");
    org.junit.Assert.assertNotNull(wildcardClass15);
  }

  @Test
  public void test4339() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4339");
    }
    java.lang.Object[] objArray12 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str13 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray12);
    java.lang.String str14 = io.github.onograph.I18N.format("ccstate", objArray12);
    java.lang.String str15 = io.github.onograph.I18N.format("rollbacks", objArray12);
    java.lang.String str16 = io.github.onograph.I18N.format("error_handler_tail", objArray12);
    java.lang.String str17 = io.github.onograph.I18N.format("dbms.dynamic.setting.allowlist",
        objArray12);
    java.lang.String str18 = io.github.onograph.I18N.format("count", objArray12);
    java.lang.String str19 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:iops", objArray12);
    java.lang.String str20 = io.github.onograph.I18N.format("PropertyKey", objArray12);
    java.lang.String str21 = io.github.onograph.I18N.format("", objArray12);
    java.lang.Class<?> wildcardClass22 = objArray12.getClass();
    org.junit.Assert.assertNotNull(objArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str13 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str13,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:ccstate" + "'",
        str14, "MISSING VAL FOR KEY:ccstate");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:rollbacks" + "'",
        str15, "MISSING VAL FOR KEY:rollbacks");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:error_handler_tail" + "'", str16,
        "MISSING VAL FOR KEY:error_handler_tail");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:dbms.dynamic.setting.allowlist" + "'", str17,
        "MISSING VAL FOR KEY:dbms.dynamic.setting.allowlist");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:count" + "'", str18,
        "MISSING VAL FOR KEY:count");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:iops" + "'", str19,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:iops");
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "MISSING VAL FOR KEY:PropertyKey" + "'",
        str20, "MISSING VAL FOR KEY:PropertyKey");
    org.junit.Assert.assertEquals("'" + str21 + "' != '" + "MISSING VAL FOR KEY:" + "'", str21,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertNotNull(wildcardClass22);
  }

  @Test
  public void test4340() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4340");
    }
    java.lang.Object[] objArray8 = new java.lang.Object[]{};
    java.lang.String str9 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray8);
    java.lang.String str10 = io.github.onograph.I18N.format(
        "The total number of live threads including daemon and non-daemon threads. (gauge)",
        objArray8);
    java.lang.String str11 = io.github.onograph.I18N.format("volumetric", objArray8);
    java.lang.String str12 = io.github.onograph.I18N.format("dbms.security.property_level.enabled",
        objArray8);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "The highest transaction id that has been pulled in the last pull updates by this instance. (counter)",
        objArray8);
    java.lang.String str14 = io.github.onograph.I18N.format("--fallback-to-full", objArray8);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:active", objArray8);
    java.lang.String str16 = io.github.onograph.I18N.format("members", objArray8);
    java.lang.Class<?> wildcardClass17 = objArray8.getClass();
    org.junit.Assert.assertNotNull(objArray8);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
    org.junit.Assert.assertEquals("'" + str9 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str9,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str10 + "' != '"
            + "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)"
            + "'", str10,
        "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)");
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MISSING VAL FOR KEY:volumetric" + "'",
        str11, "MISSING VAL FOR KEY:volumetric");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:dbms.security.property_level.enabled" + "'",
        str12, "MISSING VAL FOR KEY:dbms.security.property_level.enabled");
    org.junit.Assert.assertEquals("'" + str13 + "' != '"
            + "MISSING VAL FOR KEY:The highest transaction id that has been pulled in the last pull updates by this instance. (counter)"
            + "'", str13,
        "MISSING VAL FOR KEY:The highest transaction id that has been pulled in the last pull updates by this instance. (counter)");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:--fallback-to-full" + "'", str14,
        "MISSING VAL FOR KEY:--fallback-to-full");
    org.junit.Assert.assertEquals("'" + str15 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:active" + "'", str15,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:active");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:members" + "'",
        str16, "MISSING VAL FOR KEY:members");
    org.junit.Assert.assertNotNull(wildcardClass17);
  }

  @Test
  public void test4341() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4341");
    }
    java.lang.Object[] objArray8 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str9 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray8);
    java.lang.String str10 = io.github.onograph.I18N.format("*ids_in_use.node", objArray8);
    java.lang.String str11 = io.github.onograph.I18N.format("temp-copy", objArray8);
    java.lang.String str12 = io.github.onograph.I18N.format("dbms.logs.security.format", objArray8);
    java.lang.String str13 = io.github.onograph.I18N.format("*db.query.execution*", objArray8);
    java.lang.Class<?> wildcardClass14 = objArray8.getClass();
    org.junit.Assert.assertNotNull(objArray8);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str9 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str9,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals(
        "'" + str10 + "' != '" + "MISSING VAL FOR KEY:*ids_in_use.node" + "'", str10,
        "MISSING VAL FOR KEY:*ids_in_use.node");
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MISSING VAL FOR KEY:temp-copy" + "'",
        str11, "MISSING VAL FOR KEY:temp-copy");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:dbms.logs.security.format" + "'", str12,
        "MISSING VAL FOR KEY:dbms.logs.security.format");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:*db.query.execution*" + "'", str13,
        "MISSING VAL FOR KEY:*db.query.execution*");
    org.junit.Assert.assertNotNull(wildcardClass14);
  }

  @Test
  public void test4342() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4342");
    }
    java.lang.Object[] objArray16 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str17 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray16);
    java.lang.String str18 = io.github.onograph.I18N.format(
        "dbms.security.ldap.authentication.attribute", objArray16);
    java.lang.String str19 = io.github.onograph.I18N.format("dbms.security.createUser", objArray16);
    java.lang.String str20 = io.github.onograph.I18N.format("BatchSize", objArray16);
    java.lang.String str21 = io.github.onograph.I18N.format("Change the current user's password.",
        objArray16);
    java.lang.String str22 = io.github.onograph.I18N.format(
        "Perform the recovery of the backup store by applying the latest pulled transactions. If disabled, the backup will be faster but a recovery of the backup store will be required at a later time before restoring the data (using the neo4j-admin prepare-restore command). Note: if --prepare-restore is set to false, then --check-consistency is implicitly set to false because the consistency of a none-recovered store can't be checked.",
        objArray16);
    java.lang.String str23 = io.github.onograph.I18N.format("", objArray16);
    java.lang.String str24 = io.github.onograph.I18N.format("snappy_validating_decoder",
        objArray16);
    java.lang.String str25 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:read-only",
        objArray16);
    java.lang.String str26 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:typically-connect-to-random-read-replica", objArray16);
    java.lang.String str27 = io.github.onograph.I18N.format("storeStateReader", objArray16);
    java.lang.String str28 = io.github.onograph.I18N.format("127.0.0.1", objArray16);
    org.junit.Assert.assertNotNull(objArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str17,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute"
            + "'", str18, "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:dbms.security.createUser" + "'", str19,
        "MISSING VAL FOR KEY:dbms.security.createUser");
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "MISSING VAL FOR KEY:BatchSize" + "'",
        str20, "MISSING VAL FOR KEY:BatchSize");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:Change the current user's password." + "'",
        str21, "MISSING VAL FOR KEY:Change the current user's password.");
    org.junit.Assert.assertEquals("'" + str22 + "' != '"
            + "MISSING VAL FOR KEY:Perform the recovery of the backup store by applying the latest pulled transactions. If disabled, the backup will be faster but a recovery of the backup store will be required at a later time before restoring the data (using the neo4j-admin prepare-restore command). Note: if --prepare-restore is set to false, then --check-consistency is implicitly set to false because the consistency of a none-recovered store can't be checked."
            + "'", str22,
        "MISSING VAL FOR KEY:Perform the recovery of the backup store by applying the latest pulled transactions. If disabled, the backup will be faster but a recovery of the backup store will be required at a later time before restoring the data (using the neo4j-admin prepare-restore command). Note: if --prepare-restore is set to false, then --check-consistency is implicitly set to false because the consistency of a none-recovered store can't be checked.");
    org.junit.Assert.assertEquals("'" + str23 + "' != '" + "MISSING VAL FOR KEY:" + "'", str23,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals(
        "'" + str24 + "' != '" + "MISSING VAL FOR KEY:snappy_validating_decoder" + "'", str24,
        "MISSING VAL FOR KEY:snappy_validating_decoder");
    org.junit.Assert.assertEquals(
        "'" + str25 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:read-only" + "'", str25,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:read-only");
    org.junit.Assert.assertEquals("'" + str26 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:typically-connect-to-random-read-replica" + "'",
        str26, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:typically-connect-to-random-read-replica");
    org.junit.Assert.assertEquals(
        "'" + str27 + "' != '" + "MISSING VAL FOR KEY:storeStateReader" + "'", str27,
        "MISSING VAL FOR KEY:storeStateReader");
    org.junit.Assert.assertEquals("'" + str28 + "' != '" + "MISSING VAL FOR KEY:127.0.0.1" + "'",
        str28, "MISSING VAL FOR KEY:127.0.0.1");
  }

  @Test
  public void test4343() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4343");
    }
    java.lang.Object[] objArray11 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str12 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray11);
    java.lang.String str13 = io.github.onograph.I18N.format("writable", objArray11);
    java.lang.String str14 = io.github.onograph.I18N.format("--additional-config", objArray11);
    java.lang.String str15 = io.github.onograph.I18N.format("addresses", objArray11);
    java.lang.String str16 = io.github.onograph.I18N.format("akka.cluster.min-nr-of-members",
        objArray11);
    java.lang.String str17 = io.github.onograph.I18N.format("browser.credential_timeout",
        objArray11);
    java.lang.String str18 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:akka.actor.allow-java-serialization", objArray11);
    org.junit.Assert.assertNotNull(objArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str12,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MISSING VAL FOR KEY:writable" + "'",
        str13, "MISSING VAL FOR KEY:writable");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:--additional-config" + "'", str14,
        "MISSING VAL FOR KEY:--additional-config");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:addresses" + "'",
        str15, "MISSING VAL FOR KEY:addresses");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:akka.cluster.min-nr-of-members" + "'", str16,
        "MISSING VAL FOR KEY:akka.cluster.min-nr-of-members");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:browser.credential_timeout" + "'", str17,
        "MISSING VAL FOR KEY:browser.credential_timeout");
    org.junit.Assert.assertEquals("'" + str18 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:akka.actor.allow-java-serialization" + "'",
        str18, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:akka.actor.allow-java-serialization");
  }

  @Test
  public void test4344() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4344");
    }
    java.lang.Object[] objArray12 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str13 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray12);
    java.lang.String str14 = io.github.onograph.I18N.format("writable", objArray12);
    java.lang.String str15 = io.github.onograph.I18N.format("--additional-config", objArray12);
    java.lang.String str16 = io.github.onograph.I18N.format("addresses", objArray12);
    java.lang.String str17 = io.github.onograph.I18N.format(
        "The total number of Bolt connections opened since this instance started. This includes both succeeded and failed connections. (counter)",
        objArray12);
    java.lang.String str18 = io.github.onograph.I18N.format("", objArray12);
    java.lang.String str19 = io.github.onograph.I18N.format("capacity", objArray12);
    java.lang.String str20 = io.github.onograph.I18N.format("dbms.security.activateUser",
        objArray12);
    java.lang.Class<?> wildcardClass21 = objArray12.getClass();
    org.junit.Assert.assertNotNull(objArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str13,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:writable" + "'",
        str14, "MISSING VAL FOR KEY:writable");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:--additional-config" + "'", str15,
        "MISSING VAL FOR KEY:--additional-config");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:addresses" + "'",
        str16, "MISSING VAL FOR KEY:addresses");
    org.junit.Assert.assertEquals("'" + str17 + "' != '"
            + "MISSING VAL FOR KEY:The total number of Bolt connections opened since this instance started. This includes both succeeded and failed connections. (counter)"
            + "'", str17,
        "MISSING VAL FOR KEY:The total number of Bolt connections opened since this instance started. This includes both succeeded and failed connections. (counter)");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:" + "'", str18,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MISSING VAL FOR KEY:capacity" + "'",
        str19, "MISSING VAL FOR KEY:capacity");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:dbms.security.activateUser" + "'", str20,
        "MISSING VAL FOR KEY:dbms.security.activateUser");
    org.junit.Assert.assertNotNull(wildcardClass21);
  }

  @Test
  public void test4345() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4345");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str14 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format("read", objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format("invisible", objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format("dec_dispatch", objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format(
        "Maximum timeout for cluster status request execution", objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format("", objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format("FunctionQualifier", objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format("RelationshipType", objArray13);
    java.lang.Class<?> wildcardClass23 = objArray13.getClass();
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str14,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str15, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str16,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str17, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:dec_dispatch" + "'",
        str18, "MISSING VAL FOR KEY:dec_dispatch");
    org.junit.Assert.assertEquals("'" + str19 + "' != '"
            + "MISSING VAL FOR KEY:Maximum timeout for cluster status request execution" + "'", str19,
        "MISSING VAL FOR KEY:Maximum timeout for cluster status request execution");
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "MISSING VAL FOR KEY:" + "'", str20,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:FunctionQualifier" + "'", str21,
        "MISSING VAL FOR KEY:FunctionQualifier");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "MISSING VAL FOR KEY:RelationshipType" + "'", str22,
        "MISSING VAL FOR KEY:RelationshipType");
    org.junit.Assert.assertNotNull(wildcardClass23);
  }

  @Test
  public void test4346() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4346");
    }
    java.lang.Object[] objArray10 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str11 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray10);
    java.lang.String str12 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray10);
    java.lang.String str13 = io.github.onograph.I18N.format("read", objArray10);
    java.lang.String str14 = io.github.onograph.I18N.format("invisible", objArray10);
    java.lang.String str15 = io.github.onograph.I18N.format("false", objArray10);
    java.lang.String str16 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:ids_in_use.*",
        objArray10);
    org.junit.Assert.assertNotNull(objArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str11,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str12, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str13,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str14, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:false" + "'", str15,
        "MISSING VAL FOR KEY:false");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:ids_in_use.*" + "'",
        str16, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:ids_in_use.*");
  }

  @Test
  public void test4347() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4347");
    }
    java.lang.Object[] objArray9 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str10 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray9);
    java.lang.String str11 = io.github.onograph.I18N.format("true", objArray9);
    java.lang.String str12 = io.github.onograph.I18N.format("metrics.neo4j.counts.enabled",
        objArray9);
    java.lang.String str13 = io.github.onograph.I18N.format("authentication", objArray9);
    java.lang.String str14 = io.github.onograph.I18N.format("fabric.routing.servers", objArray9);
    java.lang.Class<?> wildcardClass15 = objArray9.getClass();
    org.junit.Assert.assertNotNull(objArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str10 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str10,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MISSING VAL FOR KEY:true" + "'", str11,
        "MISSING VAL FOR KEY:true");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:metrics.neo4j.counts.enabled" + "'", str12,
        "MISSING VAL FOR KEY:metrics.neo4j.counts.enabled");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:authentication" + "'", str13,
        "MISSING VAL FOR KEY:authentication");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:fabric.routing.servers" + "'", str14,
        "MISSING VAL FOR KEY:fabric.routing.servers");
    org.junit.Assert.assertNotNull(wildcardClass15);
  }

  @Test
  public void test4348() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4348");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("hours");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4349() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4349");
    }
    java.lang.Object[] objArray16 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str17 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray16);
    java.lang.String str18 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray16);
    java.lang.String str19 = io.github.onograph.I18N.format("read", objArray16);
    java.lang.String str20 = io.github.onograph.I18N.format("invisible", objArray16);
    java.lang.String str21 = io.github.onograph.I18N.format("dec_dispatch", objArray16);
    java.lang.String str22 = io.github.onograph.I18N.format("PropertyKey", objArray16);
    java.lang.String str23 = io.github.onograph.I18N.format("relationship-type-distribution",
        objArray16);
    java.lang.String str24 = io.github.onograph.I18N.format("causal_clustering.refuse_to_be_leader",
        objArray16);
    java.lang.String str25 = io.github.onograph.I18N.format("DEFAULT", objArray16);
    java.lang.String str26 = io.github.onograph.I18N.format(
        "Maximum amount of lag accepted for a new follower to join the Raft group", objArray16);
    java.lang.String str27 = io.github.onograph.I18N.format("prometheus", objArray16);
    java.lang.String str28 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:editor", objArray16);
    java.lang.Class<?> wildcardClass29 = objArray16.getClass();
    org.junit.Assert.assertNotNull(objArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str17,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str18, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str19,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str20, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str21 + "' != '" + "MISSING VAL FOR KEY:dec_dispatch" + "'",
        str21, "MISSING VAL FOR KEY:dec_dispatch");
    org.junit.Assert.assertEquals("'" + str22 + "' != '" + "MISSING VAL FOR KEY:PropertyKey" + "'",
        str22, "MISSING VAL FOR KEY:PropertyKey");
    org.junit.Assert.assertEquals(
        "'" + str23 + "' != '" + "MISSING VAL FOR KEY:relationship-type-distribution" + "'", str23,
        "MISSING VAL FOR KEY:relationship-type-distribution");
    org.junit.Assert.assertEquals(
        "'" + str24 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.refuse_to_be_leader" + "'",
        str24, "MISSING VAL FOR KEY:causal_clustering.refuse_to_be_leader");
    org.junit.Assert.assertEquals("'" + str25 + "' != '" + "MISSING VAL FOR KEY:DEFAULT" + "'",
        str25, "MISSING VAL FOR KEY:DEFAULT");
    org.junit.Assert.assertEquals("'" + str26 + "' != '"
            + "MISSING VAL FOR KEY:Maximum amount of lag accepted for a new follower to join the Raft group"
            + "'", str26,
        "MISSING VAL FOR KEY:Maximum amount of lag accepted for a new follower to join the Raft group");
    org.junit.Assert.assertEquals("'" + str27 + "' != '" + "MISSING VAL FOR KEY:prometheus" + "'",
        str27, "MISSING VAL FOR KEY:prometheus");
    org.junit.Assert.assertEquals("'" + str28 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:editor" + "'", str28,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:editor");
    org.junit.Assert.assertNotNull(wildcardClass29);
  }

  @Test
  public void test4350() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4350");
    }
    java.lang.Object[] objArray9 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str10 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray9);
    java.lang.String str11 = io.github.onograph.I18N.format("status", objArray9);
    java.lang.String str12 = io.github.onograph.I18N.format("raft-server", objArray9);
    java.lang.String str13 = io.github.onograph.I18N.format("transaction.*", objArray9);
    java.lang.String str14 = io.github.onograph.I18N.format("metrics.filter", objArray9);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:createProperty", objArray9);
    org.junit.Assert.assertNotNull(objArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str10 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str10,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MISSING VAL FOR KEY:status" + "'",
        str11, "MISSING VAL FOR KEY:status");
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MISSING VAL FOR KEY:raft-server" + "'",
        str12, "MISSING VAL FOR KEY:raft-server");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:transaction.*" + "'", str13,
        "MISSING VAL FOR KEY:transaction.*");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:metrics.filter" + "'", str14,
        "MISSING VAL FOR KEY:metrics.filter");
    org.junit.Assert.assertEquals("'" + str15 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:createProperty" + "'", str15,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:createProperty");
  }

  @Test
  public void test4351() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4351");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str14 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format("read", objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format("invisible", objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format("relationship-type-distribution",
        objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format(
        "Path to the home directory for the copied database. Default is the same as the database copied from.",
        objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format("connections_closed", objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format("dbms.backup.listen_address",
        objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:SCHEMA",
        objArray13);
    java.lang.Class<?> wildcardClass23 = objArray13.getClass();
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str14,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str15, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str16,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str17, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:relationship-type-distribution" + "'", str18,
        "MISSING VAL FOR KEY:relationship-type-distribution");
    org.junit.Assert.assertEquals("'" + str19 + "' != '"
            + "MISSING VAL FOR KEY:Path to the home directory for the copied database. Default is the same as the database copied from."
            + "'", str19,
        "MISSING VAL FOR KEY:Path to the home directory for the copied database. Default is the same as the database copied from.");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:connections_closed" + "'", str20,
        "MISSING VAL FOR KEY:connections_closed");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:dbms.backup.listen_address" + "'", str21,
        "MISSING VAL FOR KEY:dbms.backup.listen_address");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:SCHEMA" + "'", str22,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:SCHEMA");
    org.junit.Assert.assertNotNull(wildcardClass23);
  }

  @Test
  public void test4352() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4352");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:rotation_events");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4353() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4353");
    }
    java.lang.Object[] objArray12 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str13 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray12);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray12);
    java.lang.String str15 = io.github.onograph.I18N.format("read", objArray12);
    java.lang.String str16 = io.github.onograph.I18N.format("invisible", objArray12);
    java.lang.String str17 = io.github.onograph.I18N.format("fabric.routing.ttl", objArray12);
    java.lang.String str18 = io.github.onograph.I18N.format("continuous", objArray12);
    java.lang.String str19 = io.github.onograph.I18N.format("messages_failed", objArray12);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:snappy_validating_decoder",
        objArray12);
    org.junit.Assert.assertNotNull(objArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str13,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str14, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str15,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str16, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:fabric.routing.ttl" + "'", str17,
        "MISSING VAL FOR KEY:fabric.routing.ttl");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:continuous" + "'",
        str18, "MISSING VAL FOR KEY:continuous");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:messages_failed" + "'", str19,
        "MISSING VAL FOR KEY:messages_failed");
    org.junit.Assert.assertEquals("'" + str20 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:snappy_validating_decoder"
            + "'", str20,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:snappy_validating_decoder");
  }

  @Test
  public void test4354() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4354");
    }
    java.lang.Object[] objArray16 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str17 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray16);
    java.lang.String str18 = io.github.onograph.I18N.format(
        "dbms.security.ldap.authentication.attribute", objArray16);
    java.lang.String str19 = io.github.onograph.I18N.format("dbms.security.createUser", objArray16);
    java.lang.String str20 = io.github.onograph.I18N.format("BatchSize", objArray16);
    java.lang.String str21 = io.github.onograph.I18N.format("Change the current user's password.",
        objArray16);
    java.lang.String str22 = io.github.onograph.I18N.format(
        "Perform the recovery of the backup store by applying the latest pulled transactions. If disabled, the backup will be faster but a recovery of the backup store will be required at a later time before restoring the data (using the neo4j-admin prepare-restore command). Note: if --prepare-restore is set to false, then --check-consistency is implicitly set to false because the consistency of a none-recovered store can't be checked.",
        objArray16);
    java.lang.String str23 = io.github.onograph.I18N.format("", objArray16);
    java.lang.String str24 = io.github.onograph.I18N.format("snappy_validating_decoder",
        objArray16);
    java.lang.String str25 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:read-only",
        objArray16);
    java.lang.String str26 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:typically-connect-to-random-read-replica", objArray16);
    java.lang.String str27 = io.github.onograph.I18N.format("storeStateReader", objArray16);
    java.lang.String str28 = io.github.onograph.I18N.format(
        "Use secure communication with the LDAP server using opportunistic TLS. First an initial insecure connection will be made with the LDAP server, and a STARTTLS command will be issued to negotiate an upgrade of the connection to TLS before initiating authentication.",
        objArray16);
    org.junit.Assert.assertNotNull(objArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str17,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute"
            + "'", str18, "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:dbms.security.createUser" + "'", str19,
        "MISSING VAL FOR KEY:dbms.security.createUser");
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "MISSING VAL FOR KEY:BatchSize" + "'",
        str20, "MISSING VAL FOR KEY:BatchSize");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:Change the current user's password." + "'",
        str21, "MISSING VAL FOR KEY:Change the current user's password.");
    org.junit.Assert.assertEquals("'" + str22 + "' != '"
            + "MISSING VAL FOR KEY:Perform the recovery of the backup store by applying the latest pulled transactions. If disabled, the backup will be faster but a recovery of the backup store will be required at a later time before restoring the data (using the neo4j-admin prepare-restore command). Note: if --prepare-restore is set to false, then --check-consistency is implicitly set to false because the consistency of a none-recovered store can't be checked."
            + "'", str22,
        "MISSING VAL FOR KEY:Perform the recovery of the backup store by applying the latest pulled transactions. If disabled, the backup will be faster but a recovery of the backup store will be required at a later time before restoring the data (using the neo4j-admin prepare-restore command). Note: if --prepare-restore is set to false, then --check-consistency is implicitly set to false because the consistency of a none-recovered store can't be checked.");
    org.junit.Assert.assertEquals("'" + str23 + "' != '" + "MISSING VAL FOR KEY:" + "'", str23,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals(
        "'" + str24 + "' != '" + "MISSING VAL FOR KEY:snappy_validating_decoder" + "'", str24,
        "MISSING VAL FOR KEY:snappy_validating_decoder");
    org.junit.Assert.assertEquals(
        "'" + str25 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:read-only" + "'", str25,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:read-only");
    org.junit.Assert.assertEquals("'" + str26 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:typically-connect-to-random-read-replica" + "'",
        str26, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:typically-connect-to-random-read-replica");
    org.junit.Assert.assertEquals(
        "'" + str27 + "' != '" + "MISSING VAL FOR KEY:storeStateReader" + "'", str27,
        "MISSING VAL FOR KEY:storeStateReader");
    org.junit.Assert.assertEquals("'" + str28 + "' != '"
            + "MISSING VAL FOR KEY:Use secure communication with the LDAP server using opportunistic TLS. First an initial insecure connection will be made with the LDAP server, and a STARTTLS command will be issued to negotiate an upgrade of the connection to TLS before initiating authentication."
            + "'", str28,
        "MISSING VAL FOR KEY:Use secure communication with the LDAP server using opportunistic TLS. First an initial insecure connection will be made with the LDAP server, and a STARTTLS command will be issued to negotiate an upgrade of the connection to TLS before initiating authentication.");
  }

  @Test
  public void test4355() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4355");
    }
    java.lang.Object[] objArray14 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str15 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray14);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray14);
    java.lang.String str17 = io.github.onograph.I18N.format("read", objArray14);
    java.lang.String str18 = io.github.onograph.I18N.format("invisible", objArray14);
    java.lang.String str19 = io.github.onograph.I18N.format("dec_dispatch", objArray14);
    java.lang.String str20 = io.github.onograph.I18N.format("init_server_handler", objArray14);
    java.lang.String str21 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:Discovery cluster member size. (gauge)", objArray14);
    java.lang.String str22 = io.github.onograph.I18N.format("graphIds", objArray14);
    java.lang.String str23 = io.github.onograph.I18N.format(
        "Name of the database associated to the Fabric graph.", objArray14);
    java.lang.String str24 = io.github.onograph.I18N.format("file.descriptors.count", objArray14);
    org.junit.Assert.assertNotNull(objArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str15,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str16, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str17,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str18, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MISSING VAL FOR KEY:dec_dispatch" + "'",
        str19, "MISSING VAL FOR KEY:dec_dispatch");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:init_server_handler" + "'", str20,
        "MISSING VAL FOR KEY:init_server_handler");
    org.junit.Assert.assertEquals("'" + str21 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Discovery cluster member size. (gauge)" + "'",
        str21, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Discovery cluster member size. (gauge)");
    org.junit.Assert.assertEquals("'" + str22 + "' != '" + "MISSING VAL FOR KEY:graphIds" + "'",
        str22, "MISSING VAL FOR KEY:graphIds");
    org.junit.Assert.assertEquals("'" + str23 + "' != '"
            + "MISSING VAL FOR KEY:Name of the database associated to the Fabric graph." + "'", str23,
        "MISSING VAL FOR KEY:Name of the database associated to the Fabric graph.");
    org.junit.Assert.assertEquals(
        "'" + str24 + "' != '" + "MISSING VAL FOR KEY:file.descriptors.count" + "'", str24,
        "MISSING VAL FOR KEY:file.descriptors.count");
  }

  @Test
  public void test4356() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4356");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Allows a core to down all unreachable members if it needs to do that to allow a new core to join");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4357() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4357");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("dbms.cluster.benchmark.stop");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4358() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4358");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("DeletedDatabase");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4359() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4359");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "causal_clustering.in_flight_cache.max_entries");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4360() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4360");
    }
    java.lang.Object[] objArray14 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str15 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray14);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray14);
    java.lang.String str17 = io.github.onograph.I18N.format("read", objArray14);
    java.lang.String str18 = io.github.onograph.I18N.format("invisible", objArray14);
    java.lang.String str19 = io.github.onograph.I18N.format("dec_dispatch", objArray14);
    java.lang.String str20 = io.github.onograph.I18N.format("init_server_handler", objArray14);
    java.lang.String str21 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray14);
    java.lang.String str22 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:enc_req_precopy",
        objArray14);
    java.lang.String str23 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:dbms.scheduler.groups", objArray14);
    java.lang.String str24 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:time", objArray14);
    org.junit.Assert.assertNotNull(objArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str15,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str16, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str17,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str18, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MISSING VAL FOR KEY:dec_dispatch" + "'",
        str19, "MISSING VAL FOR KEY:dec_dispatch");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:init_server_handler" + "'", str20,
        "MISSING VAL FOR KEY:init_server_handler");
    org.junit.Assert.assertEquals("'" + str21 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str21,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:enc_req_precopy" + "'",
        str22, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:enc_req_precopy");
    org.junit.Assert.assertEquals(
        "'" + str23 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms.scheduler.groups"
            + "'", str23, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms.scheduler.groups");
    org.junit.Assert.assertEquals(
        "'" + str24 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:time" + "'", str24,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:time");
  }

  @Test
  public void test4361() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4361");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "Configure if the `dbms.routing.getRoutingTable()` procedure should include followers as read endpoints or return only read replicas. Note: if there are no read replicas in the cluster, followers are returned as read end points regardless the value of this setting. Defaults to true so that followers are available for read-only queries in a typical heterogeneous setup.");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4362() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4362");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str14 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format("status", objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "Maximum number of akka restart attempts before we panic the DBMS. Set to -1 to retry forever",
        objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format(
        "Maximum number of history files for the csv files.", objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format("elapsedTimeMs", objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format(
        "The total number of Bolt connections sitting idle. (gauge)", objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "causal_clustering.cluster_binding_retry_timeout", objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format("Store copy chunk size", objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:follow",
        objArray13);
    java.lang.String str23 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:passwordChangeRequired", objArray13);
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str14 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str14,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:status" + "'",
        str15, "MISSING VAL FOR KEY:status");
    org.junit.Assert.assertEquals("'" + str16 + "' != '"
            + "MISSING VAL FOR KEY:Maximum number of akka restart attempts before we panic the DBMS. Set to -1 to retry forever"
            + "'", str16,
        "MISSING VAL FOR KEY:Maximum number of akka restart attempts before we panic the DBMS. Set to -1 to retry forever");
    org.junit.Assert.assertEquals("'" + str17 + "' != '"
            + "MISSING VAL FOR KEY:Maximum number of history files for the csv files." + "'", str17,
        "MISSING VAL FOR KEY:Maximum number of history files for the csv files.");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:elapsedTimeMs" + "'", str18,
        "MISSING VAL FOR KEY:elapsedTimeMs");
    org.junit.Assert.assertEquals("'" + str19 + "' != '"
            + "MISSING VAL FOR KEY:The total number of Bolt connections sitting idle. (gauge)" + "'",
        str19, "MISSING VAL FOR KEY:The total number of Bolt connections sitting idle. (gauge)");
    org.junit.Assert.assertEquals("'" + str20 + "' != '"
            + "MISSING VAL FOR KEY:causal_clustering.cluster_binding_retry_timeout" + "'", str20,
        "MISSING VAL FOR KEY:causal_clustering.cluster_binding_retry_timeout");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:Store copy chunk size" + "'", str21,
        "MISSING VAL FOR KEY:Store copy chunk size");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:follow" + "'", str22,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:follow");
    org.junit.Assert.assertEquals(
        "'" + str23 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:passwordChangeRequired"
            + "'", str23, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:passwordChangeRequired");
  }

  @Test
  public void test4363() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4363");
    }
    java.lang.Object[] objArray9 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str10 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray9);
    java.lang.String str11 = io.github.onograph.I18N.format(
        "dbms.security.ldap.authentication.attribute", objArray9);
    java.lang.String str12 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:Number of available processors", objArray9);
    java.lang.String str13 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:handshake_server",
        objArray9);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "Perform authentication by searching for an unique attribute of a user.\nThis setting is deprecated and has been replaced with `dbms.security.ldap.authentication.search_for_attribute`.",
        objArray9);
    org.junit.Assert.assertNotNull(objArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str10 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str10,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute"
            + "'", str11, "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute");
    org.junit.Assert.assertEquals("'" + str12 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Number of available processors" + "'", str12,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Number of available processors");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:handshake_server" + "'",
        str13, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:handshake_server");
    org.junit.Assert.assertEquals("'" + str14 + "' != '"
            + "MISSING VAL FOR KEY:Perform authentication by searching for an unique attribute of a user.\nThis setting is deprecated and has been replaced with `dbms.security.ldap.authentication.search_for_attribute`."
            + "'", str14,
        "MISSING VAL FOR KEY:Perform authentication by searching for an unique attribute of a user.\nThis setting is deprecated and has been replaced with `dbms.security.ldap.authentication.search_for_attribute`.");
  }

  @Test
  public void test4364() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4364");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str14 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format("status", objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format("", objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format("bolt.*", objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format(
        "Include metadata in file. Can't be used for backing system database.\nroles - commands to create the roles and privileges (for both database and graph) that affect the use of the database\nusers - commands to create the users that can use the database and their role assignments \nall - include roles and users",
        objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:PUBLIC",
        objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format("raftBootstrap", objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format(
        "A comma separated list of property keys to ignore. Can not be combined with --skip-node-properties, --keep-only-node-properties, --skip-relationship-properties or --keep-only-relationship-properties.",
        objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format("memory.pool", objArray13);
    java.lang.String str23 = io.github.onograph.I18N.format("causal_clustering.catchup.*",
        objArray13);
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str14 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str14,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:status" + "'",
        str15, "MISSING VAL FOR KEY:status");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:" + "'", str16,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:bolt.*" + "'",
        str17, "MISSING VAL FOR KEY:bolt.*");
    org.junit.Assert.assertEquals("'" + str18 + "' != '"
            + "MISSING VAL FOR KEY:Include metadata in file. Can't be used for backing system database.\nroles - commands to create the roles and privileges (for both database and graph) that affect the use of the database\nusers - commands to create the users that can use the database and their role assignments \nall - include roles and users"
            + "'", str18,
        "MISSING VAL FOR KEY:Include metadata in file. Can't be used for backing system database.\nroles - commands to create the roles and privileges (for both database and graph) that affect the use of the database\nusers - commands to create the users that can use the database and their role assignments \nall - include roles and users");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:PUBLIC" + "'", str19,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:PUBLIC");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:raftBootstrap" + "'", str20,
        "MISSING VAL FOR KEY:raftBootstrap");
    org.junit.Assert.assertEquals("'" + str21 + "' != '"
            + "MISSING VAL FOR KEY:A comma separated list of property keys to ignore. Can not be combined with --skip-node-properties, --keep-only-node-properties, --skip-relationship-properties or --keep-only-relationship-properties."
            + "'", str21,
        "MISSING VAL FOR KEY:A comma separated list of property keys to ignore. Can not be combined with --skip-node-properties, --keep-only-node-properties, --skip-relationship-properties or --keep-only-relationship-properties.");
    org.junit.Assert.assertEquals("'" + str22 + "' != '" + "MISSING VAL FOR KEY:memory.pool" + "'",
        str22, "MISSING VAL FOR KEY:memory.pool");
    org.junit.Assert.assertEquals(
        "'" + str23 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.catchup.*" + "'", str23,
        "MISSING VAL FOR KEY:causal_clustering.catchup.*");
  }

  @Test
  public void test4365() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4365");
    }
    java.lang.Object[] objArray14 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str15 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray14);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "dbms.security.ldap.authentication.attribute", objArray14);
    java.lang.String str17 = io.github.onograph.I18N.format("dbms.security.createUser", objArray14);
    java.lang.String str18 = io.github.onograph.I18N.format("BatchSize", objArray14);
    java.lang.String str19 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:replication_maybe",
        objArray14);
    java.lang.String str20 = io.github.onograph.I18N.format("dbms.clustering.enable", objArray14);
    java.lang.String str21 = io.github.onograph.I18N.format(
        "Network interface and port for the transaction shipping server to listen on. Please note that it is also possible to run the backup client against this port so always limit access to it via the firewall and configure an ssl policy.",
        objArray14);
    java.lang.String str22 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:zlib_decoder", objArray14);
    java.lang.String str23 = io.github.onograph.I18N.format(
        "causal_clustering.state_machine_apply_max_batch_size", objArray14);
    java.lang.String str24 = io.github.onograph.I18N.format(
        "The target location of the CSV files: a path to a directory wherein a CSV file per reported field  will be written.",
        objArray14);
    java.lang.Class<?> wildcardClass25 = objArray14.getClass();
    org.junit.Assert.assertNotNull(objArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str15,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute"
            + "'", str16, "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:dbms.security.createUser" + "'", str17,
        "MISSING VAL FOR KEY:dbms.security.createUser");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:BatchSize" + "'",
        str18, "MISSING VAL FOR KEY:BatchSize");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:replication_maybe" + "'",
        str19, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:replication_maybe");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:dbms.clustering.enable" + "'", str20,
        "MISSING VAL FOR KEY:dbms.clustering.enable");
    org.junit.Assert.assertEquals("'" + str21 + "' != '"
            + "MISSING VAL FOR KEY:Network interface and port for the transaction shipping server to listen on. Please note that it is also possible to run the backup client against this port so always limit access to it via the firewall and configure an ssl policy."
            + "'", str21,
        "MISSING VAL FOR KEY:Network interface and port for the transaction shipping server to listen on. Please note that it is also possible to run the backup client against this port so always limit access to it via the firewall and configure an ssl policy.");
    org.junit.Assert.assertEquals("'" + str22 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:zlib_decoder" + "'", str22,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:zlib_decoder");
    org.junit.Assert.assertEquals("'" + str23 + "' != '"
            + "MISSING VAL FOR KEY:causal_clustering.state_machine_apply_max_batch_size" + "'", str23,
        "MISSING VAL FOR KEY:causal_clustering.state_machine_apply_max_batch_size");
    org.junit.Assert.assertEquals("'" + str24 + "' != '"
            + "MISSING VAL FOR KEY:The target location of the CSV files: a path to a directory wherein a CSV file per reported field  will be written."
            + "'", str24,
        "MISSING VAL FOR KEY:The target location of the CSV files: a path to a directory wherein a CSV file per reported field  will be written.");
    org.junit.Assert.assertNotNull(wildcardClass25);
  }

  @Test
  public void test4366() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4366");
    }
    java.lang.Object[] objArray15 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str16 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray15);
    java.lang.String str17 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray15);
    java.lang.String str18 = io.github.onograph.I18N.format("read", objArray15);
    java.lang.String str19 = io.github.onograph.I18N.format("invisible", objArray15);
    java.lang.String str20 = io.github.onograph.I18N.format("dec_dispatch", objArray15);
    java.lang.String str21 = io.github.onograph.I18N.format("localhost", objArray15);
    java.lang.String str22 = io.github.onograph.I18N.format(
        "dbms.security.ldap.authorization.group_membership_attributes", objArray15);
    java.lang.String str23 = io.github.onograph.I18N.format("", objArray15);
    java.lang.String str24 = io.github.onograph.I18N.format("countAllRelationshipMetrics",
        objArray15);
    java.lang.String str25 = io.github.onograph.I18N.format("java.naming.security.principal",
        objArray15);
    java.lang.String str26 = io.github.onograph.I18N.format(
        "In-flight cache element count. (gauge)", objArray15);
    java.lang.Class<?> wildcardClass27 = objArray15.getClass();
    org.junit.Assert.assertNotNull(objArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str16,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str17, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str18,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str19, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "MISSING VAL FOR KEY:dec_dispatch" + "'",
        str20, "MISSING VAL FOR KEY:dec_dispatch");
    org.junit.Assert.assertEquals("'" + str21 + "' != '" + "MISSING VAL FOR KEY:localhost" + "'",
        str21, "MISSING VAL FOR KEY:localhost");
    org.junit.Assert.assertEquals("'" + str22 + "' != '"
            + "MISSING VAL FOR KEY:dbms.security.ldap.authorization.group_membership_attributes" + "'",
        str22, "MISSING VAL FOR KEY:dbms.security.ldap.authorization.group_membership_attributes");
    org.junit.Assert.assertEquals("'" + str23 + "' != '" + "MISSING VAL FOR KEY:" + "'", str23,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals(
        "'" + str24 + "' != '" + "MISSING VAL FOR KEY:countAllRelationshipMetrics" + "'", str24,
        "MISSING VAL FOR KEY:countAllRelationshipMetrics");
    org.junit.Assert.assertEquals(
        "'" + str25 + "' != '" + "MISSING VAL FOR KEY:java.naming.security.principal" + "'", str25,
        "MISSING VAL FOR KEY:java.naming.security.principal");
    org.junit.Assert.assertEquals(
        "'" + str26 + "' != '" + "MISSING VAL FOR KEY:In-flight cache element count. (gauge)" + "'",
        str26, "MISSING VAL FOR KEY:In-flight cache element count. (gauge)");
    org.junit.Assert.assertNotNull(wildcardClass27);
  }

  @Test
  public void test4367() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4367");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:--to-data-directory");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4368() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4368");
    }
    java.lang.Object[] objArray18 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str19 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray18);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray18);
    java.lang.String str21 = io.github.onograph.I18N.format("read", objArray18);
    java.lang.String str22 = io.github.onograph.I18N.format("invisible", objArray18);
    java.lang.String str23 = io.github.onograph.I18N.format("dec_dispatch", objArray18);
    java.lang.String str24 = io.github.onograph.I18N.format("PropertyKey", objArray18);
    java.lang.String str25 = io.github.onograph.I18N.format("relationship-type-distribution",
        objArray18);
    java.lang.String str26 = io.github.onograph.I18N.format("causal_clustering.refuse_to_be_leader",
        objArray18);
    java.lang.String str27 = io.github.onograph.I18N.format("DEFAULT", objArray18);
    java.lang.String str28 = io.github.onograph.I18N.format(
        "Maximum amount of lag accepted for a new follower to join the Raft group", objArray18);
    java.lang.String str29 = io.github.onograph.I18N.format("prometheus", objArray18);
    java.lang.String str30 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:DEFAULT", objArray18);
    java.lang.String str31 = io.github.onograph.I18N.format("dbms.security.ldap.referral",
        objArray18);
    java.lang.String str32 = io.github.onograph.I18N.format("", objArray18);
    java.lang.Class<?> wildcardClass33 = objArray18.getClass();
    org.junit.Assert.assertNotNull(objArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str19,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str20, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str21 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str21,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str22 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str22, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str23 + "' != '" + "MISSING VAL FOR KEY:dec_dispatch" + "'",
        str23, "MISSING VAL FOR KEY:dec_dispatch");
    org.junit.Assert.assertEquals("'" + str24 + "' != '" + "MISSING VAL FOR KEY:PropertyKey" + "'",
        str24, "MISSING VAL FOR KEY:PropertyKey");
    org.junit.Assert.assertEquals(
        "'" + str25 + "' != '" + "MISSING VAL FOR KEY:relationship-type-distribution" + "'", str25,
        "MISSING VAL FOR KEY:relationship-type-distribution");
    org.junit.Assert.assertEquals(
        "'" + str26 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.refuse_to_be_leader" + "'",
        str26, "MISSING VAL FOR KEY:causal_clustering.refuse_to_be_leader");
    org.junit.Assert.assertEquals("'" + str27 + "' != '" + "MISSING VAL FOR KEY:DEFAULT" + "'",
        str27, "MISSING VAL FOR KEY:DEFAULT");
    org.junit.Assert.assertEquals("'" + str28 + "' != '"
            + "MISSING VAL FOR KEY:Maximum amount of lag accepted for a new follower to join the Raft group"
            + "'", str28,
        "MISSING VAL FOR KEY:Maximum amount of lag accepted for a new follower to join the Raft group");
    org.junit.Assert.assertEquals("'" + str29 + "' != '" + "MISSING VAL FOR KEY:prometheus" + "'",
        str29, "MISSING VAL FOR KEY:prometheus");
    org.junit.Assert.assertEquals("'" + str30 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:DEFAULT" + "'", str30,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:DEFAULT");
    org.junit.Assert.assertEquals(
        "'" + str31 + "' != '" + "MISSING VAL FOR KEY:dbms.security.ldap.referral" + "'", str31,
        "MISSING VAL FOR KEY:dbms.security.ldap.referral");
    org.junit.Assert.assertEquals("'" + str32 + "' != '" + "MISSING VAL FOR KEY:" + "'", str32,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertNotNull(wildcardClass33);
  }

  @Test
  public void test4369() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4369");
    }
    java.lang.Object[] objArray6 = new java.lang.Object[]{};
    java.lang.String str7 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray6);
    java.lang.String str8 = io.github.onograph.I18N.format(
        "The total number of live threads including daemon and non-daemon threads. (gauge)",
        objArray6);
    java.lang.String str9 = io.github.onograph.I18N.format("volumetric", objArray6);
    java.lang.String str10 = io.github.onograph.I18N.format(
        "The total number of pull requests made by this instance. (counter)", objArray6);
    java.lang.String str11 = io.github.onograph.I18N.format("", objArray6);
    java.lang.String str12 = io.github.onograph.I18N.format("metrics.neo4j.checkpointing.enabled",
        objArray6);
    java.lang.Class<?> wildcardClass13 = objArray6.getClass();
    org.junit.Assert.assertNotNull(objArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
    org.junit.Assert.assertEquals("'" + str7 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str7,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str8 + "' != '"
            + "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)"
            + "'", str8,
        "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MISSING VAL FOR KEY:volumetric" + "'",
        str9, "MISSING VAL FOR KEY:volumetric");
    org.junit.Assert.assertEquals("'" + str10 + "' != '"
            + "MISSING VAL FOR KEY:The total number of pull requests made by this instance. (counter)"
            + "'", str10,
        "MISSING VAL FOR KEY:The total number of pull requests made by this instance. (counter)");
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MISSING VAL FOR KEY:" + "'", str11,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:metrics.neo4j.checkpointing.enabled" + "'",
        str12, "MISSING VAL FOR KEY:metrics.neo4j.checkpointing.enabled");
    org.junit.Assert.assertNotNull(wildcardClass13);
  }

  @Test
  public void test4370() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4370");
    }
    java.lang.Object[] objArray12 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str13 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray12);
    java.lang.String str14 = io.github.onograph.I18N.format("status", objArray12);
    java.lang.String str15 = io.github.onograph.I18N.format("", objArray12);
    java.lang.String str16 = io.github.onograph.I18N.format("bolt.*", objArray12);
    java.lang.String str17 = io.github.onograph.I18N.format(
        "Include metadata in file. Can't be used for backing system database.\nroles - commands to create the roles and privileges (for both database and graph) that affect the use of the database\nusers - commands to create the users that can use the database and their role assignments \nall - include roles and users",
        objArray12);
    java.lang.String str18 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:PUBLIC",
        objArray12);
    java.lang.String str19 = io.github.onograph.I18N.format("raftBootstrap", objArray12);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:snappy_encoder",
        objArray12);
    java.lang.String str21 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:The level of middleware logging", objArray12);
    java.lang.Class<?> wildcardClass22 = objArray12.getClass();
    org.junit.Assert.assertNotNull(objArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str13 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str13,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:status" + "'",
        str14, "MISSING VAL FOR KEY:status");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:" + "'", str15,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:bolt.*" + "'",
        str16, "MISSING VAL FOR KEY:bolt.*");
    org.junit.Assert.assertEquals("'" + str17 + "' != '"
            + "MISSING VAL FOR KEY:Include metadata in file. Can't be used for backing system database.\nroles - commands to create the roles and privileges (for both database and graph) that affect the use of the database\nusers - commands to create the users that can use the database and their role assignments \nall - include roles and users"
            + "'", str17,
        "MISSING VAL FOR KEY:Include metadata in file. Can't be used for backing system database.\nroles - commands to create the roles and privileges (for both database and graph) that affect the use of the database\nusers - commands to create the users that can use the database and their role assignments \nall - include roles and users");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:PUBLIC" + "'", str18,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:PUBLIC");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:raftBootstrap" + "'", str19,
        "MISSING VAL FOR KEY:raftBootstrap");
    org.junit.Assert.assertEquals("'" + str20 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:snappy_encoder"
            + "'", str20,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:snappy_encoder");
    org.junit.Assert.assertEquals("'" + str21 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:The level of middleware logging" + "'", str21,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:The level of middleware logging");
    org.junit.Assert.assertNotNull(wildcardClass22);
  }

  @Test
  public void test4371() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4371");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("rr-topic");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4372() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4372");
    }
    java.lang.Object[] objArray14 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str15 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray14);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray14);
    java.lang.String str17 = io.github.onograph.I18N.format("read", objArray14);
    java.lang.String str18 = io.github.onograph.I18N.format("invisible", objArray14);
    java.lang.String str19 = io.github.onograph.I18N.format("BatchSize", objArray14);
    java.lang.String str20 = io.github.onograph.I18N.format("", objArray14);
    java.lang.String str21 = io.github.onograph.I18N.format(
        "causal_clustering.protocol_implementations.raft", objArray14);
    java.lang.String str22 = io.github.onograph.I18N.format("messages_failed", objArray14);
    java.lang.String str23 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:In-flight cache misses. (counter)", objArray14);
    java.lang.String str24 = io.github.onograph.I18N.format(
        "Applied index of the RAFT log. (gauge)", objArray14);
    org.junit.Assert.assertNotNull(objArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str15,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str16, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str17,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str18, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MISSING VAL FOR KEY:BatchSize" + "'",
        str19, "MISSING VAL FOR KEY:BatchSize");
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "MISSING VAL FOR KEY:" + "'", str20,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str21 + "' != '"
            + "MISSING VAL FOR KEY:causal_clustering.protocol_implementations.raft" + "'", str21,
        "MISSING VAL FOR KEY:causal_clustering.protocol_implementations.raft");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "MISSING VAL FOR KEY:messages_failed" + "'", str22,
        "MISSING VAL FOR KEY:messages_failed");
    org.junit.Assert.assertEquals("'" + str23 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:In-flight cache misses. (counter)" + "'", str23,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:In-flight cache misses. (counter)");
    org.junit.Assert.assertEquals(
        "'" + str24 + "' != '" + "MISSING VAL FOR KEY:Applied index of the RAFT log. (gauge)" + "'",
        str24, "MISSING VAL FOR KEY:Applied index of the RAFT log. (gauge)");
  }

  @Test
  public void test4373() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4373");
    }
    java.lang.Object[] objArray5 = new java.lang.Object[]{};
    java.lang.String str6 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray5);
    java.lang.String str7 = io.github.onograph.I18N.format("Upgraded", objArray5);
    java.lang.String str8 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:memory.pool",
        objArray5);
    java.lang.String str9 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:cypher", objArray5);
    java.lang.String str10 = io.github.onograph.I18N.format("dbms.security.removeRoleFromUser",
        objArray5);
    java.lang.Class<?> wildcardClass11 = objArray5.getClass();
    org.junit.Assert.assertNotNull(objArray5);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
    org.junit.Assert.assertEquals("'" + str6 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str6,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "MISSING VAL FOR KEY:Upgraded" + "'",
        str7, "MISSING VAL FOR KEY:Upgraded");
    org.junit.Assert.assertEquals(
        "'" + str8 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:memory.pool" + "'", str8,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:memory.pool");
    org.junit.Assert.assertEquals(
        "'" + str9 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:cypher" + "'", str9,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:cypher");
    org.junit.Assert.assertEquals(
        "'" + str10 + "' != '" + "MISSING VAL FOR KEY:dbms.security.removeRoleFromUser" + "'",
        str10, "MISSING VAL FOR KEY:dbms.security.removeRoleFromUser");
    org.junit.Assert.assertNotNull(wildcardClass11);
  }

  @Test
  public void test4374() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4374");
    }
    java.lang.Object[] objArray1 = null;
    java.lang.String str2 = io.github.onograph.I18N.format(
        "causal_clustering.middleware.akka.sink-parallelism", objArray1);
    org.junit.Assert.assertEquals("'" + str2 + "' != '"
            + "MISSING VAL FOR KEY:causal_clustering.middleware.akka.sink-parallelism" + "'", str2,
        "MISSING VAL FOR KEY:causal_clustering.middleware.akka.sink-parallelism");
  }

  @Test
  public void test4375() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4375");
    }
    java.lang.Object[] objArray11 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str12 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray11);
    java.lang.String str13 = io.github.onograph.I18N.format("status", objArray11);
    java.lang.String str14 = io.github.onograph.I18N.format("", objArray11);
    java.lang.String str15 = io.github.onograph.I18N.format("bolt.*", objArray11);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "Include metadata in file. Can't be used for backing system database.\nroles - commands to create the roles and privileges (for both database and graph) that affect the use of the database\nusers - commands to create the users that can use the database and their role assignments \nall - include roles and users",
        objArray11);
    java.lang.String str17 = io.github.onograph.I18N.format(
        "Count of successful database create operations. (counter)", objArray11);
    java.lang.String str18 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:PropertyKey", objArray11);
    java.lang.String str19 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:enc_req_precopy",
        objArray11);
    org.junit.Assert.assertNotNull(objArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str12 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str12,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MISSING VAL FOR KEY:status" + "'",
        str13, "MISSING VAL FOR KEY:status");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:" + "'", str14,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:bolt.*" + "'",
        str15, "MISSING VAL FOR KEY:bolt.*");
    org.junit.Assert.assertEquals("'" + str16 + "' != '"
            + "MISSING VAL FOR KEY:Include metadata in file. Can't be used for backing system database.\nroles - commands to create the roles and privileges (for both database and graph) that affect the use of the database\nusers - commands to create the users that can use the database and their role assignments \nall - include roles and users"
            + "'", str16,
        "MISSING VAL FOR KEY:Include metadata in file. Can't be used for backing system database.\nroles - commands to create the roles and privileges (for both database and graph) that affect the use of the database\nusers - commands to create the users that can use the database and their role assignments \nall - include roles and users");
    org.junit.Assert.assertEquals("'" + str17 + "' != '"
            + "MISSING VAL FOR KEY:Count of successful database create operations. (counter)" + "'",
        str17, "MISSING VAL FOR KEY:Count of successful database create operations. (counter)");
    org.junit.Assert.assertEquals("'" + str18 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:PropertyKey" + "'", str18,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:PropertyKey");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:enc_req_precopy" + "'",
        str19, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:enc_req_precopy");
  }

  @Test
  public void test4376() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4376");
    }
    java.lang.Object[] objArray5 = new java.lang.Object[]{};
    java.lang.String str6 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray5);
    java.lang.String str7 = io.github.onograph.I18N.format("function", objArray5);
    java.lang.String str8 = io.github.onograph.I18N.format(
        "Used or reserved native memory in bytes. (gauge)", objArray5);
    java.lang.String str9 = io.github.onograph.I18N.format("--from-path-tx", objArray5);
    java.lang.String str10 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:The name of the base object or named context to search for user objects when LDAP authorization is enabled. A common case is that this matches the last part of `dbms.security.ldap.authentication.user_dn_template`.",
        objArray5);
    java.lang.Class<?> wildcardClass11 = objArray5.getClass();
    org.junit.Assert.assertNotNull(objArray5);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
    org.junit.Assert.assertEquals("'" + str6 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str6,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "MISSING VAL FOR KEY:function" + "'",
        str7, "MISSING VAL FOR KEY:function");
    org.junit.Assert.assertEquals("'" + str8 + "' != '"
            + "MISSING VAL FOR KEY:Used or reserved native memory in bytes. (gauge)" + "'", str8,
        "MISSING VAL FOR KEY:Used or reserved native memory in bytes. (gauge)");
    org.junit.Assert.assertEquals(
        "'" + str9 + "' != '" + "MISSING VAL FOR KEY:--from-path-tx" + "'", str9,
        "MISSING VAL FOR KEY:--from-path-tx");
    org.junit.Assert.assertEquals("'" + str10 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:The name of the base object or named context to search for user objects when LDAP authorization is enabled. A common case is that this matches the last part of `dbms.security.ldap.authentication.user_dn_template`."
            + "'", str10,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:The name of the base object or named context to search for user objects when LDAP authorization is enabled. A common case is that this matches the last part of `dbms.security.ldap.authentication.user_dn_template`.");
    org.junit.Assert.assertNotNull(wildcardClass11);
  }

  @Test
  public void test4377() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4377");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:min");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4378() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4378");
    }
    java.lang.Object[] objArray8 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str9 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray8);
    java.lang.String str10 = io.github.onograph.I18N.format("ccstate", objArray8);
    java.lang.String str11 = io.github.onograph.I18N.format("rollbacks", objArray8);
    java.lang.String str12 = io.github.onograph.I18N.format(
        "Upgrade the system database schema if it is not the current schema, providing upgrade status results for each sub-graph component.",
        objArray8);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:fabric.driver.event_loop_count", objArray8);
    org.junit.Assert.assertNotNull(objArray8);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str9 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str9,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MISSING VAL FOR KEY:ccstate" + "'",
        str10, "MISSING VAL FOR KEY:ccstate");
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MISSING VAL FOR KEY:rollbacks" + "'",
        str11, "MISSING VAL FOR KEY:rollbacks");
    org.junit.Assert.assertEquals("'" + str12 + "' != '"
            + "MISSING VAL FOR KEY:Upgrade the system database schema if it is not the current schema, providing upgrade status results for each sub-graph component."
            + "'", str12,
        "MISSING VAL FOR KEY:Upgrade the system database schema if it is not the current schema, providing upgrade status results for each sub-graph component.");
    org.junit.Assert.assertEquals("'" + str13 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:fabric.driver.event_loop_count"
            + "'", str13,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:fabric.driver.event_loop_count");
  }

  @Test
  public void test4379() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4379");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("cluster.local");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4380() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4380");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:check_point");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4381() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4381");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("dbms.dynamic.setting.whitelist");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4382() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4382");
    }
    java.lang.Object[] objArray5 = new java.lang.Object[]{};
    java.lang.String str6 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray5);
    java.lang.String str7 = io.github.onograph.I18N.format(
        "The total number of live threads including daemon and non-daemon threads. (gauge)",
        objArray5);
    java.lang.String str8 = io.github.onograph.I18N.format("Number of available processors",
        objArray5);
    java.lang.String str9 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:The total number of Bolt connections currently being executed. (gauge)",
        objArray5);
    java.lang.String str10 = io.github.onograph.I18N.format("dbms.security.property_level.enabled",
        objArray5);
    java.lang.Class<?> wildcardClass11 = objArray5.getClass();
    org.junit.Assert.assertNotNull(objArray5);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
    org.junit.Assert.assertEquals("'" + str6 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str6,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str7 + "' != '"
            + "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)"
            + "'", str7,
        "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)");
    org.junit.Assert.assertEquals(
        "'" + str8 + "' != '" + "MISSING VAL FOR KEY:Number of available processors" + "'", str8,
        "MISSING VAL FOR KEY:Number of available processors");
    org.junit.Assert.assertEquals("'" + str9 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:The total number of Bolt connections currently being executed. (gauge)"
            + "'", str9,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:The total number of Bolt connections currently being executed. (gauge)");
    org.junit.Assert.assertEquals(
        "'" + str10 + "' != '" + "MISSING VAL FOR KEY:dbms.security.property_level.enabled" + "'",
        str10, "MISSING VAL FOR KEY:dbms.security.property_level.enabled");
    org.junit.Assert.assertNotNull(wildcardClass11);
  }

  @Test
  public void test4383() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4383");
    }
    java.lang.Object[] objArray15 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str16 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray15);
    java.lang.String str17 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray15);
    java.lang.String str18 = io.github.onograph.I18N.format("read", objArray15);
    java.lang.String str19 = io.github.onograph.I18N.format("invisible", objArray15);
    java.lang.String str20 = io.github.onograph.I18N.format("dec_dispatch", objArray15);
    java.lang.String str21 = io.github.onograph.I18N.format("init_server_handler", objArray15);
    java.lang.String str22 = io.github.onograph.I18N.format("<path>", objArray15);
    java.lang.String str23 = io.github.onograph.I18N.format("User", objArray15);
    java.lang.String str24 = io.github.onograph.I18N.format(
        "causal_clustering.unknown_address_logging_throttle", objArray15);
    java.lang.String str25 = io.github.onograph.I18N.format("evictions", objArray15);
    java.lang.String str26 = io.github.onograph.I18N.format("dbms.scheduler.profile", objArray15);
    org.junit.Assert.assertNotNull(objArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str16,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str17, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str18,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str19, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "MISSING VAL FOR KEY:dec_dispatch" + "'",
        str20, "MISSING VAL FOR KEY:dec_dispatch");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:init_server_handler" + "'", str21,
        "MISSING VAL FOR KEY:init_server_handler");
    org.junit.Assert.assertEquals("'" + str22 + "' != '" + "MISSING VAL FOR KEY:<path>" + "'",
        str22, "MISSING VAL FOR KEY:<path>");
    org.junit.Assert.assertEquals("'" + str23 + "' != '" + "MISSING VAL FOR KEY:User" + "'", str23,
        "MISSING VAL FOR KEY:User");
    org.junit.Assert.assertEquals("'" + str24 + "' != '"
            + "MISSING VAL FOR KEY:causal_clustering.unknown_address_logging_throttle" + "'", str24,
        "MISSING VAL FOR KEY:causal_clustering.unknown_address_logging_throttle");
    org.junit.Assert.assertEquals("'" + str25 + "' != '" + "MISSING VAL FOR KEY:evictions" + "'",
        str25, "MISSING VAL FOR KEY:evictions");
    org.junit.Assert.assertEquals(
        "'" + str26 + "' != '" + "MISSING VAL FOR KEY:dbms.scheduler.profile" + "'", str26,
        "MISSING VAL FOR KEY:dbms.scheduler.profile");
  }

  @Test
  public void test4384() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4384");
    }
    java.lang.Object[] objArray11 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str12 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray11);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray11);
    java.lang.String str14 = io.github.onograph.I18N.format("elapsedTimeMs", objArray11);
    java.lang.String str15 = io.github.onograph.I18N.format("driver.connection.max_lifetime",
        objArray11);
    java.lang.String str16 = io.github.onograph.I18N.format("", objArray11);
    java.lang.String str17 = io.github.onograph.I18N.format("hostnameOrIp", objArray11);
    java.lang.String str18 = io.github.onograph.I18N.format("stop", objArray11);
    java.lang.Class<?> wildcardClass19 = objArray11.getClass();
    org.junit.Assert.assertNotNull(objArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str12,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str13, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:elapsedTimeMs" + "'", str14,
        "MISSING VAL FOR KEY:elapsedTimeMs");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:driver.connection.max_lifetime" + "'", str15,
        "MISSING VAL FOR KEY:driver.connection.max_lifetime");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:" + "'", str16,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:hostnameOrIp" + "'",
        str17, "MISSING VAL FOR KEY:hostnameOrIp");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:stop" + "'", str18,
        "MISSING VAL FOR KEY:stop");
    org.junit.Assert.assertNotNull(wildcardClass19);
  }

  @Test
  public void test4385() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4385");
    }
    java.lang.Object[] objArray12 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str13 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray12);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray12);
    java.lang.String str15 = io.github.onograph.I18N.format("read", objArray12);
    java.lang.String str16 = io.github.onograph.I18N.format("execute_boosted_from_config",
        objArray12);
    java.lang.String str17 = io.github.onograph.I18N.format("replication_maybe", objArray12);
    java.lang.String str18 = io.github.onograph.I18N.format("metrics.prometheus.endpoint",
        objArray12);
    java.lang.String str19 = io.github.onograph.I18N.format("evictions", objArray12);
    java.lang.String str20 = io.github.onograph.I18N.format("enc_req_precopy", objArray12);
    java.lang.Class<?> wildcardClass21 = objArray12.getClass();
    org.junit.Assert.assertNotNull(objArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str13,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str14, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str15,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:execute_boosted_from_config" + "'", str16,
        "MISSING VAL FOR KEY:execute_boosted_from_config");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:replication_maybe" + "'", str17,
        "MISSING VAL FOR KEY:replication_maybe");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:metrics.prometheus.endpoint" + "'", str18,
        "MISSING VAL FOR KEY:metrics.prometheus.endpoint");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MISSING VAL FOR KEY:evictions" + "'",
        str19, "MISSING VAL FOR KEY:evictions");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:enc_req_precopy" + "'", str20,
        "MISSING VAL FOR KEY:enc_req_precopy");
    org.junit.Assert.assertNotNull(wildcardClass21);
  }

  @Test
  public void test4386() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4386");
    }
    java.lang.Object[] objArray8 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str9 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray8);
    java.lang.String str10 = io.github.onograph.I18N.format("status", objArray8);
    java.lang.String str11 = io.github.onograph.I18N.format("snappy_encoder", objArray8);
    java.lang.String str12 = io.github.onograph.I18N.format("The level of middleware logging",
        objArray8);
    java.lang.String str13 = io.github.onograph.I18N.format("/dbms/cluster.*", objArray8);
    org.junit.Assert.assertNotNull(objArray8);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str9 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str9,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MISSING VAL FOR KEY:status" + "'",
        str10, "MISSING VAL FOR KEY:status");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:snappy_encoder" + "'", str11,
        "MISSING VAL FOR KEY:snappy_encoder");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:The level of middleware logging" + "'", str12,
        "MISSING VAL FOR KEY:The level of middleware logging");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:/dbms/cluster.*" + "'", str13,
        "MISSING VAL FOR KEY:/dbms/cluster.*");
  }

  @Test
  public void test4387() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4387");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str14 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format("read", objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format("invisible", objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format("relationship-type-distribution",
        objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:<label>[,<label>...]", objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "A list of attribute names on a user object that contains groups to be used for mapping to roles when LDAP authorization is enabled.",
        objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:unreachable",
        objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format(
        "Delay between RAFT message receive and process. (gauge)", objArray13);
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str14,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str15, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str16,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str17, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:relationship-type-distribution" + "'", str18,
        "MISSING VAL FOR KEY:relationship-type-distribution");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:<label>[,<label>...]"
            + "'", str19, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:<label>[,<label>...]");
    org.junit.Assert.assertEquals("'" + str20 + "' != '"
            + "MISSING VAL FOR KEY:A list of attribute names on a user object that contains groups to be used for mapping to roles when LDAP authorization is enabled."
            + "'", str20,
        "MISSING VAL FOR KEY:A list of attribute names on a user object that contains groups to be used for mapping to roles when LDAP authorization is enabled.");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:unreachable" + "'", str21,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:unreachable");
    org.junit.Assert.assertEquals("'" + str22 + "' != '"
            + "MISSING VAL FOR KEY:Delay between RAFT message receive and process. (gauge)" + "'",
        str22, "MISSING VAL FOR KEY:Delay between RAFT message receive and process. (gauge)");
  }

  @Test
  public void test4388() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4388");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("hnd_res_file_chunk");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4389() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4389");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("dbms.logs.security.format");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4390() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4390");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("policy");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4391() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4391");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:count");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4392() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4392");
    }
    java.lang.Object[] objArray8 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str9 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray8);
    java.lang.String str10 = io.github.onograph.I18N.format("status", objArray8);
    java.lang.String str11 = io.github.onograph.I18N.format("raft-server", objArray8);
    java.lang.String str12 = io.github.onograph.I18N.format(
        "causal_clustering.join_catch_up_timeout", objArray8);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:A list of group names for the server used when configuring load balancing and replication policies.",
        objArray8);
    java.lang.Class<?> wildcardClass14 = objArray8.getClass();
    org.junit.Assert.assertNotNull(objArray8);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str9 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str9,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MISSING VAL FOR KEY:status" + "'",
        str10, "MISSING VAL FOR KEY:status");
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MISSING VAL FOR KEY:raft-server" + "'",
        str11, "MISSING VAL FOR KEY:raft-server");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.join_catch_up_timeout"
            + "'", str12, "MISSING VAL FOR KEY:causal_clustering.join_catch_up_timeout");
    org.junit.Assert.assertEquals("'" + str13 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:A list of group names for the server used when configuring load balancing and replication policies."
            + "'", str13,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:A list of group names for the server used when configuring load balancing and replication policies.");
    org.junit.Assert.assertNotNull(wildcardClass14);
  }

  @Test
  public void test4393() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4393");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:Perform the recovery of the backup store by applying the latest pulled transactions. If disabled, the backup will be faster but a recovery of the backup store will be required at a later time before restoring the data (using the neo4j-admin prepare-restore command). Note: if --prepare-restore is set to false, then --check-consistency is implicitly set to false because the consistency of a none-recovered store can't be checked.");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4394() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4394");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str14 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format("read", objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format("execute_boosted_from_config",
        objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format("LabelQualifierAll", objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format("vm.memory.buffer.*", objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "Maximum timeout for cluster status request execution", objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:enc_res_database_id", objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:causal_clustering.kubernetes.cluster_domain", objArray13);
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str14,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str15, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str16,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:execute_boosted_from_config" + "'", str17,
        "MISSING VAL FOR KEY:execute_boosted_from_config");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:LabelQualifierAll" + "'", str18,
        "MISSING VAL FOR KEY:LabelQualifierAll");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:vm.memory.buffer.*" + "'", str19,
        "MISSING VAL FOR KEY:vm.memory.buffer.*");
    org.junit.Assert.assertEquals("'" + str20 + "' != '"
            + "MISSING VAL FOR KEY:Maximum timeout for cluster status request execution" + "'", str20,
        "MISSING VAL FOR KEY:Maximum timeout for cluster status request execution");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:enc_res_database_id"
            + "'", str21, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:enc_res_database_id");
    org.junit.Assert.assertEquals("'" + str22 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.kubernetes.cluster_domain"
            + "'", str22,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.kubernetes.cluster_domain");
  }

  @Test
  public void test4395() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4395");
    }
    java.lang.Object[] objArray11 = new java.lang.Object[]{};
    java.lang.String str12 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray11);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "The total number of live threads including daemon and non-daemon threads. (gauge)",
        objArray11);
    java.lang.String str14 = io.github.onograph.I18N.format("Upgraded", objArray11);
    java.lang.String str15 = io.github.onograph.I18N.format("", objArray11);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "Enable reporting metrics about the store size of each database. Deprecated - use metrics.filter instead.",
        objArray11);
    java.lang.String str17 = io.github.onograph.I18N.format("messages_received", objArray11);
    java.lang.String str18 = io.github.onograph.I18N.format("", objArray11);
    java.lang.String str19 = io.github.onograph.I18N.format("db.listLocks", objArray11);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "causal_clustering.catch_up_client_inactivity_timeout", objArray11);
    java.lang.String str21 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:read", objArray11);
    java.lang.String str22 = io.github.onograph.I18N.format("term", objArray11);
    java.lang.Class<?> wildcardClass23 = objArray11.getClass();
    org.junit.Assert.assertNotNull(objArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
    org.junit.Assert.assertEquals("'" + str12 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str12,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str13 + "' != '"
            + "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)"
            + "'", str13,
        "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:Upgraded" + "'",
        str14, "MISSING VAL FOR KEY:Upgraded");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:" + "'", str15,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str16 + "' != '"
            + "MISSING VAL FOR KEY:Enable reporting metrics about the store size of each database. Deprecated - use metrics.filter instead."
            + "'", str16,
        "MISSING VAL FOR KEY:Enable reporting metrics about the store size of each database. Deprecated - use metrics.filter instead.");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:messages_received" + "'", str17,
        "MISSING VAL FOR KEY:messages_received");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:" + "'", str18,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MISSING VAL FOR KEY:db.listLocks" + "'",
        str19, "MISSING VAL FOR KEY:db.listLocks");
    org.junit.Assert.assertEquals("'" + str20 + "' != '"
            + "MISSING VAL FOR KEY:causal_clustering.catch_up_client_inactivity_timeout" + "'", str20,
        "MISSING VAL FOR KEY:causal_clustering.catch_up_client_inactivity_timeout");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:read" + "'", str21,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str22 + "' != '" + "MISSING VAL FOR KEY:term" + "'", str22,
        "MISSING VAL FOR KEY:term");
    org.junit.Assert.assertNotNull(wildcardClass23);
  }

  @Test
  public void test4396() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4396");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "The total number of nodes in the database. (gauge)");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4397() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4397");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:role");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4398() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4398");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str14 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format("read", objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format("invisible", objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format("dec_dispatch", objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format("localhost", objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:metrics.csv.rotation.compression", objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format(
        "Count of database operations which failed previously but have recovered. (counter)",
        objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format("csv-reporter", objArray13);
    java.lang.Class<?> wildcardClass23 = objArray13.getClass();
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str14,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str15, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str16,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str17, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:dec_dispatch" + "'",
        str18, "MISSING VAL FOR KEY:dec_dispatch");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MISSING VAL FOR KEY:localhost" + "'",
        str19, "MISSING VAL FOR KEY:localhost");
    org.junit.Assert.assertEquals("'" + str20 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:metrics.csv.rotation.compression" + "'", str20,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:metrics.csv.rotation.compression");
    org.junit.Assert.assertEquals("'" + str21 + "' != '"
            + "MISSING VAL FOR KEY:Count of database operations which failed previously but have recovered. (counter)"
            + "'", str21,
        "MISSING VAL FOR KEY:Count of database operations which failed previously but have recovered. (counter)");
    org.junit.Assert.assertEquals("'" + str22 + "' != '" + "MISSING VAL FOR KEY:csv-reporter" + "'",
        str22, "MISSING VAL FOR KEY:csv-reporter");
    org.junit.Assert.assertNotNull(wildcardClass23);
  }

  @Test
  public void test4399() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4399");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str14 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format("ccstate", objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format("rollbacks", objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format("error_handler_tail", objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format("dbms.dynamic.setting.allowlist",
        objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format("count", objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:iops", objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format("Log format to use for security log.",
        objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:last_leader_message", objArray13);
    java.lang.String str23 = io.github.onograph.I18N.format("StoreCopy", objArray13);
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str14 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str14,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:ccstate" + "'",
        str15, "MISSING VAL FOR KEY:ccstate");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:rollbacks" + "'",
        str16, "MISSING VAL FOR KEY:rollbacks");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:error_handler_tail" + "'", str17,
        "MISSING VAL FOR KEY:error_handler_tail");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:dbms.dynamic.setting.allowlist" + "'", str18,
        "MISSING VAL FOR KEY:dbms.dynamic.setting.allowlist");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MISSING VAL FOR KEY:count" + "'", str19,
        "MISSING VAL FOR KEY:count");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:iops" + "'", str20,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:iops");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:Log format to use for security log." + "'",
        str21, "MISSING VAL FOR KEY:Log format to use for security log.");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:last_leader_message"
            + "'", str22, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:last_leader_message");
    org.junit.Assert.assertEquals("'" + str23 + "' != '" + "MISSING VAL FOR KEY:StoreCopy" + "'",
        str23, "MISSING VAL FOR KEY:StoreCopy");
  }

  @Test
  public void test4400() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4400");
    }
    java.lang.Object[] objArray4 = new java.lang.Object[]{};
    java.lang.String str5 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray4);
    java.lang.String str6 = io.github.onograph.I18N.format("function", objArray4);
    java.lang.String str7 = io.github.onograph.I18N.format(
        "Parallelism level of dispatcher used for communication from Akka based cluster topology discovery ",
        objArray4);
    java.lang.String str8 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Timer for RAFT message processing. (counter, histogram)",
        objArray4);
    java.lang.Class<?> wildcardClass9 = objArray4.getClass();
    org.junit.Assert.assertNotNull(objArray4);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
    org.junit.Assert.assertEquals("'" + str5 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str5,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "MISSING VAL FOR KEY:function" + "'",
        str6, "MISSING VAL FOR KEY:function");
    org.junit.Assert.assertEquals("'" + str7 + "' != '"
            + "MISSING VAL FOR KEY:Parallelism level of dispatcher used for communication from Akka based cluster topology discovery "
            + "'", str7,
        "MISSING VAL FOR KEY:Parallelism level of dispatcher used for communication from Akka based cluster topology discovery ");
    org.junit.Assert.assertEquals("'" + str8 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:Timer for RAFT message processing. (counter, histogram)"
            + "'", str8,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:Timer for RAFT message processing. (counter, histogram)");
    org.junit.Assert.assertNotNull(wildcardClass9);
  }

  @Test
  public void test4401() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4401");
    }
    java.lang.Object[] objArray11 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str12 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray11);
    java.lang.String str13 = io.github.onograph.I18N.format("writable", objArray11);
    java.lang.String str14 = io.github.onograph.I18N.format("--additional-config", objArray11);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "causal_clustering.connect_randomly_to_server_group", objArray11);
    java.lang.String str16 = io.github.onograph.I18N.format("RelationshipType", objArray11);
    java.lang.String str17 = io.github.onograph.I18N.format("labels", objArray11);
    java.lang.String str18 = io.github.onograph.I18N.format("overview", objArray11);
    java.lang.Class<?> wildcardClass19 = objArray11.getClass();
    org.junit.Assert.assertNotNull(objArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str12,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MISSING VAL FOR KEY:writable" + "'",
        str13, "MISSING VAL FOR KEY:writable");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:--additional-config" + "'", str14,
        "MISSING VAL FOR KEY:--additional-config");
    org.junit.Assert.assertEquals("'" + str15 + "' != '"
            + "MISSING VAL FOR KEY:causal_clustering.connect_randomly_to_server_group" + "'", str15,
        "MISSING VAL FOR KEY:causal_clustering.connect_randomly_to_server_group");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:RelationshipType" + "'", str16,
        "MISSING VAL FOR KEY:RelationshipType");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:labels" + "'",
        str17, "MISSING VAL FOR KEY:labels");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:overview" + "'",
        str18, "MISSING VAL FOR KEY:overview");
    org.junit.Assert.assertNotNull(wildcardClass19);
  }

  @Test
  public void test4402() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4402");
    }
    java.lang.Object[] objArray8 = new java.lang.Object[]{};
    java.lang.String str9 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray8);
    java.lang.String str10 = io.github.onograph.I18N.format(
        "The total number of live threads including daemon and non-daemon threads. (gauge)",
        objArray8);
    java.lang.String str11 = io.github.onograph.I18N.format("Upgraded", objArray8);
    java.lang.String str12 = io.github.onograph.I18N.format("", objArray8);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "Enable reporting metrics about the store size of each database. Deprecated - use metrics.filter instead.",
        objArray8);
    java.lang.String str14 = io.github.onograph.I18N.format("appended_bytes", objArray8);
    java.lang.String str15 = io.github.onograph.I18N.format("DatabaseDefault", objArray8);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:The maximum file size before the vote state file is rotated (in unit of entries)",
        objArray8);
    org.junit.Assert.assertNotNull(objArray8);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
    org.junit.Assert.assertEquals("'" + str9 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str9,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str10 + "' != '"
            + "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)"
            + "'", str10,
        "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)");
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MISSING VAL FOR KEY:Upgraded" + "'",
        str11, "MISSING VAL FOR KEY:Upgraded");
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MISSING VAL FOR KEY:" + "'", str12,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str13 + "' != '"
            + "MISSING VAL FOR KEY:Enable reporting metrics about the store size of each database. Deprecated - use metrics.filter instead."
            + "'", str13,
        "MISSING VAL FOR KEY:Enable reporting metrics about the store size of each database. Deprecated - use metrics.filter instead.");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:appended_bytes" + "'", str14,
        "MISSING VAL FOR KEY:appended_bytes");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:DatabaseDefault" + "'", str15,
        "MISSING VAL FOR KEY:DatabaseDefault");
    org.junit.Assert.assertEquals("'" + str16 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:The maximum file size before the vote state file is rotated (in unit of entries)"
            + "'", str16,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:The maximum file size before the vote state file is rotated (in unit of entries)");
  }

  @Test
  public void test4403() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4403");
    }
    java.lang.Object[] objArray9 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str10 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray9);
    java.lang.String str11 = io.github.onograph.I18N.format("", objArray9);
    java.lang.String str12 = io.github.onograph.I18N.format("", objArray9);
    java.lang.String str13 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:restore",
        objArray9);
    java.lang.String str14 = io.github.onograph.I18N.format("writable", objArray9);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "Minimum number of Core machines initially required to form a cluster. The cluster will form when at least this many Core members have discovered each other.",
        objArray9);
    org.junit.Assert.assertNotNull(objArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str10 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str10,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MISSING VAL FOR KEY:" + "'", str11,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MISSING VAL FOR KEY:" + "'", str12,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:restore" + "'", str13,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:restore");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:writable" + "'",
        str14, "MISSING VAL FOR KEY:writable");
    org.junit.Assert.assertEquals("'" + str15 + "' != '"
            + "MISSING VAL FOR KEY:Minimum number of Core machines initially required to form a cluster. The cluster will form when at least this many Core members have discovered each other."
            + "'", str15,
        "MISSING VAL FOR KEY:Minimum number of Core machines initially required to form a cluster. The cluster will form when at least this many Core members have discovered each other.");
  }

  @Test
  public void test4404() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4404");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:causal_clustering.replication_retry_timeout_limit");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4405() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4405");
    }
    java.lang.Object[] objArray8 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str9 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray8);
    java.lang.String str10 = io.github.onograph.I18N.format("status", objArray8);
    java.lang.String str11 = io.github.onograph.I18N.format(
        "Maximum number of akka restart attempts before we panic the DBMS. Set to -1 to retry forever",
        objArray8);
    java.lang.String str12 = io.github.onograph.I18N.format("db.checkpoint", objArray8);
    java.lang.String str13 = io.github.onograph.I18N.format("RelationshipQualifierAll", objArray8);
    java.lang.Class<?> wildcardClass14 = objArray8.getClass();
    org.junit.Assert.assertNotNull(objArray8);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str9 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str9,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MISSING VAL FOR KEY:status" + "'",
        str10, "MISSING VAL FOR KEY:status");
    org.junit.Assert.assertEquals("'" + str11 + "' != '"
            + "MISSING VAL FOR KEY:Maximum number of akka restart attempts before we panic the DBMS. Set to -1 to retry forever"
            + "'", str11,
        "MISSING VAL FOR KEY:Maximum number of akka restart attempts before we panic the DBMS. Set to -1 to retry forever");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:db.checkpoint" + "'", str12,
        "MISSING VAL FOR KEY:db.checkpoint");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:RelationshipQualifierAll" + "'", str13,
        "MISSING VAL FOR KEY:RelationshipQualifierAll");
    org.junit.Assert.assertNotNull(wildcardClass14);
  }

  @Test
  public void test4406() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4406");
    }
    java.lang.Object[] objArray7 = new java.lang.Object[]{};
    java.lang.String str8 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray7);
    java.lang.String str9 = io.github.onograph.I18N.format("Upgraded", objArray7);
    java.lang.String str10 = io.github.onograph.I18N.format(
        "Configure the discovery type used for cluster name resolution", objArray7);
    java.lang.String str11 = io.github.onograph.I18N.format("high_limitV3_4_0", objArray7);
    java.lang.String str12 = io.github.onograph.I18N.format("logs/", objArray7);
    java.lang.String str13 = io.github.onograph.I18N.format("principal", objArray7);
    java.lang.String str14 = io.github.onograph.I18N.format("", objArray7);
    org.junit.Assert.assertNotNull(objArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
    org.junit.Assert.assertEquals("'" + str8 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str8,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MISSING VAL FOR KEY:Upgraded" + "'",
        str9, "MISSING VAL FOR KEY:Upgraded");
    org.junit.Assert.assertEquals("'" + str10 + "' != '"
            + "MISSING VAL FOR KEY:Configure the discovery type used for cluster name resolution" + "'",
        str10, "MISSING VAL FOR KEY:Configure the discovery type used for cluster name resolution");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:high_limitV3_4_0" + "'", str11,
        "MISSING VAL FOR KEY:high_limitV3_4_0");
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MISSING VAL FOR KEY:logs/" + "'", str12,
        "MISSING VAL FOR KEY:logs/");
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MISSING VAL FOR KEY:principal" + "'",
        str13, "MISSING VAL FOR KEY:principal");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:" + "'", str14,
        "MISSING VAL FOR KEY:");
  }

  @Test
  public void test4407() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4407");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:visible");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4408() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4408");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "Time interval of inactivity after which a driver will be closed.");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4409() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4409");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.middleware.akka.shutdown_timeout");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4410() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4410");
    }
    java.lang.Object[] objArray11 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str12 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray11);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray11);
    java.lang.String str14 = io.github.onograph.I18N.format("read", objArray11);
    java.lang.String str15 = io.github.onograph.I18N.format("execute_boosted_from_config",
        objArray11);
    java.lang.String str16 = io.github.onograph.I18N.format("LabelQualifierAll", objArray11);
    java.lang.String str17 = io.github.onograph.I18N.format("dbms.upgradeDetails", objArray11);
    java.lang.String str18 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:core", objArray11);
    java.lang.Class<?> wildcardClass19 = objArray11.getClass();
    org.junit.Assert.assertNotNull(objArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str12,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str13, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str14,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:execute_boosted_from_config" + "'", str15,
        "MISSING VAL FOR KEY:execute_boosted_from_config");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:LabelQualifierAll" + "'", str16,
        "MISSING VAL FOR KEY:LabelQualifierAll");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:dbms.upgradeDetails" + "'", str17,
        "MISSING VAL FOR KEY:dbms.upgradeDetails");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:core"
            + "'", str18, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:core");
    org.junit.Assert.assertNotNull(wildcardClass19);
  }

  @Test
  public void test4411() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4411");
    }
    java.lang.Object[] objArray14 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str15 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray14);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray14);
    java.lang.String str17 = io.github.onograph.I18N.format("read", objArray14);
    java.lang.String str18 = io.github.onograph.I18N.format("invisible", objArray14);
    java.lang.String str19 = io.github.onograph.I18N.format("dec_dispatch", objArray14);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "Maximum timeout for cluster status request execution", objArray14);
    java.lang.String str21 = io.github.onograph.I18N.format("", objArray14);
    java.lang.String str22 = io.github.onograph.I18N.format("Administration command: SHOW USERS",
        objArray14);
    java.lang.String str23 = io.github.onograph.I18N.format("db.createNodeKey", objArray14);
    java.lang.String str24 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:Discovery cluster member size. (gauge)", objArray14);
    org.junit.Assert.assertNotNull(objArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str15,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str16, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str17,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str18, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MISSING VAL FOR KEY:dec_dispatch" + "'",
        str19, "MISSING VAL FOR KEY:dec_dispatch");
    org.junit.Assert.assertEquals("'" + str20 + "' != '"
            + "MISSING VAL FOR KEY:Maximum timeout for cluster status request execution" + "'", str20,
        "MISSING VAL FOR KEY:Maximum timeout for cluster status request execution");
    org.junit.Assert.assertEquals("'" + str21 + "' != '" + "MISSING VAL FOR KEY:" + "'", str21,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "MISSING VAL FOR KEY:Administration command: SHOW USERS" + "'",
        str22, "MISSING VAL FOR KEY:Administration command: SHOW USERS");
    org.junit.Assert.assertEquals(
        "'" + str23 + "' != '" + "MISSING VAL FOR KEY:db.createNodeKey" + "'", str23,
        "MISSING VAL FOR KEY:db.createNodeKey");
    org.junit.Assert.assertEquals("'" + str24 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Discovery cluster member size. (gauge)" + "'",
        str24, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Discovery cluster member size. (gauge)");
  }

  @Test
  public void test4412() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4412");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("enc_req_database_id");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4413() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4413");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:Log format to use for security log.");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4414() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4414");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:hi!");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4415() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4415");
    }
    java.lang.Object[] objArray10 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str11 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray10);
    java.lang.String str12 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray10);
    java.lang.String str13 = io.github.onograph.I18N.format("read", objArray10);
    java.lang.String str14 = io.github.onograph.I18N.format("invisible", objArray10);
    java.lang.String str15 = io.github.onograph.I18N.format("", objArray10);
    java.lang.String str16 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:groups",
        objArray10);
    org.junit.Assert.assertNotNull(objArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str11,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str12, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str13,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str14, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:" + "'", str15,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:groups" + "'", str16,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:groups");
  }

  @Test
  public void test4416() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4416");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:*pool.transaction.*.used_native");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4417() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4417");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:StoreCopy");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4418() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4418");
    }
    java.lang.Object[] objArray1 = null;
    java.lang.String str2 = io.github.onograph.I18N.format(".JVM memory buffers metrics.",
        objArray1);
    org.junit.Assert.assertEquals(
        "'" + str2 + "' != '" + "MISSING VAL FOR KEY:.JVM memory buffers metrics." + "'", str2,
        "MISSING VAL FOR KEY:.JVM memory buffers metrics.");
  }

  @Test
  public void test4419() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4419");
    }
    java.lang.Object[] objArray8 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str9 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray8);
    java.lang.String str10 = io.github.onograph.I18N.format("", objArray8);
    java.lang.String str11 = io.github.onograph.I18N.format(
        "Maximum number of history files for the security log.", objArray8);
    java.lang.String str12 = io.github.onograph.I18N.format(
        "causal_clustering.akka_actor_system_restarter.max_acceptable_failures", objArray8);
    java.lang.String str13 = io.github.onograph.I18N.format("akka.remote.artery.bind.port",
        objArray8);
    java.lang.Class<?> wildcardClass14 = objArray8.getClass();
    org.junit.Assert.assertNotNull(objArray8);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str9 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str9,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MISSING VAL FOR KEY:" + "'", str10,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str11 + "' != '"
            + "MISSING VAL FOR KEY:Maximum number of history files for the security log." + "'", str11,
        "MISSING VAL FOR KEY:Maximum number of history files for the security log.");
    org.junit.Assert.assertEquals("'" + str12 + "' != '"
            + "MISSING VAL FOR KEY:causal_clustering.akka_actor_system_restarter.max_acceptable_failures"
            + "'", str12,
        "MISSING VAL FOR KEY:causal_clustering.akka_actor_system_restarter.max_acceptable_failures");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:akka.remote.artery.bind.port" + "'", str13,
        "MISSING VAL FOR KEY:akka.remote.artery.bind.port");
    org.junit.Assert.assertNotNull(wildcardClass14);
  }

  @Test
  public void test4420() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4420");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("<size>");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4421() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4421");
    }
    java.lang.Object[] objArray7 = new java.lang.Object[]{};
    java.lang.String str8 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray7);
    java.lang.String str9 = io.github.onograph.I18N.format(
        "The total number of live threads including daemon and non-daemon threads. (gauge)",
        objArray7);
    java.lang.String str10 = io.github.onograph.I18N.format("volumetric", objArray7);
    java.lang.String str11 = io.github.onograph.I18N.format("dbms.security.property_level.enabled",
        objArray7);
    java.lang.String str12 = io.github.onograph.I18N.format(
        "The highest transaction id that has been pulled in the last pull updates by this instance. (counter)",
        objArray7);
    java.lang.String str13 = io.github.onograph.I18N.format("--fallback-to-full", objArray7);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Count of database operations which failed previously but have recovered. (counter)",
        objArray7);
    java.lang.Class<?> wildcardClass15 = objArray7.getClass();
    org.junit.Assert.assertNotNull(objArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
    org.junit.Assert.assertEquals("'" + str8 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str8,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str9 + "' != '"
            + "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)"
            + "'", str9,
        "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)");
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MISSING VAL FOR KEY:volumetric" + "'",
        str10, "MISSING VAL FOR KEY:volumetric");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:dbms.security.property_level.enabled" + "'",
        str11, "MISSING VAL FOR KEY:dbms.security.property_level.enabled");
    org.junit.Assert.assertEquals("'" + str12 + "' != '"
            + "MISSING VAL FOR KEY:The highest transaction id that has been pulled in the last pull updates by this instance. (counter)"
            + "'", str12,
        "MISSING VAL FOR KEY:The highest transaction id that has been pulled in the last pull updates by this instance. (counter)");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:--fallback-to-full" + "'", str13,
        "MISSING VAL FOR KEY:--fallback-to-full");
    org.junit.Assert.assertEquals("'" + str14 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:Count of database operations which failed previously but have recovered. (counter)"
            + "'", str14,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:Count of database operations which failed previously but have recovered. (counter)");
    org.junit.Assert.assertNotNull(wildcardClass15);
  }

  @Test
  public void test4422() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4422");
    }
    java.lang.Object[] objArray7 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str8 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray7);
    java.lang.String str9 = io.github.onograph.I18N.format("", objArray7);
    java.lang.String str10 = io.github.onograph.I18N.format("Administration command: DROP USER",
        objArray7);
    java.lang.String str11 = io.github.onograph.I18N.format(
        "The total number of relationships in the database. (gauge)", objArray7);
    java.lang.Class<?> wildcardClass12 = objArray7.getClass();
    org.junit.Assert.assertNotNull(objArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str8 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str8,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MISSING VAL FOR KEY:" + "'", str9,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals(
        "'" + str10 + "' != '" + "MISSING VAL FOR KEY:Administration command: DROP USER" + "'",
        str10, "MISSING VAL FOR KEY:Administration command: DROP USER");
    org.junit.Assert.assertEquals("'" + str11 + "' != '"
            + "MISSING VAL FOR KEY:The total number of relationships in the database. (gauge)" + "'",
        str11, "MISSING VAL FOR KEY:The total number of relationships in the database. (gauge)");
    org.junit.Assert.assertNotNull(wildcardClass12);
  }

  @Test
  public void test4423() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4423");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:Start the benchmark.");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4424() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4424");
    }
    java.lang.Object[] objArray6 = new java.lang.Object[]{};
    java.lang.String str7 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray6);
    java.lang.String str8 = io.github.onograph.I18N.format(
        "The total number of live threads including daemon and non-daemon threads. (gauge)",
        objArray6);
    java.lang.String str9 = io.github.onograph.I18N.format("Upgraded", objArray6);
    java.lang.String str10 = io.github.onograph.I18N.format("store_random_id", objArray6);
    java.lang.String str11 = io.github.onograph.I18N.format("Unassign a role from the user.",
        objArray6);
    java.lang.String str12 = io.github.onograph.I18N.format("page_cache", objArray6);
    org.junit.Assert.assertNotNull(objArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
    org.junit.Assert.assertEquals("'" + str7 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str7,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str8 + "' != '"
            + "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)"
            + "'", str8,
        "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MISSING VAL FOR KEY:Upgraded" + "'",
        str9, "MISSING VAL FOR KEY:Upgraded");
    org.junit.Assert.assertEquals(
        "'" + str10 + "' != '" + "MISSING VAL FOR KEY:store_random_id" + "'", str10,
        "MISSING VAL FOR KEY:store_random_id");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:Unassign a role from the user." + "'", str11,
        "MISSING VAL FOR KEY:Unassign a role from the user.");
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MISSING VAL FOR KEY:page_cache" + "'",
        str12, "MISSING VAL FOR KEY:page_cache");
  }

  @Test
  public void test4425() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4425");
    }
    java.lang.Object[] objArray11 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str12 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray11);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray11);
    java.lang.String str14 = io.github.onograph.I18N.format("read", objArray11);
    java.lang.String str15 = io.github.onograph.I18N.format("invisible", objArray11);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "Enable reporting metrics about the VM pause time. Deprecated - use metrics.filter instead.",
        objArray11);
    java.lang.String str17 = io.github.onograph.I18N.format("", objArray11);
    java.lang.String str18 = io.github.onograph.I18N.format("metrics.neo4j.size.enabled",
        objArray11);
    org.junit.Assert.assertNotNull(objArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str12,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str13, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str14,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str15, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str16 + "' != '"
            + "MISSING VAL FOR KEY:Enable reporting metrics about the VM pause time. Deprecated - use metrics.filter instead."
            + "'", str16,
        "MISSING VAL FOR KEY:Enable reporting metrics about the VM pause time. Deprecated - use metrics.filter instead.");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:" + "'", str17,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:metrics.neo4j.size.enabled" + "'", str18,
        "MISSING VAL FOR KEY:metrics.neo4j.size.enabled");
  }

  @Test
  public void test4426() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4426");
    }
    java.lang.Object[] objArray12 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str13 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray12);
    java.lang.String str14 = io.github.onograph.I18N.format("writable", objArray12);
    java.lang.String str15 = io.github.onograph.I18N.format("--additional-config", objArray12);
    java.lang.String str16 = io.github.onograph.I18N.format("addresses", objArray12);
    java.lang.String str17 = io.github.onograph.I18N.format(
        "The total number of Bolt connections opened since this instance started. This includes both succeeded and failed connections. (counter)",
        objArray12);
    java.lang.String str18 = io.github.onograph.I18N.format("neo4j.count.*", objArray12);
    java.lang.String str19 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:The total number of rolled back read transactions. (counter)",
        objArray12);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms.quarantineDatabase", objArray12);
    java.lang.Class<?> wildcardClass21 = objArray12.getClass();
    org.junit.Assert.assertNotNull(objArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str13,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:writable" + "'",
        str14, "MISSING VAL FOR KEY:writable");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:--additional-config" + "'", str15,
        "MISSING VAL FOR KEY:--additional-config");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:addresses" + "'",
        str16, "MISSING VAL FOR KEY:addresses");
    org.junit.Assert.assertEquals("'" + str17 + "' != '"
            + "MISSING VAL FOR KEY:The total number of Bolt connections opened since this instance started. This includes both succeeded and failed connections. (counter)"
            + "'", str17,
        "MISSING VAL FOR KEY:The total number of Bolt connections opened since this instance started. This includes both succeeded and failed connections. (counter)");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:neo4j.count.*" + "'", str18,
        "MISSING VAL FOR KEY:neo4j.count.*");
    org.junit.Assert.assertEquals("'" + str19 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:The total number of rolled back read transactions. (counter)"
            + "'", str19,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:The total number of rolled back read transactions. (counter)");
    org.junit.Assert.assertEquals("'" + str20 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms.quarantineDatabase"
            + "'", str20,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms.quarantineDatabase");
    org.junit.Assert.assertNotNull(wildcardClass21);
  }

  @Test
  public void test4427() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4427");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:idCacheClusterCleanup");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4428() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4428");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("used_native");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4429() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4429");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("terminated_read");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4430() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4430");
    }
    java.lang.Object[] objArray1 = null;
    java.lang.String str2 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:*vm.thread*",
        objArray1);
    org.junit.Assert.assertEquals(
        "'" + str2 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:*vm.thread*" + "'", str2,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:*vm.thread*");
  }

  @Test
  public void test4431() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4431");
    }
    java.lang.Object[] objArray11 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str12 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray11);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray11);
    java.lang.String str14 = io.github.onograph.I18N.format("read", objArray11);
    java.lang.String str15 = io.github.onograph.I18N.format("invisible", objArray11);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "Count of database operations which failed previously but have recovered. (counter)",
        objArray11);
    java.lang.String str17 = io.github.onograph.I18N.format("profiles", objArray11);
    java.lang.String str18 = io.github.onograph.I18N.format(
        "causal_clustering.load_balancing.shuffle", objArray11);
    org.junit.Assert.assertNotNull(objArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str12,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str13, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str14,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str15, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str16 + "' != '"
            + "MISSING VAL FOR KEY:Count of database operations which failed previously but have recovered. (counter)"
            + "'", str16,
        "MISSING VAL FOR KEY:Count of database operations which failed previously but have recovered. (counter)");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:profiles" + "'",
        str17, "MISSING VAL FOR KEY:profiles");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.load_balancing.shuffle"
            + "'", str18, "MISSING VAL FOR KEY:causal_clustering.load_balancing.shuffle");
  }

  @Test
  public void test4432() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4432");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:causal_clustering.transaction_advertised_address");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4433() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4433");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "The highest transaction id requested in a pull update by this instance. (counter)");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4434() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4434");
    }
    java.lang.Object[] objArray9 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str10 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray9);
    java.lang.String str11 = io.github.onograph.I18N.format(
        "dbms.security.ldap.authentication.attribute", objArray9);
    java.lang.String str12 = io.github.onograph.I18N.format("leader-only", objArray9);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:A common prefix for the reported metrics field names.", objArray9);
    java.lang.String str14 = io.github.onograph.I18N.format("Create a new role.", objArray9);
    java.lang.Class<?> wildcardClass15 = objArray9.getClass();
    org.junit.Assert.assertNotNull(objArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str10 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str10,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute"
            + "'", str11, "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute");
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MISSING VAL FOR KEY:leader-only" + "'",
        str12, "MISSING VAL FOR KEY:leader-only");
    org.junit.Assert.assertEquals("'" + str13 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:A common prefix for the reported metrics field names."
            + "'", str13,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:A common prefix for the reported metrics field names.");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:Create a new role." + "'", str14,
        "MISSING VAL FOR KEY:Create a new role.");
    org.junit.Assert.assertNotNull(wildcardClass15);
  }

  @Test
  public void test4435() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4435");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str14 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format("read", objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format("invisible", objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format("relationship-type-distribution",
        objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format(
        "Path to the home directory for the copied database. Default is the same as the database copied from.",
        objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format("vm.thread.*", objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format("String", objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format("*dbms.pool.bolt.total_used",
        objArray13);
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str14,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str15, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str16,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str17, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:relationship-type-distribution" + "'", str18,
        "MISSING VAL FOR KEY:relationship-type-distribution");
    org.junit.Assert.assertEquals("'" + str19 + "' != '"
            + "MISSING VAL FOR KEY:Path to the home directory for the copied database. Default is the same as the database copied from."
            + "'", str19,
        "MISSING VAL FOR KEY:Path to the home directory for the copied database. Default is the same as the database copied from.");
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "MISSING VAL FOR KEY:vm.thread.*" + "'",
        str20, "MISSING VAL FOR KEY:vm.thread.*");
    org.junit.Assert.assertEquals("'" + str21 + "' != '" + "MISSING VAL FOR KEY:String" + "'",
        str21, "MISSING VAL FOR KEY:String");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "MISSING VAL FOR KEY:*dbms.pool.bolt.total_used" + "'", str22,
        "MISSING VAL FOR KEY:*dbms.pool.bolt.total_used");
  }

  @Test
  public void test4436() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4436");
    }
    java.lang.Object[] objArray10 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str11 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray10);
    java.lang.String str12 = io.github.onograph.I18N.format("status", objArray10);
    java.lang.String str13 = io.github.onograph.I18N.format("", objArray10);
    java.lang.String str14 = io.github.onograph.I18N.format("bolt.*", objArray10);
    java.lang.String str15 = io.github.onograph.I18N.format("enc_get_metadata", objArray10);
    java.lang.String str16 = io.github.onograph.I18N.format("native", objArray10);
    java.lang.String str17 = io.github.onograph.I18N.format("SUCCESS", objArray10);
    org.junit.Assert.assertNotNull(objArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str11 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str11,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MISSING VAL FOR KEY:status" + "'",
        str12, "MISSING VAL FOR KEY:status");
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MISSING VAL FOR KEY:" + "'", str13,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:bolt.*" + "'",
        str14, "MISSING VAL FOR KEY:bolt.*");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:enc_get_metadata" + "'", str15,
        "MISSING VAL FOR KEY:enc_get_metadata");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:native" + "'",
        str16, "MISSING VAL FOR KEY:native");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:SUCCESS" + "'",
        str17, "MISSING VAL FOR KEY:SUCCESS");
  }

  @Test
  public void test4437() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4437");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:akka.remote.artery.bind.port");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4438() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4438");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:The name of a server_group whose members should be prioritized as leaders. This does not guarantee that members of this group will be leader at all times, but the cluster will attempt to transfer leadership to such a member when possible. If a database is specified using causal_clustering.leadership_priority_group.<database> the specified priority group will apply to that database only. If no database is specified that group will be the default and apply to all databases which have no priority group explicitly set. Using this setting will disable leadership balancing.");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4439() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4439");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:hnd_req_all_databases_id");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4440() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4440");
    }
    java.lang.Object[] objArray15 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str16 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray15);
    java.lang.String str17 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray15);
    java.lang.String str18 = io.github.onograph.I18N.format("read", objArray15);
    java.lang.String str19 = io.github.onograph.I18N.format("invisible", objArray15);
    java.lang.String str20 = io.github.onograph.I18N.format("relationship-type-distribution",
        objArray15);
    java.lang.String str21 = io.github.onograph.I18N.format("read-only", objArray15);
    java.lang.String str22 = io.github.onograph.I18N.format(
        "causal_clustering.kubernetes.label_selector", objArray15);
    java.lang.String str23 = io.github.onograph.I18N.format("RAFT log implementation", objArray15);
    java.lang.String str24 = io.github.onograph.I18N.format("RAFT log pruning frequency",
        objArray15);
    java.lang.String str25 = io.github.onograph.I18N.format("", objArray15);
    java.lang.String str26 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.cluster_id_publish_timeout",
        objArray15);
    org.junit.Assert.assertNotNull(objArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str16,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str17, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str18,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str19, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:relationship-type-distribution" + "'", str20,
        "MISSING VAL FOR KEY:relationship-type-distribution");
    org.junit.Assert.assertEquals("'" + str21 + "' != '" + "MISSING VAL FOR KEY:read-only" + "'",
        str21, "MISSING VAL FOR KEY:read-only");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.kubernetes.label_selector"
            + "'", str22, "MISSING VAL FOR KEY:causal_clustering.kubernetes.label_selector");
    org.junit.Assert.assertEquals(
        "'" + str23 + "' != '" + "MISSING VAL FOR KEY:RAFT log implementation" + "'", str23,
        "MISSING VAL FOR KEY:RAFT log implementation");
    org.junit.Assert.assertEquals(
        "'" + str24 + "' != '" + "MISSING VAL FOR KEY:RAFT log pruning frequency" + "'", str24,
        "MISSING VAL FOR KEY:RAFT log pruning frequency");
    org.junit.Assert.assertEquals("'" + str25 + "' != '" + "MISSING VAL FOR KEY:" + "'", str25,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str26 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.cluster_id_publish_timeout"
            + "'", str26,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.cluster_id_publish_timeout");
  }

  @Test
  public void test4441() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4441");
    }
    java.lang.Object[] objArray12 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str13 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray12);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray12);
    java.lang.String str15 = io.github.onograph.I18N.format("read", objArray12);
    java.lang.String str16 = io.github.onograph.I18N.format("invisible", objArray12);
    java.lang.String str17 = io.github.onograph.I18N.format("relationship-type-distribution",
        objArray12);
    java.lang.String str18 = io.github.onograph.I18N.format("node", objArray12);
    java.lang.String str19 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:akka.remote.artery.bind.port", objArray12);
    java.lang.String str20 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:lz4_encoder",
        objArray12);
    org.junit.Assert.assertNotNull(objArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str13,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str14, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str15,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str16, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:relationship-type-distribution" + "'", str17,
        "MISSING VAL FOR KEY:relationship-type-distribution");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:node" + "'", str18,
        "MISSING VAL FOR KEY:node");
    org.junit.Assert.assertEquals("'" + str19 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:akka.remote.artery.bind.port"
            + "'", str19,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:akka.remote.artery.bind.port");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:lz4_encoder" + "'", str20,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:lz4_encoder");
  }

  @Test
  public void test4442() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4442");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("connections_opened");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4443() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4443");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("days");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4444() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4444");
    }
    java.lang.Object[] objArray15 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str16 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray15);
    java.lang.String str17 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray15);
    java.lang.String str18 = io.github.onograph.I18N.format("read", objArray15);
    java.lang.String str19 = io.github.onograph.I18N.format("invisible", objArray15);
    java.lang.String str20 = io.github.onograph.I18N.format("dec_dispatch", objArray15);
    java.lang.String str21 = io.github.onograph.I18N.format(
        "Maximum timeout for cluster status request execution", objArray15);
    java.lang.String str22 = io.github.onograph.I18N.format("", objArray15);
    java.lang.String str23 = io.github.onograph.I18N.format("Administration command: SHOW USERS",
        objArray15);
    java.lang.String str24 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:enc_snapshot", objArray15);
    java.lang.String str25 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.core.*", objArray15);
    java.lang.String str26 = io.github.onograph.I18N.format(
        "akka.cluster.failure-detector.max-sample-size", objArray15);
    java.lang.Class<?> wildcardClass27 = objArray15.getClass();
    org.junit.Assert.assertNotNull(objArray15);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str16,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str17, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str18,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str19, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "MISSING VAL FOR KEY:dec_dispatch" + "'",
        str20, "MISSING VAL FOR KEY:dec_dispatch");
    org.junit.Assert.assertEquals("'" + str21 + "' != '"
            + "MISSING VAL FOR KEY:Maximum timeout for cluster status request execution" + "'", str21,
        "MISSING VAL FOR KEY:Maximum timeout for cluster status request execution");
    org.junit.Assert.assertEquals("'" + str22 + "' != '" + "MISSING VAL FOR KEY:" + "'", str22,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals(
        "'" + str23 + "' != '" + "MISSING VAL FOR KEY:Administration command: SHOW USERS" + "'",
        str23, "MISSING VAL FOR KEY:Administration command: SHOW USERS");
    org.junit.Assert.assertEquals("'" + str24 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:enc_snapshot" + "'", str24,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:enc_snapshot");
    org.junit.Assert.assertEquals("'" + str25 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.core.*"
            + "'", str25,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.core.*");
    org.junit.Assert.assertEquals(
        "'" + str26 + "' != '" + "MISSING VAL FOR KEY:akka.cluster.failure-detector.max-sample-size"
            + "'", str26, "MISSING VAL FOR KEY:akka.cluster.failure-detector.max-sample-size");
    org.junit.Assert.assertNotNull(wildcardClass27);
  }

  @Test
  public void test4445() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4445");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str14 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format("read", objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format("invisible", objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format("dec_dispatch", objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format("localhost", objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:metrics.csv.rotation.compression", objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:Raft protocol implementation versions that this instance will allow in negotiation as a comma-separated list. Order is not relevant: the greatest value will be preferred. An empty list will allow all supported versions. Example value: \"1.0, 1.3, 2.0, 2.1\"",
        objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:txs", objArray13);
    java.lang.Class<?> wildcardClass23 = objArray13.getClass();
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str14,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str15, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str16,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str17, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:dec_dispatch" + "'",
        str18, "MISSING VAL FOR KEY:dec_dispatch");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MISSING VAL FOR KEY:localhost" + "'",
        str19, "MISSING VAL FOR KEY:localhost");
    org.junit.Assert.assertEquals("'" + str20 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:metrics.csv.rotation.compression" + "'", str20,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:metrics.csv.rotation.compression");
    org.junit.Assert.assertEquals("'" + str21 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Raft protocol implementation versions that this instance will allow in negotiation as a comma-separated list. Order is not relevant: the greatest value will be preferred. An empty list will allow all supported versions. Example value: \"1.0, 1.3, 2.0, 2.1\""
            + "'", str21,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Raft protocol implementation versions that this instance will allow in negotiation as a comma-separated list. Order is not relevant: the greatest value will be preferred. An empty list will allow all supported versions. Example value: \"1.0, 1.3, 2.0, 2.1\"");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:txs" + "'", str22,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:txs");
    org.junit.Assert.assertNotNull(wildcardClass23);
  }

  @Test
  public void test4446() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4446");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str14 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format("read", objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format("invisible", objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format("dec_dispatch", objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format("localhost", objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:OUTBOUND",
        objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format("handshake_client_decoder", objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:<all/users/roles>",
        objArray13);
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str14,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str15, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str16,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str17, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:dec_dispatch" + "'",
        str18, "MISSING VAL FOR KEY:dec_dispatch");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MISSING VAL FOR KEY:localhost" + "'",
        str19, "MISSING VAL FOR KEY:localhost");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:OUTBOUND" + "'", str20,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:OUTBOUND");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:handshake_client_decoder" + "'", str21,
        "MISSING VAL FOR KEY:handshake_client_decoder");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:<all/users/roles>" + "'",
        str22, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:<all/users/roles>");
  }

  @Test
  public void test4447() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4447");
    }
    java.lang.Object[] objArray12 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str13 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray12);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray12);
    java.lang.String str15 = io.github.onograph.I18N.format("elapsedTimeMs", objArray12);
    java.lang.String str16 = io.github.onograph.I18N.format("driver.connection.max_lifetime",
        objArray12);
    java.lang.String str17 = io.github.onograph.I18N.format("dbms.procedures", objArray12);
    java.lang.String str18 = io.github.onograph.I18N.format("causal_clustering.core", objArray12);
    java.lang.String str19 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:causal_clustering.leader_transfer_interval", objArray12);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Configure if the `dbms.routing.getRoutingTable()` procedure should include the leader as read endpoint or return only read replicas/followers. Note: leader is returned as read endpoint if no other member is present all. ",
        objArray12);
    java.lang.Class<?> wildcardClass21 = objArray12.getClass();
    org.junit.Assert.assertNotNull(objArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str13,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str14, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:elapsedTimeMs" + "'", str15,
        "MISSING VAL FOR KEY:elapsedTimeMs");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:driver.connection.max_lifetime" + "'", str16,
        "MISSING VAL FOR KEY:driver.connection.max_lifetime");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:dbms.procedures" + "'", str17,
        "MISSING VAL FOR KEY:dbms.procedures");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.core" + "'", str18,
        "MISSING VAL FOR KEY:causal_clustering.core");
    org.junit.Assert.assertEquals("'" + str19 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.leader_transfer_interval"
            + "'", str19,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.leader_transfer_interval");
    org.junit.Assert.assertEquals("'" + str20 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:Configure if the `dbms.routing.getRoutingTable()` procedure should include the leader as read endpoint or return only read replicas/followers. Note: leader is returned as read endpoint if no other member is present all. "
            + "'", str20,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:Configure if the `dbms.routing.getRoutingTable()` procedure should include the leader as read endpoint or return only read replicas/followers. Note: leader is returned as read endpoint if no other member is present all. ");
    org.junit.Assert.assertNotNull(wildcardClass21);
  }

  @Test
  public void test4448() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4448");
    }
    java.lang.Object[] objArray14 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str15 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray14);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "dbms.security.ldap.authentication.attribute", objArray14);
    java.lang.String str17 = io.github.onograph.I18N.format("dbms.security.createUser", objArray14);
    java.lang.String str18 = io.github.onograph.I18N.format("BatchSize", objArray14);
    java.lang.String str19 = io.github.onograph.I18N.format("*transaction.peak_concurrent",
        objArray14);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "The total time, in milliseconds, spent in check pointing so far. (counter)", objArray14);
    java.lang.String str21 = io.github.onograph.I18N.format(
        "Time out for protocol negotiation handshake", objArray14);
    java.lang.String str22 = io.github.onograph.I18N.format("last_leader_message", objArray14);
    java.lang.String str23 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:Unassign a role from the user.", objArray14);
    java.lang.String str24 = io.github.onograph.I18N.format("--force", objArray14);
    org.junit.Assert.assertNotNull(objArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str15,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute"
            + "'", str16, "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:dbms.security.createUser" + "'", str17,
        "MISSING VAL FOR KEY:dbms.security.createUser");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:BatchSize" + "'",
        str18, "MISSING VAL FOR KEY:BatchSize");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:*transaction.peak_concurrent" + "'", str19,
        "MISSING VAL FOR KEY:*transaction.peak_concurrent");
    org.junit.Assert.assertEquals("'" + str20 + "' != '"
            + "MISSING VAL FOR KEY:The total time, in milliseconds, spent in check pointing so far. (counter)"
            + "'", str20,
        "MISSING VAL FOR KEY:The total time, in milliseconds, spent in check pointing so far. (counter)");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:Time out for protocol negotiation handshake"
            + "'", str21, "MISSING VAL FOR KEY:Time out for protocol negotiation handshake");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "MISSING VAL FOR KEY:last_leader_message" + "'", str22,
        "MISSING VAL FOR KEY:last_leader_message");
    org.junit.Assert.assertEquals("'" + str23 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Unassign a role from the user." + "'", str23,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Unassign a role from the user.");
    org.junit.Assert.assertEquals("'" + str24 + "' != '" + "MISSING VAL FOR KEY:--force" + "'",
        str24, "MISSING VAL FOR KEY:--force");
  }

  @Test
  public void test4449() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4449");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("restore_metadata.cypher");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4450() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4450");
    }
    java.lang.Object[] objArray11 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str12 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray11);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray11);
    java.lang.String str14 = io.github.onograph.I18N.format("read", objArray11);
    java.lang.String str15 = io.github.onograph.I18N.format("invisible", objArray11);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Discovery cluster member size. (gauge)",
        objArray11);
    java.lang.String str17 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:Discovery cluster member size. (gauge)", objArray11);
    java.lang.String str18 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:Configure the discovery type used for cluster name resolution",
        objArray11);
    java.lang.Class<?> wildcardClass19 = objArray11.getClass();
    org.junit.Assert.assertNotNull(objArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str12,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str13, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str14,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str15, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str16 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:Discovery cluster member size. (gauge)"
            + "'", str16,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:Discovery cluster member size. (gauge)");
    org.junit.Assert.assertEquals("'" + str17 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Discovery cluster member size. (gauge)" + "'",
        str17, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Discovery cluster member size. (gauge)");
    org.junit.Assert.assertEquals("'" + str18 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Configure the discovery type used for cluster name resolution"
            + "'", str18,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Configure the discovery type used for cluster name resolution");
    org.junit.Assert.assertNotNull(wildcardClass19);
  }

  @Test
  public void test4451() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4451");
    }
    java.lang.Object[] objArray7 = new java.lang.Object[]{};
    java.lang.String str8 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray7);
    java.lang.String str9 = io.github.onograph.I18N.format(
        "The total number of live threads including daemon and non-daemon threads. (gauge)",
        objArray7);
    java.lang.String str10 = io.github.onograph.I18N.format("Number of available processors",
        objArray7);
    java.lang.String str11 = io.github.onograph.I18N.format(
        "Raft protocol implementation versions that this instance will allow in negotiation as a comma-separated list. Order is not relevant: the greatest value will be preferred. An empty list will allow all supported versions. Example value: \"1.0, 1.3, 2.0, 2.1\"",
        objArray7);
    java.lang.String str12 = io.github.onograph.I18N.format("*transaction.last_committed_tx_id",
        objArray7);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "dbms.security.ldap.authentication.search_for_attribute", objArray7);
    java.lang.String str14 = io.github.onograph.I18N.format("transactionLogCatchup", objArray7);
    java.lang.Class<?> wildcardClass15 = objArray7.getClass();
    org.junit.Assert.assertNotNull(objArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
    org.junit.Assert.assertEquals("'" + str8 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str8,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str9 + "' != '"
            + "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)"
            + "'", str9,
        "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)");
    org.junit.Assert.assertEquals(
        "'" + str10 + "' != '" + "MISSING VAL FOR KEY:Number of available processors" + "'", str10,
        "MISSING VAL FOR KEY:Number of available processors");
    org.junit.Assert.assertEquals("'" + str11 + "' != '"
            + "MISSING VAL FOR KEY:Raft protocol implementation versions that this instance will allow in negotiation as a comma-separated list. Order is not relevant: the greatest value will be preferred. An empty list will allow all supported versions. Example value: \"1.0, 1.3, 2.0, 2.1\""
            + "'", str11,
        "MISSING VAL FOR KEY:Raft protocol implementation versions that this instance will allow in negotiation as a comma-separated list. Order is not relevant: the greatest value will be preferred. An empty list will allow all supported versions. Example value: \"1.0, 1.3, 2.0, 2.1\"");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:*transaction.last_committed_tx_id" + "'",
        str12, "MISSING VAL FOR KEY:*transaction.last_committed_tx_id");
    org.junit.Assert.assertEquals("'" + str13 + "' != '"
            + "MISSING VAL FOR KEY:dbms.security.ldap.authentication.search_for_attribute" + "'", str13,
        "MISSING VAL FOR KEY:dbms.security.ldap.authentication.search_for_attribute");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:transactionLogCatchup" + "'", str14,
        "MISSING VAL FOR KEY:transactionLogCatchup");
    org.junit.Assert.assertNotNull(wildcardClass15);
  }

  @Test
  public void test4452() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4452");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("metrics.neo4j.data.counts.enabled");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4453() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4453");
    }
    java.lang.Object[] objArray9 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str10 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray9);
    java.lang.String str11 = io.github.onograph.I18N.format(
        "dbms.security.ldap.authentication.attribute", objArray9);
    java.lang.String str12 = io.github.onograph.I18N.format("LZ_validating", objArray9);
    java.lang.String str13 = io.github.onograph.I18N.format("dbms.security.auth_cache_use_ttl",
        objArray9);
    java.lang.String str14 = io.github.onograph.I18N.format(".Read Replica Metrics", objArray9);
    org.junit.Assert.assertNotNull(objArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str10 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str10,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute"
            + "'", str11, "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:LZ_validating" + "'", str12,
        "MISSING VAL FOR KEY:LZ_validating");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:dbms.security.auth_cache_use_ttl" + "'",
        str13, "MISSING VAL FOR KEY:dbms.security.auth_cache_use_ttl");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:.Read Replica Metrics" + "'", str14,
        "MISSING VAL FOR KEY:.Read Replica Metrics");
  }

  @Test
  public void test4454() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4454");
    }
    java.lang.Object[] objArray4 = new java.lang.Object[]{};
    java.lang.String str5 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray4);
    java.lang.String str6 = io.github.onograph.I18N.format("Upgraded", objArray4);
    java.lang.String str7 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:memory.pool",
        objArray4);
    java.lang.String str8 = io.github.onograph.I18N.format(
        "Path to the transaction files, if they are not in the same folder as '--from-path'.",
        objArray4);
    org.junit.Assert.assertNotNull(objArray4);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
    org.junit.Assert.assertEquals("'" + str5 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str5,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str6 + "' != '" + "MISSING VAL FOR KEY:Upgraded" + "'",
        str6, "MISSING VAL FOR KEY:Upgraded");
    org.junit.Assert.assertEquals(
        "'" + str7 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:memory.pool" + "'", str7,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:memory.pool");
    org.junit.Assert.assertEquals("'" + str8 + "' != '"
            + "MISSING VAL FOR KEY:Path to the transaction files, if they are not in the same folder as '--from-path'."
            + "'", str8,
        "MISSING VAL FOR KEY:Path to the transaction files, if they are not in the same folder as '--from-path'.");
  }

  @Test
  public void test4455() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4455");
    }
    java.lang.Object[] objArray14 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str15 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray14);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray14);
    java.lang.String str17 = io.github.onograph.I18N.format("read", objArray14);
    java.lang.String str18 = io.github.onograph.I18N.format("invisible", objArray14);
    java.lang.String str19 = io.github.onograph.I18N.format("false", objArray14);
    java.lang.String str20 = io.github.onograph.I18N.format("INBOUND", objArray14);
    java.lang.String str21 = io.github.onograph.I18N.format("*bolt.messages_started*", objArray14);
    java.lang.String str22 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:*ids_in_use.node", objArray14);
    java.lang.String str23 = io.github.onograph.I18N.format(
        "causal_clustering.raft_vote_state_size", objArray14);
    java.lang.String str24 = io.github.onograph.I18N.format(
        "causal_clustering.in_flight_cache.type", objArray14);
    java.lang.Class<?> wildcardClass25 = objArray14.getClass();
    org.junit.Assert.assertNotNull(objArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str15,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str16, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str17,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str18, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MISSING VAL FOR KEY:false" + "'", str19,
        "MISSING VAL FOR KEY:false");
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "MISSING VAL FOR KEY:INBOUND" + "'",
        str20, "MISSING VAL FOR KEY:INBOUND");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:*bolt.messages_started*" + "'", str21,
        "MISSING VAL FOR KEY:*bolt.messages_started*");
    org.junit.Assert.assertEquals("'" + str22 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:*ids_in_use.node" + "'",
        str22, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:*ids_in_use.node");
    org.junit.Assert.assertEquals(
        "'" + str23 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.raft_vote_state_size" + "'",
        str23, "MISSING VAL FOR KEY:causal_clustering.raft_vote_state_size");
    org.junit.Assert.assertEquals(
        "'" + str24 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.in_flight_cache.type" + "'",
        str24, "MISSING VAL FOR KEY:causal_clustering.in_flight_cache.type");
    org.junit.Assert.assertNotNull(wildcardClass25);
  }

  @Test
  public void test4456() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4456");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:data-link");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4457() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4457");
    }
    java.lang.Object[] objArray8 = new java.lang.Object[]{
        "causal_clustering.leader_transfer_interval",
        "The total number of Bolt connections opened since this instance started. This includes both succeeded and failed connections. (counter)",
        "This has been replaced by privilege management on roles. Setting it to true will prevent the server from starting.",
        "metrics.jvm.pause_time.enabled", "FOR_ROLE"};
    java.lang.String str9 = io.github.onograph.I18N.format("dbms.pool", objArray8);
    java.lang.String str10 = io.github.onograph.I18N.format(
        "causal_clustering.minimum_core_cluster_size_at_runtime", objArray8);
    java.lang.String str11 = io.github.onograph.I18N.format("policy", objArray8);
    org.junit.Assert.assertNotNull(objArray8);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8),
        "[causal_clustering.leader_transfer_interval, The total number of Bolt connections opened since this instance started. This includes both succeeded and failed connections. (counter), This has been replaced by privilege management on roles. Setting it to true will prevent the server from starting., metrics.jvm.pause_time.enabled, FOR_ROLE]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8),
        "[causal_clustering.leader_transfer_interval, The total number of Bolt connections opened since this instance started. This includes both succeeded and failed connections. (counter), This has been replaced by privilege management on roles. Setting it to true will prevent the server from starting., metrics.jvm.pause_time.enabled, FOR_ROLE]");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MISSING VAL FOR KEY:dbms.pool" + "'",
        str9, "MISSING VAL FOR KEY:dbms.pool");
    org.junit.Assert.assertEquals("'" + str10 + "' != '"
            + "MISSING VAL FOR KEY:causal_clustering.minimum_core_cluster_size_at_runtime" + "'", str10,
        "MISSING VAL FOR KEY:causal_clustering.minimum_core_cluster_size_at_runtime");
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MISSING VAL FOR KEY:policy" + "'",
        str11, "MISSING VAL FOR KEY:policy");
  }

  @Test
  public void test4458() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4458");
    }
    java.lang.Object[] objArray12 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str13 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray12);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray12);
    java.lang.String str15 = io.github.onograph.I18N.format("read", objArray12);
    java.lang.String str16 = io.github.onograph.I18N.format("invisible", objArray12);
    java.lang.String str17 = io.github.onograph.I18N.format("dec_dispatch", objArray12);
    java.lang.String str18 = io.github.onograph.I18N.format("init_server_handler", objArray12);
    java.lang.String str19 = io.github.onograph.I18N.format("<path>", objArray12);
    java.lang.String str20 = io.github.onograph.I18N.format("max_elements", objArray12);
    java.lang.Class<?> wildcardClass21 = objArray12.getClass();
    org.junit.Assert.assertNotNull(objArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str13,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str14, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str15,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str16, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:dec_dispatch" + "'",
        str17, "MISSING VAL FOR KEY:dec_dispatch");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:init_server_handler" + "'", str18,
        "MISSING VAL FOR KEY:init_server_handler");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MISSING VAL FOR KEY:<path>" + "'",
        str19, "MISSING VAL FOR KEY:<path>");
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "MISSING VAL FOR KEY:max_elements" + "'",
        str20, "MISSING VAL FOR KEY:max_elements");
    org.junit.Assert.assertNotNull(wildcardClass21);
  }

  @Test
  public void test4459() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4459");
    }
    java.lang.Object[] objArray9 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str10 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray9);
    java.lang.String str11 = io.github.onograph.I18N.format("browser.credential_timeout",
        objArray9);
    java.lang.String str12 = io.github.onograph.I18N.format("", objArray9);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "List failed job runs. There is a limit for amount of historical data.", objArray9);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:replication_maybe", objArray9);
    org.junit.Assert.assertNotNull(objArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str10 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str10,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:browser.credential_timeout" + "'", str11,
        "MISSING VAL FOR KEY:browser.credential_timeout");
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MISSING VAL FOR KEY:" + "'", str12,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str13 + "' != '"
            + "MISSING VAL FOR KEY:List failed job runs. There is a limit for amount of historical data."
            + "'", str13,
        "MISSING VAL FOR KEY:List failed job runs. There is a limit for amount of historical data.");
    org.junit.Assert.assertEquals("'" + str14 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:replication_maybe" + "'",
        str14, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:replication_maybe");
  }

  @Test
  public void test4460() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4460");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("hnd_res_store_id");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4461() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4461");
    }
    java.lang.Object[] objArray14 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str15 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray14);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray14);
    java.lang.String str17 = io.github.onograph.I18N.format("read", objArray14);
    java.lang.String str18 = io.github.onograph.I18N.format("invisible", objArray14);
    java.lang.String str19 = io.github.onograph.I18N.format("relationship-type-distribution",
        objArray14);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:<label>[,<label>...]", objArray14);
    java.lang.String str21 = io.github.onograph.I18N.format(
        "causal_clustering.cluster_topology_refresh", objArray14);
    java.lang.String str22 = io.github.onograph.I18N.format("PUBLIC", objArray14);
    java.lang.String str23 = io.github.onograph.I18N.format("high_limit", objArray14);
    java.lang.String str24 = io.github.onograph.I18N.format("hnd_res_file_header", objArray14);
    org.junit.Assert.assertNotNull(objArray14);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str15,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str16, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str17,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str18, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:relationship-type-distribution" + "'", str19,
        "MISSING VAL FOR KEY:relationship-type-distribution");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:<label>[,<label>...]"
            + "'", str20, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:<label>[,<label>...]");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.cluster_topology_refresh"
            + "'", str21, "MISSING VAL FOR KEY:causal_clustering.cluster_topology_refresh");
    org.junit.Assert.assertEquals("'" + str22 + "' != '" + "MISSING VAL FOR KEY:PUBLIC" + "'",
        str22, "MISSING VAL FOR KEY:PUBLIC");
    org.junit.Assert.assertEquals("'" + str23 + "' != '" + "MISSING VAL FOR KEY:high_limit" + "'",
        str23, "MISSING VAL FOR KEY:high_limit");
    org.junit.Assert.assertEquals(
        "'" + str24 + "' != '" + "MISSING VAL FOR KEY:hnd_res_file_header" + "'", str24,
        "MISSING VAL FOR KEY:hnd_res_file_header");
  }

  @Test
  public void test4462() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4462");
    }
    java.lang.Object[] objArray11 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str12 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray11);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "dbms.security.ldap.authentication.attribute", objArray11);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:Number of available processors", objArray11);
    java.lang.String str15 = io.github.onograph.I18N.format("action", objArray11);
    java.lang.String str16 = io.github.onograph.I18N.format("replication_maybe", objArray11);
    java.lang.String str17 = io.github.onograph.I18N.format("enc_res_pre_copy", objArray11);
    java.lang.String str18 = io.github.onograph.I18N.format("RAFT log rotation size", objArray11);
    org.junit.Assert.assertNotNull(objArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str12,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute"
            + "'", str13, "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute");
    org.junit.Assert.assertEquals("'" + str14 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Number of available processors" + "'", str14,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Number of available processors");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:action" + "'",
        str15, "MISSING VAL FOR KEY:action");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:replication_maybe" + "'", str16,
        "MISSING VAL FOR KEY:replication_maybe");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:enc_res_pre_copy" + "'", str17,
        "MISSING VAL FOR KEY:enc_res_pre_copy");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:RAFT log rotation size" + "'", str18,
        "MISSING VAL FOR KEY:RAFT log rotation size");
  }

  @Test
  public void test4463() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4463");
    }
    java.lang.Object[] objArray11 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str12 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray11);
    java.lang.String str13 = io.github.onograph.I18N.format("status", objArray11);
    java.lang.String str14 = io.github.onograph.I18N.format("", objArray11);
    java.lang.String str15 = io.github.onograph.I18N.format("bolt.*", objArray11);
    java.lang.String str16 = io.github.onograph.I18N.format("enc_get_metadata", objArray11);
    java.lang.String str17 = io.github.onograph.I18N.format("native", objArray11);
    java.lang.String str18 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:LZ_validating",
        objArray11);
    java.lang.String str19 = io.github.onograph.I18N.format(
        "causal_clustering.raft_log_reader_pool_size", objArray11);
    org.junit.Assert.assertNotNull(objArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str12 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str12,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MISSING VAL FOR KEY:status" + "'",
        str13, "MISSING VAL FOR KEY:status");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:" + "'", str14,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:bolt.*" + "'",
        str15, "MISSING VAL FOR KEY:bolt.*");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:enc_get_metadata" + "'", str16,
        "MISSING VAL FOR KEY:enc_get_metadata");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:native" + "'",
        str17, "MISSING VAL FOR KEY:native");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:LZ_validating" + "'",
        str18, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:LZ_validating");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.raft_log_reader_pool_size"
            + "'", str19, "MISSING VAL FOR KEY:causal_clustering.raft_log_reader_pool_size");
  }

  @Test
  public void test4464() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4464");
    }
    java.lang.Object[] objArray11 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str12 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray11);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray11);
    java.lang.String str14 = io.github.onograph.I18N.format("", objArray11);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:Enable multi-data center features. Requires appropriate licensing.",
        objArray11);
    java.lang.String str16 = io.github.onograph.I18N.format("page_cache", objArray11);
    java.lang.String str17 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:typically-connect-to-random-read-replica",
        objArray11);
    java.lang.String str18 = io.github.onograph.I18N.format(
        "TX pull requests received from read replicas. (counter)", objArray11);
    java.lang.Class<?> wildcardClass19 = objArray11.getClass();
    org.junit.Assert.assertNotNull(objArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str12,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str13, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:" + "'", str14,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str15 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Enable multi-data center features. Requires appropriate licensing."
            + "'", str15,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Enable multi-data center features. Requires appropriate licensing.");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:page_cache" + "'",
        str16, "MISSING VAL FOR KEY:page_cache");
    org.junit.Assert.assertEquals("'" + str17 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:typically-connect-to-random-read-replica"
            + "'", str17,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:typically-connect-to-random-read-replica");
    org.junit.Assert.assertEquals("'" + str18 + "' != '"
            + "MISSING VAL FOR KEY:TX pull requests received from read replicas. (counter)" + "'",
        str18, "MISSING VAL FOR KEY:TX pull requests received from read replicas. (counter)");
    org.junit.Assert.assertNotNull(wildcardClass19);
  }

  @Test
  public void test4465() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4465");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str14 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format("read", objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format("invisible", objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format("relationship-type-distribution",
        objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:<label>[,<label>...]", objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format("metrics.jmx.enabled", objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format("dbms.max_databases", objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format("/{databaseName}/cluster", objArray13);
    java.lang.Class<?> wildcardClass23 = objArray13.getClass();
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str14,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str15, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str16,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str17, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:relationship-type-distribution" + "'", str18,
        "MISSING VAL FOR KEY:relationship-type-distribution");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:<label>[,<label>...]"
            + "'", str19, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:<label>[,<label>...]");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:metrics.jmx.enabled" + "'", str20,
        "MISSING VAL FOR KEY:metrics.jmx.enabled");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:dbms.max_databases" + "'", str21,
        "MISSING VAL FOR KEY:dbms.max_databases");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "MISSING VAL FOR KEY:/{databaseName}/cluster" + "'", str22,
        "MISSING VAL FOR KEY:/{databaseName}/cluster");
    org.junit.Assert.assertNotNull(wildcardClass23);
  }

  @Test
  public void test4466() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4466");
    }
    java.lang.Object[] objArray11 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str12 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray11);
    java.lang.String str13 = io.github.onograph.I18N.format("status", objArray11);
    java.lang.String str14 = io.github.onograph.I18N.format("raft-server", objArray11);
    java.lang.String str15 = io.github.onograph.I18N.format("transaction.*", objArray11);
    java.lang.String str16 = io.github.onograph.I18N.format(".Query execution metrics", objArray11);
    java.lang.String str17 = io.github.onograph.I18N.format("cn", objArray11);
    java.lang.String str18 = io.github.onograph.I18N.format("simple", objArray11);
    java.lang.String str19 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:RelationshipQualifierAll", objArray11);
    java.lang.Class<?> wildcardClass20 = objArray11.getClass();
    org.junit.Assert.assertNotNull(objArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str12 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str12,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MISSING VAL FOR KEY:status" + "'",
        str13, "MISSING VAL FOR KEY:status");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:raft-server" + "'",
        str14, "MISSING VAL FOR KEY:raft-server");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:transaction.*" + "'", str15,
        "MISSING VAL FOR KEY:transaction.*");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:.Query execution metrics" + "'", str16,
        "MISSING VAL FOR KEY:.Query execution metrics");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:cn" + "'", str17,
        "MISSING VAL FOR KEY:cn");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:simple" + "'",
        str18, "MISSING VAL FOR KEY:simple");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:RelationshipQualifierAll"
            + "'", str19, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:RelationshipQualifierAll");
    org.junit.Assert.assertNotNull(wildcardClass20);
  }

  @Test
  public void test4467() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4467");
    }
    java.lang.Object[] objArray5 = new java.lang.Object[]{};
    java.lang.String str6 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray5);
    java.lang.String str7 = io.github.onograph.I18N.format("function", objArray5);
    java.lang.String str8 = io.github.onograph.I18N.format("raft_chunked_writer", objArray5);
    java.lang.String str9 = io.github.onograph.I18N.format(".JVM file descriptor metrics.",
        objArray5);
    java.lang.String str10 = io.github.onograph.I18N.format(
        "The total number of live threads including daemon and non-daemon threads. (gauge)",
        objArray5);
    java.lang.Class<?> wildcardClass11 = objArray5.getClass();
    org.junit.Assert.assertNotNull(objArray5);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
    org.junit.Assert.assertEquals("'" + str6 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str6,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str7 + "' != '" + "MISSING VAL FOR KEY:function" + "'",
        str7, "MISSING VAL FOR KEY:function");
    org.junit.Assert.assertEquals(
        "'" + str8 + "' != '" + "MISSING VAL FOR KEY:raft_chunked_writer" + "'", str8,
        "MISSING VAL FOR KEY:raft_chunked_writer");
    org.junit.Assert.assertEquals(
        "'" + str9 + "' != '" + "MISSING VAL FOR KEY:.JVM file descriptor metrics." + "'", str9,
        "MISSING VAL FOR KEY:.JVM file descriptor metrics.");
    org.junit.Assert.assertEquals("'" + str10 + "' != '"
            + "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)"
            + "'", str10,
        "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)");
    org.junit.Assert.assertNotNull(wildcardClass11);
  }

  @Test
  public void test4468() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4468");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("failed");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4469() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4469");
    }
    java.lang.Object[] objArray11 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str12 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray11);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "dbms.security.ldap.authentication.attribute", objArray11);
    java.lang.String str14 = io.github.onograph.I18N.format("dbms.security.createUser", objArray11);
    java.lang.String str15 = io.github.onograph.I18N.format("messages_started", objArray11);
    java.lang.String str16 = io.github.onograph.I18N.format("total_size", objArray11);
    java.lang.String str17 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:typically-connect-to-random-read-replica",
        objArray11);
    java.lang.String str18 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:Perform authentication by searching for an unique attribute of a user.\nUsing this setting requires `dbms.security.ldap.authorization.system_username` and `dbms.security.ldap.authorization.system_password` to be configured.",
        objArray11);
    org.junit.Assert.assertNotNull(objArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str12,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute"
            + "'", str13, "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:dbms.security.createUser" + "'", str14,
        "MISSING VAL FOR KEY:dbms.security.createUser");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:messages_started" + "'", str15,
        "MISSING VAL FOR KEY:messages_started");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:total_size" + "'",
        str16, "MISSING VAL FOR KEY:total_size");
    org.junit.Assert.assertEquals("'" + str17 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:typically-connect-to-random-read-replica"
            + "'", str17,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:typically-connect-to-random-read-replica");
    org.junit.Assert.assertEquals("'" + str18 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Perform authentication by searching for an unique attribute of a user.\nUsing this setting requires `dbms.security.ldap.authorization.system_username` and `dbms.security.ldap.authorization.system_password` to be configured."
            + "'", str18,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Perform authentication by searching for an unique attribute of a user.\nUsing this setting requires `dbms.security.ldap.authorization.system_username` and `dbms.security.ldap.authorization.system_password` to be configured.");
  }

  @Test
  public void test4470() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4470");
    }
    java.lang.Object[] objArray8 = new java.lang.Object[]{};
    java.lang.String str9 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray8);
    java.lang.String str10 = io.github.onograph.I18N.format(
        "The total number of live threads including daemon and non-daemon threads. (gauge)",
        objArray8);
    java.lang.String str11 = io.github.onograph.I18N.format("Upgraded", objArray8);
    java.lang.String str12 = io.github.onograph.I18N.format("", objArray8);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "Enable reporting metrics about the store size of each database. Deprecated - use metrics.filter instead.",
        objArray8);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "Enable metrics namespaces that separates the global and database specific metrics. If enabled all database specific metrics will have field names starting with <metrics_prefix>.database.<database_name> and all global metrics will start with <metrics_prefix>.dbms. For example neo4j.page_cache.hits will become neo4j.dbms.page_cache.hits and neo4j.system.log.rotation_events will become neo4j.database.system.log.rotation_events.",
        objArray8);
    java.lang.String str15 = io.github.onograph.I18N.format("startup", objArray8);
    java.lang.String str16 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:action",
        objArray8);
    java.lang.Class<?> wildcardClass17 = objArray8.getClass();
    org.junit.Assert.assertNotNull(objArray8);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
    org.junit.Assert.assertEquals("'" + str9 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str9,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str10 + "' != '"
            + "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)"
            + "'", str10,
        "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)");
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MISSING VAL FOR KEY:Upgraded" + "'",
        str11, "MISSING VAL FOR KEY:Upgraded");
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MISSING VAL FOR KEY:" + "'", str12,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str13 + "' != '"
            + "MISSING VAL FOR KEY:Enable reporting metrics about the store size of each database. Deprecated - use metrics.filter instead."
            + "'", str13,
        "MISSING VAL FOR KEY:Enable reporting metrics about the store size of each database. Deprecated - use metrics.filter instead.");
    org.junit.Assert.assertEquals("'" + str14 + "' != '"
            + "MISSING VAL FOR KEY:Enable metrics namespaces that separates the global and database specific metrics. If enabled all database specific metrics will have field names starting with <metrics_prefix>.database.<database_name> and all global metrics will start with <metrics_prefix>.dbms. For example neo4j.page_cache.hits will become neo4j.dbms.page_cache.hits and neo4j.system.log.rotation_events will become neo4j.database.system.log.rotation_events."
            + "'", str14,
        "MISSING VAL FOR KEY:Enable metrics namespaces that separates the global and database specific metrics. If enabled all database specific metrics will have field names starting with <metrics_prefix>.database.<database_name> and all global metrics will start with <metrics_prefix>.dbms. For example neo4j.page_cache.hits will become neo4j.dbms.page_cache.hits and neo4j.system.log.rotation_events will become neo4j.database.system.log.rotation_events.");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:startup" + "'",
        str15, "MISSING VAL FOR KEY:startup");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:action" + "'", str16,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:action");
    org.junit.Assert.assertNotNull(wildcardClass17);
  }

  @Test
  public void test4471() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4471");
    }
    java.lang.Object[] objArray12 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str13 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray12);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray12);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "causal_clustering.middleware.akka.failure_detector.max_sample_size", objArray12);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:The LDAP group to which a user must belong to get any access to the system.Set this to restrict access to a subset of LDAP users belonging to a particular group. If this is not set, any user to successfully authenticate via LDAP will have access to the PUBLIC role and any other roles assigned to them via dbms.security.ldap.authorization.group_to_role_mapping.",
        objArray12);
    java.lang.String str17 = io.github.onograph.I18N.format("hnd_info", objArray12);
    java.lang.String str18 = io.github.onograph.I18N.format("*vm.heap.used", objArray12);
    java.lang.String str19 = io.github.onograph.I18N.format(
        "Time interval of inactivity after which a driver will be closed.", objArray12);
    java.lang.String str20 = io.github.onograph.I18N.format("core", objArray12);
    org.junit.Assert.assertNotNull(objArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str13,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str14, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str15 + "' != '"
            + "MISSING VAL FOR KEY:causal_clustering.middleware.akka.failure_detector.max_sample_size"
            + "'", str15,
        "MISSING VAL FOR KEY:causal_clustering.middleware.akka.failure_detector.max_sample_size");
    org.junit.Assert.assertEquals("'" + str16 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:The LDAP group to which a user must belong to get any access to the system.Set this to restrict access to a subset of LDAP users belonging to a particular group. If this is not set, any user to successfully authenticate via LDAP will have access to the PUBLIC role and any other roles assigned to them via dbms.security.ldap.authorization.group_to_role_mapping."
            + "'", str16,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:The LDAP group to which a user must belong to get any access to the system.Set this to restrict access to a subset of LDAP users belonging to a particular group. If this is not set, any user to successfully authenticate via LDAP will have access to the PUBLIC role and any other roles assigned to them via dbms.security.ldap.authorization.group_to_role_mapping.");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:hnd_info" + "'",
        str17, "MISSING VAL FOR KEY:hnd_info");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:*vm.heap.used" + "'", str18,
        "MISSING VAL FOR KEY:*vm.heap.used");
    org.junit.Assert.assertEquals("'" + str19 + "' != '"
            + "MISSING VAL FOR KEY:Time interval of inactivity after which a driver will be closed."
            + "'", str19,
        "MISSING VAL FOR KEY:Time interval of inactivity after which a driver will be closed.");
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "MISSING VAL FOR KEY:core" + "'", str20,
        "MISSING VAL FOR KEY:core");
  }

  @Test
  public void test4472() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4472");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("log");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4473() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4473");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:terminated_read");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4474() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4474");
    }
    java.lang.Object[] objArray16 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str17 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray16);
    java.lang.String str18 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray16);
    java.lang.String str19 = io.github.onograph.I18N.format("read", objArray16);
    java.lang.String str20 = io.github.onograph.I18N.format("invisible", objArray16);
    java.lang.String str21 = io.github.onograph.I18N.format("dec_dispatch", objArray16);
    java.lang.String str22 = io.github.onograph.I18N.format(
        "Maximum timeout for cluster status request execution", objArray16);
    java.lang.String str23 = io.github.onograph.I18N.format("", objArray16);
    java.lang.String str24 = io.github.onograph.I18N.format("Administration command: SHOW USERS",
        objArray16);
    java.lang.String str25 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:enc_snapshot", objArray16);
    java.lang.String str26 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.core.*", objArray16);
    java.lang.String str27 = io.github.onograph.I18N.format("DEFAULT", objArray16);
    java.lang.String str28 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:GRANTED",
        objArray16);
    org.junit.Assert.assertNotNull(objArray16);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str17,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str18, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str19,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str20, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str21 + "' != '" + "MISSING VAL FOR KEY:dec_dispatch" + "'",
        str21, "MISSING VAL FOR KEY:dec_dispatch");
    org.junit.Assert.assertEquals("'" + str22 + "' != '"
            + "MISSING VAL FOR KEY:Maximum timeout for cluster status request execution" + "'", str22,
        "MISSING VAL FOR KEY:Maximum timeout for cluster status request execution");
    org.junit.Assert.assertEquals("'" + str23 + "' != '" + "MISSING VAL FOR KEY:" + "'", str23,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals(
        "'" + str24 + "' != '" + "MISSING VAL FOR KEY:Administration command: SHOW USERS" + "'",
        str24, "MISSING VAL FOR KEY:Administration command: SHOW USERS");
    org.junit.Assert.assertEquals("'" + str25 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:enc_snapshot" + "'", str25,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:enc_snapshot");
    org.junit.Assert.assertEquals("'" + str26 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.core.*"
            + "'", str26,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.core.*");
    org.junit.Assert.assertEquals("'" + str27 + "' != '" + "MISSING VAL FOR KEY:DEFAULT" + "'",
        str27, "MISSING VAL FOR KEY:DEFAULT");
    org.junit.Assert.assertEquals(
        "'" + str28 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:GRANTED" + "'", str28,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:GRANTED");
  }

  @Test
  public void test4475() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4475");
    }
    java.lang.Object[] objArray1 = null;
    java.lang.String str2 = io.github.onograph.I18N.format("RAFT log pruning strategy", objArray1);
    org.junit.Assert.assertEquals(
        "'" + str2 + "' != '" + "MISSING VAL FOR KEY:RAFT log pruning strategy" + "'", str2,
        "MISSING VAL FOR KEY:RAFT log pruning strategy");
  }

  @Test
  public void test4476() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4476");
    }
    java.lang.Object[] objArray7 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str8 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray7);
    java.lang.String str9 = io.github.onograph.I18N.format("time", objArray7);
    java.lang.String str10 = io.github.onograph.I18N.format("dbms.scheduler.profile", objArray7);
    java.lang.String str11 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.core.*", objArray7);
    java.lang.Class<?> wildcardClass12 = objArray7.getClass();
    org.junit.Assert.assertNotNull(objArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str8 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str8,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MISSING VAL FOR KEY:time" + "'", str9,
        "MISSING VAL FOR KEY:time");
    org.junit.Assert.assertEquals(
        "'" + str10 + "' != '" + "MISSING VAL FOR KEY:dbms.scheduler.profile" + "'", str10,
        "MISSING VAL FOR KEY:dbms.scheduler.profile");
    org.junit.Assert.assertEquals("'" + str11 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.core.*"
            + "'", str11,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.core.*");
    org.junit.Assert.assertNotNull(wildcardClass12);
  }

  @Test
  public void test4477() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4477");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str14 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "dbms.security.ldap.authentication.attribute", objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format("dbms.security.createUser", objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format("BatchSize", objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format("Change the current user's password.",
        objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format("metrics.prometheus.enabled",
        objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format("modifierProtocols", objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format("Is this server the leader? (gauge)",
        objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms.max_databases", objArray13);
    java.lang.Class<?> wildcardClass23 = objArray13.getClass();
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str14,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute"
            + "'", str15, "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:dbms.security.createUser" + "'", str16,
        "MISSING VAL FOR KEY:dbms.security.createUser");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:BatchSize" + "'",
        str17, "MISSING VAL FOR KEY:BatchSize");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:Change the current user's password." + "'",
        str18, "MISSING VAL FOR KEY:Change the current user's password.");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:metrics.prometheus.enabled" + "'", str19,
        "MISSING VAL FOR KEY:metrics.prometheus.enabled");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:modifierProtocols" + "'", str20,
        "MISSING VAL FOR KEY:modifierProtocols");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:Is this server the leader? (gauge)" + "'",
        str21, "MISSING VAL FOR KEY:Is this server the leader? (gauge)");
    org.junit.Assert.assertEquals("'" + str22 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms.max_databases" + "'",
        str22, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms.max_databases");
    org.junit.Assert.assertNotNull(wildcardClass23);
  }

  @Test
  public void test4478() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4478");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str14 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format("read", objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format("invisible", objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format("dec_dispatch", objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format("localhost", objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:metrics.csv.rotation.compression", objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:Raft protocol implementation versions that this instance will allow in negotiation as a comma-separated list. Order is not relevant: the greatest value will be preferred. An empty list will allow all supported versions. Example value: \"1.0, 1.3, 2.0, 2.1\"",
        objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:Report the current status of the system database sub-graph schema, providing details for each sub-graph component.",
        objArray13);
    java.lang.Class<?> wildcardClass23 = objArray13.getClass();
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str14,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str15, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str16,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str17, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:dec_dispatch" + "'",
        str18, "MISSING VAL FOR KEY:dec_dispatch");
    org.junit.Assert.assertEquals("'" + str19 + "' != '" + "MISSING VAL FOR KEY:localhost" + "'",
        str19, "MISSING VAL FOR KEY:localhost");
    org.junit.Assert.assertEquals("'" + str20 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:metrics.csv.rotation.compression" + "'", str20,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:metrics.csv.rotation.compression");
    org.junit.Assert.assertEquals("'" + str21 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Raft protocol implementation versions that this instance will allow in negotiation as a comma-separated list. Order is not relevant: the greatest value will be preferred. An empty list will allow all supported versions. Example value: \"1.0, 1.3, 2.0, 2.1\""
            + "'", str21,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Raft protocol implementation versions that this instance will allow in negotiation as a comma-separated list. Order is not relevant: the greatest value will be preferred. An empty list will allow all supported versions. Example value: \"1.0, 1.3, 2.0, 2.1\"");
    org.junit.Assert.assertEquals("'" + str22 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Report the current status of the system database sub-graph schema, providing details for each sub-graph component."
            + "'", str22,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Report the current status of the system database sub-graph schema, providing details for each sub-graph component.");
    org.junit.Assert.assertNotNull(wildcardClass23);
  }

  @Test
  public void test4479() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4479");
    }
    java.lang.Object[] objArray11 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str12 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray11);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray11);
    java.lang.String str14 = io.github.onograph.I18N.format("elapsedTimeMs", objArray11);
    java.lang.String str15 = io.github.onograph.I18N.format("driver.connection.max_lifetime",
        objArray11);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:Parallelism level of dispatcher used for communication from Akka based cluster topology discovery ",
        objArray11);
    java.lang.String str17 = io.github.onograph.I18N.format("follow", objArray11);
    java.lang.String str18 = io.github.onograph.I18N.format("", objArray11);
    org.junit.Assert.assertNotNull(objArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str12,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str13, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:elapsedTimeMs" + "'", str14,
        "MISSING VAL FOR KEY:elapsedTimeMs");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:driver.connection.max_lifetime" + "'", str15,
        "MISSING VAL FOR KEY:driver.connection.max_lifetime");
    org.junit.Assert.assertEquals("'" + str16 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Parallelism level of dispatcher used for communication from Akka based cluster topology discovery "
            + "'", str16,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Parallelism level of dispatcher used for communication from Akka based cluster topology discovery ");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:follow" + "'",
        str17, "MISSING VAL FOR KEY:follow");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:" + "'", str18,
        "MISSING VAL FOR KEY:");
  }

  @Test
  public void test4480() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4480");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:groups");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4481() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4481");
    }
    java.lang.Object[] objArray8 = new java.lang.Object[]{};
    java.lang.String str9 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray8);
    java.lang.String str10 = io.github.onograph.I18N.format(
        "The total number of live threads including daemon and non-daemon threads. (gauge)",
        objArray8);
    java.lang.String str11 = io.github.onograph.I18N.format("Upgraded", objArray8);
    java.lang.String str12 = io.github.onograph.I18N.format("<label>[,<label>...]", objArray8);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "akka.remote.artery.advanced.connection-timeout", objArray8);
    java.lang.String str14 = io.github.onograph.I18N.format("*pool.transaction.*.used_heap",
        objArray8);
    java.lang.String str15 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:iops", objArray8);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "dbms.security.ldap.authentication.cache_enabled", objArray8);
    org.junit.Assert.assertNotNull(objArray8);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
    org.junit.Assert.assertEquals("'" + str9 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str9,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str10 + "' != '"
            + "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)"
            + "'", str10,
        "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)");
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MISSING VAL FOR KEY:Upgraded" + "'",
        str11, "MISSING VAL FOR KEY:Upgraded");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:<label>[,<label>...]" + "'", str12,
        "MISSING VAL FOR KEY:<label>[,<label>...]");
    org.junit.Assert.assertEquals("'" + str13 + "' != '"
            + "MISSING VAL FOR KEY:akka.remote.artery.advanced.connection-timeout" + "'", str13,
        "MISSING VAL FOR KEY:akka.remote.artery.advanced.connection-timeout");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:*pool.transaction.*.used_heap" + "'", str14,
        "MISSING VAL FOR KEY:*pool.transaction.*.used_heap");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:iops" + "'", str15,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:iops");
    org.junit.Assert.assertEquals("'" + str16 + "' != '"
            + "MISSING VAL FOR KEY:dbms.security.ldap.authentication.cache_enabled" + "'", str16,
        "MISSING VAL FOR KEY:dbms.security.ldap.authentication.cache_enabled");
  }

  @Test
  public void test4482() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4482");
    }
    java.lang.Object[] objArray9 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str10 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray9);
    java.lang.String str11 = io.github.onograph.I18N.format(
        "*causal_clustering.core.replication_fail", objArray9);
    java.lang.String str12 = io.github.onograph.I18N.format("<relationship>[,<relationship>...]",
        objArray9);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:raft_content_decoder", objArray9);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:causal_clustering.connect_randomly_to_server_group", objArray9);
    org.junit.Assert.assertNotNull(objArray9);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str10 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str10,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:*causal_clustering.core.replication_fail"
            + "'", str11, "MISSING VAL FOR KEY:*causal_clustering.core.replication_fail");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:<relationship>[,<relationship>...]" + "'",
        str12, "MISSING VAL FOR KEY:<relationship>[,<relationship>...]");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:raft_content_decoder"
            + "'", str13, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:raft_content_decoder");
    org.junit.Assert.assertEquals("'" + str14 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.connect_randomly_to_server_group"
            + "'", str14,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:causal_clustering.connect_randomly_to_server_group");
  }

  @Test
  public void test4483() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4483");
    }
    java.lang.Object[] objArray10 = new java.lang.Object[]{};
    java.lang.String str11 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray10);
    java.lang.String str12 = io.github.onograph.I18N.format(
        "The total number of live threads including daemon and non-daemon threads. (gauge)",
        objArray10);
    java.lang.String str13 = io.github.onograph.I18N.format("Upgraded", objArray10);
    java.lang.String str14 = io.github.onograph.I18N.format("", objArray10);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "Enable reporting metrics about the store size of each database. Deprecated - use metrics.filter instead.",
        objArray10);
    java.lang.String str16 = io.github.onograph.I18N.format("messages_received", objArray10);
    java.lang.String str17 = io.github.onograph.I18N.format("", objArray10);
    java.lang.String str18 = io.github.onograph.I18N.format("db.listLocks", objArray10);
    java.lang.String str19 = io.github.onograph.I18N.format(
        "causal_clustering.catch_up_client_inactivity_timeout", objArray10);
    java.lang.String str20 = io.github.onograph.I18N.format("", objArray10);
    java.lang.Class<?> wildcardClass21 = objArray10.getClass();
    org.junit.Assert.assertNotNull(objArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
    org.junit.Assert.assertEquals("'" + str11 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str11,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str12 + "' != '"
            + "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)"
            + "'", str12,
        "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)");
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MISSING VAL FOR KEY:Upgraded" + "'",
        str13, "MISSING VAL FOR KEY:Upgraded");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:" + "'", str14,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str15 + "' != '"
            + "MISSING VAL FOR KEY:Enable reporting metrics about the store size of each database. Deprecated - use metrics.filter instead."
            + "'", str15,
        "MISSING VAL FOR KEY:Enable reporting metrics about the store size of each database. Deprecated - use metrics.filter instead.");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:messages_received" + "'", str16,
        "MISSING VAL FOR KEY:messages_received");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:" + "'", str17,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:db.listLocks" + "'",
        str18, "MISSING VAL FOR KEY:db.listLocks");
    org.junit.Assert.assertEquals("'" + str19 + "' != '"
            + "MISSING VAL FOR KEY:causal_clustering.catch_up_client_inactivity_timeout" + "'", str19,
        "MISSING VAL FOR KEY:causal_clustering.catch_up_client_inactivity_timeout");
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "MISSING VAL FOR KEY:" + "'", str20,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertNotNull(wildcardClass21);
  }

  @Test
  public void test4484() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4484");
    }
    java.lang.Object[] objArray11 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str12 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray11);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray11);
    java.lang.String str14 = io.github.onograph.I18N.format("read", objArray11);
    java.lang.String str15 = io.github.onograph.I18N.format("invisible", objArray11);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "Enable reporting metrics about the VM pause time. Deprecated - use metrics.filter instead.",
        objArray11);
    java.lang.String str17 = io.github.onograph.I18N.format(
        "causal_clustering.transaction_advertised_address", objArray11);
    java.lang.String str18 = io.github.onograph.I18N.format("--move", objArray11);
    org.junit.Assert.assertNotNull(objArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str12,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str13, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str14,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str15, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str16 + "' != '"
            + "MISSING VAL FOR KEY:Enable reporting metrics about the VM pause time. Deprecated - use metrics.filter instead."
            + "'", str16,
        "MISSING VAL FOR KEY:Enable reporting metrics about the VM pause time. Deprecated - use metrics.filter instead.");
    org.junit.Assert.assertEquals("'" + str17 + "' != '"
            + "MISSING VAL FOR KEY:causal_clustering.transaction_advertised_address" + "'", str17,
        "MISSING VAL FOR KEY:causal_clustering.transaction_advertised_address");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:--move" + "'",
        str18, "MISSING VAL FOR KEY:--move");
  }

  @Test
  public void test4485() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4485");
    }
    java.lang.Object[] objArray11 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str12 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray11);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray11);
    java.lang.String str14 = io.github.onograph.I18N.format("", objArray11);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:Enable multi-data center features. Requires appropriate licensing.",
        objArray11);
    java.lang.String str16 = io.github.onograph.I18N.format("page_cache", objArray11);
    java.lang.String str17 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:typically-connect-to-random-read-replica",
        objArray11);
    java.lang.String str18 = io.github.onograph.I18N.format(
        "The ID of the last committed transaction. (counter)", objArray11);
    java.lang.Class<?> wildcardClass19 = objArray11.getClass();
    org.junit.Assert.assertNotNull(objArray11);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str12,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str13, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str14 + "' != '" + "MISSING VAL FOR KEY:" + "'", str14,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str15 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Enable multi-data center features. Requires appropriate licensing."
            + "'", str15,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Enable multi-data center features. Requires appropriate licensing.");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:page_cache" + "'",
        str16, "MISSING VAL FOR KEY:page_cache");
    org.junit.Assert.assertEquals("'" + str17 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:typically-connect-to-random-read-replica"
            + "'", str17,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:typically-connect-to-random-read-replica");
    org.junit.Assert.assertEquals("'" + str18 + "' != '"
            + "MISSING VAL FOR KEY:The ID of the last committed transaction. (counter)" + "'", str18,
        "MISSING VAL FOR KEY:The ID of the last committed transaction. (counter)");
    org.junit.Assert.assertNotNull(wildcardClass19);
  }

  @Test
  public void test4486() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4486");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str14 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format("read", objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format("invisible", objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format("relationship-type-distribution",
        objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:<label>[,<label>...]", objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "causal_clustering.cluster_topology_refresh", objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format("localhost:6362", objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format("relationship-type-distribution",
        objArray13);
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str14,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str15, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str16,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str17, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:relationship-type-distribution" + "'", str18,
        "MISSING VAL FOR KEY:relationship-type-distribution");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:<label>[,<label>...]"
            + "'", str19, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:<label>[,<label>...]");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.cluster_topology_refresh"
            + "'", str20, "MISSING VAL FOR KEY:causal_clustering.cluster_topology_refresh");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:localhost:6362" + "'", str21,
        "MISSING VAL FOR KEY:localhost:6362");
    org.junit.Assert.assertEquals(
        "'" + str22 + "' != '" + "MISSING VAL FOR KEY:relationship-type-distribution" + "'", str22,
        "MISSING VAL FOR KEY:relationship-type-distribution");
  }

  @Test
  public void test4487() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4487");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:initial_members");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4488() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4488");
    }
    java.lang.Object[] objArray18 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str19 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray18);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "dbms.security.ldap.authentication.attribute", objArray18);
    java.lang.String str21 = io.github.onograph.I18N.format("dbms.security.createUser", objArray18);
    java.lang.String str22 = io.github.onograph.I18N.format("BatchSize", objArray18);
    java.lang.String str23 = io.github.onograph.I18N.format("Change the current user's password.",
        objArray18);
    java.lang.String str24 = io.github.onograph.I18N.format(
        "Perform the recovery of the backup store by applying the latest pulled transactions. If disabled, the backup will be faster but a recovery of the backup store will be required at a later time before restoring the data (using the neo4j-admin prepare-restore command). Note: if --prepare-restore is set to false, then --check-consistency is implicitly set to false because the consistency of a none-recovered store can't be checked.",
        objArray18);
    java.lang.String str25 = io.github.onograph.I18N.format("", objArray18);
    java.lang.String str26 = io.github.onograph.I18N.format("snappy_validating_decoder",
        objArray18);
    java.lang.String str27 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:read-only",
        objArray18);
    java.lang.String str28 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:typically-connect-to-random-read-replica", objArray18);
    java.lang.String str29 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:.database.",
        objArray18);
    java.lang.String str30 = io.github.onograph.I18N.format(
        "The LDAP referral behavior when creating a connection. This is one of `follow`, `ignore` or `throw`.\n* `follow` automatically follows any referrals\n* `ignore` ignores any referrals\n* `throw` throws an exception, which will lead to authentication failure",
        objArray18);
    java.lang.String str31 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:CREATE CONSTRAINT ... IS NODE KEY command",
        objArray18);
    java.lang.String str32 = io.github.onograph.I18N.format("Path to the security log file.",
        objArray18);
    java.lang.Class<?> wildcardClass33 = objArray18.getClass();
    org.junit.Assert.assertNotNull(objArray18);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str19,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute"
            + "'", str20, "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:dbms.security.createUser" + "'", str21,
        "MISSING VAL FOR KEY:dbms.security.createUser");
    org.junit.Assert.assertEquals("'" + str22 + "' != '" + "MISSING VAL FOR KEY:BatchSize" + "'",
        str22, "MISSING VAL FOR KEY:BatchSize");
    org.junit.Assert.assertEquals(
        "'" + str23 + "' != '" + "MISSING VAL FOR KEY:Change the current user's password." + "'",
        str23, "MISSING VAL FOR KEY:Change the current user's password.");
    org.junit.Assert.assertEquals("'" + str24 + "' != '"
            + "MISSING VAL FOR KEY:Perform the recovery of the backup store by applying the latest pulled transactions. If disabled, the backup will be faster but a recovery of the backup store will be required at a later time before restoring the data (using the neo4j-admin prepare-restore command). Note: if --prepare-restore is set to false, then --check-consistency is implicitly set to false because the consistency of a none-recovered store can't be checked."
            + "'", str24,
        "MISSING VAL FOR KEY:Perform the recovery of the backup store by applying the latest pulled transactions. If disabled, the backup will be faster but a recovery of the backup store will be required at a later time before restoring the data (using the neo4j-admin prepare-restore command). Note: if --prepare-restore is set to false, then --check-consistency is implicitly set to false because the consistency of a none-recovered store can't be checked.");
    org.junit.Assert.assertEquals("'" + str25 + "' != '" + "MISSING VAL FOR KEY:" + "'", str25,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals(
        "'" + str26 + "' != '" + "MISSING VAL FOR KEY:snappy_validating_decoder" + "'", str26,
        "MISSING VAL FOR KEY:snappy_validating_decoder");
    org.junit.Assert.assertEquals(
        "'" + str27 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:read-only" + "'", str27,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:read-only");
    org.junit.Assert.assertEquals("'" + str28 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:typically-connect-to-random-read-replica" + "'",
        str28, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:typically-connect-to-random-read-replica");
    org.junit.Assert.assertEquals(
        "'" + str29 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:.database." + "'", str29,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:.database.");
    org.junit.Assert.assertEquals("'" + str30 + "' != '"
            + "MISSING VAL FOR KEY:The LDAP referral behavior when creating a connection. This is one of `follow`, `ignore` or `throw`.\n* `follow` automatically follows any referrals\n* `ignore` ignores any referrals\n* `throw` throws an exception, which will lead to authentication failure"
            + "'", str30,
        "MISSING VAL FOR KEY:The LDAP referral behavior when creating a connection. This is one of `follow`, `ignore` or `throw`.\n* `follow` automatically follows any referrals\n* `ignore` ignores any referrals\n* `throw` throws an exception, which will lead to authentication failure");
    org.junit.Assert.assertEquals("'" + str31 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:CREATE CONSTRAINT ... IS NODE KEY command"
            + "'", str31,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:CREATE CONSTRAINT ... IS NODE KEY command");
    org.junit.Assert.assertEquals(
        "'" + str32 + "' != '" + "MISSING VAL FOR KEY:Path to the security log file." + "'", str32,
        "MISSING VAL FOR KEY:Path to the security log file.");
    org.junit.Assert.assertNotNull(wildcardClass33);
  }

  @Test
  public void test4489() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4489");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("MISSING VAL FOR KEY:-state");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4490() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4490");
    }
    java.lang.String str1 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_resolution_retry_interval");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4491() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4491");
    }
    java.lang.String str1 = io.github.onograph.I18N.format("flushes");
    org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
  }

  @Test
  public void test4492() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4492");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str14 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format("read", objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format("invisible", objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format("dec_dispatch", objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format("init_server_handler", objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:Discovery cluster member size. (gauge)", objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format("graphIds", objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format(
        "Name of the database associated to the Fabric graph.", objArray13);
    java.lang.Class<?> wildcardClass23 = objArray13.getClass();
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str14,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str15, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str16,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str17, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals("'" + str18 + "' != '" + "MISSING VAL FOR KEY:dec_dispatch" + "'",
        str18, "MISSING VAL FOR KEY:dec_dispatch");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:init_server_handler" + "'", str19,
        "MISSING VAL FOR KEY:init_server_handler");
    org.junit.Assert.assertEquals("'" + str20 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Discovery cluster member size. (gauge)" + "'",
        str20, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:Discovery cluster member size. (gauge)");
    org.junit.Assert.assertEquals("'" + str21 + "' != '" + "MISSING VAL FOR KEY:graphIds" + "'",
        str21, "MISSING VAL FOR KEY:graphIds");
    org.junit.Assert.assertEquals("'" + str22 + "' != '"
            + "MISSING VAL FOR KEY:Name of the database associated to the Fabric graph." + "'", str22,
        "MISSING VAL FOR KEY:Name of the database associated to the Fabric graph.");
    org.junit.Assert.assertNotNull(wildcardClass23);
  }

  @Test
  public void test4493() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4493");
    }
    java.lang.Object[] objArray7 = new java.lang.Object[]{"hnd_req_get_info", "capacity",
        "unavailable"};
    java.lang.String str8 = io.github.onograph.I18N.format(
        "The total number of messages that failed processing since this instance started. (counter)",
        objArray7);
    java.lang.String str9 = io.github.onograph.I18N.format("", objArray7);
    java.lang.String str10 = io.github.onograph.I18N.format(
        "causal_clustering.raft_log_rotation_size", objArray7);
    java.lang.String str11 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:raft_component_decoder", objArray7);
    java.lang.Class<?> wildcardClass12 = objArray7.getClass();
    org.junit.Assert.assertNotNull(objArray7);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7),
        "[hnd_req_get_info, capacity, unavailable]");
    org.junit.Assert.assertEquals("'" + str8 + "' != '"
            + "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)"
            + "'", str8,
        "MISSING VAL FOR KEY:The total number of messages that failed processing since this instance started. (counter)");
    org.junit.Assert.assertEquals("'" + str9 + "' != '" + "MISSING VAL FOR KEY:" + "'", str9,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals(
        "'" + str10 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.raft_log_rotation_size"
            + "'", str10, "MISSING VAL FOR KEY:causal_clustering.raft_log_rotation_size");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:raft_component_decoder"
            + "'", str11, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:raft_component_decoder");
    org.junit.Assert.assertNotNull(wildcardClass12);
  }

  @Test
  public void test4494() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4494");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str14 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format("true", objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format("dbms.security.auth_provider",
        objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format(
        "The total size of the database and transaction logs, in bytes. (gauge)", objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format("dbms.max_databases", objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format("handshake_initializer", objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format(
        "An authorization mapping from LDAP group names to Neo4j role names. The map should be formatted as a semicolon separated list of key-value pairs, where the key is the LDAP group name and the value is a comma separated list of corresponding role names. For example: group1=role1;group2=role2;group3=role3,role4,role5\nYou could also use whitespaces and quotes around group names to make this mapping more readable, for example: \n----\n+dbms.security.ldap.authorization.group_to_role_mapping+=\\\n         \"cn=Neo4j Read Only,cn=users,dc=example,dc=com\"      = reader;    \\\n         \"cn=Neo4j Read-Write,cn=users,dc=example,dc=com\"     = publisher; \\\n         \"cn=Neo4j Schema Manager,cn=users,dc=example,dc=com\" = architect; \\\n         \"cn=Neo4j Administrator,cn=users,dc=example,dc=com\"  = admin\n----",
        objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:dbms.clustering.enable", objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:External config file for Akka", objArray13);
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str14,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:true" + "'", str15,
        "MISSING VAL FOR KEY:true");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:dbms.security.auth_provider" + "'", str16,
        "MISSING VAL FOR KEY:dbms.security.auth_provider");
    org.junit.Assert.assertEquals("'" + str17 + "' != '"
            + "MISSING VAL FOR KEY:The total size of the database and transaction logs, in bytes. (gauge)"
            + "'", str17,
        "MISSING VAL FOR KEY:The total size of the database and transaction logs, in bytes. (gauge)");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:dbms.max_databases" + "'", str18,
        "MISSING VAL FOR KEY:dbms.max_databases");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:handshake_initializer" + "'", str19,
        "MISSING VAL FOR KEY:handshake_initializer");
    org.junit.Assert.assertEquals("'" + str20 + "' != '"
            + "MISSING VAL FOR KEY:An authorization mapping from LDAP group names to Neo4j role names. The map should be formatted as a semicolon separated list of key-value pairs, where the key is the LDAP group name and the value is a comma separated list of corresponding role names. For example: group1=role1;group2=role2;group3=role3,role4,role5\nYou could also use whitespaces and quotes around group names to make this mapping more readable, for example: \n----\n+dbms.security.ldap.authorization.group_to_role_mapping+=\\\n         \"cn=Neo4j Read Only,cn=users,dc=example,dc=com\"      = reader;    \\\n         \"cn=Neo4j Read-Write,cn=users,dc=example,dc=com\"     = publisher; \\\n         \"cn=Neo4j Schema Manager,cn=users,dc=example,dc=com\" = architect; \\\n         \"cn=Neo4j Administrator,cn=users,dc=example,dc=com\"  = admin\n----"
            + "'", str20,
        "MISSING VAL FOR KEY:An authorization mapping from LDAP group names to Neo4j role names. The map should be formatted as a semicolon separated list of key-value pairs, where the key is the LDAP group name and the value is a comma separated list of corresponding role names. For example: group1=role1;group2=role2;group3=role3,role4,role5\nYou could also use whitespaces and quotes around group names to make this mapping more readable, for example: \n----\n+dbms.security.ldap.authorization.group_to_role_mapping+=\\\n         \"cn=Neo4j Read Only,cn=users,dc=example,dc=com\"      = reader;    \\\n         \"cn=Neo4j Read-Write,cn=users,dc=example,dc=com\"     = publisher; \\\n         \"cn=Neo4j Schema Manager,cn=users,dc=example,dc=com\" = architect; \\\n         \"cn=Neo4j Administrator,cn=users,dc=example,dc=com\"  = admin\n----");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms.clustering.enable"
            + "'", str21, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms.clustering.enable");
    org.junit.Assert.assertEquals("'" + str22 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:External config file for Akka" + "'", str22,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:External config file for Akka");
  }

  @Test
  public void test4495() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4495");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str14 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "dbms.security.ldap.authentication.attribute", objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format("dbms.security.createUser", objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format("BatchSize", objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format("Change the current user's password.",
        objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format("metrics.prometheus.enabled",
        objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format("modifierProtocols", objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format("arg1", objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format(
        "The total number of nodes stored in the database. (gauge)", objArray13);
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str14,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute"
            + "'", str15, "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:dbms.security.createUser" + "'", str16,
        "MISSING VAL FOR KEY:dbms.security.createUser");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:BatchSize" + "'",
        str17, "MISSING VAL FOR KEY:BatchSize");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:Change the current user's password." + "'",
        str18, "MISSING VAL FOR KEY:Change the current user's password.");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:metrics.prometheus.enabled" + "'", str19,
        "MISSING VAL FOR KEY:metrics.prometheus.enabled");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:modifierProtocols" + "'", str20,
        "MISSING VAL FOR KEY:modifierProtocols");
    org.junit.Assert.assertEquals("'" + str21 + "' != '" + "MISSING VAL FOR KEY:arg1" + "'", str21,
        "MISSING VAL FOR KEY:arg1");
    org.junit.Assert.assertEquals("'" + str22 + "' != '"
            + "MISSING VAL FOR KEY:The total number of nodes stored in the database. (gauge)" + "'",
        str22, "MISSING VAL FOR KEY:The total number of nodes stored in the database. (gauge)");
  }

  @Test
  public void test4496() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4496");
    }
    java.lang.Object[] objArray10 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str11 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray10);
    java.lang.String str12 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray10);
    java.lang.String str13 = io.github.onograph.I18N.format("read", objArray10);
    java.lang.String str14 = io.github.onograph.I18N.format("execute_boosted_from_config",
        objArray10);
    java.lang.String str15 = io.github.onograph.I18N.format("Store copy chunk size", objArray10);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:dbms.security.property_level.enabled", objArray10);
    org.junit.Assert.assertNotNull(objArray10);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str11,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str12 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str12, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str13 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str13,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:execute_boosted_from_config" + "'", str14,
        "MISSING VAL FOR KEY:execute_boosted_from_config");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:Store copy chunk size" + "'", str15,
        "MISSING VAL FOR KEY:Store copy chunk size");
    org.junit.Assert.assertEquals("'" + str16 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms.security.property_level.enabled" + "'",
        str16, "MISSING VAL FOR KEY:MISSING VAL FOR KEY:dbms.security.property_level.enabled");
  }

  @Test
  public void test4497() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4497");
    }
    java.lang.Object[] objArray13 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str14 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray13);
    java.lang.String str15 = io.github.onograph.I18N.format(
        "dbms.security.ldap.authentication.attribute", objArray13);
    java.lang.String str16 = io.github.onograph.I18N.format("dbms.security.createUser", objArray13);
    java.lang.String str17 = io.github.onograph.I18N.format("BatchSize", objArray13);
    java.lang.String str18 = io.github.onograph.I18N.format("Change the current user's password.",
        objArray13);
    java.lang.String str19 = io.github.onograph.I18N.format("metrics.prometheus.enabled",
        objArray13);
    java.lang.String str20 = io.github.onograph.I18N.format("modifierProtocols", objArray13);
    java.lang.String str21 = io.github.onograph.I18N.format("Is this server the leader? (gauge)",
        objArray13);
    java.lang.String str22 = io.github.onograph.I18N.format("admin.ini", objArray13);
    java.lang.Class<?> wildcardClass23 = objArray13.getClass();
    org.junit.Assert.assertNotNull(objArray13);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str14,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str15 + "' != '" + "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute"
            + "'", str15, "MISSING VAL FOR KEY:dbms.security.ldap.authentication.attribute");
    org.junit.Assert.assertEquals(
        "'" + str16 + "' != '" + "MISSING VAL FOR KEY:dbms.security.createUser" + "'", str16,
        "MISSING VAL FOR KEY:dbms.security.createUser");
    org.junit.Assert.assertEquals("'" + str17 + "' != '" + "MISSING VAL FOR KEY:BatchSize" + "'",
        str17, "MISSING VAL FOR KEY:BatchSize");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:Change the current user's password." + "'",
        str18, "MISSING VAL FOR KEY:Change the current user's password.");
    org.junit.Assert.assertEquals(
        "'" + str19 + "' != '" + "MISSING VAL FOR KEY:metrics.prometheus.enabled" + "'", str19,
        "MISSING VAL FOR KEY:metrics.prometheus.enabled");
    org.junit.Assert.assertEquals(
        "'" + str20 + "' != '" + "MISSING VAL FOR KEY:modifierProtocols" + "'", str20,
        "MISSING VAL FOR KEY:modifierProtocols");
    org.junit.Assert.assertEquals(
        "'" + str21 + "' != '" + "MISSING VAL FOR KEY:Is this server the leader? (gauge)" + "'",
        str21, "MISSING VAL FOR KEY:Is this server the leader? (gauge)");
    org.junit.Assert.assertEquals("'" + str22 + "' != '" + "MISSING VAL FOR KEY:admin.ini" + "'",
        str22, "MISSING VAL FOR KEY:admin.ini");
    org.junit.Assert.assertNotNull(wildcardClass23);
  }

  @Test
  public void test4498() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4498");
    }
    java.lang.Object[] objArray6 = new java.lang.Object[]{};
    java.lang.String str7 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray6);
    java.lang.String str8 = io.github.onograph.I18N.format(
        "The total number of live threads including daemon and non-daemon threads. (gauge)",
        objArray6);
    java.lang.String str9 = io.github.onograph.I18N.format("--delete-nodes-with-labels", objArray6);
    java.lang.String str10 = io.github.onograph.I18N.format("default", objArray6);
    java.lang.String str11 = io.github.onograph.I18N.format(
        "Removes and archives all cluster state.", objArray6);
    java.lang.String str12 = io.github.onograph.I18N.format("policy", objArray6);
    java.lang.Class<?> wildcardClass13 = objArray6.getClass();
    org.junit.Assert.assertNotNull(objArray6);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
    org.junit.Assert.assertEquals("'" + str7 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str7,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str8 + "' != '"
            + "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)"
            + "'", str8,
        "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)");
    org.junit.Assert.assertEquals(
        "'" + str9 + "' != '" + "MISSING VAL FOR KEY:--delete-nodes-with-labels" + "'", str9,
        "MISSING VAL FOR KEY:--delete-nodes-with-labels");
    org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MISSING VAL FOR KEY:default" + "'",
        str10, "MISSING VAL FOR KEY:default");
    org.junit.Assert.assertEquals(
        "'" + str11 + "' != '" + "MISSING VAL FOR KEY:Removes and archives all cluster state."
            + "'", str11, "MISSING VAL FOR KEY:Removes and archives all cluster state.");
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MISSING VAL FOR KEY:policy" + "'",
        str12, "MISSING VAL FOR KEY:policy");
    org.junit.Assert.assertNotNull(wildcardClass13);
  }

  @Test
  public void test4499() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4499");
    }
    java.lang.Object[] objArray8 = new java.lang.Object[]{};
    java.lang.String str9 = io.github.onograph.I18N.format(
        "The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.",
        objArray8);
    java.lang.String str10 = io.github.onograph.I18N.format(
        "The total number of live threads including daemon and non-daemon threads. (gauge)",
        objArray8);
    java.lang.String str11 = io.github.onograph.I18N.format("Upgraded", objArray8);
    java.lang.String str12 = io.github.onograph.I18N.format("", objArray8);
    java.lang.String str13 = io.github.onograph.I18N.format(
        "Enable reporting metrics about the store size of each database. Deprecated - use metrics.filter instead.",
        objArray8);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "Enable metrics namespaces that separates the global and database specific metrics. If enabled all database specific metrics will have field names starting with <metrics_prefix>.database.<database_name> and all global metrics will start with <metrics_prefix>.dbms. For example neo4j.page_cache.hits will become neo4j.dbms.page_cache.hits and neo4j.system.log.rotation_events will become neo4j.database.system.log.rotation_events.",
        objArray8);
    java.lang.String str15 = io.github.onograph.I18N.format("startup", objArray8);
    java.lang.String str16 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:Configure if the `dbms.routing.getRoutingTable()` procedure should include the leader as read endpoint or return only read replicas/followers. Note: leader is returned as read endpoint if no other member is present all. ",
        objArray8);
    java.lang.Class<?> wildcardClass17 = objArray8.getClass();
    org.junit.Assert.assertNotNull(objArray8);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
    org.junit.Assert.assertEquals("'" + str9 + "' != '"
            + "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`."
            + "'", str9,
        "MISSING VAL FOR KEY:The file size in bytes at which the csv files will auto-rotate. If set to zero then no rotation will occur. Accepts a binary suffix `k`, `m` or `g`.");
    org.junit.Assert.assertEquals("'" + str10 + "' != '"
            + "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)"
            + "'", str10,
        "MISSING VAL FOR KEY:The total number of live threads including daemon and non-daemon threads. (gauge)");
    org.junit.Assert.assertEquals("'" + str11 + "' != '" + "MISSING VAL FOR KEY:Upgraded" + "'",
        str11, "MISSING VAL FOR KEY:Upgraded");
    org.junit.Assert.assertEquals("'" + str12 + "' != '" + "MISSING VAL FOR KEY:" + "'", str12,
        "MISSING VAL FOR KEY:");
    org.junit.Assert.assertEquals("'" + str13 + "' != '"
            + "MISSING VAL FOR KEY:Enable reporting metrics about the store size of each database. Deprecated - use metrics.filter instead."
            + "'", str13,
        "MISSING VAL FOR KEY:Enable reporting metrics about the store size of each database. Deprecated - use metrics.filter instead.");
    org.junit.Assert.assertEquals("'" + str14 + "' != '"
            + "MISSING VAL FOR KEY:Enable metrics namespaces that separates the global and database specific metrics. If enabled all database specific metrics will have field names starting with <metrics_prefix>.database.<database_name> and all global metrics will start with <metrics_prefix>.dbms. For example neo4j.page_cache.hits will become neo4j.dbms.page_cache.hits and neo4j.system.log.rotation_events will become neo4j.database.system.log.rotation_events."
            + "'", str14,
        "MISSING VAL FOR KEY:Enable metrics namespaces that separates the global and database specific metrics. If enabled all database specific metrics will have field names starting with <metrics_prefix>.database.<database_name> and all global metrics will start with <metrics_prefix>.dbms. For example neo4j.page_cache.hits will become neo4j.dbms.page_cache.hits and neo4j.system.log.rotation_events will become neo4j.database.system.log.rotation_events.");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:startup" + "'",
        str15, "MISSING VAL FOR KEY:startup");
    org.junit.Assert.assertEquals("'" + str16 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:Configure if the `dbms.routing.getRoutingTable()` procedure should include the leader as read endpoint or return only read replicas/followers. Note: leader is returned as read endpoint if no other member is present all. "
            + "'", str16,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:Configure if the `dbms.routing.getRoutingTable()` procedure should include the leader as read endpoint or return only read replicas/followers. Note: leader is returned as read endpoint if no other member is present all. ");
    org.junit.Assert.assertNotNull(wildcardClass17);
  }

  @Test
  public void test4500() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest8.test4500");
    }
    java.lang.Object[] objArray12 = new java.lang.Object[]{"same", "dbms.upgrade",
        "Maximum retry interval for akka restarter (which uses exponential backoff if it fails)",
        "dbms.security.ldap.authentication.attribute"};
    java.lang.String str13 = io.github.onograph.I18N.format("Display ServerId of instance.",
        objArray12);
    java.lang.String str14 = io.github.onograph.I18N.format(
        "causal_clustering.discovery_listen_address", objArray12);
    java.lang.String str15 = io.github.onograph.I18N.format("read", objArray12);
    java.lang.String str16 = io.github.onograph.I18N.format("invisible", objArray12);
    java.lang.String str17 = io.github.onograph.I18N.format("relationship-type-distribution",
        objArray12);
    java.lang.String str18 = io.github.onograph.I18N.format("Number of available processors",
        objArray12);
    java.lang.String str19 = io.github.onograph.I18N.format(
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:hnd_res_tx", objArray12);
    java.lang.String str20 = io.github.onograph.I18N.format("", objArray12);
    org.junit.Assert.assertNotNull(objArray12);
    org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12),
        "[same, dbms.upgrade, Maximum retry interval for akka restarter (which uses exponential backoff if it fails), dbms.security.ldap.authentication.attribute]");
    org.junit.Assert.assertEquals(
        "'" + str13 + "' != '" + "MISSING VAL FOR KEY:Display ServerId of instance." + "'", str13,
        "MISSING VAL FOR KEY:Display ServerId of instance.");
    org.junit.Assert.assertEquals(
        "'" + str14 + "' != '" + "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address"
            + "'", str14, "MISSING VAL FOR KEY:causal_clustering.discovery_listen_address");
    org.junit.Assert.assertEquals("'" + str15 + "' != '" + "MISSING VAL FOR KEY:read" + "'", str15,
        "MISSING VAL FOR KEY:read");
    org.junit.Assert.assertEquals("'" + str16 + "' != '" + "MISSING VAL FOR KEY:invisible" + "'",
        str16, "MISSING VAL FOR KEY:invisible");
    org.junit.Assert.assertEquals(
        "'" + str17 + "' != '" + "MISSING VAL FOR KEY:relationship-type-distribution" + "'", str17,
        "MISSING VAL FOR KEY:relationship-type-distribution");
    org.junit.Assert.assertEquals(
        "'" + str18 + "' != '" + "MISSING VAL FOR KEY:Number of available processors" + "'", str18,
        "MISSING VAL FOR KEY:Number of available processors");
    org.junit.Assert.assertEquals("'" + str19 + "' != '"
            + "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:hnd_res_tx" + "'", str19,
        "MISSING VAL FOR KEY:MISSING VAL FOR KEY:MISSING VAL FOR KEY:hnd_res_tx");
    org.junit.Assert.assertEquals("'" + str20 + "' != '" + "MISSING VAL FOR KEY:" + "'", str20,
        "MISSING VAL FOR KEY:");
  }
}

