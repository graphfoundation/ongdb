package io.github.onograph.test;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ModRegTest0 {

  public static boolean debug = false;

  @Test
  public void test0001() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0001");
    }
    io.github.onograph.backup.BackupMetaDTO backupMetaDTO0 = null;
    java.lang.String[] strArray2 = new java.lang.String[]{"hi!"};
    java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
    boolean boolean4 = java.util.Collections.addAll(
        (java.util.Collection<java.lang.String>) strList3, strArray2);
    try {
      io.github.onograph.backup.BackupMetaService.wrtmedaForBaLi(backupMetaDTO0,
          (java.util.List<java.lang.String>) strList3);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(strArray2);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
  }

  @Test
  public void test0002() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0002");
    }
    org.neo4j.configuration.Config config0 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction1 = null;
    io.github.onograph.cluster.raft.module.cuprot.LifecycleCatchupManagerImpl lifecycleCatchupManagerImpl2 = null;
    org.neo4j.scheduler.JobScheduler jobScheduler3 = null;
    org.neo4j.logging.LogProvider logProvider4 = null;
    org.neo4j.monitoring.Monitors monitors5 = null;
    org.neo4j.io.pagecache.PageCache pageCache6 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer7 = null;
    org.neo4j.time.SystemNanoClock systemNanoClock8 = null;
    try {
      io.github.onograph.backup.RemoteBackupManager remoteBackupManager9 = new io.github.onograph.backup.RemoteBackupManager(
          config0, fileSystemAbstraction1, lifecycleCatchupManagerImpl2, jobScheduler3,
          logProvider4, monitors5, pageCache6, pageCacheTracer7, systemNanoClock8);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test0003() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0003");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    java.io.PrintStream printStream3 = null;
    java.nio.file.Path path4 = null;
    java.nio.file.Path path5 = null;
    org.neo4j.io.layout.DatabaseLayout databaseLayout6 = null;
    try {
      io.github.onograph.backup.GdbRestorer gdbRestorer7 = new io.github.onograph.backup.GdbRestorer(
          fileSystemAbstraction0, false, false, printStream3, path4, path5, databaseLayout6);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test0004() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0004");
    }
    io.github.onograph.backup.CommandProviderBackupImpl commandProviderBackupImpl0 = new io.github.onograph.backup.CommandProviderBackupImpl();
    int int1 = commandProviderBackupImpl0.getPriority();
    org.neo4j.cli.ExecutionContext executionContext2 = null;
    try {
      io.github.onograph.backup.BackupCommand backupCommand3 = commandProviderBackupImpl0.createCommand(
          executionContext2);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
  }

  @Test
  public void test0005() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0005");
    }
    java.nio.file.Path path0 = null;
    try {
      java.nio.file.Path path1 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path0);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test0006() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0006");
    }
    java.nio.file.Path path0 = null;
    try {
      java.nio.file.Path path1 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
          path0);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test0007() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0007");
    }
    org.neo4j.configuration.Config config0 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction1 = null;
    org.neo4j.logging.LogProvider logProvider2 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer3 = null;
    org.neo4j.time.SystemNanoClock systemNanoClock4 = null;
    try {
      io.github.onograph.backup.DefaultBackupServiceHandler defaultBackupServiceHandler5 = io.github.onograph.backup.DefaultBackupServiceHandler.strliclDefaultBackupServiceHandler(
          config0, fileSystemAbstraction1, logProvider2, pageCacheTracer3, systemNanoClock4);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test0008() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0008");
    }
    io.github.onograph.backup.BackupRunner backupRunner0 = io.github.onograph.backup.BackupRunner.buldeuBackupRunner();
    io.github.onograph.backup.BackupEnvironment backupEnvironment1 = null;
    try {
      backupRunner0.excebcpForBa(backupEnvironment1);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(backupRunner0);
  }

  @Test
  public void test0009() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0009");
    }
    java.lang.String str0 = io.github.onograph.backup.GdbIdRepo.FIL_NME;
    org.junit.Assert.assertEquals("'" + str0 + "' != '" + "database.id" + "'", str0, "database.id");
  }

  @Test
  public void test0010() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0010");
    }
    org.neo4j.cli.ExecutionContext executionContext0 = null;
    try {
      io.github.onograph.backup.GdbRestorerCommand gdbRestorerCommand1 = new io.github.onograph.backup.GdbRestorerCommand(
          executionContext0);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test0011() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0011");
    }
    java.nio.file.Path path0 = null;
    try {
      boolean boolean1 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path0);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test0012() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0012");
    }
    org.neo4j.logging.LogProvider logProvider0 = null;
    org.neo4j.time.SystemNanoClock systemNanoClock1 = null;
    try {
      io.github.onograph.backup.GdbStoreTransferWatcherRebImpl gdbStoreTransferWatcherRebImpl2 = new io.github.onograph.backup.GdbStoreTransferWatcherRebImpl(
          logProvider0, systemNanoClock1);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test0013() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0013");
    }
    org.neo4j.cli.ExecutionContext executionContext0 = null;
    try {
      io.github.onograph.backup.BackupCommand backupCommand1 = new io.github.onograph.backup.BackupCommand(
          executionContext0);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test0014() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0014");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.logging.LogProvider logProvider5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator2.itraLogProvider(
        logProvider5);
    io.github.onograph.backup.BackupRunner backupRunner7 = generator6.bulBackupRunner();
    io.github.onograph.backup.BackupEnvironment backupEnvironment8 = null;
    try {
      backupRunner7.excebcpForBa(backupEnvironment8);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(backupRunner7);
  }

  @Test
  public void test0015() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0015");
    }
    try {
      io.github.onograph.backup.Backup backup2 = io.github.onograph.backup.Backup.froBackup((-1),
          "hi!");
      org.junit.Assert.fail(
          "Expected exception of type java.lang.IllegalArgumentException; message: Port is expected to be positive and less than or equal to 65535 but was: -1");
    } catch (java.lang.IllegalArgumentException e) {
    }
  }

  @Test
  public void test0016() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0016");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupIOService backupIOService1 = new io.github.onograph.backup.BackupIOService(
        fileSystemAbstraction0);
    java.nio.file.Path path2 = null;
    try {
      boolean boolean3 = backupIOService1.isExsForPa(path2);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test0017() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0017");
    }
    io.github.onograph.backup.CommandProviderGdbRestorerCommandImpl commandProviderGdbRestorerCommandImpl0 = new io.github.onograph.backup.CommandProviderGdbRestorerCommandImpl();
    org.neo4j.cli.ExecutionContext executionContext1 = null;
    try {
      io.github.onograph.backup.GdbRestorerCommand gdbRestorerCommand2 = commandProviderGdbRestorerCommandImpl0.createCommand(
          executionContext1);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test0018() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0018");
    }
    org.neo4j.configuration.Config config0 = null;
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags1 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction2 = null;
    org.neo4j.logging.LogProvider logProvider3 = null;
    java.nio.file.Path path4 = null;
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory5 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl6 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config0, consistencyFlags1, fileSystemAbstraction2, logProvider3, path4,
        progressMonitorFactory5);
    org.neo4j.io.layout.DatabaseLayout databaseLayout7 = null;
    try {
      backupVerificationServiceImpl6.chcsyForDa(databaseLayout7);
      org.junit.Assert.fail(
          "Expected exception of type io.github.onograph.backup.BackupVerificationErrorException; message: *** Error:  2915f124-983c-439d-b1ae-a9c5ad06642b");
    } catch (io.github.onograph.backup.BackupVerificationErrorException e) {
    }
  }

  @Test
  public void test0019() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0019");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup("");
    java.nio.file.Path path3 = null;
    try {
      io.github.onograph.backup.Backup.BackupRespState backupRespState4 = backup1.bakBackupBackupRespState(
          "", path3);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: targetDirectory");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
  }

  @Test
  public void test0020() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0020");
    }
    io.github.onograph.backup.CommandProviderBackupImpl commandProviderBackupImpl0 = new io.github.onograph.backup.CommandProviderBackupImpl();
    int int1 = commandProviderBackupImpl0.getPriority();
    int int2 = commandProviderBackupImpl0.getPriority();
    java.lang.Class<?> wildcardClass3 = commandProviderBackupImpl0.getClass();
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    org.junit.Assert.assertNotNull(wildcardClass3);
  }

  @Test
  public void test0021() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0021");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    java.nio.file.Path path2 = null;
    org.neo4j.logging.LogProvider logProvider3 = null;
    org.neo4j.io.pagecache.PageCache pageCache4 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer5 = null;
    try {
      io.github.onograph.backup.BackupMetaService backupMetaService6 = new io.github.onograph.backup.BackupMetaService(
          fileSystemAbstraction0, "", path2, logProvider3, pageCache4, pageCacheTracer5);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test0022() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0022");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    org.neo4j.logging.LogProvider logProvider1 = null;
    org.neo4j.logging.Log log2 = null;
    io.github.onograph.backup.RemoteBackupService remoteBackupService3 = new io.github.onograph.backup.RemoteBackupService(
        fileSystemAbstraction0, logProvider1, log2);
    io.github.onograph.backup.BackupVerificationService backupVerificationService4 = io.github.onograph.backup.BackupVerificationService.NOO_BACKUP_VERIFICATION_SERVICE;
    org.neo4j.io.layout.DatabaseLayout databaseLayout5 = null;
    backupVerificationService4.chcsyForDa(databaseLayout5);
    io.github.onograph.backup.BackupEnvironment backupEnvironment7 = null;
    io.github.onograph.backup.DefaultBackupServiceHandler defaultBackupServiceHandler9 = null;
    io.github.onograph.backup.GdbStoreTransferWatcherRebImpl gdbStoreTransferWatcherRebImpl10 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer11 = null;
    io.github.onograph.backup.RemoteBackupManager remoteBackupManager12 = null;
    org.neo4j.configuration.Config config13 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction14 = null;
    org.neo4j.memory.MemoryTracker memoryTracker15 = null;
    org.neo4j.io.pagecache.PageCache pageCache16 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager17 = new io.github.onograph.backup.BackupRestorationManager(
        config13, fileSystemAbstraction14, memoryTracker15, pageCache16);
    try {
      remoteBackupService3.bakForBaPaBaDeBaReStGd(backupVerificationService4, backupEnvironment7,
          "", defaultBackupServiceHandler9, gdbStoreTransferWatcherRebImpl10, pageCacheTracer11,
          remoteBackupManager12, backupRestorationManager17);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(backupVerificationService4);
  }

  @Test
  public void test0023() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0023");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.logging.LogProvider logProvider5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator2.itraLogProvider(
        logProvider5);
    org.neo4j.time.SystemNanoClock systemNanoClock7 = null;
    io.github.onograph.backup.BackupRunner.Generator generator8 = generator6.systemNanoClock(
        systemNanoClock7);
    org.neo4j.monitoring.Monitors monitors9 = null;
    io.github.onograph.backup.BackupRunner.Generator generator10 = generator8.monitors(monitors9);
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(generator8);
    org.junit.Assert.assertNotNull(generator10);
  }

  @Test
  public void test0024() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0024");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    java.io.PrintStream printStream3 = null;
    java.nio.file.Path path4 = null;
    java.nio.file.Path path5 = null;
    org.neo4j.io.layout.DatabaseLayout databaseLayout6 = null;
    try {
      io.github.onograph.backup.GdbRestorer gdbRestorer7 = new io.github.onograph.backup.GdbRestorer(
          fileSystemAbstraction0, true, false, printStream3, path4, path5, databaseLayout6);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test0025() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0025");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup("");
    io.github.onograph.backup.Backup backup3 = backup1.isCc(true);
    io.github.onograph.backup.Backup backup5 = backup3.isCc(true);
    java.nio.file.Path path7 = null;
    try {
      io.github.onograph.backup.Backup.BackupRespState backupRespState8 = backup5.bakBackupBackupRespState(
          "hi!", path7);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: targetDirectory");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(backup3);
    org.junit.Assert.assertNotNull(backup5);
  }

  @Test
  public void test0026() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0026");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    java.nio.file.Path path3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.prPath(path3);
    io.github.onograph.backup.BackupEnvironment.Factory factory5 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config6 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory5.config(config6);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory7.isRp(true);
    org.neo4j.configuration.Config config10 = factory7.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory0.config(config10);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction12 = null;
    io.github.onograph.cluster.raft.module.cuprot.LifecycleCatchupManagerImpl lifecycleCatchupManagerImpl13 = null;
    org.neo4j.scheduler.JobScheduler jobScheduler14 = null;
    org.neo4j.logging.LogProvider logProvider15 = null;
    org.neo4j.monitoring.Monitors monitors16 = null;
    org.neo4j.io.pagecache.PageCache pageCache17 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer18 = null;
    org.neo4j.time.SystemNanoClock systemNanoClock19 = null;
    try {
      io.github.onograph.backup.RemoteBackupManager remoteBackupManager20 = new io.github.onograph.backup.RemoteBackupManager(
          config10, fileSystemAbstraction12, lifecycleCatchupManagerImpl13, jobScheduler14,
          logProvider15, monitors16, pageCache17, pageCacheTracer18, systemNanoClock19);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(config10);
    org.junit.Assert.assertNotNull(factory11);
  }

  @Test
  public void test0027() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0027");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup("");
    java.nio.file.Path path3 = null;
    try {
      io.github.onograph.backup.Backup.BackupRespState backupRespState4 = backup1.bakBackupBackupRespState(
          "database.id", path3);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: targetDirectory");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
  }

  @Test
  public void test0028() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0028");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    java.nio.file.Path path3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.prPath(path3);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isRp(true);
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern7 = factory6.gedtenprDatabaseNamePattern();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(databaseNamePattern7);
  }

  @Test
  public void test0029() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0029");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupIOService backupIOService1 = new io.github.onograph.backup.BackupIOService(
        fileSystemAbstraction0);
    java.nio.file.Path path2 = null;
    try {
      backupIOService1.deedForPa(path2);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test0030() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0030");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = factory2.gecfConfig();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    io.github.onograph.cluster.raft.module.cuprot.LifecycleCatchupManagerImpl lifecycleCatchupManagerImpl7 = null;
    org.neo4j.scheduler.JobScheduler jobScheduler8 = null;
    org.neo4j.logging.LogProvider logProvider9 = null;
    org.neo4j.monitoring.Monitors monitors10 = null;
    org.neo4j.io.pagecache.PageCache pageCache11 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer12 = null;
    org.neo4j.time.SystemNanoClock systemNanoClock13 = null;
    try {
      io.github.onograph.backup.RemoteBackupManager remoteBackupManager14 = new io.github.onograph.backup.RemoteBackupManager(
          config5, fileSystemAbstraction6, lifecycleCatchupManagerImpl7, jobScheduler8,
          logProvider9, monitors10, pageCache11, pageCacheTracer12, systemNanoClock13);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(config5);
  }

  @Test
  public void test0031() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0031");
    }
    org.neo4j.configuration.Config config0 = null;
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags1 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction2 = null;
    org.neo4j.logging.LogProvider logProvider3 = null;
    java.nio.file.Path path4 = null;
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory5 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl6 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config0, consistencyFlags1, fileSystemAbstraction2, logProvider3, path4,
        progressMonitorFactory5);
    org.neo4j.io.layout.DatabaseLayout databaseLayout7 = null;
    try {
      backupVerificationServiceImpl6.chcsyForDa(databaseLayout7);
      org.junit.Assert.fail(
          "Expected exception of type io.github.onograph.backup.BackupVerificationErrorException; message: *** Error:  2915f124-983c-439d-b1ae-a9c5ad06642b");
    } catch (io.github.onograph.backup.BackupVerificationErrorException e) {
    }
  }

  @Test
  public void test0032() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0032");
    }
    java.nio.file.Path path0 = null;
    java.nio.file.Path path1 = null;
    io.github.onograph.backup.FileMoverService fileMoverService2 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path0, path1);
    java.nio.file.Path path3 = fileMoverService2.filPath();
    java.nio.file.Path path4 = null;
    java.nio.file.CopyOption[] copyOptionArray5 = new java.nio.file.CopyOption[]{};
    try {
      fileMoverService2.movForPaCo(path4, copyOptionArray5);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(fileMoverService2);
    org.junit.Assert.assertNull(path3);
    org.junit.Assert.assertNotNull(copyOptionArray5);
  }

  @Test
  public void test0033() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0033");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup("");
    io.github.onograph.backup.Backup backup3 = backup1.isCc(true);
    io.github.onograph.backup.Backup backup5 = backup3.isCc(true);
    java.io.OutputStream outputStream6 = null;
    try {
      io.github.onograph.backup.Backup backup7 = backup3.outputStream(outputStream6);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: outputStream");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(backup3);
    org.junit.Assert.assertNotNull(backup5);
  }

  @Test
  public void test0034() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0034");
    }
    java.nio.file.Path path0 = null;
    java.nio.file.Path path1 = null;
    io.github.onograph.backup.FileMoverService fileMoverService2 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path0, path1);
    java.nio.file.Path path3 = fileMoverService2.filPath();
    try {
      java.lang.Class<?> wildcardClass4 = path3.getClass();
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(fileMoverService2);
    org.junit.Assert.assertNull(path3);
  }

  @Test
  public void test0035() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0035");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup("");
    io.github.onograph.backup.Backup backup3 = backup1.isCc(true);
    io.github.onograph.backup.Backup backup5 = backup3.isCc(true);
    java.io.OutputStream outputStream6 = null;
    try {
      io.github.onograph.backup.Backup backup7 = backup5.outputStream(outputStream6);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: outputStream");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(backup3);
    org.junit.Assert.assertNotNull(backup5);
  }

  @Test
  public void test0036() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0036");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    org.neo4j.logging.LogProvider logProvider1 = null;
    org.neo4j.logging.Log log2 = null;
    io.github.onograph.backup.RemoteBackupService remoteBackupService3 = new io.github.onograph.backup.RemoteBackupService(
        fileSystemAbstraction0, logProvider1, log2);
    org.neo4j.configuration.Config config4 = null;
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags5 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.logging.LogProvider logProvider7 = null;
    java.nio.file.Path path8 = null;
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory9 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl10 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config4, consistencyFlags5, fileSystemAbstraction6, logProvider7, path8,
        progressMonitorFactory9);
    io.github.onograph.backup.BackupEnvironment backupEnvironment11 = null;
    io.github.onograph.backup.DefaultBackupServiceHandler defaultBackupServiceHandler13 = null;
    io.github.onograph.backup.GdbStoreTransferWatcherRebImpl gdbStoreTransferWatcherRebImpl14 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer15 = null;
    io.github.onograph.backup.RemoteBackupManager remoteBackupManager16 = null;
    org.neo4j.configuration.Config config17 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction18 = null;
    org.neo4j.memory.MemoryTracker memoryTracker19 = null;
    org.neo4j.io.pagecache.PageCache pageCache20 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager21 = new io.github.onograph.backup.BackupRestorationManager(
        config17, fileSystemAbstraction18, memoryTracker19, pageCache20);
    try {
      remoteBackupService3.bakForBaPaBaDeBaReStGd(
          (io.github.onograph.backup.BackupVerificationService) backupVerificationServiceImpl10,
          backupEnvironment11, "database.id", defaultBackupServiceHandler13,
          gdbStoreTransferWatcherRebImpl14, pageCacheTracer15, remoteBackupManager16,
          backupRestorationManager21);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test0037() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0037");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    org.neo4j.logging.LogProvider logProvider1 = null;
    org.neo4j.logging.Log log2 = null;
    io.github.onograph.backup.RemoteBackupService remoteBackupService3 = new io.github.onograph.backup.RemoteBackupService(
        fileSystemAbstraction0, logProvider1, log2);
    org.neo4j.configuration.Config config4 = null;
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags5 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.logging.LogProvider logProvider7 = null;
    java.nio.file.Path path8 = null;
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory9 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl10 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config4, consistencyFlags5, fileSystemAbstraction6, logProvider7, path8,
        progressMonitorFactory9);
    io.github.onograph.backup.BackupEnvironment backupEnvironment11 = null;
    io.github.onograph.backup.DefaultBackupServiceHandler defaultBackupServiceHandler13 = null;
    io.github.onograph.backup.GdbStoreTransferWatcherRebImpl gdbStoreTransferWatcherRebImpl14 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer15 = null;
    io.github.onograph.backup.RemoteBackupManager remoteBackupManager16 = null;
    org.neo4j.configuration.Config config17 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction18 = null;
    org.neo4j.memory.MemoryTracker memoryTracker19 = null;
    org.neo4j.io.pagecache.PageCache pageCache20 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager21 = new io.github.onograph.backup.BackupRestorationManager(
        config17, fileSystemAbstraction18, memoryTracker19, pageCache20);
    try {
      remoteBackupService3.bakForBaPaBaDeBaReStGd(
          (io.github.onograph.backup.BackupVerificationService) backupVerificationServiceImpl10,
          backupEnvironment11, "", defaultBackupServiceHandler13, gdbStoreTransferWatcherRebImpl14,
          pageCacheTracer15, remoteBackupManager16, backupRestorationManager21);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test0038() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0038");
    }
    io.github.onograph.backup.BackupMetaDTO backupMetaDTO0 = null;
    java.lang.String[] strArray2 = new java.lang.String[]{"database.id"};
    java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
    boolean boolean4 = java.util.Collections.addAll(
        (java.util.Collection<java.lang.String>) strList3, strArray2);
    try {
      io.github.onograph.backup.BackupMetaService.wrtmedaForBaLi(backupMetaDTO0,
          (java.util.List<java.lang.String>) strList3);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(strArray2);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
  }

  @Test
  public void test0039() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0039");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    java.nio.file.Path path3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.prPath(path3);
    io.github.onograph.backup.BackupEnvironment.Factory factory5 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config6 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory5.config(config6);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory7.isRp(true);
    org.neo4j.configuration.Config config10 = factory7.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory0.config(config10);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction12 = null;
    org.neo4j.logging.LogProvider logProvider13 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer14 = null;
    org.neo4j.time.SystemNanoClock systemNanoClock15 = null;
    try {
      io.github.onograph.backup.DefaultBackupServiceHandler defaultBackupServiceHandler16 = io.github.onograph.backup.DefaultBackupServiceHandler.strliclDefaultBackupServiceHandler(
          config10, fileSystemAbstraction12, logProvider13, pageCacheTracer14, systemNanoClock15);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(config10);
    org.junit.Assert.assertNotNull(factory11);
  }

  @Test
  public void test0040() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0040");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    org.neo4j.configuration.helpers.SocketAddress socketAddress3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.wihadsBackupEnvironmentFactory(
        socketAddress3);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
  }

  @Test
  public void test0041() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0041");
    }
    io.github.onograph.backup.SetupForBackupRestorationCommandProvider setupForBackupRestorationCommandProvider0 = new io.github.onograph.backup.SetupForBackupRestorationCommandProvider();
    int int1 = setupForBackupRestorationCommandProvider0.getPriority();
    int int2 = setupForBackupRestorationCommandProvider0.getPriority();
    org.neo4j.cli.ExecutionContext executionContext3 = null;
    try {
      io.github.onograph.backup.SetupForBackupRestorationCommand setupForBackupRestorationCommand4 = setupForBackupRestorationCommandProvider0.createCommand(
          executionContext3);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
  }

  @Test
  public void test0042() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0042");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config10 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.config(config10);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isRp(true);
    org.neo4j.configuration.Config config14 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory13.config(config14);
    org.neo4j.configuration.helpers.SocketAddress socketAddress16 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory13.wihadsBackupEnvironmentFactory(
        socketAddress16);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config19 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory18.config(config19);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory20.isRp(true);
    org.neo4j.configuration.Config config23 = factory20.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory13.config(config23);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory8.config(config23);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction26 = null;
    org.neo4j.logging.LogProvider logProvider27 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer28 = null;
    org.neo4j.time.SystemNanoClock systemNanoClock29 = null;
    try {
      io.github.onograph.backup.DefaultBackupServiceHandler defaultBackupServiceHandler30 = io.github.onograph.backup.DefaultBackupServiceHandler.strliclDefaultBackupServiceHandler(
          config23, fileSystemAbstraction26, logProvider27, pageCacheTracer28, systemNanoClock29);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(config23);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory25);
  }

  @Test
  public void test0043() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0043");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupIOService backupIOService1 = new io.github.onograph.backup.BackupIOService(
        fileSystemAbstraction0);
    org.neo4j.io.layout.DatabaseLayout databaseLayout2 = null;
    io.github.onograph.cluster.raft.module.cuprot.scmeta.StoreResources storeResources3 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction4 = null;
    io.github.onograph.backup.GdbIdRepo gdbIdRepo5 = new io.github.onograph.backup.GdbIdRepo(
        fileSystemAbstraction4);
    org.neo4j.logging.LogProvider logProvider6 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer7 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction8 = null;
    io.github.onograph.backup.BackupMetadataRepository backupMetadataRepository9 = new io.github.onograph.backup.BackupMetadataRepository(
        fileSystemAbstraction8);
    try {
      io.github.onograph.backup.BackupMetaDTO backupMetaDTO10 = new io.github.onograph.backup.BackupMetaDTO(
          backupIOService1, databaseLayout2, storeResources3, gdbIdRepo5, logProvider6,
          pageCacheTracer7, backupMetadataRepository9);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test0044() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0044");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup("");
    io.github.onograph.backup.Backup backup3 = backup1.isCc(true);
    java.nio.file.Path path5 = null;
    try {
      io.github.onograph.backup.Backup.BackupRespState backupRespState6 = backup3.bakBackupBackupRespState(
          "", path5);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: targetDirectory");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(backup3);
  }

  @Test
  public void test0045() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0045");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    java.nio.file.Path path3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.prPath(path3);
    io.github.onograph.backup.BackupEnvironment.Factory factory5 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config6 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory5.config(config6);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory7.isRp(true);
    org.neo4j.configuration.Config config10 = factory7.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory0.config(config10);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction12 = null;
    org.neo4j.configuration.Config config13 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction14 = null;
    java.nio.file.Path[] pathArray15 = new java.nio.file.Path[]{};
    java.util.LinkedHashSet<java.nio.file.Path> pathSet16 = new java.util.LinkedHashSet<java.nio.file.Path>();
    boolean boolean17 = java.util.Collections.addAll(
        (java.util.Collection<java.nio.file.Path>) pathSet16, pathArray15);
    io.github.onograph.backup.BackupRestoreMeta backupRestoreMeta18 = new io.github.onograph.backup.BackupRestoreMeta(
        config13, fileSystemAbstraction14, (java.util.Set<java.nio.file.Path>) pathSet16);
    io.github.onograph.backup.BackupRestoreMeta backupRestoreMeta19 = new io.github.onograph.backup.BackupRestoreMeta(
        config10, fileSystemAbstraction12, (java.util.Set<java.nio.file.Path>) pathSet16);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction20 = null;
    org.neo4j.logging.LogProvider logProvider21 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer22 = null;
    org.neo4j.time.SystemNanoClock systemNanoClock23 = null;
    try {
      io.github.onograph.backup.DefaultBackupServiceHandler defaultBackupServiceHandler24 = io.github.onograph.backup.DefaultBackupServiceHandler.strliclDefaultBackupServiceHandler(
          config10, fileSystemAbstraction20, logProvider21, pageCacheTracer22, systemNanoClock23);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(config10);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(pathArray15);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
  }

  @Test
  public void test0046() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0046");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup("");
    io.github.onograph.backup.Backup backup3 = backup1.isCc(true);
    io.github.onograph.backup.Backup backup5 = backup3.isCc(true);
    io.github.onograph.backup.Backup backup7 = backup5.isCc(true);
    java.io.OutputStream outputStream8 = null;
    try {
      io.github.onograph.backup.Backup backup9 = backup5.outputStream(outputStream8);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: outputStream");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(backup3);
    org.junit.Assert.assertNotNull(backup5);
    org.junit.Assert.assertNotNull(backup7);
  }

  @Test
  public void test0047() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0047");
    }
    java.nio.file.Path path0 = null;
    java.nio.file.Path path1 = null;
    io.github.onograph.backup.FileMoverService fileMoverService2 = io.github.onograph.backup.FileMoverService.movifeseFileMoverService(
        path0, path1);
    java.nio.file.Path path3 = fileMoverService2.filPath();
    java.nio.file.Path path4 = fileMoverService2.filPath();
    java.nio.file.Path path5 = null;
    java.nio.file.CopyOption copyOption6 = null;
    java.nio.file.CopyOption[] copyOptionArray7 = new java.nio.file.CopyOption[]{copyOption6};
    try {
      fileMoverService2.movForPaCo(path5, copyOptionArray7);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(fileMoverService2);
    org.junit.Assert.assertNull(path3);
    org.junit.Assert.assertNull(path4);
    org.junit.Assert.assertNotNull(copyOptionArray7);
  }

  @Test
  public void test0048() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0048");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.GdbIdRepo gdbIdRepo1 = new io.github.onograph.backup.GdbIdRepo(
        fileSystemAbstraction0);
    java.nio.file.Path path2 = null;
    try {
      java.util.Optional<org.neo4j.kernel.database.DatabaseId> databaseIdOptional3 = gdbIdRepo1.reddtaiOptional(
          path2);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test0049() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0049");
    }
    java.nio.file.Path path0 = null;
    java.nio.file.Path path1 = null;
    io.github.onograph.backup.FileMoverService fileMoverService2 = io.github.onograph.backup.FileMoverService.movifeseFileMoverService(
        path0, path1);
    java.nio.file.Path path3 = null;
    java.nio.file.CopyOption copyOption4 = null;
    java.nio.file.CopyOption[] copyOptionArray5 = new java.nio.file.CopyOption[]{copyOption4};
    try {
      fileMoverService2.movForPaCo(path3, copyOptionArray5);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(fileMoverService2);
    org.junit.Assert.assertNotNull(copyOptionArray5);
  }

  @Test
  public void test0050() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0050");
    }
    java.nio.file.Path path0 = null;
    java.nio.file.Path path1 = null;
    io.github.onograph.backup.FileMoverService fileMoverService2 = io.github.onograph.backup.FileMoverService.movifeseFileMoverService(
        path0, path1);
    java.nio.file.Path path3 = fileMoverService2.filPath();
    java.nio.file.Path path4 = null;
    java.nio.file.CopyOption copyOption5 = null;
    java.nio.file.CopyOption[] copyOptionArray6 = new java.nio.file.CopyOption[]{copyOption5};
    try {
      fileMoverService2.movForPaCo(path4, copyOptionArray6);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(fileMoverService2);
    org.junit.Assert.assertNull(path3);
    org.junit.Assert.assertNotNull(copyOptionArray6);
  }

  @Test
  public void test0051() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0051");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = factory2.gecfConfig();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.memory.MemoryTracker memoryTracker7 = null;
    org.neo4j.io.pagecache.PageCache pageCache8 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager9 = new io.github.onograph.backup.BackupRestorationManager(
        config5, fileSystemAbstraction6, memoryTracker7, pageCache8);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction10 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isCc(false);
    java.nio.file.Path path14 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory11.prPath(path14);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config17 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory16.config(config17);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory18.isRp(true);
    org.neo4j.configuration.Config config21 = factory18.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory11.config(config21);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction23 = null;
    org.neo4j.configuration.Config config24 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction25 = null;
    java.nio.file.Path[] pathArray26 = new java.nio.file.Path[]{};
    java.util.LinkedHashSet<java.nio.file.Path> pathSet27 = new java.util.LinkedHashSet<java.nio.file.Path>();
    boolean boolean28 = java.util.Collections.addAll(
        (java.util.Collection<java.nio.file.Path>) pathSet27, pathArray26);
    io.github.onograph.backup.BackupRestoreMeta backupRestoreMeta29 = new io.github.onograph.backup.BackupRestoreMeta(
        config24, fileSystemAbstraction25, (java.util.Set<java.nio.file.Path>) pathSet27);
    io.github.onograph.backup.BackupRestoreMeta backupRestoreMeta30 = new io.github.onograph.backup.BackupRestoreMeta(
        config21, fileSystemAbstraction23, (java.util.Set<java.nio.file.Path>) pathSet27);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction31 = null;
    java.nio.file.Path[] pathArray32 = new java.nio.file.Path[]{};
    java.util.LinkedHashSet<java.nio.file.Path> pathSet33 = new java.util.LinkedHashSet<java.nio.file.Path>();
    boolean boolean34 = java.util.Collections.addAll(
        (java.util.Collection<java.nio.file.Path>) pathSet33, pathArray32);
    io.github.onograph.backup.BackupRestoreMeta backupRestoreMeta35 = new io.github.onograph.backup.BackupRestoreMeta(
        config21, fileSystemAbstraction31, (java.util.Set<java.nio.file.Path>) pathSet33);
    io.github.onograph.backup.BackupRestoreMeta backupRestoreMeta36 = new io.github.onograph.backup.BackupRestoreMeta(
        config5, fileSystemAbstraction10, (java.util.Set<java.nio.file.Path>) pathSet33);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(config5);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(config21);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(pathArray26);
    org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    org.junit.Assert.assertNotNull(pathArray32);
    org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
  }

  @Test
  public void test0052() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0052");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup("");
    io.github.onograph.backup.Backup backup3 = backup1.isCc(true);
    io.github.onograph.backup.Backup backup5 = backup3.isCc(true);
    io.github.onograph.backup.Backup backup7 = backup5.isBftf(false);
    java.io.OutputStream outputStream8 = null;
    try {
      io.github.onograph.backup.Backup backup9 = backup5.outputStream(outputStream8);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: outputStream");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(backup3);
    org.junit.Assert.assertNotNull(backup5);
    org.junit.Assert.assertNotNull(backup7);
  }

  @Test
  public void test0053() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0053");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.GdbIdRepo gdbIdRepo1 = new io.github.onograph.backup.GdbIdRepo(
        fileSystemAbstraction0);
    org.neo4j.kernel.database.DatabaseId databaseId2 = null;
    java.nio.file.Path path3 = null;
    try {
      gdbIdRepo1.wrdaiForDaPa(databaseId2, path3);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test0054() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0054");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupMetadataRepository backupMetadataRepository1 = new io.github.onograph.backup.BackupMetadataRepository(
        fileSystemAbstraction0);
    java.nio.file.Path path2 = null;
    java.lang.String[] strArray5 = new java.lang.String[]{"database.id", ""};
    java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
    boolean boolean7 = java.util.Collections.addAll(
        (java.util.Collection<java.lang.String>) strList6, strArray5);
    try {
      backupMetadataRepository1.wrtForPaLi(path2, (java.util.List<java.lang.String>) strList6);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(strArray5);
    org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
  }

  @Test
  public void test0055() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0055");
    }
    java.nio.file.Path path0 = null;
    java.nio.file.Path path1 = null;
    io.github.onograph.backup.FileMoverService fileMoverService2 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path0, path1);
    java.nio.file.Path path3 = fileMoverService2.filPath();
    java.nio.file.Path path4 = fileMoverService2.filPath();
    java.nio.file.Path path5 = null;
    java.nio.file.CopyOption[] copyOptionArray6 = null;
    try {
      fileMoverService2.movForPaCo(path5, copyOptionArray6);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(fileMoverService2);
    org.junit.Assert.assertNull(path3);
    org.junit.Assert.assertNull(path4);
  }

  @Test
  public void test0056() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0056");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config10 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.config(config10);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isRp(true);
    org.neo4j.configuration.Config config14 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory13.config(config14);
    org.neo4j.configuration.helpers.SocketAddress socketAddress16 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory13.wihadsBackupEnvironmentFactory(
        socketAddress16);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config19 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory18.config(config19);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory20.isRp(true);
    org.neo4j.configuration.Config config23 = factory20.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory13.config(config23);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory8.config(config23);
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags26 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction27 = null;
    org.neo4j.logging.LogProvider logProvider28 = null;
    java.nio.file.Path path29 = null;
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory30 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl31 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config23, consistencyFlags26, fileSystemAbstraction27, logProvider28, path29,
        progressMonitorFactory30);
    org.neo4j.io.layout.DatabaseLayout databaseLayout32 = null;
    try {
      backupVerificationServiceImpl31.chcsyForDa(databaseLayout32);
      org.junit.Assert.fail(
          "Expected exception of type io.github.onograph.backup.BackupVerificationErrorException; message: *** Error:  2915f124-983c-439d-b1ae-a9c5ad06642b");
    } catch (io.github.onograph.backup.BackupVerificationErrorException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(config23);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory25);
  }

  @Test
  public void test0057() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0057");
    }
    io.github.onograph.backup.CommandProviderGdbRestorerCommandImpl commandProviderGdbRestorerCommandImpl0 = new io.github.onograph.backup.CommandProviderGdbRestorerCommandImpl();
    int int1 = commandProviderGdbRestorerCommandImpl0.getPriority();
    org.neo4j.cli.Command.CommandType commandType2 = commandProviderGdbRestorerCommandImpl0.commandType();
    org.neo4j.cli.Command.CommandType commandType3 = commandProviderGdbRestorerCommandImpl0.commandType();
    org.neo4j.cli.Command.CommandType commandType4 = commandProviderGdbRestorerCommandImpl0.commandType();
    org.neo4j.cli.Command.CommandType commandType5 = commandProviderGdbRestorerCommandImpl0.commandType();
    org.neo4j.cli.ExecutionContext executionContext6 = null;
    try {
      io.github.onograph.backup.GdbRestorerCommand gdbRestorerCommand7 = commandProviderGdbRestorerCommandImpl0.createCommand(
          executionContext6);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    org.junit.Assert.assertTrue(
        "'" + commandType2 + "' != '" + org.neo4j.cli.Command.CommandType.RESTORE_DB + "'",
        commandType2.equals(org.neo4j.cli.Command.CommandType.RESTORE_DB));
    org.junit.Assert.assertTrue(
        "'" + commandType3 + "' != '" + org.neo4j.cli.Command.CommandType.RESTORE_DB + "'",
        commandType3.equals(org.neo4j.cli.Command.CommandType.RESTORE_DB));
    org.junit.Assert.assertTrue(
        "'" + commandType4 + "' != '" + org.neo4j.cli.Command.CommandType.RESTORE_DB + "'",
        commandType4.equals(org.neo4j.cli.Command.CommandType.RESTORE_DB));
    org.junit.Assert.assertTrue(
        "'" + commandType5 + "' != '" + org.neo4j.cli.Command.CommandType.RESTORE_DB + "'",
        commandType5.equals(org.neo4j.cli.Command.CommandType.RESTORE_DB));
  }

  @Test
  public void test0058() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0058");
    }
    io.github.onograph.backup.BackupMetaDTO backupMetaDTO0 = null;
    java.lang.String[] strArray2 = new java.lang.String[]{""};
    java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
    boolean boolean4 = java.util.Collections.addAll(
        (java.util.Collection<java.lang.String>) strList3, strArray2);
    try {
      io.github.onograph.backup.BackupMetaService.wrtmedaForBaLi(backupMetaDTO0,
          (java.util.List<java.lang.String>) strList3);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(strArray2);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
  }

  @Test
  public void test0059() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0059");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    java.nio.file.Path path3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.prPath(path3);
    io.github.onograph.backup.BackupEnvironment.Factory factory5 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config6 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory5.config(config6);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory7.isRp(true);
    org.neo4j.configuration.Config config10 = factory7.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory0.config(config10);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction12 = null;
    org.neo4j.configuration.Config config13 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction14 = null;
    java.nio.file.Path[] pathArray15 = new java.nio.file.Path[]{};
    java.util.LinkedHashSet<java.nio.file.Path> pathSet16 = new java.util.LinkedHashSet<java.nio.file.Path>();
    boolean boolean17 = java.util.Collections.addAll(
        (java.util.Collection<java.nio.file.Path>) pathSet16, pathArray15);
    io.github.onograph.backup.BackupRestoreMeta backupRestoreMeta18 = new io.github.onograph.backup.BackupRestoreMeta(
        config13, fileSystemAbstraction14, (java.util.Set<java.nio.file.Path>) pathSet16);
    io.github.onograph.backup.BackupRestoreMeta backupRestoreMeta19 = new io.github.onograph.backup.BackupRestoreMeta(
        config10, fileSystemAbstraction12, (java.util.Set<java.nio.file.Path>) pathSet16);
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags20 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction21 = null;
    org.neo4j.logging.LogProvider logProvider22 = null;
    java.nio.file.Path path23 = null;
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory24 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl25 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config10, consistencyFlags20, fileSystemAbstraction21, logProvider22, path23,
        progressMonitorFactory24);
    org.neo4j.io.layout.DatabaseLayout databaseLayout26 = null;
    try {
      backupVerificationServiceImpl25.chcsyForDa(databaseLayout26);
      org.junit.Assert.fail(
          "Expected exception of type io.github.onograph.backup.BackupVerificationErrorException; message: *** Error:  2915f124-983c-439d-b1ae-a9c5ad06642b");
    } catch (io.github.onograph.backup.BackupVerificationErrorException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(config10);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(pathArray15);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
  }

  @Test
  public void test0060() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0060");
    }
    try {
      io.github.onograph.backup.Backup backup2 = io.github.onograph.backup.Backup.froBackup(0,
          "database.id");
      org.junit.Assert.fail(
          "Expected exception of type java.lang.IllegalArgumentException; message: Port is expected to be positive and less than or equal to 65535 but was: 0");
    } catch (java.lang.IllegalArgumentException e) {
    }
  }

  @Test
  public void test0061() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0061");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    java.nio.file.Path path3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.prPath(path3);
    org.neo4j.configuration.helpers.SocketAddress socketAddress5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress5);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.isSicc(
        (java.lang.Boolean) true);
    try {
      io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.databaseNamePattern(
          "");
      org.junit.Assert.fail(
          "Expected exception of type java.lang.IllegalArgumentException; message: The provided database name is empty.");
    } catch (java.lang.IllegalArgumentException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
  }

  @Test
  public void test0062() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0062");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.logging.LogProvider logProvider5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator2.itraLogProvider(
        logProvider5);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction7 = null;
    io.github.onograph.backup.BackupRunner.Generator generator8 = generator2.fFileSystemAbstraction(
        fileSystemAbstraction7);
    org.neo4j.logging.LogProvider logProvider9 = null;
    io.github.onograph.backup.BackupRunner.Generator generator10 = generator8.itraLogProvider(
        logProvider9);
    io.github.onograph.backup.BackupRunner backupRunner11 = generator10.bulBackupRunner();
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory12.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory12.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory12.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory18.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory18.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment24 = factory18.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern25 = backupEnvironment24.getDatabaseNamePattern();
    try {
      backupRunner11.excebcpForBa(backupEnvironment24);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(generator8);
    org.junit.Assert.assertNotNull(generator10);
    org.junit.Assert.assertNotNull(backupRunner11);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(backupEnvironment24);
    org.junit.Assert.assertNotNull(databaseNamePattern25);
  }

  @Test
  public void test0063() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0063");
    }
    io.github.onograph.backup.BackupMetaDTO backupMetaDTO0 = null;
    java.lang.String[] strArray4 = new java.lang.String[]{"database.id", "hi!", ""};
    java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
    boolean boolean6 = java.util.Collections.addAll(
        (java.util.Collection<java.lang.String>) strList5, strArray4);
    try {
      io.github.onograph.backup.BackupMetaService.wrtmedaForBaLi(backupMetaDTO0,
          (java.util.List<java.lang.String>) strList5);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(strArray4);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
  }

  @Test
  public void test0064() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0064");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupMetadataRepository backupMetadataRepository1 = new io.github.onograph.backup.BackupMetadataRepository(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory8.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment14 = factory8.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern15 = backupEnvironment14.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress16 = backupEnvironment14.getSocketAddress();
    java.nio.file.Path path17 = backupEnvironment14.getRpPath();
    java.lang.String[] strArray19 = new java.lang.String[]{"hi!"};
    java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
    boolean boolean21 = java.util.Collections.addAll(
        (java.util.Collection<java.lang.String>) strList20, strArray19);
    try {
      backupMetadataRepository1.wrtForPaLi(path17, (java.util.List<java.lang.String>) strList20);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(backupEnvironment14);
    org.junit.Assert.assertNotNull(databaseNamePattern15);
    org.junit.Assert.assertNotNull(socketAddress16);
    org.junit.Assert.assertNotNull(path17);
    org.junit.Assert.assertNotNull(strArray19);
    org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
  }

  @Test
  public void test0065() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0065");
    }
    io.github.onograph.backup.SetupForBackupRestorationCommandProvider setupForBackupRestorationCommandProvider0 = new io.github.onograph.backup.SetupForBackupRestorationCommandProvider();
    java.lang.Class<?> wildcardClass1 = setupForBackupRestorationCommandProvider0.getClass();
    org.junit.Assert.assertNotNull(wildcardClass1);
  }

  @Test
  public void test0066() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0066");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.miAuthMetaOptions(
        authMetaOptions3);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isGcc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.isCc(true);
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern9 = factory8.gedtenprDatabaseNamePattern();
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory8.isRp(true);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(databaseNamePattern9);
    org.junit.Assert.assertNotNull(factory11);
  }

  @Test
  public void test0067() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0067");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config10 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.config(config10);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isRp(true);
    org.neo4j.configuration.Config config14 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory13.config(config14);
    org.neo4j.configuration.helpers.SocketAddress socketAddress16 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory13.wihadsBackupEnvironmentFactory(
        socketAddress16);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config19 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory18.config(config19);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory20.isRp(true);
    org.neo4j.configuration.Config config23 = factory20.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory13.config(config23);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory8.config(config23);
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags26 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction27 = null;
    org.neo4j.logging.LogProvider logProvider28 = null;
    java.nio.file.Path path29 = null;
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory30 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl31 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config23, consistencyFlags26, fileSystemAbstraction27, logProvider28, path29,
        progressMonitorFactory30);
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags32 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction33 = null;
    org.neo4j.logging.LogProvider logProvider34 = null;
    java.nio.file.Path path35 = null;
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory36 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl37 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config23, consistencyFlags32, fileSystemAbstraction33, logProvider34, path35,
        progressMonitorFactory36);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction38 = null;
    io.github.onograph.cluster.raft.module.cuprot.LifecycleCatchupManagerImpl lifecycleCatchupManagerImpl39 = null;
    org.neo4j.scheduler.JobScheduler jobScheduler40 = null;
    org.neo4j.logging.LogProvider logProvider41 = null;
    org.neo4j.monitoring.Monitors monitors42 = null;
    org.neo4j.io.pagecache.PageCache pageCache43 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer44 = null;
    org.neo4j.time.SystemNanoClock systemNanoClock45 = null;
    try {
      io.github.onograph.backup.RemoteBackupManager remoteBackupManager46 = new io.github.onograph.backup.RemoteBackupManager(
          config23, fileSystemAbstraction38, lifecycleCatchupManagerImpl39, jobScheduler40,
          logProvider41, monitors42, pageCache43, pageCacheTracer44, systemNanoClock45);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(config23);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory25);
  }

  @Test
  public void test0068() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0068");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup(
        "database.id");
    io.github.onograph.backup.Backup backup3 = backup1.isBftf(true);
    io.github.onograph.backup.Backup backup5 = backup1.isBftf(true);
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(backup3);
    org.junit.Assert.assertNotNull(backup5);
  }

  @Test
  public void test0069() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0069");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    java.nio.file.Path path3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.prPath(path3);
    io.github.onograph.backup.BackupEnvironment.Factory factory5 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config6 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory5.config(config6);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory7.isRp(true);
    org.neo4j.configuration.Config config10 = factory7.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory0.config(config10);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction12 = null;
    org.neo4j.configuration.Config config13 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction14 = null;
    java.nio.file.Path[] pathArray15 = new java.nio.file.Path[]{};
    java.util.LinkedHashSet<java.nio.file.Path> pathSet16 = new java.util.LinkedHashSet<java.nio.file.Path>();
    boolean boolean17 = java.util.Collections.addAll(
        (java.util.Collection<java.nio.file.Path>) pathSet16, pathArray15);
    io.github.onograph.backup.BackupRestoreMeta backupRestoreMeta18 = new io.github.onograph.backup.BackupRestoreMeta(
        config13, fileSystemAbstraction14, (java.util.Set<java.nio.file.Path>) pathSet16);
    io.github.onograph.backup.BackupRestoreMeta backupRestoreMeta19 = new io.github.onograph.backup.BackupRestoreMeta(
        config10, fileSystemAbstraction12, (java.util.Set<java.nio.file.Path>) pathSet16);
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags20 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction21 = null;
    org.neo4j.logging.LogProvider logProvider22 = null;
    java.nio.file.Path path23 = null;
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory24 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl25 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config10, consistencyFlags20, fileSystemAbstraction21, logProvider22, path23,
        progressMonitorFactory24);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction26 = null;
    io.github.onograph.cluster.raft.module.cuprot.LifecycleCatchupManagerImpl lifecycleCatchupManagerImpl27 = null;
    org.neo4j.scheduler.JobScheduler jobScheduler28 = null;
    org.neo4j.logging.LogProvider logProvider29 = null;
    org.neo4j.monitoring.Monitors monitors30 = null;
    org.neo4j.io.pagecache.PageCache pageCache31 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer32 = null;
    org.neo4j.time.SystemNanoClock systemNanoClock33 = null;
    try {
      io.github.onograph.backup.RemoteBackupManager remoteBackupManager34 = new io.github.onograph.backup.RemoteBackupManager(
          config10, fileSystemAbstraction26, lifecycleCatchupManagerImpl27, jobScheduler28,
          logProvider29, monitors30, pageCache31, pageCacheTracer32, systemNanoClock33);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(config10);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(pathArray15);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
  }

  @Test
  public void test0070() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0070");
    }
    java.nio.file.Path path0 = null;
    java.nio.file.Path path1 = null;
    io.github.onograph.backup.FileMoverService fileMoverService2 = io.github.onograph.backup.FileMoverService.movifeseFileMoverService(
        path0, path1);
    java.nio.file.Path path3 = fileMoverService2.filPath();
    java.nio.file.Path path4 = fileMoverService2.filPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory5 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory5.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory8.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory8.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory14.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory14.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment20 = factory14.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern21 = backupEnvironment20.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress22 = backupEnvironment20.getSocketAddress();
    java.nio.file.Path path23 = backupEnvironment20.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory5.pbPath(path23);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory25.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = factory28.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory28.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory28.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory34.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory39 = factory34.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment40 = factory34.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern41 = backupEnvironment40.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress42 = backupEnvironment40.getSocketAddress();
    java.nio.file.Path path43 = backupEnvironment40.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory44 = factory25.pbPath(path43);
    io.github.onograph.backup.FileMoverService fileMoverService45 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path23, path43);
    java.nio.file.Path path46 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path23);
    java.nio.file.CopyOption copyOption47 = null;
    java.nio.file.CopyOption[] copyOptionArray48 = new java.nio.file.CopyOption[]{copyOption47};
    try {
      fileMoverService2.movForPaCo(path46, copyOptionArray48);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(fileMoverService2);
    org.junit.Assert.assertNull(path3);
    org.junit.Assert.assertNull(path4);
    org.junit.Assert.assertNotNull(factory5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(backupEnvironment20);
    org.junit.Assert.assertNotNull(databaseNamePattern21);
    org.junit.Assert.assertNotNull(socketAddress22);
    org.junit.Assert.assertNotNull(path23);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(factory39);
    org.junit.Assert.assertNotNull(backupEnvironment40);
    org.junit.Assert.assertNotNull(databaseNamePattern41);
    org.junit.Assert.assertNotNull(socketAddress42);
    org.junit.Assert.assertNotNull(path43);
    org.junit.Assert.assertNotNull(factory44);
    org.junit.Assert.assertNotNull(fileMoverService45);
    org.junit.Assert.assertNotNull(path46);
    org.junit.Assert.assertNotNull(copyOptionArray48);
  }

  @Test
  public void test0071() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0071");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.GdbIdRepo gdbIdRepo1 = new io.github.onograph.backup.GdbIdRepo(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory8.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment14 = factory8.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern15 = backupEnvironment14.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress16 = backupEnvironment14.getSocketAddress();
    java.nio.file.Path path17 = backupEnvironment14.getRpPath();
    try {
      java.util.Optional<org.neo4j.kernel.database.DatabaseId> databaseIdOptional18 = gdbIdRepo1.reddtaiOptional(
          path17);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(backupEnvironment14);
    org.junit.Assert.assertNotNull(databaseNamePattern15);
    org.junit.Assert.assertNotNull(socketAddress16);
    org.junit.Assert.assertNotNull(path17);
  }

  @Test
  public void test0072() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0072");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup("");
    io.github.onograph.backup.Backup backup3 = backup1.isCc(true);
    io.github.onograph.backup.Backup backup5 = backup3.isCc(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory7.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory10.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory10.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory10.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory16.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory16.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment22 = factory16.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern23 = backupEnvironment22.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress24 = backupEnvironment22.getSocketAddress();
    java.nio.file.Path path25 = backupEnvironment22.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory7.pbPath(path25);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory27.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory30.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory30.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory30.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = factory36.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory36.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment42 = factory36.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern43 = backupEnvironment42.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress44 = backupEnvironment42.getSocketAddress();
    java.nio.file.Path path45 = backupEnvironment42.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory46 = factory27.pbPath(path45);
    io.github.onograph.backup.FileMoverService fileMoverService47 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path25, path45);
    java.nio.file.Path path48 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path25);
    try {
      io.github.onograph.backup.Backup.BackupRespState backupRespState49 = backup3.bakBackupBackupRespState(
          "", path48);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.RuntimeException; message: *** Error:  3b02b00a-232a-454b-823b-025cc97a58b8");
    } catch (java.lang.RuntimeException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(backup3);
    org.junit.Assert.assertNotNull(backup5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(backupEnvironment22);
    org.junit.Assert.assertNotNull(databaseNamePattern23);
    org.junit.Assert.assertNotNull(socketAddress24);
    org.junit.Assert.assertNotNull(path25);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(backupEnvironment42);
    org.junit.Assert.assertNotNull(databaseNamePattern43);
    org.junit.Assert.assertNotNull(socketAddress44);
    org.junit.Assert.assertNotNull(path45);
    org.junit.Assert.assertNotNull(factory46);
    org.junit.Assert.assertNotNull(fileMoverService47);
    org.junit.Assert.assertNotNull(path48);
  }

  @Test
  public void test0073() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0073");
    }
    org.neo4j.configuration.Config config0 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction1 = null;
    org.neo4j.memory.MemoryTracker memoryTracker2 = null;
    org.neo4j.io.pagecache.PageCache pageCache3 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager4 = new io.github.onograph.backup.BackupRestorationManager(
        config0, fileSystemAbstraction1, memoryTracker2, pageCache3);
    org.neo4j.io.layout.DatabaseLayout databaseLayout5 = null;
    try {
      backupRestorationManager4.reorForDa(databaseLayout5);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test0074() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0074");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupMetadataRepository backupMetadataRepository1 = new io.github.onograph.backup.BackupMetadataRepository(
        fileSystemAbstraction0);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction2 = null;
    io.github.onograph.backup.FileMover fileMover3 = new io.github.onograph.backup.FileMover(
        fileSystemAbstraction2);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory4.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory10.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory10.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment16 = factory10.bulBackupEnvironment();
    boolean boolean17 = backupEnvironment16.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional18 = backupEnvironment16.geicmaOptional();
    java.nio.file.Path path19 = backupEnvironment16.getPbPath();
    java.nio.file.Path path20 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path19);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream21 = fileMover3._trrfrmnStream(
        path19);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory22.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory25.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory25.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory25.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory31.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory31.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment37 = factory31.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern38 = backupEnvironment37.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress39 = backupEnvironment37.getSocketAddress();
    java.nio.file.Path path40 = backupEnvironment37.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory22.pbPath(path40);
    io.github.onograph.backup.BackupEnvironment.Factory factory42 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory44 = factory42.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = factory45.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = factory45.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory51 = factory45.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory53 = factory51.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory56 = factory51.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment57 = factory51.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern58 = backupEnvironment57.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress59 = backupEnvironment57.getSocketAddress();
    java.nio.file.Path path60 = backupEnvironment57.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory61 = factory42.pbPath(path60);
    io.github.onograph.backup.FileMoverService fileMoverService62 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path40, path60);
    java.nio.file.Path path63 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path40);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream64 = fileMover3._trrfrmnStream(
        path63);
    java.lang.String[] strArray66 = new java.lang.String[]{"database.id"};
    java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
    boolean boolean68 = java.util.Collections.addAll(
        (java.util.Collection<java.lang.String>) strList67, strArray66);
    try {
      backupMetadataRepository1.wrtForPaLi(path63, (java.util.List<java.lang.String>) strList67);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(backupEnvironment16);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional18);
    org.junit.Assert.assertNotNull(path19);
    org.junit.Assert.assertNotNull(path20);
    org.junit.Assert.assertNotNull(fileMoverServiceStream21);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(backupEnvironment37);
    org.junit.Assert.assertNotNull(databaseNamePattern38);
    org.junit.Assert.assertNotNull(socketAddress39);
    org.junit.Assert.assertNotNull(path40);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(factory42);
    org.junit.Assert.assertNotNull(factory44);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory49);
    org.junit.Assert.assertNotNull(factory51);
    org.junit.Assert.assertNotNull(factory53);
    org.junit.Assert.assertNotNull(factory56);
    org.junit.Assert.assertNotNull(backupEnvironment57);
    org.junit.Assert.assertNotNull(databaseNamePattern58);
    org.junit.Assert.assertNotNull(socketAddress59);
    org.junit.Assert.assertNotNull(path60);
    org.junit.Assert.assertNotNull(factory61);
    org.junit.Assert.assertNotNull(fileMoverService62);
    org.junit.Assert.assertNotNull(path63);
    org.junit.Assert.assertNotNull(fileMoverServiceStream64);
    org.junit.Assert.assertNotNull(strArray66);
    org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
  }

  @Test
  public void test0075() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0075");
    }
    io.github.onograph.backup.CommandProviderGdbRestorerCommandImpl commandProviderGdbRestorerCommandImpl0 = new io.github.onograph.backup.CommandProviderGdbRestorerCommandImpl();
    int int1 = commandProviderGdbRestorerCommandImpl0.getPriority();
    org.neo4j.cli.Command.CommandType commandType2 = commandProviderGdbRestorerCommandImpl0.commandType();
    org.neo4j.cli.Command.CommandType commandType3 = commandProviderGdbRestorerCommandImpl0.commandType();
    org.neo4j.cli.Command.CommandType commandType4 = commandProviderGdbRestorerCommandImpl0.commandType();
    org.neo4j.cli.ExecutionContext executionContext5 = null;
    try {
      io.github.onograph.backup.GdbRestorerCommand gdbRestorerCommand6 = commandProviderGdbRestorerCommandImpl0.createCommand(
          executionContext5);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    org.junit.Assert.assertTrue(
        "'" + commandType2 + "' != '" + org.neo4j.cli.Command.CommandType.RESTORE_DB + "'",
        commandType2.equals(org.neo4j.cli.Command.CommandType.RESTORE_DB));
    org.junit.Assert.assertTrue(
        "'" + commandType3 + "' != '" + org.neo4j.cli.Command.CommandType.RESTORE_DB + "'",
        commandType3.equals(org.neo4j.cli.Command.CommandType.RESTORE_DB));
    org.junit.Assert.assertTrue(
        "'" + commandType4 + "' != '" + org.neo4j.cli.Command.CommandType.RESTORE_DB + "'",
        commandType4.equals(org.neo4j.cli.Command.CommandType.RESTORE_DB));
  }

  @Test
  public void test0076() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0076");
    }
    io.github.onograph.backup.SetupForBackupRestorationCommandProvider setupForBackupRestorationCommandProvider0 = new io.github.onograph.backup.SetupForBackupRestorationCommandProvider();
    org.neo4j.cli.ExecutionContext executionContext1 = null;
    try {
      io.github.onograph.backup.SetupForBackupRestorationCommand setupForBackupRestorationCommand2 = setupForBackupRestorationCommandProvider0.createCommand(
          executionContext1);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test0077() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0077");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory6.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isFtfb(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory13.isRp(false);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions16 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory13.miAuthMetaOptions(
        authMetaOptions16);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
  }

  @Test
  public void test0078() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0078");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.config(config5);
    org.neo4j.configuration.helpers.SocketAddress socketAddress7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress7);
    org.neo4j.configuration.helpers.SocketAddress socketAddress9 = factory4.getSocketAddress();
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory4.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory4.isCc(true);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNull(socketAddress9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
  }

  @Test
  public void test0079() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0079");
    }
    java.nio.file.Path path0 = null;
    java.nio.file.Path path1 = null;
    io.github.onograph.backup.FileMoverService fileMoverService2 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path0, path1);
    java.nio.file.Path path3 = fileMoverService2.filPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory4.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory10.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory10.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment16 = factory10.bulBackupEnvironment();
    boolean boolean17 = backupEnvironment16.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional18 = backupEnvironment16.geicmaOptional();
    java.nio.file.Path path19 = backupEnvironment16.getPbPath();
    java.nio.file.CopyOption[] copyOptionArray20 = new java.nio.file.CopyOption[]{};
    try {
      fileMoverService2.movForPaCo(path19, copyOptionArray20);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(fileMoverService2);
    org.junit.Assert.assertNull(path3);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(backupEnvironment16);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional18);
    org.junit.Assert.assertNotNull(path19);
    org.junit.Assert.assertNotNull(copyOptionArray20);
  }

  @Test
  public void test0080() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0080");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.GdbIdRepo gdbIdRepo1 = new io.github.onograph.backup.GdbIdRepo(
        fileSystemAbstraction0);
    org.neo4j.kernel.database.DatabaseId databaseId2 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory3 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config4 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory5 = factory3.config(config4);
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory5.isRp(true);
    org.neo4j.configuration.Config config8 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory7.config(config8);
    org.neo4j.configuration.helpers.SocketAddress socketAddress10 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory7.wihadsBackupEnvironmentFactory(
        socketAddress10);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory12.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory15.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory15.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory15.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory21.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory21.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment27 = factory21.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern28 = backupEnvironment27.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress29 = backupEnvironment27.getSocketAddress();
    java.nio.file.Path path30 = backupEnvironment27.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory12.pbPath(path30);
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory32.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = factory35.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory39 = factory35.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory35.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = factory41.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory46 = factory41.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment47 = factory41.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern48 = backupEnvironment47.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress49 = backupEnvironment47.getSocketAddress();
    java.nio.file.Path path50 = backupEnvironment47.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory51 = factory32.pbPath(path50);
    io.github.onograph.backup.FileMoverService fileMoverService52 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path30, path50);
    io.github.onograph.backup.BackupEnvironment.Factory factory53 = factory7.pbPath(path50);
    boolean boolean54 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path50);
    try {
      gdbIdRepo1.wrdaiForDaPa(databaseId2, path50);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory3);
    org.junit.Assert.assertNotNull(factory5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(backupEnvironment27);
    org.junit.Assert.assertNotNull(databaseNamePattern28);
    org.junit.Assert.assertNotNull(socketAddress29);
    org.junit.Assert.assertNotNull(path30);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(factory39);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory46);
    org.junit.Assert.assertNotNull(backupEnvironment47);
    org.junit.Assert.assertNotNull(databaseNamePattern48);
    org.junit.Assert.assertNotNull(socketAddress49);
    org.junit.Assert.assertNotNull(path50);
    org.junit.Assert.assertNotNull(factory51);
    org.junit.Assert.assertNotNull(fileMoverService52);
    org.junit.Assert.assertNotNull(factory53);
    org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
  }

  @Test
  public void test0081() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0081");
    }
    io.github.onograph.backup.BackupMetaDTO backupMetaDTO0 = null;
    java.lang.String[] strArray4 = new java.lang.String[]{"hi!", "database.id", "database.id"};
    java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
    boolean boolean6 = java.util.Collections.addAll(
        (java.util.Collection<java.lang.String>) strList5, strArray4);
    try {
      io.github.onograph.backup.BackupMetaService.wrtmedaForBaLi(backupMetaDTO0,
          (java.util.List<java.lang.String>) strList5);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(strArray4);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
  }

  @Test
  public void test0082() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0082");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory8.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment14 = factory8.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern15 = backupEnvironment14.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress16 = backupEnvironment14.getSocketAddress();
    java.nio.file.Path path17 = backupEnvironment14.getRpPath();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction18 = null;
    io.github.onograph.backup.FileMover fileMover19 = new io.github.onograph.backup.FileMover(
        fileSystemAbstraction18);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory20.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory20.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory20.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = factory26.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory26.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment32 = factory26.bulBackupEnvironment();
    boolean boolean33 = backupEnvironment32.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional34 = backupEnvironment32.geicmaOptional();
    java.nio.file.Path path35 = backupEnvironment32.getPbPath();
    java.nio.file.Path path36 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path35);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream37 = fileMover19._trrfrmnStream(
        path35);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory40 = factory38.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = factory41.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = factory41.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = factory41.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = factory47.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory52 = factory47.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment53 = factory47.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern54 = backupEnvironment53.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress55 = backupEnvironment53.getSocketAddress();
    java.nio.file.Path path56 = backupEnvironment53.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory57 = factory38.pbPath(path56);
    io.github.onograph.backup.BackupEnvironment.Factory factory58 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory60 = factory58.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory61 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory63 = factory61.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory65 = factory61.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory67 = factory61.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory69 = factory67.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory72 = factory67.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment73 = factory67.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern74 = backupEnvironment73.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress75 = backupEnvironment73.getSocketAddress();
    java.nio.file.Path path76 = backupEnvironment73.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory77 = factory58.pbPath(path76);
    io.github.onograph.backup.FileMoverService fileMoverService78 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path56, path76);
    java.nio.file.Path path79 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path56);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream80 = fileMover19._trrfrmnStream(
        path79);
    io.github.onograph.backup.FileMoverService fileMoverService81 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path17, path79);
    org.neo4j.logging.LogProvider logProvider82 = null;
    org.neo4j.io.pagecache.PageCache pageCache83 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer84 = null;
    try {
      io.github.onograph.backup.BackupMetaService backupMetaService85 = new io.github.onograph.backup.BackupMetaService(
          fileSystemAbstraction0, "database.id", path79, logProvider82, pageCache83,
          pageCacheTracer84);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(backupEnvironment14);
    org.junit.Assert.assertNotNull(databaseNamePattern15);
    org.junit.Assert.assertNotNull(socketAddress16);
    org.junit.Assert.assertNotNull(path17);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(backupEnvironment32);
    org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional34);
    org.junit.Assert.assertNotNull(path35);
    org.junit.Assert.assertNotNull(path36);
    org.junit.Assert.assertNotNull(fileMoverServiceStream37);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(factory40);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory49);
    org.junit.Assert.assertNotNull(factory52);
    org.junit.Assert.assertNotNull(backupEnvironment53);
    org.junit.Assert.assertNotNull(databaseNamePattern54);
    org.junit.Assert.assertNotNull(socketAddress55);
    org.junit.Assert.assertNotNull(path56);
    org.junit.Assert.assertNotNull(factory57);
    org.junit.Assert.assertNotNull(factory58);
    org.junit.Assert.assertNotNull(factory60);
    org.junit.Assert.assertNotNull(factory61);
    org.junit.Assert.assertNotNull(factory63);
    org.junit.Assert.assertNotNull(factory65);
    org.junit.Assert.assertNotNull(factory67);
    org.junit.Assert.assertNotNull(factory69);
    org.junit.Assert.assertNotNull(factory72);
    org.junit.Assert.assertNotNull(backupEnvironment73);
    org.junit.Assert.assertNotNull(databaseNamePattern74);
    org.junit.Assert.assertNotNull(socketAddress75);
    org.junit.Assert.assertNotNull(path76);
    org.junit.Assert.assertNotNull(factory77);
    org.junit.Assert.assertNotNull(fileMoverService78);
    org.junit.Assert.assertNotNull(path79);
    org.junit.Assert.assertNotNull(fileMoverServiceStream80);
    org.junit.Assert.assertNotNull(fileMoverService81);
  }

  @Test
  public void test0083() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0083");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup("");
    io.github.onograph.backup.Backup backup3 = backup1.isCc(true);
    io.github.onograph.backup.Backup backup5 = backup3.isCc(true);
    io.github.onograph.backup.Backup backup7 = backup5.isBftf(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config10 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.config(config10);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isRp(true);
    org.neo4j.configuration.Config config14 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory13.config(config14);
    org.neo4j.configuration.helpers.SocketAddress socketAddress16 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory13.wihadsBackupEnvironmentFactory(
        socketAddress16);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory18.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory21.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory21.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory21.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory27.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory27.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment33 = factory27.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern34 = backupEnvironment33.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress35 = backupEnvironment33.getSocketAddress();
    java.nio.file.Path path36 = backupEnvironment33.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = factory18.pbPath(path36);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory40 = factory38.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = factory41.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = factory41.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = factory41.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = factory47.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory52 = factory47.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment53 = factory47.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern54 = backupEnvironment53.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress55 = backupEnvironment53.getSocketAddress();
    java.nio.file.Path path56 = backupEnvironment53.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory57 = factory38.pbPath(path56);
    io.github.onograph.backup.FileMoverService fileMoverService58 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path36, path56);
    io.github.onograph.backup.BackupEnvironment.Factory factory59 = factory13.pbPath(path56);
    boolean boolean60 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path56);
    try {
      io.github.onograph.backup.Backup.BackupRespState backupRespState61 = backup7.bakBackupBackupRespState(
          "", path56);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.RuntimeException; message: *** Error:  3b02b00a-232a-454b-823b-025cc97a58b8");
    } catch (java.lang.RuntimeException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(backup3);
    org.junit.Assert.assertNotNull(backup5);
    org.junit.Assert.assertNotNull(backup7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(backupEnvironment33);
    org.junit.Assert.assertNotNull(databaseNamePattern34);
    org.junit.Assert.assertNotNull(socketAddress35);
    org.junit.Assert.assertNotNull(path36);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(factory40);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory49);
    org.junit.Assert.assertNotNull(factory52);
    org.junit.Assert.assertNotNull(backupEnvironment53);
    org.junit.Assert.assertNotNull(databaseNamePattern54);
    org.junit.Assert.assertNotNull(socketAddress55);
    org.junit.Assert.assertNotNull(path56);
    org.junit.Assert.assertNotNull(factory57);
    org.junit.Assert.assertNotNull(fileMoverService58);
    org.junit.Assert.assertNotNull(factory59);
    org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
  }

  @Test
  public void test0084() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0084");
    }
    io.github.onograph.backup.CommandProviderBackupImpl commandProviderBackupImpl0 = new io.github.onograph.backup.CommandProviderBackupImpl();
    int int1 = commandProviderBackupImpl0.getPriority();
    int int2 = commandProviderBackupImpl0.getPriority();
    org.neo4j.cli.Command.CommandType commandType3 = commandProviderBackupImpl0.commandType();
    org.neo4j.cli.Command.CommandType commandType4 = commandProviderBackupImpl0.commandType();
    org.neo4j.cli.ExecutionContext executionContext5 = null;
    try {
      io.github.onograph.backup.BackupCommand backupCommand6 = commandProviderBackupImpl0.createCommand(
          executionContext5);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    org.junit.Assert.assertTrue(
        "'" + commandType3 + "' != '" + org.neo4j.cli.Command.CommandType.ONLINE_BACKUP + "'",
        commandType3.equals(org.neo4j.cli.Command.CommandType.ONLINE_BACKUP));
    org.junit.Assert.assertTrue(
        "'" + commandType4 + "' != '" + org.neo4j.cli.Command.CommandType.ONLINE_BACKUP + "'",
        commandType4.equals(org.neo4j.cli.Command.CommandType.ONLINE_BACKUP));
  }

  @Test
  public void test0085() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0085");
    }
    io.github.onograph.backup.SetupForBackupRestorationCommandProvider setupForBackupRestorationCommandProvider0 = new io.github.onograph.backup.SetupForBackupRestorationCommandProvider();
    int int1 = setupForBackupRestorationCommandProvider0.getPriority();
    org.neo4j.cli.Command.CommandType commandType2 = setupForBackupRestorationCommandProvider0.commandType();
    org.neo4j.cli.ExecutionContext executionContext3 = null;
    try {
      io.github.onograph.backup.SetupForBackupRestorationCommand setupForBackupRestorationCommand4 = setupForBackupRestorationCommandProvider0.createCommand(
          executionContext3);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    org.junit.Assert.assertTrue(
        "'" + commandType2 + "' != '" + org.neo4j.cli.Command.CommandType.PREPARE_RESTORE + "'",
        commandType2.equals(org.neo4j.cli.Command.CommandType.PREPARE_RESTORE));
  }

  @Test
  public void test0086() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0086");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config10 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.config(config10);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isRp(true);
    org.neo4j.configuration.Config config14 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory13.config(config14);
    org.neo4j.configuration.helpers.SocketAddress socketAddress16 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory13.wihadsBackupEnvironmentFactory(
        socketAddress16);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config19 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory18.config(config19);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory20.isRp(true);
    org.neo4j.configuration.Config config23 = factory20.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory13.config(config23);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory8.config(config23);
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags26 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction27 = null;
    org.neo4j.logging.LogProvider logProvider28 = null;
    java.nio.file.Path path29 = null;
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory30 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl31 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config23, consistencyFlags26, fileSystemAbstraction27, logProvider28, path29,
        progressMonitorFactory30);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction32 = null;
    io.github.onograph.cluster.raft.module.cuprot.LifecycleCatchupManagerImpl lifecycleCatchupManagerImpl33 = null;
    org.neo4j.scheduler.JobScheduler jobScheduler34 = null;
    org.neo4j.logging.LogProvider logProvider35 = null;
    org.neo4j.monitoring.Monitors monitors36 = null;
    org.neo4j.io.pagecache.PageCache pageCache37 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer38 = null;
    org.neo4j.time.SystemNanoClock systemNanoClock39 = null;
    try {
      io.github.onograph.backup.RemoteBackupManager remoteBackupManager40 = new io.github.onograph.backup.RemoteBackupManager(
          config23, fileSystemAbstraction32, lifecycleCatchupManagerImpl33, jobScheduler34,
          logProvider35, monitors36, pageCache37, pageCacheTracer38, systemNanoClock39);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(config23);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory25);
  }

  @Test
  public void test0087() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0087");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup("");
    io.github.onograph.backup.Backup backup3 = backup1.isCc(true);
    io.github.onograph.backup.Backup backup5 = backup3.isCc(true);
    io.github.onograph.backup.Backup backup7 = backup5.isBftf(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory9.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory9.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory15.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory15.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment21 = factory15.bulBackupEnvironment();
    boolean boolean22 = backupEnvironment21.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional23 = backupEnvironment21.geicmaOptional();
    java.nio.file.Path path24 = backupEnvironment21.getPbPath();
    java.nio.file.Path path25 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path24);
    java.nio.file.Path path26 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path25);
    try {
      io.github.onograph.backup.Backup.BackupRespState backupRespState27 = backup7.bakBackupBackupRespState(
          "hi!", path26);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.RuntimeException; message: *** Error:  3b02b00a-232a-454b-823b-025cc97a58b8");
    } catch (java.lang.RuntimeException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(backup3);
    org.junit.Assert.assertNotNull(backup5);
    org.junit.Assert.assertNotNull(backup7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(backupEnvironment21);
    org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional23);
    org.junit.Assert.assertNotNull(path24);
    org.junit.Assert.assertNotNull(path25);
    org.junit.Assert.assertNotNull(path26);
  }

  @Test
  public void test0088() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0088");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory5 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory5.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory5.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory5.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory11.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment17 = factory11.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern18 = backupEnvironment17.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress19 = backupEnvironment17.getSocketAddress();
    java.nio.file.Path path20 = backupEnvironment17.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory2.pbPath(path20);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory22.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory25.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory25.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory25.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory31.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory31.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment37 = factory31.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern38 = backupEnvironment37.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress39 = backupEnvironment37.getSocketAddress();
    java.nio.file.Path path40 = backupEnvironment37.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory22.pbPath(path40);
    io.github.onograph.backup.FileMoverService fileMoverService42 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path20, path40);
    java.nio.file.Path path43 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path40);
    org.neo4j.logging.LogProvider logProvider44 = null;
    org.neo4j.io.pagecache.PageCache pageCache45 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer46 = null;
    try {
      io.github.onograph.backup.BackupMetaService backupMetaService47 = new io.github.onograph.backup.BackupMetaService(
          fileSystemAbstraction0, "hi!", path43, logProvider44, pageCache45, pageCacheTracer46);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(backupEnvironment17);
    org.junit.Assert.assertNotNull(databaseNamePattern18);
    org.junit.Assert.assertNotNull(socketAddress19);
    org.junit.Assert.assertNotNull(path20);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(backupEnvironment37);
    org.junit.Assert.assertNotNull(databaseNamePattern38);
    org.junit.Assert.assertNotNull(socketAddress39);
    org.junit.Assert.assertNotNull(path40);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(fileMoverService42);
    org.junit.Assert.assertNotNull(path43);
  }

  @Test
  public void test0089() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0089");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.GdbIdRepo gdbIdRepo1 = new io.github.onograph.backup.GdbIdRepo(
        fileSystemAbstraction0);
    org.neo4j.kernel.database.DatabaseId databaseId2 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory3 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory5 = factory3.isGcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.config(config7);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isRp(true);
    org.neo4j.configuration.Config config11 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory10.config(config11);
    org.neo4j.configuration.helpers.SocketAddress socketAddress13 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory10.wihadsBackupEnvironmentFactory(
        socketAddress13);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory15.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory18.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory18.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory18.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory24.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory24.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment30 = factory24.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern31 = backupEnvironment30.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress32 = backupEnvironment30.getSocketAddress();
    java.nio.file.Path path33 = backupEnvironment30.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory15.pbPath(path33);
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = factory35.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory40 = factory38.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory42 = factory38.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory44 = factory38.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory46 = factory44.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = factory44.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment50 = factory44.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern51 = backupEnvironment50.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress52 = backupEnvironment50.getSocketAddress();
    java.nio.file.Path path53 = backupEnvironment50.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory54 = factory35.pbPath(path53);
    io.github.onograph.backup.FileMoverService fileMoverService55 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path33, path53);
    io.github.onograph.backup.BackupEnvironment.Factory factory56 = factory10.pbPath(path53);
    boolean boolean57 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path53);
    io.github.onograph.backup.BackupEnvironment.Factory factory58 = factory3.prPath(path53);
    try {
      gdbIdRepo1.wrdaiForDaPa(databaseId2, path53);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory3);
    org.junit.Assert.assertNotNull(factory5);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(backupEnvironment30);
    org.junit.Assert.assertNotNull(databaseNamePattern31);
    org.junit.Assert.assertNotNull(socketAddress32);
    org.junit.Assert.assertNotNull(path33);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(factory40);
    org.junit.Assert.assertNotNull(factory42);
    org.junit.Assert.assertNotNull(factory44);
    org.junit.Assert.assertNotNull(factory46);
    org.junit.Assert.assertNotNull(factory49);
    org.junit.Assert.assertNotNull(backupEnvironment50);
    org.junit.Assert.assertNotNull(databaseNamePattern51);
    org.junit.Assert.assertNotNull(socketAddress52);
    org.junit.Assert.assertNotNull(path53);
    org.junit.Assert.assertNotNull(factory54);
    org.junit.Assert.assertNotNull(fileMoverService55);
    org.junit.Assert.assertNotNull(factory56);
    org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    org.junit.Assert.assertNotNull(factory58);
  }

  @Test
  public void test0090() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0090");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupIOService backupIOService1 = new io.github.onograph.backup.BackupIOService(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory8.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment14 = factory8.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern15 = backupEnvironment14.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress16 = backupEnvironment14.getSocketAddress();
    java.nio.file.Path path17 = backupEnvironment14.getRpPath();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction18 = null;
    io.github.onograph.backup.FileMover fileMover19 = new io.github.onograph.backup.FileMover(
        fileSystemAbstraction18);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory20.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory20.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory20.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = factory26.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory26.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment32 = factory26.bulBackupEnvironment();
    boolean boolean33 = backupEnvironment32.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional34 = backupEnvironment32.geicmaOptional();
    java.nio.file.Path path35 = backupEnvironment32.getPbPath();
    java.nio.file.Path path36 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path35);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream37 = fileMover19._trrfrmnStream(
        path35);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory40 = factory38.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = factory41.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = factory41.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = factory41.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = factory47.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory52 = factory47.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment53 = factory47.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern54 = backupEnvironment53.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress55 = backupEnvironment53.getSocketAddress();
    java.nio.file.Path path56 = backupEnvironment53.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory57 = factory38.pbPath(path56);
    io.github.onograph.backup.BackupEnvironment.Factory factory58 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory60 = factory58.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory61 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory63 = factory61.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory65 = factory61.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory67 = factory61.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory69 = factory67.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory72 = factory67.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment73 = factory67.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern74 = backupEnvironment73.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress75 = backupEnvironment73.getSocketAddress();
    java.nio.file.Path path76 = backupEnvironment73.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory77 = factory58.pbPath(path76);
    io.github.onograph.backup.FileMoverService fileMoverService78 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path56, path76);
    java.nio.file.Path path79 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path56);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream80 = fileMover19._trrfrmnStream(
        path79);
    io.github.onograph.backup.FileMoverService fileMoverService81 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path17, path79);
    try {
      boolean boolean82 = backupIOService1.isExsForPa(path79);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(backupEnvironment14);
    org.junit.Assert.assertNotNull(databaseNamePattern15);
    org.junit.Assert.assertNotNull(socketAddress16);
    org.junit.Assert.assertNotNull(path17);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(backupEnvironment32);
    org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional34);
    org.junit.Assert.assertNotNull(path35);
    org.junit.Assert.assertNotNull(path36);
    org.junit.Assert.assertNotNull(fileMoverServiceStream37);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(factory40);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory49);
    org.junit.Assert.assertNotNull(factory52);
    org.junit.Assert.assertNotNull(backupEnvironment53);
    org.junit.Assert.assertNotNull(databaseNamePattern54);
    org.junit.Assert.assertNotNull(socketAddress55);
    org.junit.Assert.assertNotNull(path56);
    org.junit.Assert.assertNotNull(factory57);
    org.junit.Assert.assertNotNull(factory58);
    org.junit.Assert.assertNotNull(factory60);
    org.junit.Assert.assertNotNull(factory61);
    org.junit.Assert.assertNotNull(factory63);
    org.junit.Assert.assertNotNull(factory65);
    org.junit.Assert.assertNotNull(factory67);
    org.junit.Assert.assertNotNull(factory69);
    org.junit.Assert.assertNotNull(factory72);
    org.junit.Assert.assertNotNull(backupEnvironment73);
    org.junit.Assert.assertNotNull(databaseNamePattern74);
    org.junit.Assert.assertNotNull(socketAddress75);
    org.junit.Assert.assertNotNull(path76);
    org.junit.Assert.assertNotNull(factory77);
    org.junit.Assert.assertNotNull(fileMoverService78);
    org.junit.Assert.assertNotNull(path79);
    org.junit.Assert.assertNotNull(fileMoverServiceStream80);
    org.junit.Assert.assertNotNull(fileMoverService81);
  }

  @Test
  public void test0091() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0091");
    }
    io.github.onograph.backup.BackupMetaDTO backupMetaDTO0 = null;
    java.lang.String[] strArray4 = new java.lang.String[]{"database.id", "hi!", "database.id"};
    java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
    boolean boolean6 = java.util.Collections.addAll(
        (java.util.Collection<java.lang.String>) strList5, strArray4);
    try {
      io.github.onograph.backup.BackupMetaService.wrtmedaForBaLi(backupMetaDTO0,
          (java.util.List<java.lang.String>) strList5);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(strArray4);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
  }

  @Test
  public void test0092() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0092");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupMetadataRepository backupMetadataRepository1 = new io.github.onograph.backup.BackupMetadataRepository(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory5 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory5.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory5.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory5.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory11.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment17 = factory11.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern18 = backupEnvironment17.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress19 = backupEnvironment17.getSocketAddress();
    java.nio.file.Path path20 = backupEnvironment17.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory2.pbPath(path20);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory22.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory25.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory25.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory25.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory31.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory31.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment37 = factory31.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern38 = backupEnvironment37.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress39 = backupEnvironment37.getSocketAddress();
    java.nio.file.Path path40 = backupEnvironment37.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory22.pbPath(path40);
    io.github.onograph.backup.FileMoverService fileMoverService42 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path20, path40);
    java.lang.String[] strArray44 = new java.lang.String[]{"hi!"};
    java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
    boolean boolean46 = java.util.Collections.addAll(
        (java.util.Collection<java.lang.String>) strList45, strArray44);
    try {
      backupMetadataRepository1.wrtForPaLi(path40, (java.util.List<java.lang.String>) strList45);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(backupEnvironment17);
    org.junit.Assert.assertNotNull(databaseNamePattern18);
    org.junit.Assert.assertNotNull(socketAddress19);
    org.junit.Assert.assertNotNull(path20);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(backupEnvironment37);
    org.junit.Assert.assertNotNull(databaseNamePattern38);
    org.junit.Assert.assertNotNull(socketAddress39);
    org.junit.Assert.assertNotNull(path40);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(fileMoverService42);
    org.junit.Assert.assertNotNull(strArray44);
    org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
  }

  @Test
  public void test0093() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0093");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    java.nio.file.Path path5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.prPath(path5);
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern7 = factory6.gedtenprDatabaseNamePattern();
    org.neo4j.configuration.Config config8 = factory6.gecfConfig();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction9 = null;
    org.neo4j.logging.LogProvider logProvider10 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer11 = null;
    org.neo4j.time.SystemNanoClock systemNanoClock12 = null;
    try {
      io.github.onograph.backup.DefaultBackupServiceHandler defaultBackupServiceHandler13 = io.github.onograph.backup.DefaultBackupServiceHandler.strliclDefaultBackupServiceHandler(
          config8, fileSystemAbstraction9, logProvider10, pageCacheTracer11, systemNanoClock12);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(databaseNamePattern7);
    org.junit.Assert.assertNotNull(config8);
  }

  @Test
  public void test0094() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0094");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupIOService backupIOService1 = new io.github.onograph.backup.BackupIOService(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory8.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment14 = factory8.bulBackupEnvironment();
    boolean boolean15 = backupEnvironment14.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional16 = backupEnvironment14.geicmaOptional();
    java.nio.file.Path path17 = backupEnvironment14.getPbPath();
    java.nio.file.Path path18 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path17);
    try {
      backupIOService1.deedForPa(path17);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(backupEnvironment14);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional16);
    org.junit.Assert.assertNotNull(path17);
    org.junit.Assert.assertNotNull(path18);
  }

  @Test
  public void test0095() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0095");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup("");
    io.github.onograph.backup.BackupEnvironment.Factory factory3 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory5 = factory3.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory3.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory3.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory9.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment15 = factory9.bulBackupEnvironment();
    boolean boolean16 = backupEnvironment15.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional17 = backupEnvironment15.geicmaOptional();
    java.nio.file.Path path18 = backupEnvironment15.getPbPath();
    java.nio.file.Path path19 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path18);
    java.nio.file.Path path20 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path19);
    try {
      io.github.onograph.backup.Backup.BackupRespState backupRespState21 = backup1.bakBackupBackupRespState(
          "", path19);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.RuntimeException; message: *** Error:  3b02b00a-232a-454b-823b-025cc97a58b8");
    } catch (java.lang.RuntimeException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(factory3);
    org.junit.Assert.assertNotNull(factory5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(backupEnvironment15);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional17);
    org.junit.Assert.assertNotNull(path18);
    org.junit.Assert.assertNotNull(path19);
    org.junit.Assert.assertNotNull(path20);
  }

  @Test
  public void test0096() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0096");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.miAuthMetaOptions(
        authMetaOptions3);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isGcc(
        (java.lang.Boolean) false);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.miAuthMetaOptions(
        authMetaOptions7);
    java.lang.Class<?> wildcardClass9 = factory6.getClass();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(wildcardClass9);
  }

  @Test
  public void test0097() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0097");
    }
    io.github.onograph.backup.SetupForBackupRestorationCommandProvider setupForBackupRestorationCommandProvider0 = new io.github.onograph.backup.SetupForBackupRestorationCommandProvider();
    int int1 = setupForBackupRestorationCommandProvider0.getPriority();
    int int2 = setupForBackupRestorationCommandProvider0.getPriority();
    int int3 = setupForBackupRestorationCommandProvider0.getPriority();
    org.neo4j.cli.ExecutionContext executionContext4 = null;
    try {
      io.github.onograph.backup.SetupForBackupRestorationCommand setupForBackupRestorationCommand5 = setupForBackupRestorationCommandProvider0.createCommand(
          executionContext4);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
  }

  @Test
  public void test0098() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0098");
    }
    io.github.onograph.backup.BackupIOService backupIOService0 = null;
    org.neo4j.io.layout.DatabaseLayout databaseLayout1 = null;
    io.github.onograph.cluster.raft.module.cuprot.scmeta.StoreResources storeResources2 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction3 = null;
    io.github.onograph.backup.GdbIdRepo gdbIdRepo4 = new io.github.onograph.backup.GdbIdRepo(
        fileSystemAbstraction3);
    org.neo4j.logging.LogProvider logProvider5 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer6 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction7 = null;
    io.github.onograph.backup.BackupMetadataRepository backupMetadataRepository8 = new io.github.onograph.backup.BackupMetadataRepository(
        fileSystemAbstraction7);
    try {
      io.github.onograph.backup.BackupMetaDTO backupMetaDTO9 = new io.github.onograph.backup.BackupMetaDTO(
          backupIOService0, databaseLayout1, storeResources2, gdbIdRepo4, logProvider5,
          pageCacheTracer6, backupMetadataRepository8);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test0099() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0099");
    }
    io.github.onograph.backup.CommandProviderBackupImpl commandProviderBackupImpl0 = new io.github.onograph.backup.CommandProviderBackupImpl();
    org.neo4j.cli.Command.CommandType commandType1 = commandProviderBackupImpl0.commandType();
    org.neo4j.cli.Command.CommandType commandType2 = commandProviderBackupImpl0.commandType();
    org.neo4j.cli.Command.CommandType commandType3 = commandProviderBackupImpl0.commandType();
    int int4 = commandProviderBackupImpl0.getPriority();
    org.neo4j.cli.ExecutionContext executionContext5 = null;
    try {
      io.github.onograph.backup.BackupCommand backupCommand6 = commandProviderBackupImpl0.createCommand(
          executionContext5);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue(
        "'" + commandType1 + "' != '" + org.neo4j.cli.Command.CommandType.ONLINE_BACKUP + "'",
        commandType1.equals(org.neo4j.cli.Command.CommandType.ONLINE_BACKUP));
    org.junit.Assert.assertTrue(
        "'" + commandType2 + "' != '" + org.neo4j.cli.Command.CommandType.ONLINE_BACKUP + "'",
        commandType2.equals(org.neo4j.cli.Command.CommandType.ONLINE_BACKUP));
    org.junit.Assert.assertTrue(
        "'" + commandType3 + "' != '" + org.neo4j.cli.Command.CommandType.ONLINE_BACKUP + "'",
        commandType3.equals(org.neo4j.cli.Command.CommandType.ONLINE_BACKUP));
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
  }

  @Test
  public void test0100() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0100");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup(
        "database.id");
    io.github.onograph.backup.Backup backup3 = backup1.isBftf(true);
    java.io.OutputStream outputStream4 = null;
    try {
      io.github.onograph.backup.Backup backup5 = backup1.outputStream(outputStream4);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: outputStream");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(backup3);
  }

  @Test
  public void test0101() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0101");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction2 = null;
    io.github.onograph.backup.FileMover fileMover3 = new io.github.onograph.backup.FileMover(
        fileSystemAbstraction2);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory4.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory10.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory10.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment16 = factory10.bulBackupEnvironment();
    boolean boolean17 = backupEnvironment16.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional18 = backupEnvironment16.geicmaOptional();
    java.nio.file.Path path19 = backupEnvironment16.getPbPath();
    java.nio.file.Path path20 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path19);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream21 = fileMover3._trrfrmnStream(
        path19);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory22.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory25.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory25.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory25.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory31.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory31.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment37 = factory31.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern38 = backupEnvironment37.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress39 = backupEnvironment37.getSocketAddress();
    java.nio.file.Path path40 = backupEnvironment37.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory22.pbPath(path40);
    io.github.onograph.backup.BackupEnvironment.Factory factory42 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory44 = factory42.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = factory45.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = factory45.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory51 = factory45.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory53 = factory51.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory56 = factory51.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment57 = factory51.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern58 = backupEnvironment57.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress59 = backupEnvironment57.getSocketAddress();
    java.nio.file.Path path60 = backupEnvironment57.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory61 = factory42.pbPath(path60);
    io.github.onograph.backup.FileMoverService fileMoverService62 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path40, path60);
    java.nio.file.Path path63 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path40);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream64 = fileMover3._trrfrmnStream(
        path63);
    org.neo4j.logging.LogProvider logProvider65 = null;
    org.neo4j.io.pagecache.PageCache pageCache66 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer67 = null;
    try {
      io.github.onograph.backup.BackupMetaService backupMetaService68 = new io.github.onograph.backup.BackupMetaService(
          fileSystemAbstraction0, "", path63, logProvider65, pageCache66, pageCacheTracer67);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(backupEnvironment16);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional18);
    org.junit.Assert.assertNotNull(path19);
    org.junit.Assert.assertNotNull(path20);
    org.junit.Assert.assertNotNull(fileMoverServiceStream21);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(backupEnvironment37);
    org.junit.Assert.assertNotNull(databaseNamePattern38);
    org.junit.Assert.assertNotNull(socketAddress39);
    org.junit.Assert.assertNotNull(path40);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(factory42);
    org.junit.Assert.assertNotNull(factory44);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory49);
    org.junit.Assert.assertNotNull(factory51);
    org.junit.Assert.assertNotNull(factory53);
    org.junit.Assert.assertNotNull(factory56);
    org.junit.Assert.assertNotNull(backupEnvironment57);
    org.junit.Assert.assertNotNull(databaseNamePattern58);
    org.junit.Assert.assertNotNull(socketAddress59);
    org.junit.Assert.assertNotNull(path60);
    org.junit.Assert.assertNotNull(factory61);
    org.junit.Assert.assertNotNull(fileMoverService62);
    org.junit.Assert.assertNotNull(path63);
    org.junit.Assert.assertNotNull(fileMoverServiceStream64);
  }

  @Test
  public void test0102() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0102");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.logging.LogProvider logProvider5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator2.itraLogProvider(
        logProvider5);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction7 = null;
    io.github.onograph.backup.BackupRunner.Generator generator8 = generator2.fFileSystemAbstraction(
        fileSystemAbstraction7);
    org.neo4j.logging.LogProvider logProvider9 = null;
    io.github.onograph.backup.BackupRunner.Generator generator10 = generator8.itraLogProvider(
        logProvider9);
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory11 = null;
    io.github.onograph.backup.BackupRunner.Generator generator12 = generator8.progressMonitorFactory(
        progressMonitorFactory11);
    io.github.onograph.backup.BackupRunner backupRunner13 = generator8.bulBackupRunner();
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory14.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory14.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory14.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory20.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory20.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment26 = factory20.bulBackupEnvironment();
    boolean boolean27 = backupEnvironment26.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional28 = backupEnvironment26.geicmaOptional();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern29 = backupEnvironment26.getDatabaseNamePattern();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional30 = backupEnvironment26.geicmaOptional();
    org.neo4j.memory.MemoryTracker memoryTracker31 = backupEnvironment26.getMemoryTracker();
    try {
      backupRunner13.excebcpForBa(backupEnvironment26);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(generator8);
    org.junit.Assert.assertNotNull(generator10);
    org.junit.Assert.assertNotNull(generator12);
    org.junit.Assert.assertNotNull(backupRunner13);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(backupEnvironment26);
    org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional28);
    org.junit.Assert.assertNotNull(databaseNamePattern29);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional30);
    org.junit.Assert.assertNotNull(memoryTracker31);
  }

  @Test
  public void test0103() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0103");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    java.nio.file.Path path3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.prPath(path3);
    io.github.onograph.backup.BackupEnvironment.Factory factory5 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config6 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory5.config(config6);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory7.isRp(true);
    org.neo4j.configuration.Config config10 = factory7.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory0.config(config10);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction12 = null;
    org.neo4j.configuration.Config config13 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction14 = null;
    java.nio.file.Path[] pathArray15 = new java.nio.file.Path[]{};
    java.util.LinkedHashSet<java.nio.file.Path> pathSet16 = new java.util.LinkedHashSet<java.nio.file.Path>();
    boolean boolean17 = java.util.Collections.addAll(
        (java.util.Collection<java.nio.file.Path>) pathSet16, pathArray15);
    io.github.onograph.backup.BackupRestoreMeta backupRestoreMeta18 = new io.github.onograph.backup.BackupRestoreMeta(
        config13, fileSystemAbstraction14, (java.util.Set<java.nio.file.Path>) pathSet16);
    io.github.onograph.backup.BackupRestoreMeta backupRestoreMeta19 = new io.github.onograph.backup.BackupRestoreMeta(
        config10, fileSystemAbstraction12, (java.util.Set<java.nio.file.Path>) pathSet16);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction20 = null;
    java.nio.file.Path[] pathArray21 = new java.nio.file.Path[]{};
    java.util.LinkedHashSet<java.nio.file.Path> pathSet22 = new java.util.LinkedHashSet<java.nio.file.Path>();
    boolean boolean23 = java.util.Collections.addAll(
        (java.util.Collection<java.nio.file.Path>) pathSet22, pathArray21);
    io.github.onograph.backup.BackupRestoreMeta backupRestoreMeta24 = new io.github.onograph.backup.BackupRestoreMeta(
        config10, fileSystemAbstraction20, (java.util.Set<java.nio.file.Path>) pathSet22);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction25 = null;
    org.neo4j.logging.LogProvider logProvider26 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer27 = null;
    org.neo4j.time.SystemNanoClock systemNanoClock28 = null;
    try {
      io.github.onograph.backup.DefaultBackupServiceHandler defaultBackupServiceHandler29 = io.github.onograph.backup.DefaultBackupServiceHandler.strliclDefaultBackupServiceHandler(
          config10, fileSystemAbstraction25, logProvider26, pageCacheTracer27, systemNanoClock28);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(config10);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(pathArray15);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    org.junit.Assert.assertNotNull(pathArray21);
    org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
  }

  @Test
  public void test0104() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0104");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.config(config5);
    org.neo4j.configuration.helpers.SocketAddress socketAddress7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress7);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isGcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory8.isFtfb(true);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
  }

  @Test
  public void test0105() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0105");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = factory2.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory2.isCc(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    java.nio.file.Path path11 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory8.prPath(path11);
    java.nio.file.Path path13 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory12.prPath(path13);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory15.isCc(false);
    java.nio.file.Path path18 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory15.prPath(path18);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config21 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory20.config(config21);
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory22.isRp(true);
    org.neo4j.configuration.Config config25 = factory22.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory15.config(config25);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory14.config(config25);
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = factory7.config(config25);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction29 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory30.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory30.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory30.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = factory36.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory36.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment42 = factory36.bulBackupEnvironment();
    org.neo4j.memory.MemoryTracker memoryTracker43 = backupEnvironment42.getMemoryTracker();
    org.neo4j.io.pagecache.PageCache pageCache44 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager45 = new io.github.onograph.backup.BackupRestorationManager(
        config25, fileSystemAbstraction29, memoryTracker43, pageCache44);
    org.neo4j.io.layout.DatabaseLayout databaseLayout46 = null;
    try {
      backupRestorationManager45.reorForDa(databaseLayout46);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(config5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(config25);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(backupEnvironment42);
    org.junit.Assert.assertNotNull(memoryTracker43);
  }

  @Test
  public void test0106() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0106");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupIOService backupIOService1 = new io.github.onograph.backup.BackupIOService(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory8.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment14 = factory8.bulBackupEnvironment();
    boolean boolean15 = backupEnvironment14.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional16 = backupEnvironment14.geicmaOptional();
    java.nio.file.Path path17 = backupEnvironment14.getPbPath();
    java.nio.file.Path path18 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path17);
    try {
      boolean boolean19 = backupIOService1.isExsForPa(path17);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(backupEnvironment14);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional16);
    org.junit.Assert.assertNotNull(path17);
    org.junit.Assert.assertNotNull(path18);
  }

  @Test
  public void test0107() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0107");
    }
    io.github.onograph.backup.BackupMetaDTO backupMetaDTO0 = null;
    java.lang.String[] strArray3 = new java.lang.String[]{"hi!", "hi!"};
    java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
    boolean boolean5 = java.util.Collections.addAll(
        (java.util.Collection<java.lang.String>) strList4, strArray3);
    try {
      io.github.onograph.backup.BackupMetaService.wrtmedaForBaLi(backupMetaDTO0,
          (java.util.List<java.lang.String>) strList4);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(strArray3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
  }

  @Test
  public void test0108() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0108");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup("");
    io.github.onograph.backup.Backup backup3 = backup1.isCc(true);
    io.github.onograph.backup.Backup backup5 = backup3.isCc(true);
    io.github.onograph.backup.Backup backup7 = backup5.isCc(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory9.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory9.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory15.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory15.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment21 = factory15.bulBackupEnvironment();
    boolean boolean22 = backupEnvironment21.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional23 = backupEnvironment21.geicmaOptional();
    java.nio.file.Path path24 = backupEnvironment21.getPbPath();
    java.nio.file.Path path25 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path24);
    try {
      io.github.onograph.backup.Backup.BackupRespState backupRespState26 = backup7.bakBackupBackupRespState(
          "database.id", path24);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.RuntimeException; message: *** Error:  3b02b00a-232a-454b-823b-025cc97a58b8");
    } catch (java.lang.RuntimeException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(backup3);
    org.junit.Assert.assertNotNull(backup5);
    org.junit.Assert.assertNotNull(backup7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(backupEnvironment21);
    org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional23);
    org.junit.Assert.assertNotNull(path24);
    org.junit.Assert.assertNotNull(path25);
  }

  @Test
  public void test0109() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0109");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup("");
    io.github.onograph.backup.Backup backup3 = backup1.isCc(true);
    io.github.onograph.backup.Backup backup5 = backup3.isCc(true);
    io.github.onograph.backup.Backup backup7 = backup5.isBftf(false);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction9 = null;
    io.github.onograph.backup.FileMover fileMover10 = new io.github.onograph.backup.FileMover(
        fileSystemAbstraction9);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory11.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory11.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory17.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory17.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment23 = factory17.bulBackupEnvironment();
    boolean boolean24 = backupEnvironment23.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional25 = backupEnvironment23.geicmaOptional();
    java.nio.file.Path path26 = backupEnvironment23.getPbPath();
    java.nio.file.Path path27 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path26);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream28 = fileMover10._trrfrmnStream(
        path26);
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory29.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory29.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = factory29.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = factory35.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory40 = factory35.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment41 = factory35.bulBackupEnvironment();
    boolean boolean42 = backupEnvironment41.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional43 = backupEnvironment41.geicmaOptional();
    java.nio.file.Path path44 = backupEnvironment41.getPbPath();
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream45 = fileMover10._trrfrmnStream(
        path44);
    try {
      io.github.onograph.backup.Backup.BackupRespState backupRespState46 = backup7.bakBackupBackupRespState(
          "", path44);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.RuntimeException; message: *** Error:  3b02b00a-232a-454b-823b-025cc97a58b8");
    } catch (java.lang.RuntimeException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(backup3);
    org.junit.Assert.assertNotNull(backup5);
    org.junit.Assert.assertNotNull(backup7);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(backupEnvironment23);
    org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional25);
    org.junit.Assert.assertNotNull(path26);
    org.junit.Assert.assertNotNull(path27);
    org.junit.Assert.assertNotNull(fileMoverServiceStream28);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(factory40);
    org.junit.Assert.assertNotNull(backupEnvironment41);
    org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional43);
    org.junit.Assert.assertNotNull(path44);
    org.junit.Assert.assertNotNull(fileMoverServiceStream45);
  }

  @Test
  public void test0110() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0110");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory8.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment14 = factory8.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern15 = backupEnvironment14.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress16 = backupEnvironment14.getSocketAddress();
    java.nio.file.Path path17 = backupEnvironment14.getRpPath();
    boolean boolean18 = backupEnvironment14.getIsBftf();
    java.nio.file.Path path19 = backupEnvironment14.getRpPath();
    org.neo4j.logging.LogProvider logProvider20 = null;
    org.neo4j.io.pagecache.PageCache pageCache21 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer22 = null;
    try {
      io.github.onograph.backup.BackupMetaService backupMetaService23 = new io.github.onograph.backup.BackupMetaService(
          fileSystemAbstraction0, "database.id", path19, logProvider20, pageCache21,
          pageCacheTracer22);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(backupEnvironment14);
    org.junit.Assert.assertNotNull(databaseNamePattern15);
    org.junit.Assert.assertNotNull(socketAddress16);
    org.junit.Assert.assertNotNull(path17);
    org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    org.junit.Assert.assertNotNull(path19);
  }

  @Test
  public void test0111() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0111");
    }
    io.github.onograph.backup.CommandProviderGdbRestorerCommandImpl commandProviderGdbRestorerCommandImpl0 = new io.github.onograph.backup.CommandProviderGdbRestorerCommandImpl();
    int int1 = commandProviderGdbRestorerCommandImpl0.getPriority();
    org.neo4j.cli.Command.CommandType commandType2 = commandProviderGdbRestorerCommandImpl0.commandType();
    org.neo4j.cli.Command.CommandType commandType3 = commandProviderGdbRestorerCommandImpl0.commandType();
    org.neo4j.cli.Command.CommandType commandType4 = commandProviderGdbRestorerCommandImpl0.commandType();
    org.neo4j.cli.Command.CommandType commandType5 = commandProviderGdbRestorerCommandImpl0.commandType();
    org.neo4j.cli.Command.CommandType commandType6 = commandProviderGdbRestorerCommandImpl0.commandType();
    java.lang.Class<?> wildcardClass7 = commandProviderGdbRestorerCommandImpl0.getClass();
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    org.junit.Assert.assertTrue(
        "'" + commandType2 + "' != '" + org.neo4j.cli.Command.CommandType.RESTORE_DB + "'",
        commandType2.equals(org.neo4j.cli.Command.CommandType.RESTORE_DB));
    org.junit.Assert.assertTrue(
        "'" + commandType3 + "' != '" + org.neo4j.cli.Command.CommandType.RESTORE_DB + "'",
        commandType3.equals(org.neo4j.cli.Command.CommandType.RESTORE_DB));
    org.junit.Assert.assertTrue(
        "'" + commandType4 + "' != '" + org.neo4j.cli.Command.CommandType.RESTORE_DB + "'",
        commandType4.equals(org.neo4j.cli.Command.CommandType.RESTORE_DB));
    org.junit.Assert.assertTrue(
        "'" + commandType5 + "' != '" + org.neo4j.cli.Command.CommandType.RESTORE_DB + "'",
        commandType5.equals(org.neo4j.cli.Command.CommandType.RESTORE_DB));
    org.junit.Assert.assertTrue(
        "'" + commandType6 + "' != '" + org.neo4j.cli.Command.CommandType.RESTORE_DB + "'",
        commandType6.equals(org.neo4j.cli.Command.CommandType.RESTORE_DB));
    org.junit.Assert.assertNotNull(wildcardClass7);
  }

  @Test
  public void test0112() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0112");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.logging.LogProvider logProvider5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator2.itraLogProvider(
        logProvider5);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction7 = null;
    io.github.onograph.backup.BackupRunner.Generator generator8 = generator2.fFileSystemAbstraction(
        fileSystemAbstraction7);
    org.neo4j.logging.LogProvider logProvider9 = null;
    io.github.onograph.backup.BackupRunner.Generator generator10 = generator8.itraLogProvider(
        logProvider9);
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory11 = null;
    io.github.onograph.backup.BackupRunner.Generator generator12 = generator8.progressMonitorFactory(
        progressMonitorFactory11);
    io.github.onograph.backup.BackupRunner backupRunner13 = generator8.bulBackupRunner();
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory14.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory14.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory14.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory20.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory20.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment26 = factory20.bulBackupEnvironment();
    boolean boolean27 = backupEnvironment26.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional28 = backupEnvironment26.geicmaOptional();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional29 = backupEnvironment26.geicmaOptional();
    try {
      backupRunner13.excebcpForBa(backupEnvironment26);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(generator8);
    org.junit.Assert.assertNotNull(generator10);
    org.junit.Assert.assertNotNull(generator12);
    org.junit.Assert.assertNotNull(backupRunner13);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(backupEnvironment26);
    org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional28);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional29);
  }

  @Test
  public void test0113() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0113");
    }
    io.github.onograph.backup.CommandProviderGdbRestorerCommandImpl commandProviderGdbRestorerCommandImpl0 = new io.github.onograph.backup.CommandProviderGdbRestorerCommandImpl();
    int int1 = commandProviderGdbRestorerCommandImpl0.getPriority();
    int int2 = commandProviderGdbRestorerCommandImpl0.getPriority();
    org.neo4j.cli.ExecutionContext executionContext3 = null;
    try {
      io.github.onograph.backup.GdbRestorerCommand gdbRestorerCommand4 = commandProviderGdbRestorerCommandImpl0.createCommand(
          executionContext3);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
  }

  @Test
  public void test0114() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0114");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.miAuthMetaOptions(
        authMetaOptions3);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isGcc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.isCc(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory4.isCc(true);
    try {
      io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory10.databaseNamePattern(
          "hi!");
      org.junit.Assert.fail(
          "Expected exception of type java.lang.IllegalArgumentException; message: Database name 'hi!' contains illegal characters. Use simple ascii characters, numbers, dots, question marks, asterisk and dashes.");
    } catch (java.lang.IllegalArgumentException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
  }

  @Test
  public void test0115() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0115");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.logging.LogProvider logProvider5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator2.itraLogProvider(
        logProvider5);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction7 = null;
    io.github.onograph.backup.BackupRunner.Generator generator8 = generator2.fFileSystemAbstraction(
        fileSystemAbstraction7);
    org.neo4j.logging.LogProvider logProvider9 = null;
    io.github.onograph.backup.BackupRunner.Generator generator10 = generator8.itraLogProvider(
        logProvider9);
    io.github.onograph.backup.BackupRunner backupRunner11 = generator10.bulBackupRunner();
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory12.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory12.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory12.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory18.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory18.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment24 = factory18.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern25 = backupEnvironment24.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress26 = backupEnvironment24.getSocketAddress();
    java.nio.file.Path path27 = backupEnvironment24.getRpPath();
    boolean boolean28 = backupEnvironment24.getIsBftf();
    try {
      backupRunner11.excebcpForBa(backupEnvironment24);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(generator8);
    org.junit.Assert.assertNotNull(generator10);
    org.junit.Assert.assertNotNull(backupRunner11);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(backupEnvironment24);
    org.junit.Assert.assertNotNull(databaseNamePattern25);
    org.junit.Assert.assertNotNull(socketAddress26);
    org.junit.Assert.assertNotNull(path27);
    org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
  }

  @Test
  public void test0116() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0116");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    java.io.PrintStream printStream3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory4.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory10.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory10.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment16 = factory10.bulBackupEnvironment();
    boolean boolean17 = backupEnvironment16.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional18 = backupEnvironment16.geicmaOptional();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional19 = backupEnvironment16.geicmaOptional();
    java.nio.file.Path path20 = backupEnvironment16.getPbPath();
    java.nio.file.Path path21 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path20);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory22.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory22.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = factory22.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = factory28.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory28.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment34 = factory28.bulBackupEnvironment();
    boolean boolean35 = backupEnvironment34.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional36 = backupEnvironment34.geicmaOptional();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional37 = backupEnvironment34.geicmaOptional();
    java.nio.file.Path path38 = backupEnvironment34.getPbPath();
    java.nio.file.Path path39 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path38);
    org.neo4j.io.layout.DatabaseLayout databaseLayout40 = null;
    try {
      io.github.onograph.backup.GdbRestorer gdbRestorer41 = new io.github.onograph.backup.GdbRestorer(
          fileSystemAbstraction0, false, false, printStream3, path20, path39, databaseLayout40);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(backupEnvironment16);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional18);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional19);
    org.junit.Assert.assertNotNull(path20);
    org.junit.Assert.assertNotNull(path21);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(backupEnvironment34);
    org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional36);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional37);
    org.junit.Assert.assertNotNull(path38);
    org.junit.Assert.assertNotNull(path39);
  }

  @Test
  public void test0117() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0117");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    java.nio.file.Path path3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.prPath(path3);
    java.nio.file.Path path5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.prPath(path5);
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory7.isCc(false);
    java.nio.file.Path path10 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory7.prPath(path10);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config13 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory12.config(config13);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory14.isRp(true);
    org.neo4j.configuration.Config config17 = factory14.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory7.config(config17);
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory6.config(config17);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction20 = null;
    org.neo4j.logging.LogProvider logProvider21 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer22 = null;
    org.neo4j.time.SystemNanoClock systemNanoClock23 = null;
    try {
      io.github.onograph.backup.DefaultBackupServiceHandler defaultBackupServiceHandler24 = io.github.onograph.backup.DefaultBackupServiceHandler.strliclDefaultBackupServiceHandler(
          config17, fileSystemAbstraction20, logProvider21, pageCacheTracer22, systemNanoClock23);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(config17);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory19);
  }

  @Test
  public void test0118() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0118");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    java.io.PrintStream printStream3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory7.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory7.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory7.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory13.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory13.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment19 = factory13.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern20 = backupEnvironment19.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress21 = backupEnvironment19.getSocketAddress();
    java.nio.file.Path path22 = backupEnvironment19.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory4.pbPath(path22);
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory24.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory27.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory27.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory27.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = factory33.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = factory33.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment39 = factory33.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern40 = backupEnvironment39.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress41 = backupEnvironment39.getSocketAddress();
    java.nio.file.Path path42 = backupEnvironment39.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = factory24.pbPath(path42);
    io.github.onograph.backup.FileMoverService fileMoverService44 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path22, path42);
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = factory45.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = factory45.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory51 = factory45.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory53 = factory51.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory56 = factory51.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment57 = factory51.bulBackupEnvironment();
    boolean boolean58 = backupEnvironment57.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional59 = backupEnvironment57.geicmaOptional();
    java.nio.file.Path path60 = backupEnvironment57.getPbPath();
    java.nio.file.Path path61 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path60);
    java.nio.file.Path path62 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path61);
    boolean boolean63 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path62);
    java.nio.file.Path path64 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path62);
    io.github.onograph.backup.BackupEnvironment.Factory factory65 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory67 = factory65.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory69 = factory65.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory71 = factory65.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory73 = factory71.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory76 = factory71.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment77 = factory71.bulBackupEnvironment();
    boolean boolean78 = backupEnvironment77.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional79 = backupEnvironment77.geicmaOptional();
    java.nio.file.Path path80 = backupEnvironment77.getPbPath();
    java.nio.file.Path path81 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path80);
    java.nio.file.Path path82 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path81);
    io.github.onograph.backup.FileMoverService fileMoverService83 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path62, path81);
    org.neo4j.io.layout.DatabaseLayout databaseLayout84 = null;
    try {
      io.github.onograph.backup.GdbRestorer gdbRestorer85 = new io.github.onograph.backup.GdbRestorer(
          fileSystemAbstraction0, true, true, printStream3, path22, path81, databaseLayout84);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(backupEnvironment19);
    org.junit.Assert.assertNotNull(databaseNamePattern20);
    org.junit.Assert.assertNotNull(socketAddress21);
    org.junit.Assert.assertNotNull(path22);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(backupEnvironment39);
    org.junit.Assert.assertNotNull(databaseNamePattern40);
    org.junit.Assert.assertNotNull(socketAddress41);
    org.junit.Assert.assertNotNull(path42);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(fileMoverService44);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory49);
    org.junit.Assert.assertNotNull(factory51);
    org.junit.Assert.assertNotNull(factory53);
    org.junit.Assert.assertNotNull(factory56);
    org.junit.Assert.assertNotNull(backupEnvironment57);
    org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional59);
    org.junit.Assert.assertNotNull(path60);
    org.junit.Assert.assertNotNull(path61);
    org.junit.Assert.assertNotNull(path62);
    org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    org.junit.Assert.assertNotNull(path64);
    org.junit.Assert.assertNotNull(factory65);
    org.junit.Assert.assertNotNull(factory67);
    org.junit.Assert.assertNotNull(factory69);
    org.junit.Assert.assertNotNull(factory71);
    org.junit.Assert.assertNotNull(factory73);
    org.junit.Assert.assertNotNull(factory76);
    org.junit.Assert.assertNotNull(backupEnvironment77);
    org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional79);
    org.junit.Assert.assertNotNull(path80);
    org.junit.Assert.assertNotNull(path81);
    org.junit.Assert.assertNotNull(path82);
    org.junit.Assert.assertNotNull(fileMoverService83);
  }

  @Test
  public void test0119() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0119");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isGcc(
        (java.lang.Boolean) false);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
  }

  @Test
  public void test0120() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0120");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.config(config5);
    org.neo4j.configuration.helpers.SocketAddress socketAddress7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress7);
    org.neo4j.configuration.helpers.SocketAddress socketAddress9 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress9);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory4.wihadsBackupEnvironmentFactory(
        (int) (short) -1, "hi!");
    org.neo4j.configuration.Config config14 = factory13.gecfConfig();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction15 = null;
    org.neo4j.logging.LogProvider logProvider16 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer17 = null;
    org.neo4j.time.SystemNanoClock systemNanoClock18 = null;
    try {
      io.github.onograph.backup.DefaultBackupServiceHandler defaultBackupServiceHandler19 = io.github.onograph.backup.DefaultBackupServiceHandler.strliclDefaultBackupServiceHandler(
          config14, fileSystemAbstraction15, logProvider16, pageCacheTracer17, systemNanoClock18);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(config14);
  }

  @Test
  public void test0121() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0121");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup("");
    io.github.onograph.backup.Backup backup3 = backup1.isCc(true);
    io.github.onograph.backup.Backup backup5 = backup3.isCc(true);
    io.github.onograph.backup.Backup backup7 = backup3.isBftf(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory9.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory9.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory15.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory15.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment21 = factory15.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern22 = backupEnvironment21.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress23 = backupEnvironment21.getSocketAddress();
    java.nio.file.Path path24 = backupEnvironment21.getRpPath();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction25 = null;
    io.github.onograph.backup.FileMover fileMover26 = new io.github.onograph.backup.FileMover(
        fileSystemAbstraction25);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory27.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory27.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory27.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = factory33.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = factory33.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment39 = factory33.bulBackupEnvironment();
    boolean boolean40 = backupEnvironment39.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional41 = backupEnvironment39.geicmaOptional();
    java.nio.file.Path path42 = backupEnvironment39.getPbPath();
    java.nio.file.Path path43 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path42);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream44 = fileMover26._trrfrmnStream(
        path42);
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = factory45.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory48 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory50 = factory48.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory52 = factory48.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory54 = factory48.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory56 = factory54.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory59 = factory54.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment60 = factory54.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern61 = backupEnvironment60.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress62 = backupEnvironment60.getSocketAddress();
    java.nio.file.Path path63 = backupEnvironment60.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory64 = factory45.pbPath(path63);
    io.github.onograph.backup.BackupEnvironment.Factory factory65 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory67 = factory65.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory68 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory70 = factory68.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory72 = factory68.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory74 = factory68.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory76 = factory74.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory79 = factory74.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment80 = factory74.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern81 = backupEnvironment80.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress82 = backupEnvironment80.getSocketAddress();
    java.nio.file.Path path83 = backupEnvironment80.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory84 = factory65.pbPath(path83);
    io.github.onograph.backup.FileMoverService fileMoverService85 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path63, path83);
    java.nio.file.Path path86 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path63);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream87 = fileMover26._trrfrmnStream(
        path86);
    io.github.onograph.backup.FileMoverService fileMoverService88 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path24, path86);
    try {
      io.github.onograph.backup.Backup.BackupRespState backupRespState89 = backup7.bakBackupBackupRespState(
          "database.id", path24);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.RuntimeException; message: *** Error:  3b02b00a-232a-454b-823b-025cc97a58b8");
    } catch (java.lang.RuntimeException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(backup3);
    org.junit.Assert.assertNotNull(backup5);
    org.junit.Assert.assertNotNull(backup7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(backupEnvironment21);
    org.junit.Assert.assertNotNull(databaseNamePattern22);
    org.junit.Assert.assertNotNull(socketAddress23);
    org.junit.Assert.assertNotNull(path24);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(backupEnvironment39);
    org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional41);
    org.junit.Assert.assertNotNull(path42);
    org.junit.Assert.assertNotNull(path43);
    org.junit.Assert.assertNotNull(fileMoverServiceStream44);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory48);
    org.junit.Assert.assertNotNull(factory50);
    org.junit.Assert.assertNotNull(factory52);
    org.junit.Assert.assertNotNull(factory54);
    org.junit.Assert.assertNotNull(factory56);
    org.junit.Assert.assertNotNull(factory59);
    org.junit.Assert.assertNotNull(backupEnvironment60);
    org.junit.Assert.assertNotNull(databaseNamePattern61);
    org.junit.Assert.assertNotNull(socketAddress62);
    org.junit.Assert.assertNotNull(path63);
    org.junit.Assert.assertNotNull(factory64);
    org.junit.Assert.assertNotNull(factory65);
    org.junit.Assert.assertNotNull(factory67);
    org.junit.Assert.assertNotNull(factory68);
    org.junit.Assert.assertNotNull(factory70);
    org.junit.Assert.assertNotNull(factory72);
    org.junit.Assert.assertNotNull(factory74);
    org.junit.Assert.assertNotNull(factory76);
    org.junit.Assert.assertNotNull(factory79);
    org.junit.Assert.assertNotNull(backupEnvironment80);
    org.junit.Assert.assertNotNull(databaseNamePattern81);
    org.junit.Assert.assertNotNull(socketAddress82);
    org.junit.Assert.assertNotNull(path83);
    org.junit.Assert.assertNotNull(factory84);
    org.junit.Assert.assertNotNull(fileMoverService85);
    org.junit.Assert.assertNotNull(path86);
    org.junit.Assert.assertNotNull(fileMoverServiceStream87);
    org.junit.Assert.assertNotNull(fileMoverService88);
  }

  @Test
  public void test0122() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0122");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    java.nio.file.Path path3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.prPath(path3);
    org.neo4j.configuration.helpers.SocketAddress socketAddress5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress5);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isRp(false);
    try {
      io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.databaseNamePattern(
          "");
      org.junit.Assert.fail(
          "Expected exception of type java.lang.IllegalArgumentException; message: The provided database name is empty.");
    } catch (java.lang.IllegalArgumentException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
  }

  @Test
  public void test0123() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0123");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    org.neo4j.logging.LogProvider logProvider1 = null;
    org.neo4j.logging.Log log2 = null;
    io.github.onograph.backup.RemoteBackupService remoteBackupService3 = new io.github.onograph.backup.RemoteBackupService(
        fileSystemAbstraction0, logProvider1, log2);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isCc(false);
    java.nio.file.Path path7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.prPath(path7);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config10 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.config(config10);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isRp(true);
    org.neo4j.configuration.Config config14 = factory11.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory4.config(config14);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction16 = null;
    org.neo4j.configuration.Config config17 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction18 = null;
    java.nio.file.Path[] pathArray19 = new java.nio.file.Path[]{};
    java.util.LinkedHashSet<java.nio.file.Path> pathSet20 = new java.util.LinkedHashSet<java.nio.file.Path>();
    boolean boolean21 = java.util.Collections.addAll(
        (java.util.Collection<java.nio.file.Path>) pathSet20, pathArray19);
    io.github.onograph.backup.BackupRestoreMeta backupRestoreMeta22 = new io.github.onograph.backup.BackupRestoreMeta(
        config17, fileSystemAbstraction18, (java.util.Set<java.nio.file.Path>) pathSet20);
    io.github.onograph.backup.BackupRestoreMeta backupRestoreMeta23 = new io.github.onograph.backup.BackupRestoreMeta(
        config14, fileSystemAbstraction16, (java.util.Set<java.nio.file.Path>) pathSet20);
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags24 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction25 = null;
    org.neo4j.logging.LogProvider logProvider26 = null;
    java.nio.file.Path path27 = null;
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory28 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl29 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config14, consistencyFlags24, fileSystemAbstraction25, logProvider26, path27,
        progressMonitorFactory28);
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory30.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory30.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory30.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = factory36.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory36.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment42 = factory36.bulBackupEnvironment();
    boolean boolean43 = backupEnvironment42.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional44 = backupEnvironment42.geicmaOptional();
    java.nio.file.Path path45 = backupEnvironment42.getPbPath();
    io.github.onograph.backup.DefaultBackupServiceHandler defaultBackupServiceHandler47 = null;
    io.github.onograph.backup.GdbStoreTransferWatcherRebImpl gdbStoreTransferWatcherRebImpl48 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer49 = null;
    io.github.onograph.backup.RemoteBackupManager remoteBackupManager50 = null;
    org.neo4j.configuration.Config config51 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction52 = null;
    org.neo4j.memory.MemoryTracker memoryTracker53 = null;
    org.neo4j.io.pagecache.PageCache pageCache54 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager55 = new io.github.onograph.backup.BackupRestorationManager(
        config51, fileSystemAbstraction52, memoryTracker53, pageCache54);
    try {
      remoteBackupService3.bakForBaPaBaDeBaReStGd(
          (io.github.onograph.backup.BackupVerificationService) backupVerificationServiceImpl29,
          backupEnvironment42, "", defaultBackupServiceHandler47, gdbStoreTransferWatcherRebImpl48,
          pageCacheTracer49, remoteBackupManager50, backupRestorationManager55);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(config14);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(pathArray19);
    org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(backupEnvironment42);
    org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional44);
    org.junit.Assert.assertNotNull(path45);
  }

  @Test
  public void test0124() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0124");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.logging.LogProvider logProvider5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator2.itraLogProvider(
        logProvider5);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction7 = null;
    io.github.onograph.backup.BackupRunner.Generator generator8 = generator2.fFileSystemAbstraction(
        fileSystemAbstraction7);
    org.neo4j.logging.LogProvider logProvider9 = null;
    io.github.onograph.backup.BackupRunner.Generator generator10 = generator8.itraLogProvider(
        logProvider9);
    io.github.onograph.backup.BackupRunner backupRunner11 = generator10.bulBackupRunner();
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory12.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory12.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory12.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory18.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory18.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment24 = factory18.bulBackupEnvironment();
    boolean boolean25 = backupEnvironment24.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional26 = backupEnvironment24.geicmaOptional();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional27 = backupEnvironment24.geicmaOptional();
    try {
      backupRunner11.excebcpForBa(backupEnvironment24);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(generator8);
    org.junit.Assert.assertNotNull(generator10);
    org.junit.Assert.assertNotNull(backupRunner11);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(backupEnvironment24);
    org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional26);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional27);
  }

  @Test
  public void test0125() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0125");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.GdbIdRepo gdbIdRepo1 = new io.github.onograph.backup.GdbIdRepo(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.config(config3);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isRp(true);
    org.neo4j.configuration.Config config7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.config(config7);
    org.neo4j.configuration.helpers.SocketAddress socketAddress9 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory6.wihadsBackupEnvironmentFactory(
        socketAddress9);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory14.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory14.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory14.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory20.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory20.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment26 = factory20.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern27 = backupEnvironment26.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress28 = backupEnvironment26.getSocketAddress();
    java.nio.file.Path path29 = backupEnvironment26.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = factory11.pbPath(path29);
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory31.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory34.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = factory34.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory40 = factory34.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory42 = factory40.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = factory40.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment46 = factory40.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern47 = backupEnvironment46.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress48 = backupEnvironment46.getSocketAddress();
    java.nio.file.Path path49 = backupEnvironment46.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory50 = factory31.pbPath(path49);
    io.github.onograph.backup.FileMoverService fileMoverService51 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path29, path49);
    io.github.onograph.backup.BackupEnvironment.Factory factory52 = factory6.pbPath(path49);
    try {
      java.util.Optional<org.neo4j.kernel.database.DatabaseId> databaseIdOptional53 = gdbIdRepo1.reddtaiOptional(
          path49);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(backupEnvironment26);
    org.junit.Assert.assertNotNull(databaseNamePattern27);
    org.junit.Assert.assertNotNull(socketAddress28);
    org.junit.Assert.assertNotNull(path29);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(factory40);
    org.junit.Assert.assertNotNull(factory42);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(backupEnvironment46);
    org.junit.Assert.assertNotNull(databaseNamePattern47);
    org.junit.Assert.assertNotNull(socketAddress48);
    org.junit.Assert.assertNotNull(path49);
    org.junit.Assert.assertNotNull(factory50);
    org.junit.Assert.assertNotNull(fileMoverService51);
    org.junit.Assert.assertNotNull(factory52);
  }

  @Test
  public void test0126() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0126");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup("");
    io.github.onograph.backup.Backup backup3 = backup1.isCc(true);
    io.github.onograph.backup.Backup backup5 = backup3.isCc(true);
    io.github.onograph.backup.Backup backup7 = backup5.isBftf(false);
    java.io.OutputStream outputStream8 = null;
    try {
      io.github.onograph.backup.Backup backup9 = backup7.outputStream(outputStream8);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: outputStream");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(backup3);
    org.junit.Assert.assertNotNull(backup5);
    org.junit.Assert.assertNotNull(backup7);
  }

  @Test
  public void test0127() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0127");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.miAuthMetaOptions(
        authMetaOptions3);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isGcc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isIcc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory6.isIcc(
        (java.lang.Boolean) false);
    java.lang.Class<?> wildcardClass11 = factory10.getClass();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(wildcardClass11);
  }

  @Test
  public void test0128() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0128");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    java.nio.file.Path path3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.prPath(path3);
    io.github.onograph.backup.BackupEnvironment.Factory factory5 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config6 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory5.config(config6);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory7.isRp(true);
    org.neo4j.configuration.Config config10 = factory7.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory0.config(config10);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction12 = null;
    org.neo4j.configuration.Config config13 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction14 = null;
    java.nio.file.Path[] pathArray15 = new java.nio.file.Path[]{};
    java.util.LinkedHashSet<java.nio.file.Path> pathSet16 = new java.util.LinkedHashSet<java.nio.file.Path>();
    boolean boolean17 = java.util.Collections.addAll(
        (java.util.Collection<java.nio.file.Path>) pathSet16, pathArray15);
    io.github.onograph.backup.BackupRestoreMeta backupRestoreMeta18 = new io.github.onograph.backup.BackupRestoreMeta(
        config13, fileSystemAbstraction14, (java.util.Set<java.nio.file.Path>) pathSet16);
    io.github.onograph.backup.BackupRestoreMeta backupRestoreMeta19 = new io.github.onograph.backup.BackupRestoreMeta(
        config10, fileSystemAbstraction12, (java.util.Set<java.nio.file.Path>) pathSet16);
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags20 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction21 = null;
    org.neo4j.logging.LogProvider logProvider22 = null;
    java.nio.file.Path path23 = null;
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory24 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl25 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config10, consistencyFlags20, fileSystemAbstraction21, logProvider22, path23,
        progressMonitorFactory24);
    org.neo4j.io.layout.DatabaseLayout databaseLayout26 = null;
    try {
      backupVerificationServiceImpl25.chcsyForDa(databaseLayout26);
      org.junit.Assert.fail(
          "Expected exception of type io.github.onograph.backup.BackupVerificationErrorException; message: *** Error:  2915f124-983c-439d-b1ae-a9c5ad06642b");
    } catch (io.github.onograph.backup.BackupVerificationErrorException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(config10);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(pathArray15);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
  }

  @Test
  public void test0129() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0129");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = factory2.gecfConfig();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.memory.MemoryTracker memoryTracker7 = null;
    org.neo4j.io.pagecache.PageCache pageCache8 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager9 = new io.github.onograph.backup.BackupRestorationManager(
        config5, fileSystemAbstraction6, memoryTracker7, pageCache8);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction10 = null;
    io.github.onograph.cluster.raft.module.cuprot.LifecycleCatchupManagerImpl lifecycleCatchupManagerImpl11 = null;
    org.neo4j.scheduler.JobScheduler jobScheduler12 = null;
    org.neo4j.logging.LogProvider logProvider13 = null;
    org.neo4j.monitoring.Monitors monitors14 = null;
    org.neo4j.io.pagecache.PageCache pageCache15 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer16 = null;
    org.neo4j.time.SystemNanoClock systemNanoClock17 = null;
    try {
      io.github.onograph.backup.RemoteBackupManager remoteBackupManager18 = new io.github.onograph.backup.RemoteBackupManager(
          config5, fileSystemAbstraction10, lifecycleCatchupManagerImpl11, jobScheduler12,
          logProvider13, monitors14, pageCache15, pageCacheTracer16, systemNanoClock17);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(config5);
  }

  @Test
  public void test0130() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0130");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupIOService backupIOService1 = new io.github.onograph.backup.BackupIOService(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory8.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment14 = factory8.bulBackupEnvironment();
    boolean boolean15 = backupEnvironment14.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional16 = backupEnvironment14.geicmaOptional();
    java.nio.file.Path path17 = backupEnvironment14.getPbPath();
    java.nio.file.Path path18 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path17);
    java.nio.file.Path path19 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path18);
    boolean boolean20 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path19);
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory21.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory21.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory21.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory27.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory27.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment33 = factory27.bulBackupEnvironment();
    boolean boolean34 = backupEnvironment33.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional35 = backupEnvironment33.geicmaOptional();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional36 = backupEnvironment33.geicmaOptional();
    java.nio.file.Path path37 = backupEnvironment33.getPbPath();
    java.nio.file.Path path38 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path37);
    io.github.onograph.backup.FileMoverService fileMoverService39 = io.github.onograph.backup.FileMoverService.movifeseFileMoverService(
        path19, path38);
    try {
      boolean boolean40 = backupIOService1.isExsForPa(path19);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(backupEnvironment14);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional16);
    org.junit.Assert.assertNotNull(path17);
    org.junit.Assert.assertNotNull(path18);
    org.junit.Assert.assertNotNull(path19);
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(backupEnvironment33);
    org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional35);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional36);
    org.junit.Assert.assertNotNull(path37);
    org.junit.Assert.assertNotNull(path38);
    org.junit.Assert.assertNotNull(fileMoverService39);
  }

  @Test
  public void test0131() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0131");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.time.SystemNanoClock systemNanoClock5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator2.systemNanoClock(
        systemNanoClock5);
    io.github.onograph.backup.BackupRunner backupRunner7 = generator6.bulBackupRunner();
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(backupRunner7);
  }

  @Test
  public void test0132() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0132");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupIOService backupIOService1 = new io.github.onograph.backup.BackupIOService(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory8.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment14 = factory8.bulBackupEnvironment();
    boolean boolean15 = backupEnvironment14.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional16 = backupEnvironment14.geicmaOptional();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional17 = backupEnvironment14.geicmaOptional();
    java.nio.file.Path path18 = backupEnvironment14.getPbPath();
    java.nio.file.Path path19 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path18);
    try {
      backupIOService1.deedForPa(path19);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(backupEnvironment14);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional16);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional17);
    org.junit.Assert.assertNotNull(path18);
    org.junit.Assert.assertNotNull(path19);
  }

  @Test
  public void test0133() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0133");
    }
    org.neo4j.configuration.Config config0 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction1 = null;
    java.nio.file.Path[] pathArray2 = new java.nio.file.Path[]{};
    java.util.LinkedHashSet<java.nio.file.Path> pathSet3 = new java.util.LinkedHashSet<java.nio.file.Path>();
    boolean boolean4 = java.util.Collections.addAll(
        (java.util.Collection<java.nio.file.Path>) pathSet3, pathArray2);
    io.github.onograph.backup.BackupRestoreMeta backupRestoreMeta5 = new io.github.onograph.backup.BackupRestoreMeta(
        config0, fileSystemAbstraction1, (java.util.Set<java.nio.file.Path>) pathSet3);
    java.lang.Class<?> wildcardClass6 = pathSet3.getClass();
    org.junit.Assert.assertNotNull(pathArray2);
    org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    org.junit.Assert.assertNotNull(wildcardClass6);
  }

  @Test
  public void test0134() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0134");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup(
        "database.id");
    io.github.onograph.backup.Backup backup3 = backup1.isBftf(true);
    java.io.OutputStream outputStream4 = null;
    try {
      io.github.onograph.backup.Backup backup5 = backup3.outputStream(outputStream4);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: outputStream");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(backup3);
  }

  @Test
  public void test0135() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0135");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupIOService backupIOService1 = new io.github.onograph.backup.BackupIOService(
        fileSystemAbstraction0);
    org.neo4j.io.layout.DatabaseLayout databaseLayout2 = null;
    io.github.onograph.cluster.raft.module.cuprot.scmeta.StoreResources storeResources3 = null;
    io.github.onograph.backup.GdbIdRepo gdbIdRepo4 = null;
    org.neo4j.logging.LogProvider logProvider5 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer6 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction7 = null;
    io.github.onograph.backup.BackupMetadataRepository backupMetadataRepository8 = new io.github.onograph.backup.BackupMetadataRepository(
        fileSystemAbstraction7);
    try {
      io.github.onograph.backup.BackupMetaDTO backupMetaDTO9 = new io.github.onograph.backup.BackupMetaDTO(
          backupIOService1, databaseLayout2, storeResources3, gdbIdRepo4, logProvider5,
          pageCacheTracer6, backupMetadataRepository8);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test0136() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0136");
    }
    io.github.onograph.backup.SetupForBackupRestorationCommandProvider setupForBackupRestorationCommandProvider0 = new io.github.onograph.backup.SetupForBackupRestorationCommandProvider();
    int int1 = setupForBackupRestorationCommandProvider0.getPriority();
    int int2 = setupForBackupRestorationCommandProvider0.getPriority();
    int int3 = setupForBackupRestorationCommandProvider0.getPriority();
    org.neo4j.cli.Command.CommandType commandType4 = setupForBackupRestorationCommandProvider0.commandType();
    org.neo4j.cli.ExecutionContext executionContext5 = null;
    try {
      io.github.onograph.backup.SetupForBackupRestorationCommand setupForBackupRestorationCommand6 = setupForBackupRestorationCommandProvider0.createCommand(
          executionContext5);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    org.junit.Assert.assertTrue(
        "'" + commandType4 + "' != '" + org.neo4j.cli.Command.CommandType.PREPARE_RESTORE + "'",
        commandType4.equals(org.neo4j.cli.Command.CommandType.PREPARE_RESTORE));
  }

  @Test
  public void test0137() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0137");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.GdbIdRepo gdbIdRepo1 = new io.github.onograph.backup.GdbIdRepo(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isSicc(
        (java.lang.Boolean) true);
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern9 = factory8.gedtenprDatabaseNamePattern();
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory8.isRp(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory12.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory12.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory12.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory18.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory18.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment24 = factory18.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern25 = backupEnvironment24.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress26 = backupEnvironment24.getSocketAddress();
    java.nio.file.Path path27 = backupEnvironment24.getRpPath();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction28 = null;
    io.github.onograph.backup.FileMover fileMover29 = new io.github.onograph.backup.FileMover(
        fileSystemAbstraction28);
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory30.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory30.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory30.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = factory36.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory36.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment42 = factory36.bulBackupEnvironment();
    boolean boolean43 = backupEnvironment42.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional44 = backupEnvironment42.geicmaOptional();
    java.nio.file.Path path45 = backupEnvironment42.getPbPath();
    java.nio.file.Path path46 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path45);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream47 = fileMover29._trrfrmnStream(
        path45);
    io.github.onograph.backup.BackupEnvironment.Factory factory48 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory50 = factory48.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory51 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory53 = factory51.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory55 = factory51.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory57 = factory51.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory59 = factory57.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory62 = factory57.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment63 = factory57.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern64 = backupEnvironment63.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress65 = backupEnvironment63.getSocketAddress();
    java.nio.file.Path path66 = backupEnvironment63.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory67 = factory48.pbPath(path66);
    io.github.onograph.backup.BackupEnvironment.Factory factory68 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory70 = factory68.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory71 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory73 = factory71.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory75 = factory71.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory77 = factory71.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory79 = factory77.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory82 = factory77.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment83 = factory77.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern84 = backupEnvironment83.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress85 = backupEnvironment83.getSocketAddress();
    java.nio.file.Path path86 = backupEnvironment83.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory87 = factory68.pbPath(path86);
    io.github.onograph.backup.FileMoverService fileMoverService88 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path66, path86);
    java.nio.file.Path path89 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path66);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream90 = fileMover29._trrfrmnStream(
        path89);
    io.github.onograph.backup.FileMoverService fileMoverService91 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path27, path89);
    io.github.onograph.backup.BackupEnvironment.Factory factory92 = factory11.prPath(path27);
    try {
      java.util.Optional<org.neo4j.kernel.database.DatabaseId> databaseIdOptional93 = gdbIdRepo1.reddtaiOptional(
          path27);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(databaseNamePattern9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(backupEnvironment24);
    org.junit.Assert.assertNotNull(databaseNamePattern25);
    org.junit.Assert.assertNotNull(socketAddress26);
    org.junit.Assert.assertNotNull(path27);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(backupEnvironment42);
    org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional44);
    org.junit.Assert.assertNotNull(path45);
    org.junit.Assert.assertNotNull(path46);
    org.junit.Assert.assertNotNull(fileMoverServiceStream47);
    org.junit.Assert.assertNotNull(factory48);
    org.junit.Assert.assertNotNull(factory50);
    org.junit.Assert.assertNotNull(factory51);
    org.junit.Assert.assertNotNull(factory53);
    org.junit.Assert.assertNotNull(factory55);
    org.junit.Assert.assertNotNull(factory57);
    org.junit.Assert.assertNotNull(factory59);
    org.junit.Assert.assertNotNull(factory62);
    org.junit.Assert.assertNotNull(backupEnvironment63);
    org.junit.Assert.assertNotNull(databaseNamePattern64);
    org.junit.Assert.assertNotNull(socketAddress65);
    org.junit.Assert.assertNotNull(path66);
    org.junit.Assert.assertNotNull(factory67);
    org.junit.Assert.assertNotNull(factory68);
    org.junit.Assert.assertNotNull(factory70);
    org.junit.Assert.assertNotNull(factory71);
    org.junit.Assert.assertNotNull(factory73);
    org.junit.Assert.assertNotNull(factory75);
    org.junit.Assert.assertNotNull(factory77);
    org.junit.Assert.assertNotNull(factory79);
    org.junit.Assert.assertNotNull(factory82);
    org.junit.Assert.assertNotNull(backupEnvironment83);
    org.junit.Assert.assertNotNull(databaseNamePattern84);
    org.junit.Assert.assertNotNull(socketAddress85);
    org.junit.Assert.assertNotNull(path86);
    org.junit.Assert.assertNotNull(factory87);
    org.junit.Assert.assertNotNull(fileMoverService88);
    org.junit.Assert.assertNotNull(path89);
    org.junit.Assert.assertNotNull(fileMoverServiceStream90);
    org.junit.Assert.assertNotNull(fileMoverService91);
    org.junit.Assert.assertNotNull(factory92);
  }

  @Test
  public void test0138() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0138");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config10 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.config(config10);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isRp(true);
    org.neo4j.configuration.Config config14 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory13.config(config14);
    org.neo4j.configuration.helpers.SocketAddress socketAddress16 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory13.wihadsBackupEnvironmentFactory(
        socketAddress16);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config19 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory18.config(config19);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory20.isRp(true);
    org.neo4j.configuration.Config config23 = factory20.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory13.config(config23);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory8.config(config23);
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags26 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction27 = null;
    org.neo4j.logging.LogProvider logProvider28 = null;
    java.nio.file.Path path29 = null;
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory30 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl31 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config23, consistencyFlags26, fileSystemAbstraction27, logProvider28, path29,
        progressMonitorFactory30);
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags32 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction33 = null;
    org.neo4j.logging.LogProvider logProvider34 = null;
    java.nio.file.Path path35 = null;
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory36 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl37 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config23, consistencyFlags32, fileSystemAbstraction33, logProvider34, path35,
        progressMonitorFactory36);
    org.neo4j.io.layout.DatabaseLayout databaseLayout38 = null;
    try {
      backupVerificationServiceImpl37.chcsyForDa(databaseLayout38);
      org.junit.Assert.fail(
          "Expected exception of type io.github.onograph.backup.BackupVerificationErrorException; message: *** Error:  2915f124-983c-439d-b1ae-a9c5ad06642b");
    } catch (io.github.onograph.backup.BackupVerificationErrorException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(config23);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory25);
  }

  @Test
  public void test0139() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0139");
    }
    io.github.onograph.backup.BackupMetaDTO backupMetaDTO0 = null;
    java.lang.String[] strArray3 = new java.lang.String[]{"", ""};
    java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
    boolean boolean5 = java.util.Collections.addAll(
        (java.util.Collection<java.lang.String>) strList4, strArray3);
    try {
      io.github.onograph.backup.BackupMetaService.wrtmedaForBaLi(backupMetaDTO0,
          (java.util.List<java.lang.String>) strList4);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(strArray3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
  }

  @Test
  public void test0140() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0140");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    org.neo4j.logging.LogProvider logProvider1 = null;
    org.neo4j.logging.Log log2 = null;
    io.github.onograph.backup.RemoteBackupService remoteBackupService3 = new io.github.onograph.backup.RemoteBackupService(
        fileSystemAbstraction0, logProvider1, log2);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isCc(false);
    java.nio.file.Path path7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.prPath(path7);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config10 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.config(config10);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isRp(true);
    org.neo4j.configuration.Config config14 = factory11.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory4.config(config14);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction16 = null;
    org.neo4j.configuration.Config config17 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction18 = null;
    java.nio.file.Path[] pathArray19 = new java.nio.file.Path[]{};
    java.util.LinkedHashSet<java.nio.file.Path> pathSet20 = new java.util.LinkedHashSet<java.nio.file.Path>();
    boolean boolean21 = java.util.Collections.addAll(
        (java.util.Collection<java.nio.file.Path>) pathSet20, pathArray19);
    io.github.onograph.backup.BackupRestoreMeta backupRestoreMeta22 = new io.github.onograph.backup.BackupRestoreMeta(
        config17, fileSystemAbstraction18, (java.util.Set<java.nio.file.Path>) pathSet20);
    io.github.onograph.backup.BackupRestoreMeta backupRestoreMeta23 = new io.github.onograph.backup.BackupRestoreMeta(
        config14, fileSystemAbstraction16, (java.util.Set<java.nio.file.Path>) pathSet20);
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags24 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction25 = null;
    org.neo4j.logging.LogProvider logProvider26 = null;
    java.nio.file.Path path27 = null;
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory28 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl29 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config14, consistencyFlags24, fileSystemAbstraction25, logProvider26, path27,
        progressMonitorFactory28);
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory30.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory30.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory30.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = factory36.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory36.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment42 = factory36.bulBackupEnvironment();
    org.neo4j.memory.MemoryTracker memoryTracker43 = backupEnvironment42.getMemoryTracker();
    io.github.onograph.backup.DefaultBackupServiceHandler defaultBackupServiceHandler45 = null;
    io.github.onograph.backup.GdbStoreTransferWatcherRebImpl gdbStoreTransferWatcherRebImpl46 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer47 = null;
    io.github.onograph.backup.RemoteBackupManager remoteBackupManager48 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config50 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory51 = factory49.config(config50);
    io.github.onograph.backup.BackupEnvironment.Factory factory53 = factory51.isRp(true);
    org.neo4j.configuration.Config config54 = factory51.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory56 = factory51.isCc(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory57 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory59 = factory57.isCc(false);
    java.nio.file.Path path60 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory61 = factory57.prPath(path60);
    java.nio.file.Path path62 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory63 = factory61.prPath(path62);
    io.github.onograph.backup.BackupEnvironment.Factory factory64 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory66 = factory64.isCc(false);
    java.nio.file.Path path67 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory68 = factory64.prPath(path67);
    io.github.onograph.backup.BackupEnvironment.Factory factory69 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config70 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory71 = factory69.config(config70);
    io.github.onograph.backup.BackupEnvironment.Factory factory73 = factory71.isRp(true);
    org.neo4j.configuration.Config config74 = factory71.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory75 = factory64.config(config74);
    io.github.onograph.backup.BackupEnvironment.Factory factory76 = factory63.config(config74);
    io.github.onograph.backup.BackupEnvironment.Factory factory77 = factory56.config(config74);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction78 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory79 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory81 = factory79.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory83 = factory79.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory85 = factory79.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory87 = factory85.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory90 = factory85.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment91 = factory85.bulBackupEnvironment();
    org.neo4j.memory.MemoryTracker memoryTracker92 = backupEnvironment91.getMemoryTracker();
    org.neo4j.io.pagecache.PageCache pageCache93 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager94 = new io.github.onograph.backup.BackupRestorationManager(
        config74, fileSystemAbstraction78, memoryTracker92, pageCache93);
    try {
      remoteBackupService3.bakForBaPaBaDeBaReStGd(
          (io.github.onograph.backup.BackupVerificationService) backupVerificationServiceImpl29,
          backupEnvironment42, "hi!", defaultBackupServiceHandler45,
          gdbStoreTransferWatcherRebImpl46, pageCacheTracer47, remoteBackupManager48,
          backupRestorationManager94);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(config14);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(pathArray19);
    org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(backupEnvironment42);
    org.junit.Assert.assertNotNull(memoryTracker43);
    org.junit.Assert.assertNotNull(factory49);
    org.junit.Assert.assertNotNull(factory51);
    org.junit.Assert.assertNotNull(factory53);
    org.junit.Assert.assertNotNull(config54);
    org.junit.Assert.assertNotNull(factory56);
    org.junit.Assert.assertNotNull(factory57);
    org.junit.Assert.assertNotNull(factory59);
    org.junit.Assert.assertNotNull(factory61);
    org.junit.Assert.assertNotNull(factory63);
    org.junit.Assert.assertNotNull(factory64);
    org.junit.Assert.assertNotNull(factory66);
    org.junit.Assert.assertNotNull(factory68);
    org.junit.Assert.assertNotNull(factory69);
    org.junit.Assert.assertNotNull(factory71);
    org.junit.Assert.assertNotNull(factory73);
    org.junit.Assert.assertNotNull(config74);
    org.junit.Assert.assertNotNull(factory75);
    org.junit.Assert.assertNotNull(factory76);
    org.junit.Assert.assertNotNull(factory77);
    org.junit.Assert.assertNotNull(factory79);
    org.junit.Assert.assertNotNull(factory81);
    org.junit.Assert.assertNotNull(factory83);
    org.junit.Assert.assertNotNull(factory85);
    org.junit.Assert.assertNotNull(factory87);
    org.junit.Assert.assertNotNull(factory90);
    org.junit.Assert.assertNotNull(backupEnvironment91);
    org.junit.Assert.assertNotNull(memoryTracker92);
  }

  @Test
  public void test0141() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0141");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.GdbIdRepo gdbIdRepo1 = new io.github.onograph.backup.GdbIdRepo(
        fileSystemAbstraction0);
    org.neo4j.kernel.database.DatabaseId databaseId2 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory3 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory5 = factory3.isCc(false);
    java.nio.file.Path path6 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory3.prPath(path6);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config9 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.config(config9);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory10.isRp(true);
    org.neo4j.configuration.Config config13 = factory10.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory3.config(config13);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory3.shouldPrep(false);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction17 = null;
    io.github.onograph.backup.FileMover fileMover18 = new io.github.onograph.backup.FileMover(
        fileSystemAbstraction17);
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory19.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory19.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory19.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory25.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = factory25.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment31 = factory25.bulBackupEnvironment();
    boolean boolean32 = backupEnvironment31.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional33 = backupEnvironment31.geicmaOptional();
    java.nio.file.Path path34 = backupEnvironment31.getPbPath();
    java.nio.file.Path path35 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path34);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream36 = fileMover18._trrfrmnStream(
        path34);
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory39 = factory37.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory40 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory42 = factory40.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory44 = factory40.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory46 = factory40.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory48 = factory46.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory51 = factory46.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment52 = factory46.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern53 = backupEnvironment52.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress54 = backupEnvironment52.getSocketAddress();
    java.nio.file.Path path55 = backupEnvironment52.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory56 = factory37.pbPath(path55);
    io.github.onograph.backup.BackupEnvironment.Factory factory57 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory59 = factory57.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory60 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory62 = factory60.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory64 = factory60.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory66 = factory60.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory68 = factory66.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory71 = factory66.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment72 = factory66.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern73 = backupEnvironment72.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress74 = backupEnvironment72.getSocketAddress();
    java.nio.file.Path path75 = backupEnvironment72.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory76 = factory57.pbPath(path75);
    io.github.onograph.backup.FileMoverService fileMoverService77 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path55, path75);
    java.nio.file.Path path78 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path55);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream79 = fileMover18._trrfrmnStream(
        path78);
    io.github.onograph.backup.BackupEnvironment.Factory factory80 = factory16.prPath(path78);
    try {
      gdbIdRepo1.wrdaiForDaPa(databaseId2, path78);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory3);
    org.junit.Assert.assertNotNull(factory5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(config13);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(backupEnvironment31);
    org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional33);
    org.junit.Assert.assertNotNull(path34);
    org.junit.Assert.assertNotNull(path35);
    org.junit.Assert.assertNotNull(fileMoverServiceStream36);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(factory39);
    org.junit.Assert.assertNotNull(factory40);
    org.junit.Assert.assertNotNull(factory42);
    org.junit.Assert.assertNotNull(factory44);
    org.junit.Assert.assertNotNull(factory46);
    org.junit.Assert.assertNotNull(factory48);
    org.junit.Assert.assertNotNull(factory51);
    org.junit.Assert.assertNotNull(backupEnvironment52);
    org.junit.Assert.assertNotNull(databaseNamePattern53);
    org.junit.Assert.assertNotNull(socketAddress54);
    org.junit.Assert.assertNotNull(path55);
    org.junit.Assert.assertNotNull(factory56);
    org.junit.Assert.assertNotNull(factory57);
    org.junit.Assert.assertNotNull(factory59);
    org.junit.Assert.assertNotNull(factory60);
    org.junit.Assert.assertNotNull(factory62);
    org.junit.Assert.assertNotNull(factory64);
    org.junit.Assert.assertNotNull(factory66);
    org.junit.Assert.assertNotNull(factory68);
    org.junit.Assert.assertNotNull(factory71);
    org.junit.Assert.assertNotNull(backupEnvironment72);
    org.junit.Assert.assertNotNull(databaseNamePattern73);
    org.junit.Assert.assertNotNull(socketAddress74);
    org.junit.Assert.assertNotNull(path75);
    org.junit.Assert.assertNotNull(factory76);
    org.junit.Assert.assertNotNull(fileMoverService77);
    org.junit.Assert.assertNotNull(path78);
    org.junit.Assert.assertNotNull(fileMoverServiceStream79);
    org.junit.Assert.assertNotNull(factory80);
  }

  @Test
  public void test0142() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0142");
    }
    io.github.onograph.backup.CommandProviderGdbRestorerCommandImpl commandProviderGdbRestorerCommandImpl0 = new io.github.onograph.backup.CommandProviderGdbRestorerCommandImpl();
    int int1 = commandProviderGdbRestorerCommandImpl0.getPriority();
    org.neo4j.cli.Command.CommandType commandType2 = commandProviderGdbRestorerCommandImpl0.commandType();
    org.neo4j.cli.Command.CommandType commandType3 = commandProviderGdbRestorerCommandImpl0.commandType();
    org.neo4j.cli.Command.CommandType commandType4 = commandProviderGdbRestorerCommandImpl0.commandType();
    int int5 = commandProviderGdbRestorerCommandImpl0.getPriority();
    org.neo4j.cli.ExecutionContext executionContext6 = null;
    try {
      io.github.onograph.backup.GdbRestorerCommand gdbRestorerCommand7 = commandProviderGdbRestorerCommandImpl0.createCommand(
          executionContext6);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    org.junit.Assert.assertTrue(
        "'" + commandType2 + "' != '" + org.neo4j.cli.Command.CommandType.RESTORE_DB + "'",
        commandType2.equals(org.neo4j.cli.Command.CommandType.RESTORE_DB));
    org.junit.Assert.assertTrue(
        "'" + commandType3 + "' != '" + org.neo4j.cli.Command.CommandType.RESTORE_DB + "'",
        commandType3.equals(org.neo4j.cli.Command.CommandType.RESTORE_DB));
    org.junit.Assert.assertTrue(
        "'" + commandType4 + "' != '" + org.neo4j.cli.Command.CommandType.RESTORE_DB + "'",
        commandType4.equals(org.neo4j.cli.Command.CommandType.RESTORE_DB));
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
  }

  @Test
  public void test0143() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0143");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupIOService backupIOService1 = new io.github.onograph.backup.BackupIOService(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isIcc(
        (java.lang.Boolean) true);
    java.nio.file.Path path9 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory2.pbPath(path9);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory11.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory11.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory17.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory17.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment23 = factory17.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern24 = backupEnvironment23.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress25 = backupEnvironment23.getSocketAddress();
    java.nio.file.Path path26 = backupEnvironment23.getRpPath();
    boolean boolean27 = backupEnvironment23.getIsBftf();
    java.nio.file.Path path28 = backupEnvironment23.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory10.prPath(path28);
    try {
      backupIOService1.deedForPa(path28);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(backupEnvironment23);
    org.junit.Assert.assertNotNull(databaseNamePattern24);
    org.junit.Assert.assertNotNull(socketAddress25);
    org.junit.Assert.assertNotNull(path26);
    org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    org.junit.Assert.assertNotNull(path28);
    org.junit.Assert.assertNotNull(factory29);
  }

  @Test
  public void test0144() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0144");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.logging.LogProvider logProvider5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator2.itraLogProvider(
        logProvider5);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction7 = null;
    io.github.onograph.backup.BackupRunner.Generator generator8 = generator2.fFileSystemAbstraction(
        fileSystemAbstraction7);
    org.neo4j.logging.LogProvider logProvider9 = null;
    io.github.onograph.backup.BackupRunner.Generator generator10 = generator8.itraLogProvider(
        logProvider9);
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory11 = null;
    io.github.onograph.backup.BackupRunner.Generator generator12 = generator8.progressMonitorFactory(
        progressMonitorFactory11);
    io.github.onograph.backup.BackupRunner backupRunner13 = generator8.bulBackupRunner();
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory14.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory14.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory14.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory20.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory20.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment26 = factory20.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern27 = backupEnvironment26.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress28 = backupEnvironment26.getSocketAddress();
    java.nio.file.Path path29 = backupEnvironment26.getRpPath();
    boolean boolean30 = backupEnvironment26.getIsBftf();
    java.nio.file.Path path31 = backupEnvironment26.getRpPath();
    try {
      backupRunner13.excebcpForBa(backupEnvironment26);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(generator8);
    org.junit.Assert.assertNotNull(generator10);
    org.junit.Assert.assertNotNull(generator12);
    org.junit.Assert.assertNotNull(backupRunner13);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(backupEnvironment26);
    org.junit.Assert.assertNotNull(databaseNamePattern27);
    org.junit.Assert.assertNotNull(socketAddress28);
    org.junit.Assert.assertNotNull(path29);
    org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    org.junit.Assert.assertNotNull(path31);
  }

  @Test
  public void test0145() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0145");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup("hi!");
    io.github.onograph.backup.Backup backup3 = backup1.isCc(false);
    io.github.onograph.backup.Backup backup5 = backup1.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config8 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory7.config(config8);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.isRp(true);
    org.neo4j.configuration.Config config12 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.config(config12);
    org.neo4j.configuration.helpers.SocketAddress socketAddress14 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory11.wihadsBackupEnvironmentFactory(
        socketAddress14);
    org.neo4j.configuration.helpers.SocketAddress socketAddress16 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory11.wihadsBackupEnvironmentFactory(
        socketAddress16);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory11.wihadsBackupEnvironmentFactory(
        (int) (short) -1, "hi!");
    org.neo4j.configuration.Config config21 = factory20.gecfConfig();
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags22 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction23 = null;
    org.neo4j.logging.LogProvider logProvider24 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory25.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = factory28.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory28.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory28.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory34.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory39 = factory34.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment40 = factory34.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern41 = backupEnvironment40.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress42 = backupEnvironment40.getSocketAddress();
    java.nio.file.Path path43 = backupEnvironment40.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory44 = factory25.pbPath(path43);
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = factory45.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory48 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory50 = factory48.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory52 = factory48.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory54 = factory48.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory56 = factory54.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory59 = factory54.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment60 = factory54.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern61 = backupEnvironment60.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress62 = backupEnvironment60.getSocketAddress();
    java.nio.file.Path path63 = backupEnvironment60.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory64 = factory45.pbPath(path63);
    io.github.onograph.backup.FileMoverService fileMoverService65 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path43, path63);
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory66 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl67 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config21, consistencyFlags22, fileSystemAbstraction23, logProvider24, path63,
        progressMonitorFactory66);
    try {
      io.github.onograph.backup.Backup.BackupRespState backupRespState68 = backup1.bakBackupBackupRespState(
          "database.id", path63);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.RuntimeException; message: *** Error:  3b02b00a-232a-454b-823b-025cc97a58b8");
    } catch (java.lang.RuntimeException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(backup3);
    org.junit.Assert.assertNotNull(backup5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(config21);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(factory39);
    org.junit.Assert.assertNotNull(backupEnvironment40);
    org.junit.Assert.assertNotNull(databaseNamePattern41);
    org.junit.Assert.assertNotNull(socketAddress42);
    org.junit.Assert.assertNotNull(path43);
    org.junit.Assert.assertNotNull(factory44);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory48);
    org.junit.Assert.assertNotNull(factory50);
    org.junit.Assert.assertNotNull(factory52);
    org.junit.Assert.assertNotNull(factory54);
    org.junit.Assert.assertNotNull(factory56);
    org.junit.Assert.assertNotNull(factory59);
    org.junit.Assert.assertNotNull(backupEnvironment60);
    org.junit.Assert.assertNotNull(databaseNamePattern61);
    org.junit.Assert.assertNotNull(socketAddress62);
    org.junit.Assert.assertNotNull(path63);
    org.junit.Assert.assertNotNull(factory64);
    org.junit.Assert.assertNotNull(fileMoverService65);
  }

  @Test
  public void test0146() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0146");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup("hi!");
    io.github.onograph.backup.Backup backup3 = backup1.isCc(false);
    java.io.OutputStream outputStream4 = null;
    try {
      io.github.onograph.backup.Backup backup5 = backup1.outputStream(outputStream4);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: outputStream");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(backup3);
  }

  @Test
  public void test0147() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0147");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.logging.LogProvider logProvider5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator2.itraLogProvider(
        logProvider5);
    io.github.onograph.backup.BackupRunner backupRunner7 = generator6.bulBackupRunner();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction8 = null;
    io.github.onograph.backup.BackupRunner.Generator generator9 = generator6.fFileSystemAbstraction(
        fileSystemAbstraction8);
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory10 = null;
    io.github.onograph.backup.BackupRunner.Generator generator11 = generator9.progressMonitorFactory(
        progressMonitorFactory10);
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(backupRunner7);
    org.junit.Assert.assertNotNull(generator9);
    org.junit.Assert.assertNotNull(generator11);
  }

  @Test
  public void test0148() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0148");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.logging.LogProvider logProvider5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator2.itraLogProvider(
        logProvider5);
    org.neo4j.logging.LogProvider logProvider7 = null;
    io.github.onograph.backup.BackupRunner.Generator generator8 = generator6.uLogProvider(
        logProvider7);
    org.neo4j.monitoring.Monitors monitors9 = null;
    io.github.onograph.backup.BackupRunner.Generator generator10 = generator8.monitors(monitors9);
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(generator8);
    org.junit.Assert.assertNotNull(generator10);
  }

  @Test
  public void test0149() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0149");
    }
    io.github.onograph.backup.SetupForBackupRestorationCommandProvider setupForBackupRestorationCommandProvider0 = new io.github.onograph.backup.SetupForBackupRestorationCommandProvider();
    int int1 = setupForBackupRestorationCommandProvider0.getPriority();
    org.neo4j.cli.Command.CommandType commandType2 = setupForBackupRestorationCommandProvider0.commandType();
    org.neo4j.cli.Command.CommandType commandType3 = setupForBackupRestorationCommandProvider0.commandType();
    org.neo4j.cli.ExecutionContext executionContext4 = null;
    try {
      io.github.onograph.backup.SetupForBackupRestorationCommand setupForBackupRestorationCommand5 = setupForBackupRestorationCommandProvider0.createCommand(
          executionContext4);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    org.junit.Assert.assertTrue(
        "'" + commandType2 + "' != '" + org.neo4j.cli.Command.CommandType.PREPARE_RESTORE + "'",
        commandType2.equals(org.neo4j.cli.Command.CommandType.PREPARE_RESTORE));
    org.junit.Assert.assertTrue(
        "'" + commandType3 + "' != '" + org.neo4j.cli.Command.CommandType.PREPARE_RESTORE + "'",
        commandType3.equals(org.neo4j.cli.Command.CommandType.PREPARE_RESTORE));
  }

  @Test
  public void test0150() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0150");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isSicc(
        (java.lang.Boolean) true);
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern7 = factory6.gedtenprDatabaseNamePattern();
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory6.isRp(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory10.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory10.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory10.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory16.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory16.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment22 = factory16.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern23 = backupEnvironment22.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress24 = backupEnvironment22.getSocketAddress();
    java.nio.file.Path path25 = backupEnvironment22.getRpPath();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction26 = null;
    io.github.onograph.backup.FileMover fileMover27 = new io.github.onograph.backup.FileMover(
        fileSystemAbstraction26);
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = factory28.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory28.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory28.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory34.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory39 = factory34.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment40 = factory34.bulBackupEnvironment();
    boolean boolean41 = backupEnvironment40.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional42 = backupEnvironment40.geicmaOptional();
    java.nio.file.Path path43 = backupEnvironment40.getPbPath();
    java.nio.file.Path path44 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path43);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream45 = fileMover27._trrfrmnStream(
        path43);
    io.github.onograph.backup.BackupEnvironment.Factory factory46 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory48 = factory46.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory51 = factory49.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory53 = factory49.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory55 = factory49.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory57 = factory55.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory60 = factory55.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment61 = factory55.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern62 = backupEnvironment61.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress63 = backupEnvironment61.getSocketAddress();
    java.nio.file.Path path64 = backupEnvironment61.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory65 = factory46.pbPath(path64);
    io.github.onograph.backup.BackupEnvironment.Factory factory66 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory68 = factory66.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory69 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory71 = factory69.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory73 = factory69.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory75 = factory69.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory77 = factory75.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory80 = factory75.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment81 = factory75.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern82 = backupEnvironment81.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress83 = backupEnvironment81.getSocketAddress();
    java.nio.file.Path path84 = backupEnvironment81.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory85 = factory66.pbPath(path84);
    io.github.onograph.backup.FileMoverService fileMoverService86 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path64, path84);
    java.nio.file.Path path87 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path64);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream88 = fileMover27._trrfrmnStream(
        path87);
    io.github.onograph.backup.FileMoverService fileMoverService89 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path25, path87);
    io.github.onograph.backup.BackupEnvironment.Factory factory90 = factory9.prPath(path25);
    io.github.onograph.backup.BackupEnvironment.Factory factory92 = factory90.isCc(true);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(databaseNamePattern7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(backupEnvironment22);
    org.junit.Assert.assertNotNull(databaseNamePattern23);
    org.junit.Assert.assertNotNull(socketAddress24);
    org.junit.Assert.assertNotNull(path25);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(factory39);
    org.junit.Assert.assertNotNull(backupEnvironment40);
    org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional42);
    org.junit.Assert.assertNotNull(path43);
    org.junit.Assert.assertNotNull(path44);
    org.junit.Assert.assertNotNull(fileMoverServiceStream45);
    org.junit.Assert.assertNotNull(factory46);
    org.junit.Assert.assertNotNull(factory48);
    org.junit.Assert.assertNotNull(factory49);
    org.junit.Assert.assertNotNull(factory51);
    org.junit.Assert.assertNotNull(factory53);
    org.junit.Assert.assertNotNull(factory55);
    org.junit.Assert.assertNotNull(factory57);
    org.junit.Assert.assertNotNull(factory60);
    org.junit.Assert.assertNotNull(backupEnvironment61);
    org.junit.Assert.assertNotNull(databaseNamePattern62);
    org.junit.Assert.assertNotNull(socketAddress63);
    org.junit.Assert.assertNotNull(path64);
    org.junit.Assert.assertNotNull(factory65);
    org.junit.Assert.assertNotNull(factory66);
    org.junit.Assert.assertNotNull(factory68);
    org.junit.Assert.assertNotNull(factory69);
    org.junit.Assert.assertNotNull(factory71);
    org.junit.Assert.assertNotNull(factory73);
    org.junit.Assert.assertNotNull(factory75);
    org.junit.Assert.assertNotNull(factory77);
    org.junit.Assert.assertNotNull(factory80);
    org.junit.Assert.assertNotNull(backupEnvironment81);
    org.junit.Assert.assertNotNull(databaseNamePattern82);
    org.junit.Assert.assertNotNull(socketAddress83);
    org.junit.Assert.assertNotNull(path84);
    org.junit.Assert.assertNotNull(factory85);
    org.junit.Assert.assertNotNull(fileMoverService86);
    org.junit.Assert.assertNotNull(path87);
    org.junit.Assert.assertNotNull(fileMoverServiceStream88);
    org.junit.Assert.assertNotNull(fileMoverService89);
    org.junit.Assert.assertNotNull(factory90);
    org.junit.Assert.assertNotNull(factory92);
  }

  @Test
  public void test0151() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0151");
    }
    java.nio.file.Path path0 = null;
    java.nio.file.Path path1 = null;
    io.github.onograph.backup.FileMoverService fileMoverService2 = io.github.onograph.backup.FileMoverService.movifeseFileMoverService(
        path0, path1);
    java.nio.file.Path path3 = fileMoverService2.filPath();
    java.nio.file.Path path4 = fileMoverService2.filPath();
    java.nio.file.Path path5 = fileMoverService2.filPath();
    java.nio.file.Path path6 = fileMoverService2.filPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory7.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory7.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory7.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory13.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory13.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment19 = factory13.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern20 = backupEnvironment19.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress21 = backupEnvironment19.getSocketAddress();
    java.nio.file.Path path22 = backupEnvironment19.getRpPath();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction23 = null;
    io.github.onograph.backup.FileMover fileMover24 = new io.github.onograph.backup.FileMover(
        fileSystemAbstraction23);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory25.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory25.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory25.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory31.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory31.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment37 = factory31.bulBackupEnvironment();
    boolean boolean38 = backupEnvironment37.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional39 = backupEnvironment37.geicmaOptional();
    java.nio.file.Path path40 = backupEnvironment37.getPbPath();
    java.nio.file.Path path41 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path40);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream42 = fileMover24._trrfrmnStream(
        path40);
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = factory43.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory46 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory48 = factory46.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory50 = factory46.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory52 = factory46.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory54 = factory52.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory57 = factory52.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment58 = factory52.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern59 = backupEnvironment58.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress60 = backupEnvironment58.getSocketAddress();
    java.nio.file.Path path61 = backupEnvironment58.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory62 = factory43.pbPath(path61);
    io.github.onograph.backup.BackupEnvironment.Factory factory63 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory65 = factory63.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory66 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory68 = factory66.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory70 = factory66.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory72 = factory66.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory74 = factory72.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory77 = factory72.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment78 = factory72.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern79 = backupEnvironment78.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress80 = backupEnvironment78.getSocketAddress();
    java.nio.file.Path path81 = backupEnvironment78.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory82 = factory63.pbPath(path81);
    io.github.onograph.backup.FileMoverService fileMoverService83 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path61, path81);
    java.nio.file.Path path84 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path61);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream85 = fileMover24._trrfrmnStream(
        path84);
    io.github.onograph.backup.FileMoverService fileMoverService86 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path22, path84);
    java.nio.file.Path path87 = fileMoverService86.filPath();
    java.nio.file.Path path88 = fileMoverService86.filPath();
    java.nio.file.CopyOption copyOption89 = null;
    java.nio.file.CopyOption[] copyOptionArray90 = new java.nio.file.CopyOption[]{copyOption89};
    try {
      fileMoverService2.movForPaCo(path88, copyOptionArray90);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(fileMoverService2);
    org.junit.Assert.assertNull(path3);
    org.junit.Assert.assertNull(path4);
    org.junit.Assert.assertNull(path5);
    org.junit.Assert.assertNull(path6);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(backupEnvironment19);
    org.junit.Assert.assertNotNull(databaseNamePattern20);
    org.junit.Assert.assertNotNull(socketAddress21);
    org.junit.Assert.assertNotNull(path22);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(backupEnvironment37);
    org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional39);
    org.junit.Assert.assertNotNull(path40);
    org.junit.Assert.assertNotNull(path41);
    org.junit.Assert.assertNotNull(fileMoverServiceStream42);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory46);
    org.junit.Assert.assertNotNull(factory48);
    org.junit.Assert.assertNotNull(factory50);
    org.junit.Assert.assertNotNull(factory52);
    org.junit.Assert.assertNotNull(factory54);
    org.junit.Assert.assertNotNull(factory57);
    org.junit.Assert.assertNotNull(backupEnvironment58);
    org.junit.Assert.assertNotNull(databaseNamePattern59);
    org.junit.Assert.assertNotNull(socketAddress60);
    org.junit.Assert.assertNotNull(path61);
    org.junit.Assert.assertNotNull(factory62);
    org.junit.Assert.assertNotNull(factory63);
    org.junit.Assert.assertNotNull(factory65);
    org.junit.Assert.assertNotNull(factory66);
    org.junit.Assert.assertNotNull(factory68);
    org.junit.Assert.assertNotNull(factory70);
    org.junit.Assert.assertNotNull(factory72);
    org.junit.Assert.assertNotNull(factory74);
    org.junit.Assert.assertNotNull(factory77);
    org.junit.Assert.assertNotNull(backupEnvironment78);
    org.junit.Assert.assertNotNull(databaseNamePattern79);
    org.junit.Assert.assertNotNull(socketAddress80);
    org.junit.Assert.assertNotNull(path81);
    org.junit.Assert.assertNotNull(factory82);
    org.junit.Assert.assertNotNull(fileMoverService83);
    org.junit.Assert.assertNotNull(path84);
    org.junit.Assert.assertNotNull(fileMoverServiceStream85);
    org.junit.Assert.assertNotNull(fileMoverService86);
    org.junit.Assert.assertNotNull(path87);
    org.junit.Assert.assertNotNull(path88);
    org.junit.Assert.assertNotNull(copyOptionArray90);
  }

  @Test
  public void test0152() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0152");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.config(config5);
    org.neo4j.configuration.helpers.SocketAddress socketAddress7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress7);
    try {
      io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory4.databaseNamePattern(
          "");
      org.junit.Assert.fail(
          "Expected exception of type java.lang.IllegalArgumentException; message: The provided database name is empty.");
    } catch (java.lang.IllegalArgumentException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
  }

  @Test
  public void test0153() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0153");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config10 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.config(config10);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isRp(true);
    org.neo4j.configuration.Config config14 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory13.config(config14);
    org.neo4j.configuration.helpers.SocketAddress socketAddress16 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory13.wihadsBackupEnvironmentFactory(
        socketAddress16);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config19 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory18.config(config19);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory20.isRp(true);
    org.neo4j.configuration.Config config23 = factory20.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory13.config(config23);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory8.config(config23);
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags26 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction27 = null;
    org.neo4j.logging.LogProvider logProvider28 = null;
    java.nio.file.Path path29 = null;
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory30 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl31 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config23, consistencyFlags26, fileSystemAbstraction27, logProvider28, path29,
        progressMonitorFactory30);
    org.neo4j.io.layout.DatabaseLayout databaseLayout32 = null;
    try {
      backupVerificationServiceImpl31.chcsyForDa(databaseLayout32);
      org.junit.Assert.fail(
          "Expected exception of type io.github.onograph.backup.BackupVerificationErrorException; message: *** Error:  2915f124-983c-439d-b1ae-a9c5ad06642b");
    } catch (io.github.onograph.backup.BackupVerificationErrorException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(config23);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory25);
  }

  @Test
  public void test0154() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0154");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.config(config5);
    org.neo4j.configuration.helpers.SocketAddress socketAddress7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress7);
    org.neo4j.configuration.helpers.SocketAddress socketAddress9 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress9);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory4.wihadsBackupEnvironmentFactory(
        (int) (short) -1, "hi!");
    org.neo4j.configuration.Config config14 = factory13.gecfConfig();
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags15 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction16 = null;
    org.neo4j.logging.LogProvider logProvider17 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory18.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory21.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory21.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory21.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory27.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory27.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment33 = factory27.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern34 = backupEnvironment33.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress35 = backupEnvironment33.getSocketAddress();
    java.nio.file.Path path36 = backupEnvironment33.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = factory18.pbPath(path36);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory40 = factory38.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = factory41.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = factory41.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = factory41.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = factory47.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory52 = factory47.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment53 = factory47.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern54 = backupEnvironment53.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress55 = backupEnvironment53.getSocketAddress();
    java.nio.file.Path path56 = backupEnvironment53.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory57 = factory38.pbPath(path56);
    io.github.onograph.backup.FileMoverService fileMoverService58 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path36, path56);
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory59 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl60 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config14, consistencyFlags15, fileSystemAbstraction16, logProvider17, path56,
        progressMonitorFactory59);
    org.neo4j.io.layout.DatabaseLayout databaseLayout61 = null;
    try {
      backupVerificationServiceImpl60.chcsyForDa(databaseLayout61);
      org.junit.Assert.fail(
          "Expected exception of type io.github.onograph.backup.BackupVerificationErrorException; message: *** Error:  2915f124-983c-439d-b1ae-a9c5ad06642b");
    } catch (io.github.onograph.backup.BackupVerificationErrorException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(config14);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(backupEnvironment33);
    org.junit.Assert.assertNotNull(databaseNamePattern34);
    org.junit.Assert.assertNotNull(socketAddress35);
    org.junit.Assert.assertNotNull(path36);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(factory40);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory49);
    org.junit.Assert.assertNotNull(factory52);
    org.junit.Assert.assertNotNull(backupEnvironment53);
    org.junit.Assert.assertNotNull(databaseNamePattern54);
    org.junit.Assert.assertNotNull(socketAddress55);
    org.junit.Assert.assertNotNull(path56);
    org.junit.Assert.assertNotNull(factory57);
    org.junit.Assert.assertNotNull(fileMoverService58);
  }

  @Test
  public void test0155() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0155");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupIOService backupIOService1 = new io.github.onograph.backup.BackupIOService(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory8.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment14 = factory8.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern15 = backupEnvironment14.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress16 = backupEnvironment14.getSocketAddress();
    java.nio.file.Path path17 = backupEnvironment14.getRpPath();
    try {
      backupIOService1.deedForPa(path17);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(backupEnvironment14);
    org.junit.Assert.assertNotNull(databaseNamePattern15);
    org.junit.Assert.assertNotNull(socketAddress16);
    org.junit.Assert.assertNotNull(path17);
  }

  @Test
  public void test0156() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0156");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.miAuthMetaOptions(
        authMetaOptions3);
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory4.wihadsBackupEnvironmentFactory(
        (int) (byte) -1, "");
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory7);
  }

  @Test
  public void test0157() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0157");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config10 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.config(config10);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isRp(true);
    org.neo4j.configuration.Config config14 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory13.config(config14);
    org.neo4j.configuration.helpers.SocketAddress socketAddress16 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory13.wihadsBackupEnvironmentFactory(
        socketAddress16);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config19 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory18.config(config19);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory20.isRp(true);
    org.neo4j.configuration.Config config23 = factory20.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory13.config(config23);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory8.config(config23);
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags26 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction27 = null;
    org.neo4j.logging.LogProvider logProvider28 = null;
    java.nio.file.Path path29 = null;
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory30 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl31 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config23, consistencyFlags26, fileSystemAbstraction27, logProvider28, path29,
        progressMonitorFactory30);
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags32 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction33 = null;
    org.neo4j.logging.LogProvider logProvider34 = null;
    java.nio.file.Path path35 = null;
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory36 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl37 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config23, consistencyFlags32, fileSystemAbstraction33, logProvider34, path35,
        progressMonitorFactory36);
    org.neo4j.io.layout.DatabaseLayout databaseLayout38 = null;
    try {
      backupVerificationServiceImpl37.chcsyForDa(databaseLayout38);
      org.junit.Assert.fail(
          "Expected exception of type io.github.onograph.backup.BackupVerificationErrorException; message: *** Error:  2915f124-983c-439d-b1ae-a9c5ad06642b");
    } catch (io.github.onograph.backup.BackupVerificationErrorException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(config23);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory25);
  }

  @Test
  public void test0158() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0158");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.monitoring.Monitors monitors5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator4.monitors(monitors5);
    org.neo4j.logging.LogProvider logProvider7 = null;
    io.github.onograph.backup.BackupRunner.Generator generator8 = generator6.uLogProvider(
        logProvider7);
    org.neo4j.monitoring.Monitors monitors9 = null;
    io.github.onograph.backup.BackupRunner.Generator generator10 = generator6.monitors(monitors9);
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(generator8);
    org.junit.Assert.assertNotNull(generator10);
  }

  @Test
  public void test0159() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0159");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory6.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment12 = factory6.bulBackupEnvironment();
    org.neo4j.memory.MemoryTracker memoryTracker13 = backupEnvironment12.getMemoryTracker();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern14 = backupEnvironment12.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress15 = backupEnvironment12.getSocketAddress();
    java.lang.Class<?> wildcardClass16 = backupEnvironment12.getClass();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(backupEnvironment12);
    org.junit.Assert.assertNotNull(memoryTracker13);
    org.junit.Assert.assertNotNull(databaseNamePattern14);
    org.junit.Assert.assertNotNull(socketAddress15);
    org.junit.Assert.assertNotNull(wildcardClass16);
  }

  @Test
  public void test0160() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0160");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.miAuthMetaOptions(
        authMetaOptions3);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isGcc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isIcc(
        (java.lang.Boolean) false);
    try {
      io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory6.databaseNamePattern(
          "");
      org.junit.Assert.fail(
          "Expected exception of type java.lang.IllegalArgumentException; message: The provided database name is empty.");
    } catch (java.lang.IllegalArgumentException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
  }

  @Test
  public void test0161() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0161");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.config(config5);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.databaseNamePattern(
        "database.id");
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.isCc(false);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions12 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory9.miAuthMetaOptions(
        authMetaOptions12);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory13.isGcc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory15.isIcc(
        (java.lang.Boolean) false);
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern18 = factory15.gedtenprDatabaseNamePattern();
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory4.databaseNamePattern(
        databaseNamePattern18);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory4.wihadsBackupEnvironmentFactory(
        (int) (short) 100, "database.id");
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(databaseNamePattern18);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory22);
  }

  @Test
  public void test0162() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0162");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup(
        "database.id");
    io.github.onograph.backup.Backup backup3 = backup1.isBftf(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory5 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory5.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory5.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory5.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory11.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment17 = factory11.bulBackupEnvironment();
    boolean boolean18 = backupEnvironment17.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional19 = backupEnvironment17.geicmaOptional();
    java.nio.file.Path path20 = backupEnvironment17.getPbPath();
    java.nio.file.Path path21 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path20);
    java.nio.file.Path path22 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path21);
    boolean boolean23 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path22);
    try {
      io.github.onograph.backup.Backup.BackupRespState backupRespState24 = backup3.bakBackupBackupRespState(
          "hi!", path22);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.RuntimeException; message: *** Error:  3b02b00a-232a-454b-823b-025cc97a58b8");
    } catch (java.lang.RuntimeException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(backup3);
    org.junit.Assert.assertNotNull(factory5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(backupEnvironment17);
    org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional19);
    org.junit.Assert.assertNotNull(path20);
    org.junit.Assert.assertNotNull(path21);
    org.junit.Assert.assertNotNull(path22);
    org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
  }

  @Test
  public void test0163() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0163");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config10 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.config(config10);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isRp(true);
    org.neo4j.configuration.Config config14 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory13.config(config14);
    org.neo4j.configuration.helpers.SocketAddress socketAddress16 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory13.wihadsBackupEnvironmentFactory(
        socketAddress16);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config19 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory18.config(config19);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory20.isRp(true);
    org.neo4j.configuration.Config config23 = factory20.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory13.config(config23);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory8.config(config23);
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags26 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction27 = null;
    org.neo4j.logging.LogProvider logProvider28 = null;
    java.nio.file.Path path29 = null;
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory30 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl31 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config23, consistencyFlags26, fileSystemAbstraction27, logProvider28, path29,
        progressMonitorFactory30);
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags32 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction33 = null;
    org.neo4j.logging.LogProvider logProvider34 = null;
    java.nio.file.Path path35 = null;
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory36 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl37 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config23, consistencyFlags32, fileSystemAbstraction33, logProvider34, path35,
        progressMonitorFactory36);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction38 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory39 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory39.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = factory39.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = factory39.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = factory45.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory50 = factory45.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment51 = factory45.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern52 = backupEnvironment51.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress53 = backupEnvironment51.getSocketAddress();
    java.nio.file.Path path54 = backupEnvironment51.getRpPath();
    boolean boolean55 = backupEnvironment51.getIsBftf();
    java.nio.file.Path path56 = backupEnvironment51.getRpPath();
    org.neo4j.memory.MemoryTracker memoryTracker57 = backupEnvironment51.getMemoryTracker();
    org.neo4j.io.pagecache.PageCache pageCache58 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager59 = new io.github.onograph.backup.BackupRestorationManager(
        config23, fileSystemAbstraction38, memoryTracker57, pageCache58);
    org.neo4j.io.layout.DatabaseLayout databaseLayout60 = null;
    try {
      backupRestorationManager59.reorForDa(databaseLayout60);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(config23);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory39);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory50);
    org.junit.Assert.assertNotNull(backupEnvironment51);
    org.junit.Assert.assertNotNull(databaseNamePattern52);
    org.junit.Assert.assertNotNull(socketAddress53);
    org.junit.Assert.assertNotNull(path54);
    org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    org.junit.Assert.assertNotNull(path56);
    org.junit.Assert.assertNotNull(memoryTracker57);
  }

  @Test
  public void test0164() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0164");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup("hi!");
    io.github.onograph.backup.Backup backup3 = backup1.isCc(false);
    io.github.onograph.backup.Backup backup5 = backup1.isCc(false);
    io.github.onograph.backup.Backup backup7 = backup5.isCc(true);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction9 = null;
    io.github.onograph.backup.FileMover fileMover10 = new io.github.onograph.backup.FileMover(
        fileSystemAbstraction9);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory11.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory11.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory17.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory17.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment23 = factory17.bulBackupEnvironment();
    boolean boolean24 = backupEnvironment23.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional25 = backupEnvironment23.geicmaOptional();
    java.nio.file.Path path26 = backupEnvironment23.getPbPath();
    java.nio.file.Path path27 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path26);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream28 = fileMover10._trrfrmnStream(
        path26);
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory29.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory32.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory32.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = factory32.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory40 = factory38.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = factory38.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment44 = factory38.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern45 = backupEnvironment44.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress46 = backupEnvironment44.getSocketAddress();
    java.nio.file.Path path47 = backupEnvironment44.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory48 = factory29.pbPath(path47);
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory51 = factory49.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory52 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory54 = factory52.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory56 = factory52.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory58 = factory52.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory60 = factory58.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory63 = factory58.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment64 = factory58.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern65 = backupEnvironment64.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress66 = backupEnvironment64.getSocketAddress();
    java.nio.file.Path path67 = backupEnvironment64.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory68 = factory49.pbPath(path67);
    io.github.onograph.backup.FileMoverService fileMoverService69 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path47, path67);
    java.nio.file.Path path70 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path47);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream71 = fileMover10._trrfrmnStream(
        path70);
    java.nio.file.Path path72 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path70);
    try {
      io.github.onograph.backup.Backup.BackupRespState backupRespState73 = backup7.bakBackupBackupRespState(
          "", path72);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.RuntimeException; message: *** Error:  3b02b00a-232a-454b-823b-025cc97a58b8");
    } catch (java.lang.RuntimeException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(backup3);
    org.junit.Assert.assertNotNull(backup5);
    org.junit.Assert.assertNotNull(backup7);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(backupEnvironment23);
    org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional25);
    org.junit.Assert.assertNotNull(path26);
    org.junit.Assert.assertNotNull(path27);
    org.junit.Assert.assertNotNull(fileMoverServiceStream28);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(factory40);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(backupEnvironment44);
    org.junit.Assert.assertNotNull(databaseNamePattern45);
    org.junit.Assert.assertNotNull(socketAddress46);
    org.junit.Assert.assertNotNull(path47);
    org.junit.Assert.assertNotNull(factory48);
    org.junit.Assert.assertNotNull(factory49);
    org.junit.Assert.assertNotNull(factory51);
    org.junit.Assert.assertNotNull(factory52);
    org.junit.Assert.assertNotNull(factory54);
    org.junit.Assert.assertNotNull(factory56);
    org.junit.Assert.assertNotNull(factory58);
    org.junit.Assert.assertNotNull(factory60);
    org.junit.Assert.assertNotNull(factory63);
    org.junit.Assert.assertNotNull(backupEnvironment64);
    org.junit.Assert.assertNotNull(databaseNamePattern65);
    org.junit.Assert.assertNotNull(socketAddress66);
    org.junit.Assert.assertNotNull(path67);
    org.junit.Assert.assertNotNull(factory68);
    org.junit.Assert.assertNotNull(fileMoverService69);
    org.junit.Assert.assertNotNull(path70);
    org.junit.Assert.assertNotNull(fileMoverServiceStream71);
    org.junit.Assert.assertNotNull(path72);
  }

  @Test
  public void test0165() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0165");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup("");
    io.github.onograph.backup.Backup backup3 = backup1.isCc(true);
    io.github.onograph.backup.Backup backup5 = backup3.isCc(true);
    io.github.onograph.backup.Backup backup7 = backup3.isBftf(false);
    io.github.onograph.backup.Backup backup9 = backup7.isBftf(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory11.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory11.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory17.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory17.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment23 = factory17.bulBackupEnvironment();
    org.neo4j.memory.MemoryTracker memoryTracker24 = backupEnvironment23.getMemoryTracker();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern25 = backupEnvironment23.getDatabaseNamePattern();
    boolean boolean26 = backupEnvironment23.getIsBftf();
    java.nio.file.Path path27 = backupEnvironment23.getRpPath();
    try {
      io.github.onograph.backup.Backup.BackupRespState backupRespState28 = backup7.bakBackupBackupRespState(
          "database.id", path27);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.RuntimeException; message: *** Error:  3b02b00a-232a-454b-823b-025cc97a58b8");
    } catch (java.lang.RuntimeException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(backup3);
    org.junit.Assert.assertNotNull(backup5);
    org.junit.Assert.assertNotNull(backup7);
    org.junit.Assert.assertNotNull(backup9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(backupEnvironment23);
    org.junit.Assert.assertNotNull(memoryTracker24);
    org.junit.Assert.assertNotNull(databaseNamePattern25);
    org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    org.junit.Assert.assertNotNull(path27);
  }

  @Test
  public void test0166() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0166");
    }
    io.github.onograph.backup.BackupMetaDTO backupMetaDTO0 = null;
    java.lang.String[] strArray3 = new java.lang.String[]{"database.id", "database.id"};
    java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
    boolean boolean5 = java.util.Collections.addAll(
        (java.util.Collection<java.lang.String>) strList4, strArray3);
    try {
      io.github.onograph.backup.BackupMetaService.wrtmedaForBaLi(backupMetaDTO0,
          (java.util.List<java.lang.String>) strList4);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(strArray3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
  }

  @Test
  public void test0167() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0167");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = factory2.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory2.isCc(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    java.nio.file.Path path11 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory8.prPath(path11);
    java.nio.file.Path path13 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory12.prPath(path13);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory15.isCc(false);
    java.nio.file.Path path18 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory15.prPath(path18);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config21 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory20.config(config21);
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory22.isRp(true);
    org.neo4j.configuration.Config config25 = factory22.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory15.config(config25);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory14.config(config25);
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = factory7.config(config25);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction29 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory30.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory30.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory30.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = factory36.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory36.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment42 = factory36.bulBackupEnvironment();
    boolean boolean43 = backupEnvironment42.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional44 = backupEnvironment42.geicmaOptional();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern45 = backupEnvironment42.getDatabaseNamePattern();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional46 = backupEnvironment42.geicmaOptional();
    org.neo4j.memory.MemoryTracker memoryTracker47 = backupEnvironment42.getMemoryTracker();
    org.neo4j.io.pagecache.PageCache pageCache48 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager49 = new io.github.onograph.backup.BackupRestorationManager(
        config25, fileSystemAbstraction29, memoryTracker47, pageCache48);
    org.neo4j.io.layout.DatabaseLayout databaseLayout50 = null;
    try {
      backupRestorationManager49.reorForDa(databaseLayout50);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(config5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(config25);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(backupEnvironment42);
    org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional44);
    org.junit.Assert.assertNotNull(databaseNamePattern45);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional46);
    org.junit.Assert.assertNotNull(memoryTracker47);
  }

  @Test
  public void test0168() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0168");
    }
    io.github.onograph.backup.SetupForBackupRestorationCommandProvider setupForBackupRestorationCommandProvider0 = new io.github.onograph.backup.SetupForBackupRestorationCommandProvider();
    int int1 = setupForBackupRestorationCommandProvider0.getPriority();
    org.neo4j.cli.ExecutionContext executionContext2 = null;
    try {
      io.github.onograph.backup.SetupForBackupRestorationCommand setupForBackupRestorationCommand3 = setupForBackupRestorationCommandProvider0.createCommand(
          executionContext2);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
  }

  @Test
  public void test0169() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0169");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory8.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment14 = factory8.bulBackupEnvironment();
    org.neo4j.memory.MemoryTracker memoryTracker15 = backupEnvironment14.getMemoryTracker();
    java.nio.file.Path path16 = backupEnvironment14.getPbPath();
    org.neo4j.logging.LogProvider logProvider17 = null;
    org.neo4j.io.pagecache.PageCache pageCache18 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer19 = null;
    try {
      io.github.onograph.backup.BackupMetaService backupMetaService20 = new io.github.onograph.backup.BackupMetaService(
          fileSystemAbstraction0, "", path16, logProvider17, pageCache18, pageCacheTracer19);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(backupEnvironment14);
    org.junit.Assert.assertNotNull(memoryTracker15);
    org.junit.Assert.assertNotNull(path16);
  }

  @Test
  public void test0170() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0170");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupMetadataRepository backupMetadataRepository1 = new io.github.onograph.backup.BackupMetadataRepository(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory8.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment14 = factory8.bulBackupEnvironment();
    boolean boolean15 = backupEnvironment14.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional16 = backupEnvironment14.geicmaOptional();
    java.nio.file.Path path17 = backupEnvironment14.getPbPath();
    java.nio.file.Path path18 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path17);
    java.nio.file.Path path19 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path18);
    boolean boolean20 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path19);
    java.nio.file.Path path21 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path19);
    java.lang.String[] strArray25 = new java.lang.String[]{"database.id", "", "database.id"};
    java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
    boolean boolean27 = java.util.Collections.addAll(
        (java.util.Collection<java.lang.String>) strList26, strArray25);
    try {
      backupMetadataRepository1.wrtForPaLi(path19, (java.util.List<java.lang.String>) strList26);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(backupEnvironment14);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional16);
    org.junit.Assert.assertNotNull(path17);
    org.junit.Assert.assertNotNull(path18);
    org.junit.Assert.assertNotNull(path19);
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    org.junit.Assert.assertNotNull(path21);
    org.junit.Assert.assertNotNull(strArray25);
    org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
  }

  @Test
  public void test0171() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0171");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupMetadataRepository backupMetadataRepository1 = new io.github.onograph.backup.BackupMetadataRepository(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory8.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment14 = factory8.bulBackupEnvironment();
    boolean boolean15 = backupEnvironment14.getIsBftf();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern16 = backupEnvironment14.getDatabaseNamePattern();
    java.nio.file.Path path17 = backupEnvironment14.getRpPath();
    java.lang.String[] strArray21 = new java.lang.String[]{"hi!", "", "database.id"};
    java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
    boolean boolean23 = java.util.Collections.addAll(
        (java.util.Collection<java.lang.String>) strList22, strArray21);
    try {
      backupMetadataRepository1.wrtForPaLi(path17, (java.util.List<java.lang.String>) strList22);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(backupEnvironment14);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    org.junit.Assert.assertNotNull(databaseNamePattern16);
    org.junit.Assert.assertNotNull(path17);
    org.junit.Assert.assertNotNull(strArray21);
    org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
  }

  @Test
  public void test0172() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0172");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = factory2.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory2.isCc(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    java.nio.file.Path path11 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory8.prPath(path11);
    java.nio.file.Path path13 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory12.prPath(path13);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory15.isCc(false);
    java.nio.file.Path path18 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory15.prPath(path18);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config21 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory20.config(config21);
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory22.isRp(true);
    org.neo4j.configuration.Config config25 = factory22.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory15.config(config25);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory14.config(config25);
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = factory7.config(config25);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction29 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory30.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory30.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory30.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = factory36.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory36.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment42 = factory36.bulBackupEnvironment();
    boolean boolean43 = backupEnvironment42.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional44 = backupEnvironment42.geicmaOptional();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern45 = backupEnvironment42.getDatabaseNamePattern();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional46 = backupEnvironment42.geicmaOptional();
    org.neo4j.memory.MemoryTracker memoryTracker47 = backupEnvironment42.getMemoryTracker();
    org.neo4j.io.pagecache.PageCache pageCache48 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager49 = new io.github.onograph.backup.BackupRestorationManager(
        config25, fileSystemAbstraction29, memoryTracker47, pageCache48);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction50 = null;
    org.neo4j.logging.LogProvider logProvider51 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer52 = null;
    org.neo4j.time.SystemNanoClock systemNanoClock53 = null;
    try {
      io.github.onograph.backup.DefaultBackupServiceHandler defaultBackupServiceHandler54 = io.github.onograph.backup.DefaultBackupServiceHandler.strliclDefaultBackupServiceHandler(
          config25, fileSystemAbstraction50, logProvider51, pageCacheTracer52, systemNanoClock53);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(config5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(config25);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(backupEnvironment42);
    org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional44);
    org.junit.Assert.assertNotNull(databaseNamePattern45);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional46);
    org.junit.Assert.assertNotNull(memoryTracker47);
  }

  @Test
  public void test0173() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0173");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.GdbIdRepo gdbIdRepo1 = new io.github.onograph.backup.GdbIdRepo(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory8.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment14 = factory8.bulBackupEnvironment();
    boolean boolean15 = backupEnvironment14.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional16 = backupEnvironment14.geicmaOptional();
    java.nio.file.Path path17 = backupEnvironment14.getPbPath();
    java.nio.file.Path path18 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path17);
    java.nio.file.Path path19 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path18);
    boolean boolean20 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path19);
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory21.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory21.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory21.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory27.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory27.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment33 = factory27.bulBackupEnvironment();
    boolean boolean34 = backupEnvironment33.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional35 = backupEnvironment33.geicmaOptional();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional36 = backupEnvironment33.geicmaOptional();
    java.nio.file.Path path37 = backupEnvironment33.getPbPath();
    java.nio.file.Path path38 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path37);
    io.github.onograph.backup.FileMoverService fileMoverService39 = io.github.onograph.backup.FileMoverService.movifeseFileMoverService(
        path19, path38);
    try {
      java.util.Optional<org.neo4j.kernel.database.DatabaseId> databaseIdOptional40 = gdbIdRepo1.reddtaiOptional(
          path19);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(backupEnvironment14);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional16);
    org.junit.Assert.assertNotNull(path17);
    org.junit.Assert.assertNotNull(path18);
    org.junit.Assert.assertNotNull(path19);
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(backupEnvironment33);
    org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional35);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional36);
    org.junit.Assert.assertNotNull(path37);
    org.junit.Assert.assertNotNull(path38);
    org.junit.Assert.assertNotNull(fileMoverService39);
  }

  @Test
  public void test0174() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0174");
    }
    io.github.onograph.backup.BackupMetaDTO backupMetaDTO0 = null;
    java.lang.String[] strArray4 = new java.lang.String[]{"hi!", "database.id", ""};
    java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
    boolean boolean6 = java.util.Collections.addAll(
        (java.util.Collection<java.lang.String>) strList5, strArray4);
    try {
      io.github.onograph.backup.BackupMetaService.wrtmedaForBaLi(backupMetaDTO0,
          (java.util.List<java.lang.String>) strList5);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(strArray4);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
  }

  @Test
  public void test0175() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0175");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup("");
    io.github.onograph.backup.Backup backup3 = backup1.isCc(true);
    io.github.onograph.backup.Backup backup5 = backup3.isCc(true);
    io.github.onograph.backup.Backup backup7 = backup5.isBftf(true);
    java.io.OutputStream outputStream8 = null;
    try {
      io.github.onograph.backup.Backup backup9 = backup7.outputStream(outputStream8);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: outputStream");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(backup3);
    org.junit.Assert.assertNotNull(backup5);
    org.junit.Assert.assertNotNull(backup7);
  }

  @Test
  public void test0176() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0176");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.GdbIdRepo gdbIdRepo1 = new io.github.onograph.backup.GdbIdRepo(
        fileSystemAbstraction0);
    org.neo4j.kernel.database.DatabaseId databaseId2 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory3 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory5 = factory3.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory6.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory6.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory12.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory12.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment18 = factory12.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern19 = backupEnvironment18.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress20 = backupEnvironment18.getSocketAddress();
    java.nio.file.Path path21 = backupEnvironment18.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory3.pbPath(path21);
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory23.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = factory26.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = factory26.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory26.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory32.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = factory32.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment38 = factory32.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern39 = backupEnvironment38.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress40 = backupEnvironment38.getSocketAddress();
    java.nio.file.Path path41 = backupEnvironment38.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory42 = factory23.pbPath(path41);
    io.github.onograph.backup.FileMoverService fileMoverService43 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path21, path41);
    java.nio.file.Path path44 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path21);
    try {
      gdbIdRepo1.wrdaiForDaPa(databaseId2, path44);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory3);
    org.junit.Assert.assertNotNull(factory5);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(backupEnvironment18);
    org.junit.Assert.assertNotNull(databaseNamePattern19);
    org.junit.Assert.assertNotNull(socketAddress20);
    org.junit.Assert.assertNotNull(path21);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(backupEnvironment38);
    org.junit.Assert.assertNotNull(databaseNamePattern39);
    org.junit.Assert.assertNotNull(socketAddress40);
    org.junit.Assert.assertNotNull(path41);
    org.junit.Assert.assertNotNull(factory42);
    org.junit.Assert.assertNotNull(fileMoverService43);
    org.junit.Assert.assertNotNull(path44);
  }

  @Test
  public void test0177() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0177");
    }
    io.github.onograph.backup.CommandProviderGdbRestorerCommandImpl commandProviderGdbRestorerCommandImpl0 = new io.github.onograph.backup.CommandProviderGdbRestorerCommandImpl();
    int int1 = commandProviderGdbRestorerCommandImpl0.getPriority();
    int int2 = commandProviderGdbRestorerCommandImpl0.getPriority();
    org.neo4j.cli.Command.CommandType commandType3 = commandProviderGdbRestorerCommandImpl0.commandType();
    org.neo4j.cli.ExecutionContext executionContext4 = null;
    try {
      io.github.onograph.backup.GdbRestorerCommand gdbRestorerCommand5 = commandProviderGdbRestorerCommandImpl0.createCommand(
          executionContext4);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    org.junit.Assert.assertTrue(
        "'" + commandType3 + "' != '" + org.neo4j.cli.Command.CommandType.RESTORE_DB + "'",
        commandType3.equals(org.neo4j.cli.Command.CommandType.RESTORE_DB));
  }

  @Test
  public void test0178() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0178");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup("");
    io.github.onograph.backup.Backup backup3 = backup1.isCc(true);
    io.github.onograph.backup.Backup backup5 = backup3.isCc(true);
    io.github.onograph.backup.Backup backup7 = backup5.isBftf(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory9.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory9.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory15.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory15.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment21 = factory15.bulBackupEnvironment();
    boolean boolean22 = backupEnvironment21.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional23 = backupEnvironment21.geicmaOptional();
    java.nio.file.Path path24 = backupEnvironment21.getPbPath();
    java.nio.file.Path path25 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path24);
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = factory26.isGcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config30 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory29.config(config30);
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory31.isRp(true);
    org.neo4j.configuration.Config config34 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = factory33.config(config34);
    org.neo4j.configuration.helpers.SocketAddress socketAddress36 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = factory33.wihadsBackupEnvironmentFactory(
        socketAddress36);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory40 = factory38.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = factory41.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = factory41.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = factory41.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = factory47.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory52 = factory47.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment53 = factory47.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern54 = backupEnvironment53.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress55 = backupEnvironment53.getSocketAddress();
    java.nio.file.Path path56 = backupEnvironment53.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory57 = factory38.pbPath(path56);
    io.github.onograph.backup.BackupEnvironment.Factory factory58 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory60 = factory58.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory61 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory63 = factory61.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory65 = factory61.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory67 = factory61.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory69 = factory67.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory72 = factory67.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment73 = factory67.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern74 = backupEnvironment73.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress75 = backupEnvironment73.getSocketAddress();
    java.nio.file.Path path76 = backupEnvironment73.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory77 = factory58.pbPath(path76);
    io.github.onograph.backup.FileMoverService fileMoverService78 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path56, path76);
    io.github.onograph.backup.BackupEnvironment.Factory factory79 = factory33.pbPath(path76);
    boolean boolean80 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path76);
    io.github.onograph.backup.BackupEnvironment.Factory factory81 = factory26.prPath(path76);
    io.github.onograph.backup.FileMoverService fileMoverService82 = io.github.onograph.backup.FileMoverService.movifeseFileMoverService(
        path24, path76);
    try {
      io.github.onograph.backup.Backup.BackupRespState backupRespState83 = backup5.bakBackupBackupRespState(
          "hi!", path24);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.RuntimeException; message: *** Error:  3b02b00a-232a-454b-823b-025cc97a58b8");
    } catch (java.lang.RuntimeException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(backup3);
    org.junit.Assert.assertNotNull(backup5);
    org.junit.Assert.assertNotNull(backup7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(backupEnvironment21);
    org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional23);
    org.junit.Assert.assertNotNull(path24);
    org.junit.Assert.assertNotNull(path25);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(factory40);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory49);
    org.junit.Assert.assertNotNull(factory52);
    org.junit.Assert.assertNotNull(backupEnvironment53);
    org.junit.Assert.assertNotNull(databaseNamePattern54);
    org.junit.Assert.assertNotNull(socketAddress55);
    org.junit.Assert.assertNotNull(path56);
    org.junit.Assert.assertNotNull(factory57);
    org.junit.Assert.assertNotNull(factory58);
    org.junit.Assert.assertNotNull(factory60);
    org.junit.Assert.assertNotNull(factory61);
    org.junit.Assert.assertNotNull(factory63);
    org.junit.Assert.assertNotNull(factory65);
    org.junit.Assert.assertNotNull(factory67);
    org.junit.Assert.assertNotNull(factory69);
    org.junit.Assert.assertNotNull(factory72);
    org.junit.Assert.assertNotNull(backupEnvironment73);
    org.junit.Assert.assertNotNull(databaseNamePattern74);
    org.junit.Assert.assertNotNull(socketAddress75);
    org.junit.Assert.assertNotNull(path76);
    org.junit.Assert.assertNotNull(factory77);
    org.junit.Assert.assertNotNull(fileMoverService78);
    org.junit.Assert.assertNotNull(factory79);
    org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    org.junit.Assert.assertNotNull(factory81);
    org.junit.Assert.assertNotNull(fileMoverService82);
  }

  @Test
  public void test0179() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0179");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isSicc(
        (java.lang.Boolean) true);
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern7 = factory2.gedtenprDatabaseNamePattern();
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory2.isFtfb(false);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions10 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.miAuthMetaOptions(
        authMetaOptions10);
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory9.wihadsBackupEnvironmentFactory(
        (int) (byte) -1, "");
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(databaseNamePattern7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory14);
  }

  @Test
  public void test0180() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0180");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.GdbIdRepo gdbIdRepo1 = new io.github.onograph.backup.GdbIdRepo(
        fileSystemAbstraction0);
    org.neo4j.kernel.database.DatabaseId databaseId2 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory3 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory5 = factory3.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory6.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory6.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory12.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory12.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment18 = factory12.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern19 = backupEnvironment18.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress20 = backupEnvironment18.getSocketAddress();
    java.nio.file.Path path21 = backupEnvironment18.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory3.pbPath(path21);
    try {
      gdbIdRepo1.wrdaiForDaPa(databaseId2, path21);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory3);
    org.junit.Assert.assertNotNull(factory5);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(backupEnvironment18);
    org.junit.Assert.assertNotNull(databaseNamePattern19);
    org.junit.Assert.assertNotNull(socketAddress20);
    org.junit.Assert.assertNotNull(path21);
    org.junit.Assert.assertNotNull(factory22);
  }

  @Test
  public void test0181() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0181");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.logging.LogProvider logProvider5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator2.itraLogProvider(
        logProvider5);
    org.neo4j.logging.LogProvider logProvider7 = null;
    io.github.onograph.backup.BackupRunner.Generator generator8 = generator6.uLogProvider(
        logProvider7);
    io.github.onograph.backup.BackupRunner backupRunner9 = generator6.bulBackupRunner();
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory10.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory10.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory10.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory16.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory16.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment22 = factory16.bulBackupEnvironment();
    org.neo4j.memory.MemoryTracker memoryTracker23 = backupEnvironment22.getMemoryTracker();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern24 = backupEnvironment22.getDatabaseNamePattern();
    boolean boolean25 = backupEnvironment22.getIsBftf();
    try {
      backupRunner9.excebcpForBa(backupEnvironment22);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(generator8);
    org.junit.Assert.assertNotNull(backupRunner9);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(backupEnvironment22);
    org.junit.Assert.assertNotNull(memoryTracker23);
    org.junit.Assert.assertNotNull(databaseNamePattern24);
    org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
  }

  @Test
  public void test0182() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0182");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.logging.LogProvider logProvider5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator2.itraLogProvider(
        logProvider5);
    io.github.onograph.backup.BackupRunner backupRunner7 = generator6.bulBackupRunner();
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    java.nio.file.Path path11 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory8.prPath(path11);
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory8.isSicc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment backupEnvironment15 = factory8.bulBackupEnvironment();
    try {
      backupRunner7.excebcpForBa(backupEnvironment15);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(backupRunner7);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(backupEnvironment15);
  }

  @Test
  public void test0183() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0183");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.config(config5);
    org.neo4j.configuration.helpers.SocketAddress socketAddress7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress7);
    org.neo4j.configuration.helpers.SocketAddress socketAddress9 = factory4.getSocketAddress();
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory4.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config13 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory12.config(config13);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory14.isRp(true);
    org.neo4j.configuration.Config config17 = factory14.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory14.isCc(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory20.isCc(false);
    java.nio.file.Path path23 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory20.prPath(path23);
    java.nio.file.Path path25 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory24.prPath(path25);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory27.isCc(false);
    java.nio.file.Path path30 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory27.prPath(path30);
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config33 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory32.config(config33);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory34.isRp(true);
    org.neo4j.configuration.Config config37 = factory34.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = factory27.config(config37);
    io.github.onograph.backup.BackupEnvironment.Factory factory39 = factory26.config(config37);
    io.github.onograph.backup.BackupEnvironment.Factory factory40 = factory19.config(config37);
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory11.config(config37);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction42 = null;
    org.neo4j.logging.LogProvider logProvider43 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer44 = null;
    org.neo4j.time.SystemNanoClock systemNanoClock45 = null;
    try {
      io.github.onograph.backup.DefaultBackupServiceHandler defaultBackupServiceHandler46 = io.github.onograph.backup.DefaultBackupServiceHandler.strliclDefaultBackupServiceHandler(
          config37, fileSystemAbstraction42, logProvider43, pageCacheTracer44, systemNanoClock45);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNull(socketAddress9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(config17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(config37);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(factory39);
    org.junit.Assert.assertNotNull(factory40);
    org.junit.Assert.assertNotNull(factory41);
  }

  @Test
  public void test0184() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0184");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.logging.LogProvider logProvider5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator2.itraLogProvider(
        logProvider5);
    org.neo4j.time.SystemNanoClock systemNanoClock7 = null;
    io.github.onograph.backup.BackupRunner.Generator generator8 = generator6.systemNanoClock(
        systemNanoClock7);
    org.neo4j.logging.LogProvider logProvider9 = null;
    io.github.onograph.backup.BackupRunner.Generator generator10 = generator6.itraLogProvider(
        logProvider9);
    org.neo4j.logging.LogProvider logProvider11 = null;
    io.github.onograph.backup.BackupRunner.Generator generator12 = generator10.uLogProvider(
        logProvider11);
    org.neo4j.time.SystemNanoClock systemNanoClock13 = null;
    io.github.onograph.backup.BackupRunner.Generator generator14 = generator12.systemNanoClock(
        systemNanoClock13);
    org.neo4j.time.SystemNanoClock systemNanoClock15 = null;
    io.github.onograph.backup.BackupRunner.Generator generator16 = generator14.systemNanoClock(
        systemNanoClock15);
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(generator8);
    org.junit.Assert.assertNotNull(generator10);
    org.junit.Assert.assertNotNull(generator12);
    org.junit.Assert.assertNotNull(generator14);
    org.junit.Assert.assertNotNull(generator16);
  }

  @Test
  public void test0185() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0185");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    java.nio.file.Path path3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.prPath(path3);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isSicc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isSicc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isFtfb(false);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
  }

  @Test
  public void test0186() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0186");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    org.neo4j.configuration.helpers.SocketAddress socketAddress3 = factory0.getSocketAddress();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNull(socketAddress3);
  }

  @Test
  public void test0187() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0187");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupIOService backupIOService1 = new io.github.onograph.backup.BackupIOService(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory8.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment14 = factory8.bulBackupEnvironment();
    boolean boolean15 = backupEnvironment14.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional16 = backupEnvironment14.geicmaOptional();
    java.nio.file.Path path17 = backupEnvironment14.getPbPath();
    java.nio.file.Path path18 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path17);
    java.nio.file.Path path19 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path18);
    boolean boolean20 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path19);
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory21.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory21.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory21.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory27.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory27.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment33 = factory27.bulBackupEnvironment();
    boolean boolean34 = backupEnvironment33.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional35 = backupEnvironment33.geicmaOptional();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional36 = backupEnvironment33.geicmaOptional();
    java.nio.file.Path path37 = backupEnvironment33.getPbPath();
    java.nio.file.Path path38 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path37);
    io.github.onograph.backup.FileMoverService fileMoverService39 = io.github.onograph.backup.FileMoverService.movifeseFileMoverService(
        path19, path38);
    try {
      backupIOService1.deedForPa(path19);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(backupEnvironment14);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional16);
    org.junit.Assert.assertNotNull(path17);
    org.junit.Assert.assertNotNull(path18);
    org.junit.Assert.assertNotNull(path19);
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(backupEnvironment33);
    org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional35);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional36);
    org.junit.Assert.assertNotNull(path37);
    org.junit.Assert.assertNotNull(path38);
    org.junit.Assert.assertNotNull(fileMoverService39);
  }

  @Test
  public void test0188() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0188");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.config(config5);
    org.neo4j.configuration.helpers.SocketAddress socketAddress7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress7);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory8.wihadsBackupEnvironmentFactory(
        0, "");
    try {
      io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory8.databaseNamePattern(
          "");
      org.junit.Assert.fail(
          "Expected exception of type java.lang.IllegalArgumentException; message: The provided database name is empty.");
    } catch (java.lang.IllegalArgumentException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory11);
  }

  @Test
  public void test0189() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0189");
    }
    io.github.onograph.backup.BackupMetaDTO backupMetaDTO0 = null;
    java.util.List<java.lang.String> strList1 = null;
    try {
      io.github.onograph.backup.BackupMetaService.wrtmedaForBaLi(backupMetaDTO0, strList1);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test0190() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0190");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupIOService backupIOService1 = new io.github.onograph.backup.BackupIOService(
        fileSystemAbstraction0);
    org.neo4j.io.layout.DatabaseLayout databaseLayout2 = null;
    io.github.onograph.cluster.raft.module.cuprot.scmeta.StoreResources storeResources3 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction4 = null;
    io.github.onograph.backup.GdbIdRepo gdbIdRepo5 = new io.github.onograph.backup.GdbIdRepo(
        fileSystemAbstraction4);
    org.neo4j.logging.LogProvider logProvider6 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer7 = null;
    io.github.onograph.backup.BackupMetadataRepository backupMetadataRepository8 = null;
    try {
      io.github.onograph.backup.BackupMetaDTO backupMetaDTO9 = new io.github.onograph.backup.BackupMetaDTO(
          backupIOService1, databaseLayout2, storeResources3, gdbIdRepo5, logProvider6,
          pageCacheTracer7, backupMetadataRepository8);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test0191() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0191");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.config(config5);
    org.neo4j.configuration.helpers.SocketAddress socketAddress7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress7);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isSicc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory8.isSicc(
        (java.lang.Boolean) true);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
  }

  @Test
  public void test0192() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0192");
    }
    io.github.onograph.backup.CommandProviderGdbRestorerCommandImpl commandProviderGdbRestorerCommandImpl0 = new io.github.onograph.backup.CommandProviderGdbRestorerCommandImpl();
    int int1 = commandProviderGdbRestorerCommandImpl0.getPriority();
    org.neo4j.cli.Command.CommandType commandType2 = commandProviderGdbRestorerCommandImpl0.commandType();
    org.neo4j.cli.Command.CommandType commandType3 = commandProviderGdbRestorerCommandImpl0.commandType();
    org.neo4j.cli.ExecutionContext executionContext4 = null;
    try {
      io.github.onograph.backup.GdbRestorerCommand gdbRestorerCommand5 = commandProviderGdbRestorerCommandImpl0.createCommand(
          executionContext4);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    org.junit.Assert.assertTrue(
        "'" + commandType2 + "' != '" + org.neo4j.cli.Command.CommandType.RESTORE_DB + "'",
        commandType2.equals(org.neo4j.cli.Command.CommandType.RESTORE_DB));
    org.junit.Assert.assertTrue(
        "'" + commandType3 + "' != '" + org.neo4j.cli.Command.CommandType.RESTORE_DB + "'",
        commandType3.equals(org.neo4j.cli.Command.CommandType.RESTORE_DB));
  }

  @Test
  public void test0193() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0193");
    }
    io.github.onograph.backup.SetupForBackupRestorationCommandProvider setupForBackupRestorationCommandProvider0 = new io.github.onograph.backup.SetupForBackupRestorationCommandProvider();
    int int1 = setupForBackupRestorationCommandProvider0.getPriority();
    int int2 = setupForBackupRestorationCommandProvider0.getPriority();
    org.neo4j.cli.Command.CommandType commandType3 = setupForBackupRestorationCommandProvider0.commandType();
    int int4 = setupForBackupRestorationCommandProvider0.getPriority();
    org.neo4j.cli.ExecutionContext executionContext5 = null;
    try {
      io.github.onograph.backup.SetupForBackupRestorationCommand setupForBackupRestorationCommand6 = setupForBackupRestorationCommandProvider0.createCommand(
          executionContext5);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    org.junit.Assert.assertTrue(
        "'" + commandType3 + "' != '" + org.neo4j.cli.Command.CommandType.PREPARE_RESTORE + "'",
        commandType3.equals(org.neo4j.cli.Command.CommandType.PREPARE_RESTORE));
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
  }

  @Test
  public void test0194() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0194");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory6.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isSicc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory14.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory14.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory14.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory20.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory20.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment26 = factory20.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern27 = backupEnvironment26.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress28 = backupEnvironment26.getSocketAddress();
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory11.wihadsBackupEnvironmentFactory(
        socketAddress28);
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern30 = factory29.gedtenprDatabaseNamePattern();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(backupEnvironment26);
    org.junit.Assert.assertNotNull(databaseNamePattern27);
    org.junit.Assert.assertNotNull(socketAddress28);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(databaseNamePattern30);
  }

  @Test
  public void test0195() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0195");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = factory2.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory2.isCc(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    java.nio.file.Path path11 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory8.prPath(path11);
    java.nio.file.Path path13 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory12.prPath(path13);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory15.isCc(false);
    java.nio.file.Path path18 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory15.prPath(path18);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config21 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory20.config(config21);
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory22.isRp(true);
    org.neo4j.configuration.Config config25 = factory22.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory15.config(config25);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory14.config(config25);
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = factory7.config(config25);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction29 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory30.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory30.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory30.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = factory36.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory36.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment42 = factory36.bulBackupEnvironment();
    boolean boolean43 = backupEnvironment42.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional44 = backupEnvironment42.geicmaOptional();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern45 = backupEnvironment42.getDatabaseNamePattern();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional46 = backupEnvironment42.geicmaOptional();
    org.neo4j.memory.MemoryTracker memoryTracker47 = backupEnvironment42.getMemoryTracker();
    org.neo4j.io.pagecache.PageCache pageCache48 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager49 = new io.github.onograph.backup.BackupRestorationManager(
        config25, fileSystemAbstraction29, memoryTracker47, pageCache48);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction50 = null;
    io.github.onograph.cluster.raft.module.cuprot.LifecycleCatchupManagerImpl lifecycleCatchupManagerImpl51 = null;
    org.neo4j.scheduler.JobScheduler jobScheduler52 = null;
    org.neo4j.logging.LogProvider logProvider53 = null;
    org.neo4j.monitoring.Monitors monitors54 = null;
    org.neo4j.io.pagecache.PageCache pageCache55 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer56 = null;
    org.neo4j.time.SystemNanoClock systemNanoClock57 = null;
    try {
      io.github.onograph.backup.RemoteBackupManager remoteBackupManager58 = new io.github.onograph.backup.RemoteBackupManager(
          config25, fileSystemAbstraction50, lifecycleCatchupManagerImpl51, jobScheduler52,
          logProvider53, monitors54, pageCache55, pageCacheTracer56, systemNanoClock57);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(config5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(config25);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(backupEnvironment42);
    org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional44);
    org.junit.Assert.assertNotNull(databaseNamePattern45);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional46);
    org.junit.Assert.assertNotNull(memoryTracker47);
  }

  @Test
  public void test0196() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0196");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = factory2.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory2.isCc(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    java.nio.file.Path path11 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory8.prPath(path11);
    java.nio.file.Path path13 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory12.prPath(path13);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory15.isCc(false);
    java.nio.file.Path path18 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory15.prPath(path18);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config21 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory20.config(config21);
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory22.isRp(true);
    org.neo4j.configuration.Config config25 = factory22.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory15.config(config25);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory14.config(config25);
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = factory7.config(config25);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction29 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory30.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory30.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory30.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = factory36.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory36.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment42 = factory36.bulBackupEnvironment();
    org.neo4j.memory.MemoryTracker memoryTracker43 = backupEnvironment42.getMemoryTracker();
    org.neo4j.io.pagecache.PageCache pageCache44 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager45 = new io.github.onograph.backup.BackupRestorationManager(
        config25, fileSystemAbstraction29, memoryTracker43, pageCache44);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction46 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = factory47.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory51 = factory47.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory53 = factory47.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory55 = factory53.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory58 = factory53.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment59 = factory53.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern60 = backupEnvironment59.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress61 = backupEnvironment59.getSocketAddress();
    java.nio.file.Path path62 = backupEnvironment59.getRpPath();
    boolean boolean63 = backupEnvironment59.getIsBftf();
    java.nio.file.Path path64 = backupEnvironment59.getRpPath();
    org.neo4j.memory.MemoryTracker memoryTracker65 = backupEnvironment59.getMemoryTracker();
    org.neo4j.io.pagecache.PageCache pageCache66 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager67 = new io.github.onograph.backup.BackupRestorationManager(
        config25, fileSystemAbstraction46, memoryTracker65, pageCache66);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction68 = null;
    org.neo4j.logging.LogProvider logProvider69 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer70 = null;
    org.neo4j.time.SystemNanoClock systemNanoClock71 = null;
    try {
      io.github.onograph.backup.DefaultBackupServiceHandler defaultBackupServiceHandler72 = io.github.onograph.backup.DefaultBackupServiceHandler.strliclDefaultBackupServiceHandler(
          config25, fileSystemAbstraction68, logProvider69, pageCacheTracer70, systemNanoClock71);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(config5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(config25);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(backupEnvironment42);
    org.junit.Assert.assertNotNull(memoryTracker43);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory49);
    org.junit.Assert.assertNotNull(factory51);
    org.junit.Assert.assertNotNull(factory53);
    org.junit.Assert.assertNotNull(factory55);
    org.junit.Assert.assertNotNull(factory58);
    org.junit.Assert.assertNotNull(backupEnvironment59);
    org.junit.Assert.assertNotNull(databaseNamePattern60);
    org.junit.Assert.assertNotNull(socketAddress61);
    org.junit.Assert.assertNotNull(path62);
    org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    org.junit.Assert.assertNotNull(path64);
    org.junit.Assert.assertNotNull(memoryTracker65);
  }

  @Test
  public void test0197() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0197");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory6.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment12 = factory6.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern13 = backupEnvironment12.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress14 = backupEnvironment12.getSocketAddress();
    java.nio.file.Path path15 = backupEnvironment12.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory16.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory16.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory16.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory22.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory22.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment28 = factory22.bulBackupEnvironment();
    boolean boolean29 = backupEnvironment28.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional30 = backupEnvironment28.geicmaOptional();
    java.nio.file.Path path31 = backupEnvironment28.getPbPath();
    java.nio.file.Path path32 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path31);
    java.nio.file.Path path33 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path32);
    boolean boolean34 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path33);
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = factory35.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory39 = factory35.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory35.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = factory41.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory46 = factory41.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment47 = factory41.bulBackupEnvironment();
    boolean boolean48 = backupEnvironment47.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional49 = backupEnvironment47.geicmaOptional();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional50 = backupEnvironment47.geicmaOptional();
    java.nio.file.Path path51 = backupEnvironment47.getPbPath();
    java.nio.file.Path path52 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path51);
    io.github.onograph.backup.FileMoverService fileMoverService53 = io.github.onograph.backup.FileMoverService.movifeseFileMoverService(
        path33, path52);
    io.github.onograph.backup.FileMoverService fileMoverService54 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path15, path33);
    io.github.onograph.backup.BackupEnvironment.Factory factory55 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory57 = factory55.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory59 = factory55.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory61 = factory55.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory63 = factory61.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory66 = factory61.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment67 = factory61.bulBackupEnvironment();
    boolean boolean68 = backupEnvironment67.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional69 = backupEnvironment67.geicmaOptional();
    java.nio.file.Path path70 = backupEnvironment67.getPbPath();
    java.nio.file.Path path71 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path70);
    java.nio.file.Path path72 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path71);
    boolean boolean73 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path72);
    java.nio.file.Path path74 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path72);
    java.nio.file.Path path75 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path74);
    io.github.onograph.backup.BackupEnvironment.Factory factory76 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory78 = factory76.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory80 = factory76.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory82 = factory76.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory84 = factory82.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory87 = factory82.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment88 = factory82.bulBackupEnvironment();
    boolean boolean89 = backupEnvironment88.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional90 = backupEnvironment88.geicmaOptional();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional91 = backupEnvironment88.geicmaOptional();
    java.nio.file.Path path92 = backupEnvironment88.getPbPath();
    java.nio.file.Path path93 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path92);
    io.github.onograph.backup.FileMoverService fileMoverService94 = io.github.onograph.backup.FileMoverService.movifeseFileMoverService(
        path74, path92);
    java.nio.file.CopyOption[] copyOptionArray95 = new java.nio.file.CopyOption[]{};
    try {
      fileMoverService54.movForPaCo(path92, copyOptionArray95);
      org.junit.Assert.fail(
          "Expected exception of type java.nio.file.FileAlreadyExistsException; message: ./../..");
    } catch (java.nio.file.FileAlreadyExistsException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(backupEnvironment12);
    org.junit.Assert.assertNotNull(databaseNamePattern13);
    org.junit.Assert.assertNotNull(socketAddress14);
    org.junit.Assert.assertNotNull(path15);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(backupEnvironment28);
    org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional30);
    org.junit.Assert.assertNotNull(path31);
    org.junit.Assert.assertNotNull(path32);
    org.junit.Assert.assertNotNull(path33);
    org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(factory39);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory46);
    org.junit.Assert.assertNotNull(backupEnvironment47);
    org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional49);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional50);
    org.junit.Assert.assertNotNull(path51);
    org.junit.Assert.assertNotNull(path52);
    org.junit.Assert.assertNotNull(fileMoverService53);
    org.junit.Assert.assertNotNull(fileMoverService54);
    org.junit.Assert.assertNotNull(factory55);
    org.junit.Assert.assertNotNull(factory57);
    org.junit.Assert.assertNotNull(factory59);
    org.junit.Assert.assertNotNull(factory61);
    org.junit.Assert.assertNotNull(factory63);
    org.junit.Assert.assertNotNull(factory66);
    org.junit.Assert.assertNotNull(backupEnvironment67);
    org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional69);
    org.junit.Assert.assertNotNull(path70);
    org.junit.Assert.assertNotNull(path71);
    org.junit.Assert.assertNotNull(path72);
    org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    org.junit.Assert.assertNotNull(path74);
    org.junit.Assert.assertNotNull(path75);
    org.junit.Assert.assertNotNull(factory76);
    org.junit.Assert.assertNotNull(factory78);
    org.junit.Assert.assertNotNull(factory80);
    org.junit.Assert.assertNotNull(factory82);
    org.junit.Assert.assertNotNull(factory84);
    org.junit.Assert.assertNotNull(factory87);
    org.junit.Assert.assertNotNull(backupEnvironment88);
    org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional90);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional91);
    org.junit.Assert.assertNotNull(path92);
    org.junit.Assert.assertNotNull(path93);
    org.junit.Assert.assertNotNull(fileMoverService94);
    org.junit.Assert.assertNotNull(copyOptionArray95);
  }

  @Test
  public void test0198() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0198");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.config(config5);
    org.neo4j.configuration.helpers.SocketAddress socketAddress7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress7);
    org.neo4j.configuration.helpers.SocketAddress socketAddress9 = factory4.getSocketAddress();
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory4.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isIcc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment backupEnvironment14 = factory13.bulBackupEnvironment();
    try {
      io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory13.databaseNamePattern(
          "");
      org.junit.Assert.fail(
          "Expected exception of type java.lang.IllegalArgumentException; message: The provided database name is empty.");
    } catch (java.lang.IllegalArgumentException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNull(socketAddress9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(backupEnvironment14);
  }

  @Test
  public void test0199() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0199");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isSicc(
        (java.lang.Boolean) true);
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern9 = factory8.gedtenprDatabaseNamePattern();
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory8.isRp(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory12.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory12.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory12.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory18.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory18.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment24 = factory18.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern25 = backupEnvironment24.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress26 = backupEnvironment24.getSocketAddress();
    java.nio.file.Path path27 = backupEnvironment24.getRpPath();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction28 = null;
    io.github.onograph.backup.FileMover fileMover29 = new io.github.onograph.backup.FileMover(
        fileSystemAbstraction28);
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory30.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory30.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory30.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = factory36.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory36.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment42 = factory36.bulBackupEnvironment();
    boolean boolean43 = backupEnvironment42.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional44 = backupEnvironment42.geicmaOptional();
    java.nio.file.Path path45 = backupEnvironment42.getPbPath();
    java.nio.file.Path path46 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path45);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream47 = fileMover29._trrfrmnStream(
        path45);
    io.github.onograph.backup.BackupEnvironment.Factory factory48 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory50 = factory48.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory51 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory53 = factory51.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory55 = factory51.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory57 = factory51.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory59 = factory57.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory62 = factory57.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment63 = factory57.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern64 = backupEnvironment63.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress65 = backupEnvironment63.getSocketAddress();
    java.nio.file.Path path66 = backupEnvironment63.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory67 = factory48.pbPath(path66);
    io.github.onograph.backup.BackupEnvironment.Factory factory68 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory70 = factory68.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory71 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory73 = factory71.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory75 = factory71.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory77 = factory71.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory79 = factory77.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory82 = factory77.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment83 = factory77.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern84 = backupEnvironment83.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress85 = backupEnvironment83.getSocketAddress();
    java.nio.file.Path path86 = backupEnvironment83.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory87 = factory68.pbPath(path86);
    io.github.onograph.backup.FileMoverService fileMoverService88 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path66, path86);
    java.nio.file.Path path89 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path66);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream90 = fileMover29._trrfrmnStream(
        path89);
    io.github.onograph.backup.FileMoverService fileMoverService91 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path27, path89);
    io.github.onograph.backup.BackupEnvironment.Factory factory92 = factory11.prPath(path27);
    org.neo4j.logging.LogProvider logProvider93 = null;
    org.neo4j.io.pagecache.PageCache pageCache94 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer95 = null;
    try {
      io.github.onograph.backup.BackupMetaService backupMetaService96 = new io.github.onograph.backup.BackupMetaService(
          fileSystemAbstraction0, "hi!", path27, logProvider93, pageCache94, pageCacheTracer95);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(databaseNamePattern9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(backupEnvironment24);
    org.junit.Assert.assertNotNull(databaseNamePattern25);
    org.junit.Assert.assertNotNull(socketAddress26);
    org.junit.Assert.assertNotNull(path27);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(backupEnvironment42);
    org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional44);
    org.junit.Assert.assertNotNull(path45);
    org.junit.Assert.assertNotNull(path46);
    org.junit.Assert.assertNotNull(fileMoverServiceStream47);
    org.junit.Assert.assertNotNull(factory48);
    org.junit.Assert.assertNotNull(factory50);
    org.junit.Assert.assertNotNull(factory51);
    org.junit.Assert.assertNotNull(factory53);
    org.junit.Assert.assertNotNull(factory55);
    org.junit.Assert.assertNotNull(factory57);
    org.junit.Assert.assertNotNull(factory59);
    org.junit.Assert.assertNotNull(factory62);
    org.junit.Assert.assertNotNull(backupEnvironment63);
    org.junit.Assert.assertNotNull(databaseNamePattern64);
    org.junit.Assert.assertNotNull(socketAddress65);
    org.junit.Assert.assertNotNull(path66);
    org.junit.Assert.assertNotNull(factory67);
    org.junit.Assert.assertNotNull(factory68);
    org.junit.Assert.assertNotNull(factory70);
    org.junit.Assert.assertNotNull(factory71);
    org.junit.Assert.assertNotNull(factory73);
    org.junit.Assert.assertNotNull(factory75);
    org.junit.Assert.assertNotNull(factory77);
    org.junit.Assert.assertNotNull(factory79);
    org.junit.Assert.assertNotNull(factory82);
    org.junit.Assert.assertNotNull(backupEnvironment83);
    org.junit.Assert.assertNotNull(databaseNamePattern84);
    org.junit.Assert.assertNotNull(socketAddress85);
    org.junit.Assert.assertNotNull(path86);
    org.junit.Assert.assertNotNull(factory87);
    org.junit.Assert.assertNotNull(fileMoverService88);
    org.junit.Assert.assertNotNull(path89);
    org.junit.Assert.assertNotNull(fileMoverServiceStream90);
    org.junit.Assert.assertNotNull(fileMoverService91);
    org.junit.Assert.assertNotNull(factory92);
  }

  @Test
  public void test0200() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0200");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup(
        "database.id");
    io.github.onograph.backup.Backup backup3 = backup1.isBftf(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory5 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory5.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory5.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory5.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory11.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment17 = factory11.bulBackupEnvironment();
    boolean boolean18 = backupEnvironment17.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional19 = backupEnvironment17.geicmaOptional();
    java.nio.file.Path path20 = backupEnvironment17.getPbPath();
    java.nio.file.Path path21 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path20);
    java.nio.file.Path path22 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path21);
    java.nio.file.Path path23 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path21);
    try {
      io.github.onograph.backup.Backup.BackupRespState backupRespState24 = backup1.bakBackupBackupRespState(
          "hi!", path21);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.RuntimeException; message: *** Error:  3b02b00a-232a-454b-823b-025cc97a58b8");
    } catch (java.lang.RuntimeException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(backup3);
    org.junit.Assert.assertNotNull(factory5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(backupEnvironment17);
    org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional19);
    org.junit.Assert.assertNotNull(path20);
    org.junit.Assert.assertNotNull(path21);
    org.junit.Assert.assertNotNull(path22);
    org.junit.Assert.assertNotNull(path23);
  }

  @Test
  public void test0201() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0201");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    java.nio.file.Path path3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.prPath(path3);
    org.neo4j.configuration.helpers.SocketAddress socketAddress5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress5);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory6.wihadsBackupEnvironmentFactory(
        (int) (byte) 1, "");
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory9);
  }

  @Test
  public void test0202() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0202");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.config(config5);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.isSicc(
        (java.lang.Boolean) true);
    try {
      io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.databaseNamePattern(
          "");
      org.junit.Assert.fail(
          "Expected exception of type java.lang.IllegalArgumentException; message: The provided database name is empty.");
    } catch (java.lang.IllegalArgumentException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
  }

  @Test
  public void test0203() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0203");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    java.nio.file.Path path5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.prPath(path5);
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern7 = factory6.gedtenprDatabaseNamePattern();
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory6.isRp(false);
    java.nio.file.Path path10 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory6.pbPath(path10);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory12.isCc(false);
    java.nio.file.Path path15 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory12.prPath(path15);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config18 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory17.config(config18);
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory19.isRp(true);
    org.neo4j.configuration.Config config22 = factory19.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory12.config(config22);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction24 = null;
    org.neo4j.configuration.Config config25 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction26 = null;
    java.nio.file.Path[] pathArray27 = new java.nio.file.Path[]{};
    java.util.LinkedHashSet<java.nio.file.Path> pathSet28 = new java.util.LinkedHashSet<java.nio.file.Path>();
    boolean boolean29 = java.util.Collections.addAll(
        (java.util.Collection<java.nio.file.Path>) pathSet28, pathArray27);
    io.github.onograph.backup.BackupRestoreMeta backupRestoreMeta30 = new io.github.onograph.backup.BackupRestoreMeta(
        config25, fileSystemAbstraction26, (java.util.Set<java.nio.file.Path>) pathSet28);
    io.github.onograph.backup.BackupRestoreMeta backupRestoreMeta31 = new io.github.onograph.backup.BackupRestoreMeta(
        config22, fileSystemAbstraction24, (java.util.Set<java.nio.file.Path>) pathSet28);
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory6.config(config22);
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory32.isSicc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = factory35.isCc(false);
    java.nio.file.Path path38 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory39 = factory35.prPath(path38);
    org.neo4j.configuration.helpers.SocketAddress socketAddress40 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory39.wihadsBackupEnvironmentFactory(
        socketAddress40);
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = factory39.isSicc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory44 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory46 = factory44.isCc(false);
    java.nio.file.Path path47 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory48 = factory44.prPath(path47);
    io.github.onograph.backup.BackupEnvironment.Factory factory50 = factory48.isRp(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory51 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config52 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory53 = factory51.config(config52);
    io.github.onograph.backup.BackupEnvironment.Factory factory55 = factory53.isRp(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory57 = factory53.isSicc(
        (java.lang.Boolean) true);
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern58 = factory53.gedtenprDatabaseNamePattern();
    io.github.onograph.backup.BackupEnvironment.Factory factory59 = factory50.databaseNamePattern(
        databaseNamePattern58);
    io.github.onograph.backup.BackupEnvironment.Factory factory60 = factory43.databaseNamePattern(
        databaseNamePattern58);
    io.github.onograph.backup.BackupEnvironment.Factory factory61 = factory32.databaseNamePattern(
        databaseNamePattern58);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(databaseNamePattern7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(config22);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(pathArray27);
    org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(factory39);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory44);
    org.junit.Assert.assertNotNull(factory46);
    org.junit.Assert.assertNotNull(factory48);
    org.junit.Assert.assertNotNull(factory50);
    org.junit.Assert.assertNotNull(factory51);
    org.junit.Assert.assertNotNull(factory53);
    org.junit.Assert.assertNotNull(factory55);
    org.junit.Assert.assertNotNull(factory57);
    org.junit.Assert.assertNotNull(databaseNamePattern58);
    org.junit.Assert.assertNotNull(factory59);
    org.junit.Assert.assertNotNull(factory60);
    org.junit.Assert.assertNotNull(factory61);
  }

  @Test
  public void test0204() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0204");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    java.nio.file.Path path5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.prPath(path5);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isIcc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory6.isGcc(
        (java.lang.Boolean) true);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
  }

  @Test
  public void test0205() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0205");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    java.io.PrintStream printStream3 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction4 = null;
    io.github.onograph.backup.FileMover fileMover5 = new io.github.onograph.backup.FileMover(
        fileSystemAbstraction4);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    io.github.onograph.backup.FileMover fileMover7 = new io.github.onograph.backup.FileMover(
        fileSystemAbstraction6);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory8.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory8.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory14.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory14.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment20 = factory14.bulBackupEnvironment();
    boolean boolean21 = backupEnvironment20.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional22 = backupEnvironment20.geicmaOptional();
    java.nio.file.Path path23 = backupEnvironment20.getPbPath();
    java.nio.file.Path path24 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path23);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream25 = fileMover7._trrfrmnStream(
        path23);
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = factory26.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory29.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory29.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = factory29.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = factory35.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory40 = factory35.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment41 = factory35.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern42 = backupEnvironment41.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress43 = backupEnvironment41.getSocketAddress();
    java.nio.file.Path path44 = backupEnvironment41.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = factory26.pbPath(path44);
    io.github.onograph.backup.BackupEnvironment.Factory factory46 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory48 = factory46.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory51 = factory49.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory53 = factory49.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory55 = factory49.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory57 = factory55.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory60 = factory55.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment61 = factory55.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern62 = backupEnvironment61.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress63 = backupEnvironment61.getSocketAddress();
    java.nio.file.Path path64 = backupEnvironment61.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory65 = factory46.pbPath(path64);
    io.github.onograph.backup.FileMoverService fileMoverService66 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path44, path64);
    java.nio.file.Path path67 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path44);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream68 = fileMover7._trrfrmnStream(
        path67);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream69 = fileMover5._trrfrmnStream(
        path67);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction70 = null;
    io.github.onograph.backup.FileMover fileMover71 = new io.github.onograph.backup.FileMover(
        fileSystemAbstraction70);
    io.github.onograph.backup.BackupEnvironment.Factory factory72 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory74 = factory72.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory76 = factory72.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory78 = factory72.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory80 = factory78.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory83 = factory78.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment84 = factory78.bulBackupEnvironment();
    boolean boolean85 = backupEnvironment84.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional86 = backupEnvironment84.geicmaOptional();
    java.nio.file.Path path87 = backupEnvironment84.getPbPath();
    java.nio.file.Path path88 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path87);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream89 = fileMover71._trrfrmnStream(
        path87);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream90 = fileMover5._trrfrmnStream(
        path87);
    boolean boolean91 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path87);
    java.nio.file.Path path92 = null;
    org.neo4j.io.layout.DatabaseLayout databaseLayout93 = null;
    try {
      io.github.onograph.backup.GdbRestorer gdbRestorer94 = new io.github.onograph.backup.GdbRestorer(
          fileSystemAbstraction0, true, true, printStream3, path87, path92, databaseLayout93);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(backupEnvironment20);
    org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional22);
    org.junit.Assert.assertNotNull(path23);
    org.junit.Assert.assertNotNull(path24);
    org.junit.Assert.assertNotNull(fileMoverServiceStream25);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(factory40);
    org.junit.Assert.assertNotNull(backupEnvironment41);
    org.junit.Assert.assertNotNull(databaseNamePattern42);
    org.junit.Assert.assertNotNull(socketAddress43);
    org.junit.Assert.assertNotNull(path44);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory46);
    org.junit.Assert.assertNotNull(factory48);
    org.junit.Assert.assertNotNull(factory49);
    org.junit.Assert.assertNotNull(factory51);
    org.junit.Assert.assertNotNull(factory53);
    org.junit.Assert.assertNotNull(factory55);
    org.junit.Assert.assertNotNull(factory57);
    org.junit.Assert.assertNotNull(factory60);
    org.junit.Assert.assertNotNull(backupEnvironment61);
    org.junit.Assert.assertNotNull(databaseNamePattern62);
    org.junit.Assert.assertNotNull(socketAddress63);
    org.junit.Assert.assertNotNull(path64);
    org.junit.Assert.assertNotNull(factory65);
    org.junit.Assert.assertNotNull(fileMoverService66);
    org.junit.Assert.assertNotNull(path67);
    org.junit.Assert.assertNotNull(fileMoverServiceStream68);
    org.junit.Assert.assertNotNull(fileMoverServiceStream69);
    org.junit.Assert.assertNotNull(factory72);
    org.junit.Assert.assertNotNull(factory74);
    org.junit.Assert.assertNotNull(factory76);
    org.junit.Assert.assertNotNull(factory78);
    org.junit.Assert.assertNotNull(factory80);
    org.junit.Assert.assertNotNull(factory83);
    org.junit.Assert.assertNotNull(backupEnvironment84);
    org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional86);
    org.junit.Assert.assertNotNull(path87);
    org.junit.Assert.assertNotNull(path88);
    org.junit.Assert.assertNotNull(fileMoverServiceStream89);
    org.junit.Assert.assertNotNull(fileMoverServiceStream90);
    org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
  }

  @Test
  public void test0206() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0206");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    java.nio.file.Path path5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.prPath(path5);
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern7 = factory6.gedtenprDatabaseNamePattern();
    org.neo4j.configuration.Config config8 = factory6.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory6.isRp(true);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(databaseNamePattern7);
    org.junit.Assert.assertNotNull(config8);
    org.junit.Assert.assertNotNull(factory10);
  }

  @Test
  public void test0207() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0207");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    java.nio.file.Path path5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.prPath(path5);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.shouldPrep(false);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions9 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory6.miAuthMetaOptions(
        authMetaOptions9);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
  }

  @Test
  public void test0208() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0208");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupMetadataRepository backupMetadataRepository1 = new io.github.onograph.backup.BackupMetadataRepository(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isIcc(
        (java.lang.Boolean) true);
    java.nio.file.Path path9 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory2.pbPath(path9);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory11.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory11.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory17.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory17.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment23 = factory17.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern24 = backupEnvironment23.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress25 = backupEnvironment23.getSocketAddress();
    java.nio.file.Path path26 = backupEnvironment23.getRpPath();
    boolean boolean27 = backupEnvironment23.getIsBftf();
    java.nio.file.Path path28 = backupEnvironment23.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory10.prPath(path28);
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory30.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory30.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory30.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = factory36.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory36.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment42 = factory36.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern43 = backupEnvironment42.getDatabaseNamePattern();
    boolean boolean44 = backupEnvironment42.getIsBftf();
    boolean boolean45 = backupEnvironment42.getIsBftf();
    java.nio.file.Path path46 = backupEnvironment42.getRpPath();
    io.github.onograph.backup.FileMoverService fileMoverService47 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path28, path46);
    java.lang.String[] strArray50 = new java.lang.String[]{"", "hi!"};
    java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
    boolean boolean52 = java.util.Collections.addAll(
        (java.util.Collection<java.lang.String>) strList51, strArray50);
    try {
      backupMetadataRepository1.wrtForPaLi(path46, (java.util.List<java.lang.String>) strList51);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(backupEnvironment23);
    org.junit.Assert.assertNotNull(databaseNamePattern24);
    org.junit.Assert.assertNotNull(socketAddress25);
    org.junit.Assert.assertNotNull(path26);
    org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    org.junit.Assert.assertNotNull(path28);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(backupEnvironment42);
    org.junit.Assert.assertNotNull(databaseNamePattern43);
    org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    org.junit.Assert.assertNotNull(path46);
    org.junit.Assert.assertNotNull(fileMoverService47);
    org.junit.Assert.assertNotNull(strArray50);
    org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
  }

  @Test
  public void test0209() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0209");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = factory2.gecfConfig();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.memory.MemoryTracker memoryTracker7 = null;
    org.neo4j.io.pagecache.PageCache pageCache8 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager9 = new io.github.onograph.backup.BackupRestorationManager(
        config5, fileSystemAbstraction6, memoryTracker7, pageCache8);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction10 = null;
    org.neo4j.logging.LogProvider logProvider11 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer12 = null;
    org.neo4j.time.SystemNanoClock systemNanoClock13 = null;
    try {
      io.github.onograph.backup.DefaultBackupServiceHandler defaultBackupServiceHandler14 = io.github.onograph.backup.DefaultBackupServiceHandler.strliclDefaultBackupServiceHandler(
          config5, fileSystemAbstraction10, logProvider11, pageCacheTracer12, systemNanoClock13);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(config5);
  }

  @Test
  public void test0210() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0210");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory6.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment12 = factory6.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern13 = backupEnvironment12.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress14 = backupEnvironment12.getSocketAddress();
    java.nio.file.Path path15 = backupEnvironment12.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory16.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory16.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory16.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory22.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory22.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment28 = factory22.bulBackupEnvironment();
    boolean boolean29 = backupEnvironment28.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional30 = backupEnvironment28.geicmaOptional();
    java.nio.file.Path path31 = backupEnvironment28.getPbPath();
    java.nio.file.Path path32 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path31);
    java.nio.file.Path path33 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path32);
    boolean boolean34 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path33);
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = factory35.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory39 = factory35.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory35.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = factory41.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory46 = factory41.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment47 = factory41.bulBackupEnvironment();
    boolean boolean48 = backupEnvironment47.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional49 = backupEnvironment47.geicmaOptional();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional50 = backupEnvironment47.geicmaOptional();
    java.nio.file.Path path51 = backupEnvironment47.getPbPath();
    java.nio.file.Path path52 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path51);
    io.github.onograph.backup.FileMoverService fileMoverService53 = io.github.onograph.backup.FileMoverService.movifeseFileMoverService(
        path33, path52);
    io.github.onograph.backup.FileMoverService fileMoverService54 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path15, path33);
    io.github.onograph.backup.BackupEnvironment.Factory factory55 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory57 = factory55.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory59 = factory55.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory61 = factory55.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory63 = factory61.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory66 = factory61.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment67 = factory61.bulBackupEnvironment();
    boolean boolean68 = backupEnvironment67.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional69 = backupEnvironment67.geicmaOptional();
    java.nio.file.Path path70 = backupEnvironment67.getPbPath();
    java.nio.file.Path path71 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path70);
    java.nio.file.Path path72 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path71);
    boolean boolean73 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path72);
    io.github.onograph.backup.BackupEnvironment.Factory factory74 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory76 = factory74.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory78 = factory74.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory80 = factory74.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory82 = factory80.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory85 = factory80.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment86 = factory80.bulBackupEnvironment();
    boolean boolean87 = backupEnvironment86.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional88 = backupEnvironment86.geicmaOptional();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional89 = backupEnvironment86.geicmaOptional();
    java.nio.file.Path path90 = backupEnvironment86.getPbPath();
    java.nio.file.Path path91 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path90);
    io.github.onograph.backup.FileMoverService fileMoverService92 = io.github.onograph.backup.FileMoverService.movifeseFileMoverService(
        path72, path91);
    java.nio.file.CopyOption[] copyOptionArray93 = new java.nio.file.CopyOption[]{};
    try {
      fileMoverService54.movForPaCo(path72, copyOptionArray93);
      org.junit.Assert.fail(
          "Expected exception of type java.nio.file.NoSuchFileException; message: ./metadata_script.cypher/database.id/../..");
    } catch (java.nio.file.NoSuchFileException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(backupEnvironment12);
    org.junit.Assert.assertNotNull(databaseNamePattern13);
    org.junit.Assert.assertNotNull(socketAddress14);
    org.junit.Assert.assertNotNull(path15);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(backupEnvironment28);
    org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional30);
    org.junit.Assert.assertNotNull(path31);
    org.junit.Assert.assertNotNull(path32);
    org.junit.Assert.assertNotNull(path33);
    org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(factory39);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory46);
    org.junit.Assert.assertNotNull(backupEnvironment47);
    org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional49);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional50);
    org.junit.Assert.assertNotNull(path51);
    org.junit.Assert.assertNotNull(path52);
    org.junit.Assert.assertNotNull(fileMoverService53);
    org.junit.Assert.assertNotNull(fileMoverService54);
    org.junit.Assert.assertNotNull(factory55);
    org.junit.Assert.assertNotNull(factory57);
    org.junit.Assert.assertNotNull(factory59);
    org.junit.Assert.assertNotNull(factory61);
    org.junit.Assert.assertNotNull(factory63);
    org.junit.Assert.assertNotNull(factory66);
    org.junit.Assert.assertNotNull(backupEnvironment67);
    org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional69);
    org.junit.Assert.assertNotNull(path70);
    org.junit.Assert.assertNotNull(path71);
    org.junit.Assert.assertNotNull(path72);
    org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    org.junit.Assert.assertNotNull(factory74);
    org.junit.Assert.assertNotNull(factory76);
    org.junit.Assert.assertNotNull(factory78);
    org.junit.Assert.assertNotNull(factory80);
    org.junit.Assert.assertNotNull(factory82);
    org.junit.Assert.assertNotNull(factory85);
    org.junit.Assert.assertNotNull(backupEnvironment86);
    org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional88);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional89);
    org.junit.Assert.assertNotNull(path90);
    org.junit.Assert.assertNotNull(path91);
    org.junit.Assert.assertNotNull(fileMoverService92);
    org.junit.Assert.assertNotNull(copyOptionArray93);
  }

  @Test
  public void test0211() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0211");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup("hi!");
    java.io.OutputStream outputStream2 = null;
    try {
      io.github.onograph.backup.Backup backup3 = backup1.outputStream(outputStream2);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: outputStream");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
  }

  @Test
  public void test0212() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0212");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.GdbIdRepo gdbIdRepo1 = new io.github.onograph.backup.GdbIdRepo(
        fileSystemAbstraction0);
    org.neo4j.kernel.database.DatabaseId databaseId2 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory3 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config4 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory5 = factory3.config(config4);
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory5.isRp(true);
    org.neo4j.configuration.Config config8 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory7.config(config8);
    org.neo4j.configuration.helpers.SocketAddress socketAddress10 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory7.wihadsBackupEnvironmentFactory(
        socketAddress10);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory12.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory15.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory15.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory15.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory21.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory21.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment27 = factory21.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern28 = backupEnvironment27.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress29 = backupEnvironment27.getSocketAddress();
    java.nio.file.Path path30 = backupEnvironment27.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory12.pbPath(path30);
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory32.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = factory35.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory39 = factory35.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory35.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = factory41.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory46 = factory41.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment47 = factory41.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern48 = backupEnvironment47.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress49 = backupEnvironment47.getSocketAddress();
    java.nio.file.Path path50 = backupEnvironment47.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory51 = factory32.pbPath(path50);
    io.github.onograph.backup.FileMoverService fileMoverService52 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path30, path50);
    io.github.onograph.backup.BackupEnvironment.Factory factory53 = factory7.pbPath(path50);
    java.nio.file.Path path54 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path50);
    io.github.onograph.backup.BackupEnvironment.Factory factory55 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory57 = factory55.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory58 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory60 = factory58.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory62 = factory58.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory64 = factory58.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory66 = factory64.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory69 = factory64.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment70 = factory64.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern71 = backupEnvironment70.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress72 = backupEnvironment70.getSocketAddress();
    java.nio.file.Path path73 = backupEnvironment70.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory74 = factory55.pbPath(path73);
    io.github.onograph.backup.BackupEnvironment.Factory factory75 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory77 = factory75.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory78 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory80 = factory78.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory82 = factory78.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory84 = factory78.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory86 = factory84.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory89 = factory84.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment90 = factory84.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern91 = backupEnvironment90.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress92 = backupEnvironment90.getSocketAddress();
    java.nio.file.Path path93 = backupEnvironment90.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory94 = factory75.pbPath(path93);
    io.github.onograph.backup.FileMoverService fileMoverService95 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path73, path93);
    java.nio.file.Path path96 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path93);
    io.github.onograph.backup.FileMoverService fileMoverService97 = io.github.onograph.backup.FileMoverService.movifeseFileMoverService(
        path54, path93);
    try {
      gdbIdRepo1.wrdaiForDaPa(databaseId2, path54);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory3);
    org.junit.Assert.assertNotNull(factory5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(backupEnvironment27);
    org.junit.Assert.assertNotNull(databaseNamePattern28);
    org.junit.Assert.assertNotNull(socketAddress29);
    org.junit.Assert.assertNotNull(path30);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(factory39);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory46);
    org.junit.Assert.assertNotNull(backupEnvironment47);
    org.junit.Assert.assertNotNull(databaseNamePattern48);
    org.junit.Assert.assertNotNull(socketAddress49);
    org.junit.Assert.assertNotNull(path50);
    org.junit.Assert.assertNotNull(factory51);
    org.junit.Assert.assertNotNull(fileMoverService52);
    org.junit.Assert.assertNotNull(factory53);
    org.junit.Assert.assertNotNull(path54);
    org.junit.Assert.assertNotNull(factory55);
    org.junit.Assert.assertNotNull(factory57);
    org.junit.Assert.assertNotNull(factory58);
    org.junit.Assert.assertNotNull(factory60);
    org.junit.Assert.assertNotNull(factory62);
    org.junit.Assert.assertNotNull(factory64);
    org.junit.Assert.assertNotNull(factory66);
    org.junit.Assert.assertNotNull(factory69);
    org.junit.Assert.assertNotNull(backupEnvironment70);
    org.junit.Assert.assertNotNull(databaseNamePattern71);
    org.junit.Assert.assertNotNull(socketAddress72);
    org.junit.Assert.assertNotNull(path73);
    org.junit.Assert.assertNotNull(factory74);
    org.junit.Assert.assertNotNull(factory75);
    org.junit.Assert.assertNotNull(factory77);
    org.junit.Assert.assertNotNull(factory78);
    org.junit.Assert.assertNotNull(factory80);
    org.junit.Assert.assertNotNull(factory82);
    org.junit.Assert.assertNotNull(factory84);
    org.junit.Assert.assertNotNull(factory86);
    org.junit.Assert.assertNotNull(factory89);
    org.junit.Assert.assertNotNull(backupEnvironment90);
    org.junit.Assert.assertNotNull(databaseNamePattern91);
    org.junit.Assert.assertNotNull(socketAddress92);
    org.junit.Assert.assertNotNull(path93);
    org.junit.Assert.assertNotNull(factory94);
    org.junit.Assert.assertNotNull(fileMoverService95);
    org.junit.Assert.assertNotNull(path96);
    org.junit.Assert.assertNotNull(fileMoverService97);
  }

  @Test
  public void test0213() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0213");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator2.fFileSystemAbstraction(
        fileSystemAbstraction5);
    io.github.onograph.backup.BackupRunner backupRunner7 = generator6.bulBackupRunner();
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory8.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory8.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory14.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory14.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment20 = factory14.bulBackupEnvironment();
    org.neo4j.memory.MemoryTracker memoryTracker21 = backupEnvironment20.getMemoryTracker();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern22 = backupEnvironment20.getDatabaseNamePattern();
    boolean boolean23 = backupEnvironment20.getIsBftf();
    java.nio.file.Path path24 = backupEnvironment20.getRpPath();
    boolean boolean25 = backupEnvironment20.getIsRp();
    try {
      backupRunner7.excebcpForBa(backupEnvironment20);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(backupRunner7);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(backupEnvironment20);
    org.junit.Assert.assertNotNull(memoryTracker21);
    org.junit.Assert.assertNotNull(databaseNamePattern22);
    org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    org.junit.Assert.assertNotNull(path24);
    org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
  }

  @Test
  public void test0214() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0214");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup("");
    io.github.onograph.backup.Backup backup3 = backup1.isCc(true);
    io.github.onograph.backup.Backup backup5 = backup3.isCc(true);
    io.github.onograph.backup.Backup backup7 = backup5.isCc(true);
    io.github.onograph.backup.Backup backup9 = backup5.isCc(true);
    java.nio.file.Path path11 = null;
    try {
      io.github.onograph.backup.Backup.BackupRespState backupRespState12 = backup5.bakBackupBackupRespState(
          "database.id", path11);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: targetDirectory");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(backup3);
    org.junit.Assert.assertNotNull(backup5);
    org.junit.Assert.assertNotNull(backup7);
    org.junit.Assert.assertNotNull(backup9);
  }

  @Test
  public void test0215() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0215");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.config(config5);
    org.neo4j.configuration.helpers.SocketAddress socketAddress7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress7);
    org.neo4j.configuration.helpers.SocketAddress socketAddress9 = factory4.getSocketAddress();
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory4.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isIcc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory13.shouldPrep(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory15.isCc(false);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNull(socketAddress9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
  }

  @Test
  public void test0216() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0216");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.logging.LogProvider logProvider5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator2.itraLogProvider(
        logProvider5);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction7 = null;
    io.github.onograph.backup.BackupRunner.Generator generator8 = generator2.fFileSystemAbstraction(
        fileSystemAbstraction7);
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory9 = null;
    io.github.onograph.backup.BackupRunner.Generator generator10 = generator2.progressMonitorFactory(
        progressMonitorFactory9);
    io.github.onograph.backup.BackupRunner backupRunner11 = generator2.bulBackupRunner();
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory12.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory12.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory12.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory18.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory18.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment24 = factory18.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern25 = backupEnvironment24.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress26 = backupEnvironment24.getSocketAddress();
    java.nio.file.Path path27 = backupEnvironment24.getRpPath();
    boolean boolean28 = backupEnvironment24.getIsBftf();
    try {
      backupRunner11.excebcpForBa(backupEnvironment24);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(generator8);
    org.junit.Assert.assertNotNull(generator10);
    org.junit.Assert.assertNotNull(backupRunner11);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(backupEnvironment24);
    org.junit.Assert.assertNotNull(databaseNamePattern25);
    org.junit.Assert.assertNotNull(socketAddress26);
    org.junit.Assert.assertNotNull(path27);
    org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
  }

  @Test
  public void test0217() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0217");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupMetadataRepository backupMetadataRepository1 = new io.github.onograph.backup.BackupMetadataRepository(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory8.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment14 = factory8.bulBackupEnvironment();
    boolean boolean15 = backupEnvironment14.getIsBftf();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern16 = backupEnvironment14.getDatabaseNamePattern();
    java.nio.file.Path path17 = backupEnvironment14.getRpPath();
    java.lang.String[] strArray21 = new java.lang.String[]{"database.id", "", "hi!"};
    java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
    boolean boolean23 = java.util.Collections.addAll(
        (java.util.Collection<java.lang.String>) strList22, strArray21);
    try {
      backupMetadataRepository1.wrtForPaLi(path17, (java.util.List<java.lang.String>) strList22);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(backupEnvironment14);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    org.junit.Assert.assertNotNull(databaseNamePattern16);
    org.junit.Assert.assertNotNull(path17);
    org.junit.Assert.assertNotNull(strArray21);
    org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
  }

  @Test
  public void test0218() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0218");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = factory2.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory2.isCc(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    java.nio.file.Path path11 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory8.prPath(path11);
    java.nio.file.Path path13 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory12.prPath(path13);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory15.isCc(false);
    java.nio.file.Path path18 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory15.prPath(path18);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config21 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory20.config(config21);
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory22.isRp(true);
    org.neo4j.configuration.Config config25 = factory22.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory15.config(config25);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory14.config(config25);
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = factory7.config(config25);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction29 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory30.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory30.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory30.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = factory36.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory36.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment42 = factory36.bulBackupEnvironment();
    org.neo4j.memory.MemoryTracker memoryTracker43 = backupEnvironment42.getMemoryTracker();
    org.neo4j.io.pagecache.PageCache pageCache44 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager45 = new io.github.onograph.backup.BackupRestorationManager(
        config25, fileSystemAbstraction29, memoryTracker43, pageCache44);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction46 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = factory47.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory51 = factory47.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory53 = factory47.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory55 = factory53.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory58 = factory53.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment59 = factory53.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern60 = backupEnvironment59.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress61 = backupEnvironment59.getSocketAddress();
    java.nio.file.Path path62 = backupEnvironment59.getRpPath();
    boolean boolean63 = backupEnvironment59.getIsBftf();
    java.nio.file.Path path64 = backupEnvironment59.getRpPath();
    org.neo4j.memory.MemoryTracker memoryTracker65 = backupEnvironment59.getMemoryTracker();
    org.neo4j.io.pagecache.PageCache pageCache66 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager67 = new io.github.onograph.backup.BackupRestorationManager(
        config25, fileSystemAbstraction46, memoryTracker65, pageCache66);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction68 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory69 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory71 = factory69.isCc(false);
    java.nio.file.Path path72 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory73 = factory69.prPath(path72);
    io.github.onograph.backup.BackupEnvironment.Factory factory74 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config75 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory76 = factory74.config(config75);
    io.github.onograph.backup.BackupEnvironment.Factory factory78 = factory76.isRp(true);
    org.neo4j.configuration.Config config79 = factory76.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory80 = factory69.config(config79);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction81 = null;
    org.neo4j.configuration.Config config82 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction83 = null;
    java.nio.file.Path[] pathArray84 = new java.nio.file.Path[]{};
    java.util.LinkedHashSet<java.nio.file.Path> pathSet85 = new java.util.LinkedHashSet<java.nio.file.Path>();
    boolean boolean86 = java.util.Collections.addAll(
        (java.util.Collection<java.nio.file.Path>) pathSet85, pathArray84);
    io.github.onograph.backup.BackupRestoreMeta backupRestoreMeta87 = new io.github.onograph.backup.BackupRestoreMeta(
        config82, fileSystemAbstraction83, (java.util.Set<java.nio.file.Path>) pathSet85);
    io.github.onograph.backup.BackupRestoreMeta backupRestoreMeta88 = new io.github.onograph.backup.BackupRestoreMeta(
        config79, fileSystemAbstraction81, (java.util.Set<java.nio.file.Path>) pathSet85);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction89 = null;
    java.nio.file.Path[] pathArray90 = new java.nio.file.Path[]{};
    java.util.LinkedHashSet<java.nio.file.Path> pathSet91 = new java.util.LinkedHashSet<java.nio.file.Path>();
    boolean boolean92 = java.util.Collections.addAll(
        (java.util.Collection<java.nio.file.Path>) pathSet91, pathArray90);
    io.github.onograph.backup.BackupRestoreMeta backupRestoreMeta93 = new io.github.onograph.backup.BackupRestoreMeta(
        config79, fileSystemAbstraction89, (java.util.Set<java.nio.file.Path>) pathSet91);
    io.github.onograph.backup.BackupRestoreMeta backupRestoreMeta94 = new io.github.onograph.backup.BackupRestoreMeta(
        config25, fileSystemAbstraction68, (java.util.Set<java.nio.file.Path>) pathSet91);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(config5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(config25);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(backupEnvironment42);
    org.junit.Assert.assertNotNull(memoryTracker43);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory49);
    org.junit.Assert.assertNotNull(factory51);
    org.junit.Assert.assertNotNull(factory53);
    org.junit.Assert.assertNotNull(factory55);
    org.junit.Assert.assertNotNull(factory58);
    org.junit.Assert.assertNotNull(backupEnvironment59);
    org.junit.Assert.assertNotNull(databaseNamePattern60);
    org.junit.Assert.assertNotNull(socketAddress61);
    org.junit.Assert.assertNotNull(path62);
    org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    org.junit.Assert.assertNotNull(path64);
    org.junit.Assert.assertNotNull(memoryTracker65);
    org.junit.Assert.assertNotNull(factory69);
    org.junit.Assert.assertNotNull(factory71);
    org.junit.Assert.assertNotNull(factory73);
    org.junit.Assert.assertNotNull(factory74);
    org.junit.Assert.assertNotNull(factory76);
    org.junit.Assert.assertNotNull(factory78);
    org.junit.Assert.assertNotNull(config79);
    org.junit.Assert.assertNotNull(factory80);
    org.junit.Assert.assertNotNull(pathArray84);
    org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    org.junit.Assert.assertNotNull(pathArray90);
    org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
  }

  @Test
  public void test0219() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0219");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.config(config5);
    org.neo4j.configuration.helpers.SocketAddress socketAddress7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress7);
    org.neo4j.configuration.helpers.SocketAddress socketAddress9 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress9);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory4.wihadsBackupEnvironmentFactory(
        (int) (short) -1, "hi!");
    org.neo4j.configuration.Config config14 = factory13.gecfConfig();
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags15 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction16 = null;
    org.neo4j.logging.LogProvider logProvider17 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory18.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory21.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory21.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory21.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory27.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory27.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment33 = factory27.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern34 = backupEnvironment33.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress35 = backupEnvironment33.getSocketAddress();
    java.nio.file.Path path36 = backupEnvironment33.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = factory18.pbPath(path36);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory40 = factory38.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = factory41.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = factory41.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = factory41.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = factory47.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory52 = factory47.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment53 = factory47.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern54 = backupEnvironment53.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress55 = backupEnvironment53.getSocketAddress();
    java.nio.file.Path path56 = backupEnvironment53.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory57 = factory38.pbPath(path56);
    io.github.onograph.backup.FileMoverService fileMoverService58 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path36, path56);
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory59 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl60 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config14, consistencyFlags15, fileSystemAbstraction16, logProvider17, path56,
        progressMonitorFactory59);
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags61 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction62 = null;
    org.neo4j.logging.LogProvider logProvider63 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory64 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory66 = factory64.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory68 = factory64.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory70 = factory64.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory72 = factory70.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory75 = factory70.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment76 = factory70.bulBackupEnvironment();
    org.neo4j.memory.MemoryTracker memoryTracker77 = backupEnvironment76.getMemoryTracker();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern78 = backupEnvironment76.getDatabaseNamePattern();
    boolean boolean79 = backupEnvironment76.getIsBftf();
    java.nio.file.Path path80 = backupEnvironment76.getRpPath();
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory81 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl82 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config14, consistencyFlags61, fileSystemAbstraction62, logProvider63, path80,
        progressMonitorFactory81);
    org.neo4j.io.layout.DatabaseLayout databaseLayout83 = null;
    try {
      backupVerificationServiceImpl82.chcsyForDa(databaseLayout83);
      org.junit.Assert.fail(
          "Expected exception of type io.github.onograph.backup.BackupVerificationErrorException; message: *** Error:  2915f124-983c-439d-b1ae-a9c5ad06642b");
    } catch (io.github.onograph.backup.BackupVerificationErrorException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(config14);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(backupEnvironment33);
    org.junit.Assert.assertNotNull(databaseNamePattern34);
    org.junit.Assert.assertNotNull(socketAddress35);
    org.junit.Assert.assertNotNull(path36);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(factory40);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory49);
    org.junit.Assert.assertNotNull(factory52);
    org.junit.Assert.assertNotNull(backupEnvironment53);
    org.junit.Assert.assertNotNull(databaseNamePattern54);
    org.junit.Assert.assertNotNull(socketAddress55);
    org.junit.Assert.assertNotNull(path56);
    org.junit.Assert.assertNotNull(factory57);
    org.junit.Assert.assertNotNull(fileMoverService58);
    org.junit.Assert.assertNotNull(factory64);
    org.junit.Assert.assertNotNull(factory66);
    org.junit.Assert.assertNotNull(factory68);
    org.junit.Assert.assertNotNull(factory70);
    org.junit.Assert.assertNotNull(factory72);
    org.junit.Assert.assertNotNull(factory75);
    org.junit.Assert.assertNotNull(backupEnvironment76);
    org.junit.Assert.assertNotNull(memoryTracker77);
    org.junit.Assert.assertNotNull(databaseNamePattern78);
    org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    org.junit.Assert.assertNotNull(path80);
  }

  @Test
  public void test0220() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0220");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.logging.LogProvider logProvider5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator2.itraLogProvider(
        logProvider5);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction7 = null;
    io.github.onograph.backup.BackupRunner.Generator generator8 = generator2.fFileSystemAbstraction(
        fileSystemAbstraction7);
    org.neo4j.monitoring.Monitors monitors9 = null;
    io.github.onograph.backup.BackupRunner.Generator generator10 = generator2.monitors(monitors9);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction11 = null;
    io.github.onograph.backup.BackupRunner.Generator generator12 = generator2.fFileSystemAbstraction(
        fileSystemAbstraction11);
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(generator8);
    org.junit.Assert.assertNotNull(generator10);
    org.junit.Assert.assertNotNull(generator12);
  }

  @Test
  public void test0221() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0221");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    java.nio.file.Path path3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.prPath(path3);
    org.neo4j.configuration.helpers.SocketAddress socketAddress5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress5);
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config8 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory7.config(config8);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.isRp(true);
    org.neo4j.configuration.Config config12 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.config(config12);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory11.databaseNamePattern(
        "database.id");
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory16.isCc(false);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions19 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory16.miAuthMetaOptions(
        authMetaOptions19);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory20.isGcc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory22.isIcc(
        (java.lang.Boolean) false);
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern25 = factory22.gedtenprDatabaseNamePattern();
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory11.databaseNamePattern(
        databaseNamePattern25);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory4.databaseNamePattern(
        databaseNamePattern25);
    try {
      io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory4.databaseNamePattern(
          "");
      org.junit.Assert.fail(
          "Expected exception of type java.lang.IllegalArgumentException; message: The provided database name is empty.");
    } catch (java.lang.IllegalArgumentException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(databaseNamePattern25);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory27);
  }

  @Test
  public void test0222() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0222");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.config(config5);
    org.neo4j.configuration.helpers.SocketAddress socketAddress7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress7);
    org.neo4j.configuration.helpers.SocketAddress socketAddress9 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress9);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory4.wihadsBackupEnvironmentFactory(
        (int) (short) -1, "hi!");
    org.neo4j.configuration.Config config14 = factory13.gecfConfig();
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags15 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction16 = null;
    org.neo4j.logging.LogProvider logProvider17 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory18.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory21.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory21.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory21.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory27.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory27.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment33 = factory27.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern34 = backupEnvironment33.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress35 = backupEnvironment33.getSocketAddress();
    java.nio.file.Path path36 = backupEnvironment33.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = factory18.pbPath(path36);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory40 = factory38.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = factory41.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = factory41.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = factory41.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = factory47.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory52 = factory47.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment53 = factory47.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern54 = backupEnvironment53.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress55 = backupEnvironment53.getSocketAddress();
    java.nio.file.Path path56 = backupEnvironment53.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory57 = factory38.pbPath(path56);
    io.github.onograph.backup.FileMoverService fileMoverService58 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path36, path56);
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory59 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl60 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config14, consistencyFlags15, fileSystemAbstraction16, logProvider17, path56,
        progressMonitorFactory59);
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags61 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction62 = null;
    org.neo4j.logging.LogProvider logProvider63 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory64 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory66 = factory64.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory68 = factory64.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory70 = factory64.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory72 = factory70.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory75 = factory70.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment76 = factory70.bulBackupEnvironment();
    org.neo4j.memory.MemoryTracker memoryTracker77 = backupEnvironment76.getMemoryTracker();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern78 = backupEnvironment76.getDatabaseNamePattern();
    boolean boolean79 = backupEnvironment76.getIsBftf();
    java.nio.file.Path path80 = backupEnvironment76.getRpPath();
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory81 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl82 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config14, consistencyFlags61, fileSystemAbstraction62, logProvider63, path80,
        progressMonitorFactory81);
    org.neo4j.io.layout.DatabaseLayout databaseLayout83 = null;
    try {
      backupVerificationServiceImpl82.chcsyForDa(databaseLayout83);
      org.junit.Assert.fail(
          "Expected exception of type io.github.onograph.backup.BackupVerificationErrorException; message: *** Error:  2915f124-983c-439d-b1ae-a9c5ad06642b");
    } catch (io.github.onograph.backup.BackupVerificationErrorException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(config14);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(backupEnvironment33);
    org.junit.Assert.assertNotNull(databaseNamePattern34);
    org.junit.Assert.assertNotNull(socketAddress35);
    org.junit.Assert.assertNotNull(path36);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(factory40);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory49);
    org.junit.Assert.assertNotNull(factory52);
    org.junit.Assert.assertNotNull(backupEnvironment53);
    org.junit.Assert.assertNotNull(databaseNamePattern54);
    org.junit.Assert.assertNotNull(socketAddress55);
    org.junit.Assert.assertNotNull(path56);
    org.junit.Assert.assertNotNull(factory57);
    org.junit.Assert.assertNotNull(fileMoverService58);
    org.junit.Assert.assertNotNull(factory64);
    org.junit.Assert.assertNotNull(factory66);
    org.junit.Assert.assertNotNull(factory68);
    org.junit.Assert.assertNotNull(factory70);
    org.junit.Assert.assertNotNull(factory72);
    org.junit.Assert.assertNotNull(factory75);
    org.junit.Assert.assertNotNull(backupEnvironment76);
    org.junit.Assert.assertNotNull(memoryTracker77);
    org.junit.Assert.assertNotNull(databaseNamePattern78);
    org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    org.junit.Assert.assertNotNull(path80);
  }

  @Test
  public void test0223() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0223");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.config(config5);
    org.neo4j.configuration.helpers.SocketAddress socketAddress7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress7);
    org.neo4j.configuration.helpers.SocketAddress socketAddress9 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress9);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory4.wihadsBackupEnvironmentFactory(
        (int) (short) -1, "hi!");
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory4.isFtfb(true);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
  }

  @Test
  public void test0224() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0224");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup("");
    io.github.onograph.backup.Backup backup3 = backup1.isCc(true);
    io.github.onograph.backup.Backup backup5 = backup3.isCc(true);
    io.github.onograph.backup.Backup backup7 = backup3.isBftf(false);
    io.github.onograph.backup.Backup backup9 = backup7.isCc(true);
    java.io.OutputStream outputStream10 = null;
    try {
      io.github.onograph.backup.Backup backup11 = backup9.outputStream(outputStream10);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: outputStream");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(backup3);
    org.junit.Assert.assertNotNull(backup5);
    org.junit.Assert.assertNotNull(backup7);
    org.junit.Assert.assertNotNull(backup9);
  }

  @Test
  public void test0225() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0225");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.logging.LogProvider logProvider5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator2.itraLogProvider(
        logProvider5);
    org.neo4j.logging.LogProvider logProvider7 = null;
    io.github.onograph.backup.BackupRunner.Generator generator8 = generator6.uLogProvider(
        logProvider7);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction9 = null;
    io.github.onograph.backup.BackupRunner.Generator generator10 = generator6.fFileSystemAbstraction(
        fileSystemAbstraction9);
    org.neo4j.time.SystemNanoClock systemNanoClock11 = null;
    io.github.onograph.backup.BackupRunner.Generator generator12 = generator6.systemNanoClock(
        systemNanoClock11);
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(generator8);
    org.junit.Assert.assertNotNull(generator10);
    org.junit.Assert.assertNotNull(generator12);
  }

  @Test
  public void test0226() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0226");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup("");
    io.github.onograph.backup.Backup backup3 = backup1.isCc(true);
    io.github.onograph.backup.Backup backup5 = backup3.isCc(true);
    io.github.onograph.backup.Backup backup7 = backup5.isCc(true);
    io.github.onograph.backup.Backup backup9 = backup5.isCc(true);
    io.github.onograph.backup.Backup backup11 = backup5.isBftf(false);
    io.github.onograph.backup.Backup backup13 = backup11.isBftf(true);
    java.io.OutputStream outputStream14 = null;
    try {
      io.github.onograph.backup.Backup backup15 = backup11.outputStream(outputStream14);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: outputStream");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(backup3);
    org.junit.Assert.assertNotNull(backup5);
    org.junit.Assert.assertNotNull(backup7);
    org.junit.Assert.assertNotNull(backup9);
    org.junit.Assert.assertNotNull(backup11);
    org.junit.Assert.assertNotNull(backup13);
  }

  @Test
  public void test0227() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0227");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    java.nio.file.Path path3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.prPath(path3);
    org.neo4j.configuration.helpers.SocketAddress socketAddress5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.wihadsBackupEnvironmentFactory(
        socketAddress5);
    org.neo4j.configuration.helpers.SocketAddress socketAddress7 = factory6.getSocketAddress();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNull(socketAddress7);
  }

  @Test
  public void test0228() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0228");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory6.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isFtfb(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory13.isRp(false);
    java.nio.file.Path path16 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory13.pbPath(path16);
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory13.shouldPrep(true);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
  }

  @Test
  public void test0229() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0229");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory8.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment14 = factory8.bulBackupEnvironment();
    boolean boolean15 = backupEnvironment14.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional16 = backupEnvironment14.geicmaOptional();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional17 = backupEnvironment14.geicmaOptional();
    java.nio.file.Path path18 = backupEnvironment14.getPbPath();
    java.nio.file.Path path19 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path18);
    org.neo4j.logging.LogProvider logProvider20 = null;
    org.neo4j.io.pagecache.PageCache pageCache21 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer22 = null;
    try {
      io.github.onograph.backup.BackupMetaService backupMetaService23 = new io.github.onograph.backup.BackupMetaService(
          fileSystemAbstraction0, "", path18, logProvider20, pageCache21, pageCacheTracer22);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(backupEnvironment14);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional16);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional17);
    org.junit.Assert.assertNotNull(path18);
    org.junit.Assert.assertNotNull(path19);
  }

  @Test
  public void test0230() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0230");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory6.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment12 = factory6.bulBackupEnvironment();
    boolean boolean13 = backupEnvironment12.getIsRp();
    boolean boolean14 = backupEnvironment12.getIsCc();
    boolean boolean15 = backupEnvironment12.getIsBftf();
    org.neo4j.configuration.helpers.SocketAddress socketAddress16 = backupEnvironment12.getSocketAddress();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(backupEnvironment12);
    org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    org.junit.Assert.assertNotNull(socketAddress16);
  }

  @Test
  public void test0231() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0231");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    java.nio.file.Path path3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.prPath(path3);
    java.nio.file.Path path5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.prPath(path5);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.miAuthMetaOptions(
        authMetaOptions7);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions9 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.miAuthMetaOptions(
        authMetaOptions9);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
  }

  @Test
  public void test0232() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0232");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    java.io.PrintStream printStream3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isCc(false);
    java.nio.file.Path path7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.prPath(path7);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory4.isSicc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment backupEnvironment11 = factory10.bulBackupEnvironment();
    java.nio.file.Path path12 = backupEnvironment11.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory13.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory13.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory13.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory19.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory19.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment25 = factory19.bulBackupEnvironment();
    boolean boolean26 = backupEnvironment25.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional27 = backupEnvironment25.geicmaOptional();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional28 = backupEnvironment25.geicmaOptional();
    java.nio.file.Path path29 = backupEnvironment25.getRpPath();
    org.neo4j.io.layout.DatabaseLayout databaseLayout30 = null;
    try {
      io.github.onograph.backup.GdbRestorer gdbRestorer31 = new io.github.onograph.backup.GdbRestorer(
          fileSystemAbstraction0, false, true, printStream3, path12, path29, databaseLayout30);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(backupEnvironment11);
    org.junit.Assert.assertNotNull(path12);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(backupEnvironment25);
    org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional27);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional28);
    org.junit.Assert.assertNotNull(path29);
  }

  @Test
  public void test0233() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0233");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    java.io.PrintStream printStream3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory4.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory10.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory10.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment16 = factory10.bulBackupEnvironment();
    boolean boolean17 = backupEnvironment16.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional18 = backupEnvironment16.geicmaOptional();
    java.nio.file.Path path19 = backupEnvironment16.getPbPath();
    java.nio.file.Path path20 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path19);
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config22 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory21.config(config22);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory23.isRp(true);
    org.neo4j.configuration.Config config26 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory25.config(config26);
    org.neo4j.configuration.helpers.SocketAddress socketAddress28 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory25.wihadsBackupEnvironmentFactory(
        socketAddress28);
    org.neo4j.configuration.helpers.SocketAddress socketAddress30 = factory25.getSocketAddress();
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory25.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory32.isIcc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment backupEnvironment35 = factory34.bulBackupEnvironment();
    java.nio.file.Path path36 = backupEnvironment35.getPbPath();
    org.neo4j.io.layout.DatabaseLayout databaseLayout37 = null;
    try {
      io.github.onograph.backup.GdbRestorer gdbRestorer38 = new io.github.onograph.backup.GdbRestorer(
          fileSystemAbstraction0, true, false, printStream3, path19, path36, databaseLayout37);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(backupEnvironment16);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional18);
    org.junit.Assert.assertNotNull(path19);
    org.junit.Assert.assertNotNull(path20);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNull(socketAddress30);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(backupEnvironment35);
    org.junit.Assert.assertNotNull(path36);
  }

  @Test
  public void test0234() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0234");
    }
    java.nio.file.Path path0 = null;
    java.nio.file.Path path1 = null;
    io.github.onograph.backup.FileMoverService fileMoverService2 = io.github.onograph.backup.FileMoverService.movifeseFileMoverService(
        path0, path1);
    io.github.onograph.backup.BackupEnvironment.Factory factory3 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory5 = factory3.isGcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.config(config7);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isRp(true);
    org.neo4j.configuration.Config config11 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory10.config(config11);
    org.neo4j.configuration.helpers.SocketAddress socketAddress13 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory10.wihadsBackupEnvironmentFactory(
        socketAddress13);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory15.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory18.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory18.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory18.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory24.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory24.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment30 = factory24.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern31 = backupEnvironment30.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress32 = backupEnvironment30.getSocketAddress();
    java.nio.file.Path path33 = backupEnvironment30.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory15.pbPath(path33);
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = factory35.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory40 = factory38.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory42 = factory38.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory44 = factory38.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory46 = factory44.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = factory44.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment50 = factory44.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern51 = backupEnvironment50.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress52 = backupEnvironment50.getSocketAddress();
    java.nio.file.Path path53 = backupEnvironment50.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory54 = factory35.pbPath(path53);
    io.github.onograph.backup.FileMoverService fileMoverService55 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path33, path53);
    io.github.onograph.backup.BackupEnvironment.Factory factory56 = factory10.pbPath(path53);
    boolean boolean57 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path53);
    io.github.onograph.backup.BackupEnvironment.Factory factory58 = factory3.prPath(path53);
    java.nio.file.CopyOption[] copyOptionArray59 = new java.nio.file.CopyOption[]{};
    try {
      fileMoverService2.movForPaCo(path53, copyOptionArray59);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(fileMoverService2);
    org.junit.Assert.assertNotNull(factory3);
    org.junit.Assert.assertNotNull(factory5);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(backupEnvironment30);
    org.junit.Assert.assertNotNull(databaseNamePattern31);
    org.junit.Assert.assertNotNull(socketAddress32);
    org.junit.Assert.assertNotNull(path33);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(factory40);
    org.junit.Assert.assertNotNull(factory42);
    org.junit.Assert.assertNotNull(factory44);
    org.junit.Assert.assertNotNull(factory46);
    org.junit.Assert.assertNotNull(factory49);
    org.junit.Assert.assertNotNull(backupEnvironment50);
    org.junit.Assert.assertNotNull(databaseNamePattern51);
    org.junit.Assert.assertNotNull(socketAddress52);
    org.junit.Assert.assertNotNull(path53);
    org.junit.Assert.assertNotNull(factory54);
    org.junit.Assert.assertNotNull(fileMoverService55);
    org.junit.Assert.assertNotNull(factory56);
    org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    org.junit.Assert.assertNotNull(factory58);
    org.junit.Assert.assertNotNull(copyOptionArray59);
  }

  @Test
  public void test0235() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0235");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupIOService backupIOService1 = new io.github.onograph.backup.BackupIOService(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory8.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment14 = factory8.bulBackupEnvironment();
    boolean boolean15 = backupEnvironment14.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional16 = backupEnvironment14.geicmaOptional();
    java.nio.file.Path path17 = backupEnvironment14.getPbPath();
    java.nio.file.Path path18 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path17);
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory19.isGcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config23 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory22.config(config23);
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory24.isRp(true);
    org.neo4j.configuration.Config config27 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = factory26.config(config27);
    org.neo4j.configuration.helpers.SocketAddress socketAddress29 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = factory26.wihadsBackupEnvironmentFactory(
        socketAddress29);
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory31.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory34.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = factory34.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory40 = factory34.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory42 = factory40.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = factory40.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment46 = factory40.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern47 = backupEnvironment46.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress48 = backupEnvironment46.getSocketAddress();
    java.nio.file.Path path49 = backupEnvironment46.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory50 = factory31.pbPath(path49);
    io.github.onograph.backup.BackupEnvironment.Factory factory51 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory53 = factory51.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory54 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory56 = factory54.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory58 = factory54.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory60 = factory54.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory62 = factory60.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory65 = factory60.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment66 = factory60.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern67 = backupEnvironment66.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress68 = backupEnvironment66.getSocketAddress();
    java.nio.file.Path path69 = backupEnvironment66.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory70 = factory51.pbPath(path69);
    io.github.onograph.backup.FileMoverService fileMoverService71 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path49, path69);
    io.github.onograph.backup.BackupEnvironment.Factory factory72 = factory26.pbPath(path69);
    boolean boolean73 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path69);
    io.github.onograph.backup.BackupEnvironment.Factory factory74 = factory19.prPath(path69);
    io.github.onograph.backup.FileMoverService fileMoverService75 = io.github.onograph.backup.FileMoverService.movifeseFileMoverService(
        path17, path69);
    try {
      boolean boolean76 = backupIOService1.isExsForPa(path17);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(backupEnvironment14);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional16);
    org.junit.Assert.assertNotNull(path17);
    org.junit.Assert.assertNotNull(path18);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(factory40);
    org.junit.Assert.assertNotNull(factory42);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(backupEnvironment46);
    org.junit.Assert.assertNotNull(databaseNamePattern47);
    org.junit.Assert.assertNotNull(socketAddress48);
    org.junit.Assert.assertNotNull(path49);
    org.junit.Assert.assertNotNull(factory50);
    org.junit.Assert.assertNotNull(factory51);
    org.junit.Assert.assertNotNull(factory53);
    org.junit.Assert.assertNotNull(factory54);
    org.junit.Assert.assertNotNull(factory56);
    org.junit.Assert.assertNotNull(factory58);
    org.junit.Assert.assertNotNull(factory60);
    org.junit.Assert.assertNotNull(factory62);
    org.junit.Assert.assertNotNull(factory65);
    org.junit.Assert.assertNotNull(backupEnvironment66);
    org.junit.Assert.assertNotNull(databaseNamePattern67);
    org.junit.Assert.assertNotNull(socketAddress68);
    org.junit.Assert.assertNotNull(path69);
    org.junit.Assert.assertNotNull(factory70);
    org.junit.Assert.assertNotNull(fileMoverService71);
    org.junit.Assert.assertNotNull(factory72);
    org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    org.junit.Assert.assertNotNull(factory74);
    org.junit.Assert.assertNotNull(fileMoverService75);
  }

  @Test
  public void test0236() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0236");
    }
    io.github.onograph.backup.CommandProviderBackupImpl commandProviderBackupImpl0 = new io.github.onograph.backup.CommandProviderBackupImpl();
    int int1 = commandProviderBackupImpl0.getPriority();
    org.neo4j.cli.Command.CommandType commandType2 = commandProviderBackupImpl0.commandType();
    int int3 = commandProviderBackupImpl0.getPriority();
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    org.junit.Assert.assertTrue(
        "'" + commandType2 + "' != '" + org.neo4j.cli.Command.CommandType.ONLINE_BACKUP + "'",
        commandType2.equals(org.neo4j.cli.Command.CommandType.ONLINE_BACKUP));
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
  }

  @Test
  public void test0237() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0237");
    }
    try {
      io.github.onograph.backup.Backup backup2 = io.github.onograph.backup.Backup.froBackup(
          (int) (short) -1, "");
      org.junit.Assert.fail(
          "Expected exception of type java.lang.IllegalArgumentException; message: Port is expected to be positive and less than or equal to 65535 but was: -1");
    } catch (java.lang.IllegalArgumentException e) {
    }
  }

  @Test
  public void test0238() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0238");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.GdbIdRepo gdbIdRepo1 = new io.github.onograph.backup.GdbIdRepo(
        fileSystemAbstraction0);
    org.neo4j.kernel.database.DatabaseId databaseId2 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory3 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory5 = factory3.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory3.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory3.isIcc(
        (java.lang.Boolean) true);
    java.nio.file.Path path10 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory3.pbPath(path10);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory12.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory12.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory12.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory18.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory18.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment24 = factory18.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern25 = backupEnvironment24.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress26 = backupEnvironment24.getSocketAddress();
    java.nio.file.Path path27 = backupEnvironment24.getRpPath();
    boolean boolean28 = backupEnvironment24.getIsBftf();
    java.nio.file.Path path29 = backupEnvironment24.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = factory11.prPath(path29);
    try {
      gdbIdRepo1.wrdaiForDaPa(databaseId2, path29);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory3);
    org.junit.Assert.assertNotNull(factory5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(backupEnvironment24);
    org.junit.Assert.assertNotNull(databaseNamePattern25);
    org.junit.Assert.assertNotNull(socketAddress26);
    org.junit.Assert.assertNotNull(path27);
    org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    org.junit.Assert.assertNotNull(path29);
    org.junit.Assert.assertNotNull(factory30);
  }

  @Test
  public void test0239() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0239");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.config(config5);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.miAuthMetaOptions(
        authMetaOptions7);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
  }

  @Test
  public void test0240() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0240");
    }
    org.neo4j.configuration.Config config0 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config12 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.config(config12);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory13.isRp(true);
    org.neo4j.configuration.Config config16 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory15.config(config16);
    org.neo4j.configuration.helpers.SocketAddress socketAddress18 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory15.wihadsBackupEnvironmentFactory(
        socketAddress18);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config21 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory20.config(config21);
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory22.isRp(true);
    org.neo4j.configuration.Config config25 = factory22.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory15.config(config25);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory10.config(config25);
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags28 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction29 = null;
    org.neo4j.logging.LogProvider logProvider30 = null;
    java.nio.file.Path path31 = null;
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory32 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl33 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config25, consistencyFlags28, fileSystemAbstraction29, logProvider30, path31,
        progressMonitorFactory32);
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags34 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction35 = null;
    org.neo4j.logging.LogProvider logProvider36 = null;
    java.nio.file.Path path37 = null;
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory38 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl39 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config25, consistencyFlags34, fileSystemAbstraction35, logProvider36, path37,
        progressMonitorFactory38);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction40 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = factory41.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = factory41.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = factory41.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = factory47.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory52 = factory47.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment53 = factory47.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern54 = backupEnvironment53.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress55 = backupEnvironment53.getSocketAddress();
    java.nio.file.Path path56 = backupEnvironment53.getRpPath();
    boolean boolean57 = backupEnvironment53.getIsBftf();
    java.nio.file.Path path58 = backupEnvironment53.getRpPath();
    org.neo4j.memory.MemoryTracker memoryTracker59 = backupEnvironment53.getMemoryTracker();
    org.neo4j.io.pagecache.PageCache pageCache60 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager61 = new io.github.onograph.backup.BackupRestorationManager(
        config25, fileSystemAbstraction40, memoryTracker59, pageCache60);
    org.neo4j.io.pagecache.PageCache pageCache62 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager63 = new io.github.onograph.backup.BackupRestorationManager(
        config0, fileSystemAbstraction1, memoryTracker59, pageCache62);
    org.neo4j.io.layout.DatabaseLayout databaseLayout64 = null;
    try {
      backupRestorationManager63.reorForDa(databaseLayout64);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(config25);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory49);
    org.junit.Assert.assertNotNull(factory52);
    org.junit.Assert.assertNotNull(backupEnvironment53);
    org.junit.Assert.assertNotNull(databaseNamePattern54);
    org.junit.Assert.assertNotNull(socketAddress55);
    org.junit.Assert.assertNotNull(path56);
    org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    org.junit.Assert.assertNotNull(path58);
    org.junit.Assert.assertNotNull(memoryTracker59);
  }

  @Test
  public void test0241() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0241");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupMetadataRepository backupMetadataRepository1 = new io.github.onograph.backup.BackupMetadataRepository(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.config(config3);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isSicc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config8 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory7.config(config8);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.isRp(true);
    org.neo4j.configuration.Config config12 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.config(config12);
    org.neo4j.configuration.helpers.SocketAddress socketAddress14 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory11.wihadsBackupEnvironmentFactory(
        socketAddress14);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory16.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory19.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory19.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory19.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory25.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = factory25.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment31 = factory25.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern32 = backupEnvironment31.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress33 = backupEnvironment31.getSocketAddress();
    java.nio.file.Path path34 = backupEnvironment31.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = factory16.pbPath(path34);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = factory36.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory39 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory39.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = factory39.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = factory39.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = factory45.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory50 = factory45.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment51 = factory45.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern52 = backupEnvironment51.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress53 = backupEnvironment51.getSocketAddress();
    java.nio.file.Path path54 = backupEnvironment51.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory55 = factory36.pbPath(path54);
    io.github.onograph.backup.FileMoverService fileMoverService56 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path34, path54);
    io.github.onograph.backup.BackupEnvironment.Factory factory57 = factory11.pbPath(path54);
    io.github.onograph.backup.BackupEnvironment.Factory factory58 = factory6.prPath(path54);
    java.lang.String[] strArray62 = new java.lang.String[]{"hi!", "hi!", ""};
    java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
    boolean boolean64 = java.util.Collections.addAll(
        (java.util.Collection<java.lang.String>) strList63, strArray62);
    try {
      backupMetadataRepository1.wrtForPaLi(path54, (java.util.List<java.lang.String>) strList63);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(backupEnvironment31);
    org.junit.Assert.assertNotNull(databaseNamePattern32);
    org.junit.Assert.assertNotNull(socketAddress33);
    org.junit.Assert.assertNotNull(path34);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(factory39);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory50);
    org.junit.Assert.assertNotNull(backupEnvironment51);
    org.junit.Assert.assertNotNull(databaseNamePattern52);
    org.junit.Assert.assertNotNull(socketAddress53);
    org.junit.Assert.assertNotNull(path54);
    org.junit.Assert.assertNotNull(factory55);
    org.junit.Assert.assertNotNull(fileMoverService56);
    org.junit.Assert.assertNotNull(factory57);
    org.junit.Assert.assertNotNull(factory58);
    org.junit.Assert.assertNotNull(strArray62);
    org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
  }

  @Test
  public void test0242() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0242");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.logging.LogProvider logProvider5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator2.itraLogProvider(
        logProvider5);
    io.github.onograph.backup.BackupRunner backupRunner7 = generator6.bulBackupRunner();
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory8.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory8.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory14.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory14.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment20 = factory14.bulBackupEnvironment();
    boolean boolean21 = backupEnvironment20.getIsRp();
    boolean boolean22 = backupEnvironment20.getIsCc();
    boolean boolean23 = backupEnvironment20.getIsBftf();
    try {
      backupRunner7.excebcpForBa(backupEnvironment20);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(backupRunner7);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(backupEnvironment20);
    org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
  }

  @Test
  public void test0243() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0243");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.GdbIdRepo gdbIdRepo1 = new io.github.onograph.backup.GdbIdRepo(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory8.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment14 = factory8.bulBackupEnvironment();
    boolean boolean15 = backupEnvironment14.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional16 = backupEnvironment14.geicmaOptional();
    java.nio.file.Path path17 = backupEnvironment14.getPbPath();
    java.nio.file.Path path18 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path17);
    java.nio.file.Path path19 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path18);
    boolean boolean20 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path19);
    java.nio.file.Path path21 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path19);
    java.nio.file.Path path22 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path21);
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory23.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory23.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory23.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory29.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory29.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment35 = factory29.bulBackupEnvironment();
    boolean boolean36 = backupEnvironment35.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional37 = backupEnvironment35.geicmaOptional();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional38 = backupEnvironment35.geicmaOptional();
    java.nio.file.Path path39 = backupEnvironment35.getPbPath();
    java.nio.file.Path path40 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path39);
    io.github.onograph.backup.FileMoverService fileMoverService41 = io.github.onograph.backup.FileMoverService.movifeseFileMoverService(
        path21, path39);
    try {
      java.util.Optional<org.neo4j.kernel.database.DatabaseId> databaseIdOptional42 = gdbIdRepo1.reddtaiOptional(
          path39);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(backupEnvironment14);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional16);
    org.junit.Assert.assertNotNull(path17);
    org.junit.Assert.assertNotNull(path18);
    org.junit.Assert.assertNotNull(path19);
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    org.junit.Assert.assertNotNull(path21);
    org.junit.Assert.assertNotNull(path22);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(backupEnvironment35);
    org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional37);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional38);
    org.junit.Assert.assertNotNull(path39);
    org.junit.Assert.assertNotNull(path40);
    org.junit.Assert.assertNotNull(fileMoverService41);
  }

  @Test
  public void test0244() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0244");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    java.nio.file.Path path3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.prPath(path3);
    org.neo4j.configuration.helpers.SocketAddress socketAddress5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress5);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.isSicc(
        (java.lang.Boolean) true);
    org.neo4j.configuration.helpers.SocketAddress socketAddress9 = factory8.getSocketAddress();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNull(socketAddress9);
  }

  @Test
  public void test0245() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0245");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.monitoring.Monitors monitors3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator0.monitors(monitors3);
    org.neo4j.logging.LogProvider logProvider5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator0.itraLogProvider(
        logProvider5);
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
  }

  @Test
  public void test0246() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0246");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    java.nio.file.Path path5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.prPath(path5);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isIcc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isFtfb(true);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions11 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory8.miAuthMetaOptions(
        authMetaOptions11);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config14 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory13.config(config14);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory15.isRp(true);
    org.neo4j.configuration.Config config18 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory17.config(config18);
    org.neo4j.configuration.helpers.SocketAddress socketAddress20 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory17.wihadsBackupEnvironmentFactory(
        socketAddress20);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory22.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory25.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory25.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory25.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory31.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory31.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment37 = factory31.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern38 = backupEnvironment37.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress39 = backupEnvironment37.getSocketAddress();
    java.nio.file.Path path40 = backupEnvironment37.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory22.pbPath(path40);
    io.github.onograph.backup.BackupEnvironment.Factory factory42 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory44 = factory42.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = factory45.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = factory45.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory51 = factory45.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory53 = factory51.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory56 = factory51.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment57 = factory51.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern58 = backupEnvironment57.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress59 = backupEnvironment57.getSocketAddress();
    java.nio.file.Path path60 = backupEnvironment57.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory61 = factory42.pbPath(path60);
    io.github.onograph.backup.FileMoverService fileMoverService62 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path40, path60);
    io.github.onograph.backup.BackupEnvironment.Factory factory63 = factory17.pbPath(path60);
    boolean boolean64 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path60);
    io.github.onograph.backup.BackupEnvironment.Factory factory65 = factory12.pbPath(path60);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(backupEnvironment37);
    org.junit.Assert.assertNotNull(databaseNamePattern38);
    org.junit.Assert.assertNotNull(socketAddress39);
    org.junit.Assert.assertNotNull(path40);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(factory42);
    org.junit.Assert.assertNotNull(factory44);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory49);
    org.junit.Assert.assertNotNull(factory51);
    org.junit.Assert.assertNotNull(factory53);
    org.junit.Assert.assertNotNull(factory56);
    org.junit.Assert.assertNotNull(backupEnvironment57);
    org.junit.Assert.assertNotNull(databaseNamePattern58);
    org.junit.Assert.assertNotNull(socketAddress59);
    org.junit.Assert.assertNotNull(path60);
    org.junit.Assert.assertNotNull(factory61);
    org.junit.Assert.assertNotNull(fileMoverService62);
    org.junit.Assert.assertNotNull(factory63);
    org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    org.junit.Assert.assertNotNull(factory65);
  }

  @Test
  public void test0247() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0247");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    java.io.PrintStream printStream3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory4.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory10.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory10.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment16 = factory10.bulBackupEnvironment();
    boolean boolean17 = backupEnvironment16.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional18 = backupEnvironment16.geicmaOptional();
    java.nio.file.Path path19 = backupEnvironment16.getPbPath();
    java.nio.file.Path path20 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path19);
    java.nio.file.Path path21 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path20);
    boolean boolean22 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path21);
    java.nio.file.Path path23 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path21);
    java.nio.file.Path path24 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path23);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory25.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory25.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory25.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory31.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory31.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment37 = factory31.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern38 = backupEnvironment37.getDatabaseNamePattern();
    boolean boolean39 = backupEnvironment37.getIsBftf();
    java.nio.file.Path path40 = backupEnvironment37.getRpPath();
    org.neo4j.io.layout.DatabaseLayout databaseLayout41 = null;
    try {
      io.github.onograph.backup.GdbRestorer gdbRestorer42 = new io.github.onograph.backup.GdbRestorer(
          fileSystemAbstraction0, false, false, printStream3, path24, path40, databaseLayout41);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(backupEnvironment16);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional18);
    org.junit.Assert.assertNotNull(path19);
    org.junit.Assert.assertNotNull(path20);
    org.junit.Assert.assertNotNull(path21);
    org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    org.junit.Assert.assertNotNull(path23);
    org.junit.Assert.assertNotNull(path24);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(backupEnvironment37);
    org.junit.Assert.assertNotNull(databaseNamePattern38);
    org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    org.junit.Assert.assertNotNull(path40);
  }

  @Test
  public void test0248() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0248");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupIOService backupIOService1 = new io.github.onograph.backup.BackupIOService(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory8.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment14 = factory8.bulBackupEnvironment();
    boolean boolean15 = backupEnvironment14.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional16 = backupEnvironment14.geicmaOptional();
    java.nio.file.Path path17 = backupEnvironment14.getPbPath();
    java.nio.file.Path path18 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path17);
    java.nio.file.Path path19 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path18);
    boolean boolean20 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path19);
    java.nio.file.Path path21 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path19);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory22.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory22.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = factory22.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = factory28.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory28.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment34 = factory28.bulBackupEnvironment();
    boolean boolean35 = backupEnvironment34.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional36 = backupEnvironment34.geicmaOptional();
    java.nio.file.Path path37 = backupEnvironment34.getPbPath();
    java.nio.file.Path path38 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path37);
    java.nio.file.Path path39 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path38);
    io.github.onograph.backup.FileMoverService fileMoverService40 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path19, path38);
    try {
      boolean boolean41 = backupIOService1.isExsForPa(path19);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(backupEnvironment14);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional16);
    org.junit.Assert.assertNotNull(path17);
    org.junit.Assert.assertNotNull(path18);
    org.junit.Assert.assertNotNull(path19);
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    org.junit.Assert.assertNotNull(path21);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(backupEnvironment34);
    org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional36);
    org.junit.Assert.assertNotNull(path37);
    org.junit.Assert.assertNotNull(path38);
    org.junit.Assert.assertNotNull(path39);
    org.junit.Assert.assertNotNull(fileMoverService40);
  }

  @Test
  public void test0249() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0249");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.logging.LogProvider logProvider5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator2.itraLogProvider(
        logProvider5);
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory7 = null;
    io.github.onograph.backup.BackupRunner.Generator generator8 = generator6.progressMonitorFactory(
        progressMonitorFactory7);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction9 = null;
    io.github.onograph.backup.BackupRunner.Generator generator10 = generator8.fFileSystemAbstraction(
        fileSystemAbstraction9);
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(generator8);
    org.junit.Assert.assertNotNull(generator10);
  }

  @Test
  public void test0250() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0250");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.config(config5);
    org.neo4j.configuration.helpers.SocketAddress socketAddress7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress7);
    org.neo4j.configuration.helpers.SocketAddress socketAddress9 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress9);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory4.wihadsBackupEnvironmentFactory(
        (int) (short) -1, "hi!");
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory4.wihadsBackupEnvironmentFactory(
        0, "hi!");
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config18 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory17.config(config18);
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory19.isRp(true);
    org.neo4j.configuration.Config config22 = factory19.gecfConfig();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction23 = null;
    org.neo4j.memory.MemoryTracker memoryTracker24 = null;
    org.neo4j.io.pagecache.PageCache pageCache25 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager26 = new io.github.onograph.backup.BackupRestorationManager(
        config22, fileSystemAbstraction23, memoryTracker24, pageCache25);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory4.config(config22);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction28 = null;
    org.neo4j.logging.LogProvider logProvider29 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer30 = null;
    org.neo4j.time.SystemNanoClock systemNanoClock31 = null;
    try {
      io.github.onograph.backup.DefaultBackupServiceHandler defaultBackupServiceHandler32 = io.github.onograph.backup.DefaultBackupServiceHandler.strliclDefaultBackupServiceHandler(
          config22, fileSystemAbstraction28, logProvider29, pageCacheTracer30, systemNanoClock31);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(config22);
    org.junit.Assert.assertNotNull(factory27);
  }

  @Test
  public void test0251() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0251");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    java.nio.file.Path path7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory0.pbPath(path7);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory9.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory9.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory15.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory15.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment21 = factory15.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern22 = backupEnvironment21.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress23 = backupEnvironment21.getSocketAddress();
    java.nio.file.Path path24 = backupEnvironment21.getRpPath();
    boolean boolean25 = backupEnvironment21.getIsBftf();
    java.nio.file.Path path26 = backupEnvironment21.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory8.prPath(path26);
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = factory28.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory28.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory28.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory34.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory39 = factory34.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment40 = factory34.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern41 = backupEnvironment40.getDatabaseNamePattern();
    boolean boolean42 = backupEnvironment40.getIsBftf();
    boolean boolean43 = backupEnvironment40.getIsBftf();
    java.nio.file.Path path44 = backupEnvironment40.getRpPath();
    io.github.onograph.backup.FileMoverService fileMoverService45 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path26, path44);
    io.github.onograph.backup.BackupEnvironment.Factory factory46 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory48 = factory46.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory50 = factory46.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory52 = factory46.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory54 = factory52.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory57 = factory52.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment58 = factory52.bulBackupEnvironment();
    boolean boolean59 = backupEnvironment58.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional60 = backupEnvironment58.geicmaOptional();
    java.nio.file.Path path61 = backupEnvironment58.getPbPath();
    java.nio.file.Path path62 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path61);
    java.nio.file.Path path63 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path62);
    java.nio.file.Path path64 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path62);
    java.nio.file.CopyOption[] copyOptionArray65 = new java.nio.file.CopyOption[]{};
    try {
      fileMoverService45.movForPaCo(path64, copyOptionArray65);
    } catch (java.nio.file.FileAlreadyExistsException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(backupEnvironment21);
    org.junit.Assert.assertNotNull(databaseNamePattern22);
    org.junit.Assert.assertNotNull(socketAddress23);
    org.junit.Assert.assertNotNull(path24);
    org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    org.junit.Assert.assertNotNull(path26);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(factory39);
    org.junit.Assert.assertNotNull(backupEnvironment40);
    org.junit.Assert.assertNotNull(databaseNamePattern41);
    org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    org.junit.Assert.assertNotNull(path44);
    org.junit.Assert.assertNotNull(fileMoverService45);
    org.junit.Assert.assertNotNull(factory46);
    org.junit.Assert.assertNotNull(factory48);
    org.junit.Assert.assertNotNull(factory50);
    org.junit.Assert.assertNotNull(factory52);
    org.junit.Assert.assertNotNull(factory54);
    org.junit.Assert.assertNotNull(factory57);
    org.junit.Assert.assertNotNull(backupEnvironment58);
    org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional60);
    org.junit.Assert.assertNotNull(path61);
    org.junit.Assert.assertNotNull(path62);
    org.junit.Assert.assertNotNull(path63);
    org.junit.Assert.assertNotNull(path64);
    org.junit.Assert.assertNotNull(copyOptionArray65);
  }

  @Test
  public void test0252() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0252");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.GdbIdRepo gdbIdRepo1 = new io.github.onograph.backup.GdbIdRepo(
        fileSystemAbstraction0);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction2 = null;
    io.github.onograph.backup.FileMover fileMover3 = new io.github.onograph.backup.FileMover(
        fileSystemAbstraction2);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction4 = null;
    io.github.onograph.backup.FileMover fileMover5 = new io.github.onograph.backup.FileMover(
        fileSystemAbstraction4);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory6.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory6.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory12.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory12.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment18 = factory12.bulBackupEnvironment();
    boolean boolean19 = backupEnvironment18.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional20 = backupEnvironment18.geicmaOptional();
    java.nio.file.Path path21 = backupEnvironment18.getPbPath();
    java.nio.file.Path path22 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path21);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream23 = fileMover5._trrfrmnStream(
        path21);
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory24.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory27.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory27.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory27.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = factory33.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = factory33.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment39 = factory33.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern40 = backupEnvironment39.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress41 = backupEnvironment39.getSocketAddress();
    java.nio.file.Path path42 = backupEnvironment39.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = factory24.pbPath(path42);
    io.github.onograph.backup.BackupEnvironment.Factory factory44 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory46 = factory44.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = factory47.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory51 = factory47.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory53 = factory47.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory55 = factory53.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory58 = factory53.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment59 = factory53.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern60 = backupEnvironment59.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress61 = backupEnvironment59.getSocketAddress();
    java.nio.file.Path path62 = backupEnvironment59.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory63 = factory44.pbPath(path62);
    io.github.onograph.backup.FileMoverService fileMoverService64 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path42, path62);
    java.nio.file.Path path65 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path42);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream66 = fileMover5._trrfrmnStream(
        path65);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream67 = fileMover3._trrfrmnStream(
        path65);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction68 = null;
    io.github.onograph.backup.FileMover fileMover69 = new io.github.onograph.backup.FileMover(
        fileSystemAbstraction68);
    io.github.onograph.backup.BackupEnvironment.Factory factory70 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory72 = factory70.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory74 = factory70.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory76 = factory70.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory78 = factory76.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory81 = factory76.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment82 = factory76.bulBackupEnvironment();
    boolean boolean83 = backupEnvironment82.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional84 = backupEnvironment82.geicmaOptional();
    java.nio.file.Path path85 = backupEnvironment82.getPbPath();
    java.nio.file.Path path86 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path85);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream87 = fileMover69._trrfrmnStream(
        path85);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream88 = fileMover3._trrfrmnStream(
        path85);
    try {
      java.util.Optional<org.neo4j.kernel.database.DatabaseId> databaseIdOptional89 = gdbIdRepo1.reddtaiOptional(
          path85);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(backupEnvironment18);
    org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional20);
    org.junit.Assert.assertNotNull(path21);
    org.junit.Assert.assertNotNull(path22);
    org.junit.Assert.assertNotNull(fileMoverServiceStream23);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(backupEnvironment39);
    org.junit.Assert.assertNotNull(databaseNamePattern40);
    org.junit.Assert.assertNotNull(socketAddress41);
    org.junit.Assert.assertNotNull(path42);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory44);
    org.junit.Assert.assertNotNull(factory46);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory49);
    org.junit.Assert.assertNotNull(factory51);
    org.junit.Assert.assertNotNull(factory53);
    org.junit.Assert.assertNotNull(factory55);
    org.junit.Assert.assertNotNull(factory58);
    org.junit.Assert.assertNotNull(backupEnvironment59);
    org.junit.Assert.assertNotNull(databaseNamePattern60);
    org.junit.Assert.assertNotNull(socketAddress61);
    org.junit.Assert.assertNotNull(path62);
    org.junit.Assert.assertNotNull(factory63);
    org.junit.Assert.assertNotNull(fileMoverService64);
    org.junit.Assert.assertNotNull(path65);
    org.junit.Assert.assertNotNull(fileMoverServiceStream66);
    org.junit.Assert.assertNotNull(fileMoverServiceStream67);
    org.junit.Assert.assertNotNull(factory70);
    org.junit.Assert.assertNotNull(factory72);
    org.junit.Assert.assertNotNull(factory74);
    org.junit.Assert.assertNotNull(factory76);
    org.junit.Assert.assertNotNull(factory78);
    org.junit.Assert.assertNotNull(factory81);
    org.junit.Assert.assertNotNull(backupEnvironment82);
    org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional84);
    org.junit.Assert.assertNotNull(path85);
    org.junit.Assert.assertNotNull(path86);
    org.junit.Assert.assertNotNull(fileMoverServiceStream87);
    org.junit.Assert.assertNotNull(fileMoverServiceStream88);
  }

  @Test
  public void test0253() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0253");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.config(config5);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.isSicc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isIcc(
        (java.lang.Boolean) true);
    org.neo4j.configuration.helpers.SocketAddress socketAddress11 = factory8.getSocketAddress();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNull(socketAddress11);
  }

  @Test
  public void test0254() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0254");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config10 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.config(config10);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isRp(true);
    org.neo4j.configuration.Config config14 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory13.config(config14);
    org.neo4j.configuration.helpers.SocketAddress socketAddress16 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory13.wihadsBackupEnvironmentFactory(
        socketAddress16);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config19 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory18.config(config19);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory20.isRp(true);
    org.neo4j.configuration.Config config23 = factory20.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory13.config(config23);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory8.config(config23);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction26 = null;
    org.neo4j.memory.MemoryTracker memoryTracker27 = null;
    org.neo4j.io.pagecache.PageCache pageCache28 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager29 = new io.github.onograph.backup.BackupRestorationManager(
        config23, fileSystemAbstraction26, memoryTracker27, pageCache28);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction30 = null;
    org.neo4j.configuration.Config config31 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction32 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = factory33.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = factory33.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory39 = factory33.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory39.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory42 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config43 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory44 = factory42.config(config43);
    io.github.onograph.backup.BackupEnvironment.Factory factory46 = factory44.isRp(true);
    org.neo4j.configuration.Config config47 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory48 = factory46.config(config47);
    org.neo4j.configuration.helpers.SocketAddress socketAddress49 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory50 = factory46.wihadsBackupEnvironmentFactory(
        socketAddress49);
    io.github.onograph.backup.BackupEnvironment.Factory factory51 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config52 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory53 = factory51.config(config52);
    io.github.onograph.backup.BackupEnvironment.Factory factory55 = factory53.isRp(true);
    org.neo4j.configuration.Config config56 = factory53.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory57 = factory46.config(config56);
    io.github.onograph.backup.BackupEnvironment.Factory factory58 = factory41.config(config56);
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags59 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction60 = null;
    org.neo4j.logging.LogProvider logProvider61 = null;
    java.nio.file.Path path62 = null;
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory63 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl64 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config56, consistencyFlags59, fileSystemAbstraction60, logProvider61, path62,
        progressMonitorFactory63);
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags65 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction66 = null;
    org.neo4j.logging.LogProvider logProvider67 = null;
    java.nio.file.Path path68 = null;
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory69 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl70 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config56, consistencyFlags65, fileSystemAbstraction66, logProvider67, path68,
        progressMonitorFactory69);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction71 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory72 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory74 = factory72.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory76 = factory72.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory78 = factory72.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory80 = factory78.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory83 = factory78.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment84 = factory78.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern85 = backupEnvironment84.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress86 = backupEnvironment84.getSocketAddress();
    java.nio.file.Path path87 = backupEnvironment84.getRpPath();
    boolean boolean88 = backupEnvironment84.getIsBftf();
    java.nio.file.Path path89 = backupEnvironment84.getRpPath();
    org.neo4j.memory.MemoryTracker memoryTracker90 = backupEnvironment84.getMemoryTracker();
    org.neo4j.io.pagecache.PageCache pageCache91 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager92 = new io.github.onograph.backup.BackupRestorationManager(
        config56, fileSystemAbstraction71, memoryTracker90, pageCache91);
    org.neo4j.io.pagecache.PageCache pageCache93 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager94 = new io.github.onograph.backup.BackupRestorationManager(
        config31, fileSystemAbstraction32, memoryTracker90, pageCache93);
    org.neo4j.io.pagecache.PageCache pageCache95 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager96 = new io.github.onograph.backup.BackupRestorationManager(
        config23, fileSystemAbstraction30, memoryTracker90, pageCache95);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(config23);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(factory39);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(factory42);
    org.junit.Assert.assertNotNull(factory44);
    org.junit.Assert.assertNotNull(factory46);
    org.junit.Assert.assertNotNull(factory48);
    org.junit.Assert.assertNotNull(factory50);
    org.junit.Assert.assertNotNull(factory51);
    org.junit.Assert.assertNotNull(factory53);
    org.junit.Assert.assertNotNull(factory55);
    org.junit.Assert.assertNotNull(config56);
    org.junit.Assert.assertNotNull(factory57);
    org.junit.Assert.assertNotNull(factory58);
    org.junit.Assert.assertNotNull(factory72);
    org.junit.Assert.assertNotNull(factory74);
    org.junit.Assert.assertNotNull(factory76);
    org.junit.Assert.assertNotNull(factory78);
    org.junit.Assert.assertNotNull(factory80);
    org.junit.Assert.assertNotNull(factory83);
    org.junit.Assert.assertNotNull(backupEnvironment84);
    org.junit.Assert.assertNotNull(databaseNamePattern85);
    org.junit.Assert.assertNotNull(socketAddress86);
    org.junit.Assert.assertNotNull(path87);
    org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    org.junit.Assert.assertNotNull(path89);
    org.junit.Assert.assertNotNull(memoryTracker90);
  }

  @Test
  public void test0255() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0255");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup("");
    io.github.onograph.backup.Backup backup3 = backup1.isCc(true);
    io.github.onograph.backup.Backup backup5 = backup3.isCc(true);
    io.github.onograph.backup.Backup backup7 = backup3.isBftf(false);
    io.github.onograph.backup.Backup backup9 = backup7.isBftf(true);
    io.github.onograph.backup.Backup backup11 = backup9.isCc(true);
    java.io.OutputStream outputStream12 = null;
    try {
      io.github.onograph.backup.Backup backup13 = backup9.outputStream(outputStream12);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: outputStream");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(backup3);
    org.junit.Assert.assertNotNull(backup5);
    org.junit.Assert.assertNotNull(backup7);
    org.junit.Assert.assertNotNull(backup9);
    org.junit.Assert.assertNotNull(backup11);
  }

  @Test
  public void test0256() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0256");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.logging.LogProvider logProvider5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator2.itraLogProvider(
        logProvider5);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction7 = null;
    io.github.onograph.backup.BackupRunner.Generator generator8 = generator2.fFileSystemAbstraction(
        fileSystemAbstraction7);
    org.neo4j.logging.LogProvider logProvider9 = null;
    io.github.onograph.backup.BackupRunner.Generator generator10 = generator8.itraLogProvider(
        logProvider9);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction11 = null;
    io.github.onograph.backup.BackupRunner.Generator generator12 = generator8.fFileSystemAbstraction(
        fileSystemAbstraction11);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction13 = null;
    io.github.onograph.backup.BackupRunner.Generator generator14 = generator8.fFileSystemAbstraction(
        fileSystemAbstraction13);
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(generator8);
    org.junit.Assert.assertNotNull(generator10);
    org.junit.Assert.assertNotNull(generator12);
    org.junit.Assert.assertNotNull(generator14);
  }

  @Test
  public void test0257() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0257");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    org.neo4j.configuration.helpers.SocketAddress socketAddress3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.wihadsBackupEnvironmentFactory(
        socketAddress3);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isGcc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.isCc(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory4.isCc(false);
    java.lang.Class<?> wildcardClass11 = factory4.getClass();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(wildcardClass11);
  }

  @Test
  public void test0258() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0258");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator2.fFileSystemAbstraction(
        fileSystemAbstraction5);
    org.neo4j.logging.LogProvider logProvider7 = null;
    io.github.onograph.backup.BackupRunner.Generator generator8 = generator6.uLogProvider(
        logProvider7);
    org.neo4j.time.SystemNanoClock systemNanoClock9 = null;
    io.github.onograph.backup.BackupRunner.Generator generator10 = generator6.systemNanoClock(
        systemNanoClock9);
    io.github.onograph.backup.BackupRunner backupRunner11 = generator10.bulBackupRunner();
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory12.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory12.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory12.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory18.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory18.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment24 = factory18.bulBackupEnvironment();
    boolean boolean25 = backupEnvironment24.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional26 = backupEnvironment24.geicmaOptional();
    org.neo4j.configuration.helpers.SocketAddress socketAddress27 = backupEnvironment24.getSocketAddress();
    boolean boolean28 = backupEnvironment24.getIsCc();
    try {
      backupRunner11.excebcpForBa(backupEnvironment24);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(generator8);
    org.junit.Assert.assertNotNull(generator10);
    org.junit.Assert.assertNotNull(backupRunner11);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(backupEnvironment24);
    org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional26);
    org.junit.Assert.assertNotNull(socketAddress27);
    org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
  }

  @Test
  public void test0259() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0259");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupIOService backupIOService1 = new io.github.onograph.backup.BackupIOService(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.miAuthMetaOptions(
        authMetaOptions5);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory9.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory9.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory15.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory15.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment21 = factory15.bulBackupEnvironment();
    boolean boolean22 = backupEnvironment21.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional23 = backupEnvironment21.geicmaOptional();
    java.nio.file.Path path24 = backupEnvironment21.getPbPath();
    java.nio.file.Path path25 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path24);
    java.nio.file.Path path26 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path25);
    boolean boolean27 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path26);
    java.nio.file.Path path28 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path26);
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory29.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory29.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = factory29.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = factory35.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory40 = factory35.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment41 = factory35.bulBackupEnvironment();
    boolean boolean42 = backupEnvironment41.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional43 = backupEnvironment41.geicmaOptional();
    java.nio.file.Path path44 = backupEnvironment41.getPbPath();
    java.nio.file.Path path45 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path44);
    java.nio.file.Path path46 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path45);
    io.github.onograph.backup.FileMoverService fileMoverService47 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path26, path45);
    io.github.onograph.backup.BackupEnvironment.Factory factory48 = factory6.prPath(path45);
    try {
      boolean boolean49 = backupIOService1.isExsForPa(path45);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(backupEnvironment21);
    org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional23);
    org.junit.Assert.assertNotNull(path24);
    org.junit.Assert.assertNotNull(path25);
    org.junit.Assert.assertNotNull(path26);
    org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    org.junit.Assert.assertNotNull(path28);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(factory40);
    org.junit.Assert.assertNotNull(backupEnvironment41);
    org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional43);
    org.junit.Assert.assertNotNull(path44);
    org.junit.Assert.assertNotNull(path45);
    org.junit.Assert.assertNotNull(path46);
    org.junit.Assert.assertNotNull(fileMoverService47);
    org.junit.Assert.assertNotNull(factory48);
  }

  @Test
  public void test0260() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0260");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupIOService backupIOService1 = new io.github.onograph.backup.BackupIOService(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    java.nio.file.Path path5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.prPath(path5);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isSicc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isSicc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory11.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory11.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory17.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory17.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment23 = factory17.bulBackupEnvironment();
    boolean boolean24 = backupEnvironment23.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional25 = backupEnvironment23.geicmaOptional();
    java.nio.file.Path path26 = backupEnvironment23.getPbPath();
    java.nio.file.Path path27 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path26);
    java.nio.file.Path path28 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path27);
    boolean boolean29 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path28);
    java.nio.file.Path path30 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path28);
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory31.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = factory31.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = factory31.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory39 = factory37.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory42 = factory37.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment43 = factory37.bulBackupEnvironment();
    boolean boolean44 = backupEnvironment43.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional45 = backupEnvironment43.geicmaOptional();
    java.nio.file.Path path46 = backupEnvironment43.getPbPath();
    java.nio.file.Path path47 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path46);
    java.nio.file.Path path48 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path47);
    io.github.onograph.backup.FileMoverService fileMoverService49 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path28, path47);
    io.github.onograph.backup.BackupEnvironment.Factory factory50 = factory10.prPath(path47);
    java.nio.file.Path path51 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path47);
    try {
      backupIOService1.deedForPa(path47);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(backupEnvironment23);
    org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional25);
    org.junit.Assert.assertNotNull(path26);
    org.junit.Assert.assertNotNull(path27);
    org.junit.Assert.assertNotNull(path28);
    org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    org.junit.Assert.assertNotNull(path30);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(factory39);
    org.junit.Assert.assertNotNull(factory42);
    org.junit.Assert.assertNotNull(backupEnvironment43);
    org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional45);
    org.junit.Assert.assertNotNull(path46);
    org.junit.Assert.assertNotNull(path47);
    org.junit.Assert.assertNotNull(path48);
    org.junit.Assert.assertNotNull(fileMoverService49);
    org.junit.Assert.assertNotNull(factory50);
    org.junit.Assert.assertNotNull(path51);
  }

  @Test
  public void test0261() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0261");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    java.nio.file.Path path3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.prPath(path3);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isRp(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.isIcc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory4.isGcc(
        (java.lang.Boolean) false);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
  }

  @Test
  public void test0262() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0262");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    java.io.PrintStream printStream3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory4.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory10.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory10.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment16 = factory10.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern17 = backupEnvironment16.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress18 = backupEnvironment16.getSocketAddress();
    java.nio.file.Path path19 = backupEnvironment16.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory20.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory20.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory20.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = factory26.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory26.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment32 = factory26.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern33 = backupEnvironment32.getDatabaseNamePattern();
    boolean boolean34 = backupEnvironment32.getIsBftf();
    boolean boolean35 = backupEnvironment32.getIsBftf();
    java.nio.file.Path path36 = backupEnvironment32.getRpPath();
    java.nio.file.Path path37 = backupEnvironment32.getPbPath();
    org.neo4j.io.layout.DatabaseLayout databaseLayout38 = null;
    try {
      io.github.onograph.backup.GdbRestorer gdbRestorer39 = new io.github.onograph.backup.GdbRestorer(
          fileSystemAbstraction0, false, false, printStream3, path19, path37, databaseLayout38);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(backupEnvironment16);
    org.junit.Assert.assertNotNull(databaseNamePattern17);
    org.junit.Assert.assertNotNull(socketAddress18);
    org.junit.Assert.assertNotNull(path19);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(backupEnvironment32);
    org.junit.Assert.assertNotNull(databaseNamePattern33);
    org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    org.junit.Assert.assertNotNull(path36);
    org.junit.Assert.assertNotNull(path37);
  }

  @Test
  public void test0263() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0263");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup("");
    io.github.onograph.backup.Backup backup3 = backup1.isCc(true);
    io.github.onograph.backup.Backup backup5 = backup3.isCc(true);
    io.github.onograph.backup.Backup backup7 = backup3.isBftf(false);
    io.github.onograph.backup.Backup backup9 = backup7.isBftf(true);
    io.github.onograph.backup.Backup backup11 = backup9.isCc(true);
    io.github.onograph.backup.Backup backup13 = backup11.isBftf(false);
    java.io.OutputStream outputStream14 = null;
    try {
      io.github.onograph.backup.Backup backup15 = backup13.outputStream(outputStream14);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: outputStream");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(backup3);
    org.junit.Assert.assertNotNull(backup5);
    org.junit.Assert.assertNotNull(backup7);
    org.junit.Assert.assertNotNull(backup9);
    org.junit.Assert.assertNotNull(backup11);
    org.junit.Assert.assertNotNull(backup13);
  }

  @Test
  public void test0264() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0264");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupIOService backupIOService1 = new io.github.onograph.backup.BackupIOService(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory8.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment14 = factory8.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern15 = backupEnvironment14.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress16 = backupEnvironment14.getSocketAddress();
    java.nio.file.Path path17 = backupEnvironment14.getRpPath();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction18 = null;
    io.github.onograph.backup.FileMover fileMover19 = new io.github.onograph.backup.FileMover(
        fileSystemAbstraction18);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory20.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory20.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory20.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = factory26.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory26.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment32 = factory26.bulBackupEnvironment();
    boolean boolean33 = backupEnvironment32.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional34 = backupEnvironment32.geicmaOptional();
    java.nio.file.Path path35 = backupEnvironment32.getPbPath();
    java.nio.file.Path path36 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path35);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream37 = fileMover19._trrfrmnStream(
        path35);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory40 = factory38.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = factory41.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = factory41.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = factory41.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = factory47.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory52 = factory47.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment53 = factory47.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern54 = backupEnvironment53.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress55 = backupEnvironment53.getSocketAddress();
    java.nio.file.Path path56 = backupEnvironment53.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory57 = factory38.pbPath(path56);
    io.github.onograph.backup.BackupEnvironment.Factory factory58 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory60 = factory58.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory61 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory63 = factory61.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory65 = factory61.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory67 = factory61.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory69 = factory67.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory72 = factory67.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment73 = factory67.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern74 = backupEnvironment73.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress75 = backupEnvironment73.getSocketAddress();
    java.nio.file.Path path76 = backupEnvironment73.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory77 = factory58.pbPath(path76);
    io.github.onograph.backup.FileMoverService fileMoverService78 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path56, path76);
    java.nio.file.Path path79 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path56);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream80 = fileMover19._trrfrmnStream(
        path79);
    io.github.onograph.backup.FileMoverService fileMoverService81 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path17, path79);
    java.nio.file.Path path82 = fileMoverService81.filPath();
    try {
      boolean boolean83 = backupIOService1.isExsForPa(path82);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(backupEnvironment14);
    org.junit.Assert.assertNotNull(databaseNamePattern15);
    org.junit.Assert.assertNotNull(socketAddress16);
    org.junit.Assert.assertNotNull(path17);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(backupEnvironment32);
    org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional34);
    org.junit.Assert.assertNotNull(path35);
    org.junit.Assert.assertNotNull(path36);
    org.junit.Assert.assertNotNull(fileMoverServiceStream37);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(factory40);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory49);
    org.junit.Assert.assertNotNull(factory52);
    org.junit.Assert.assertNotNull(backupEnvironment53);
    org.junit.Assert.assertNotNull(databaseNamePattern54);
    org.junit.Assert.assertNotNull(socketAddress55);
    org.junit.Assert.assertNotNull(path56);
    org.junit.Assert.assertNotNull(factory57);
    org.junit.Assert.assertNotNull(factory58);
    org.junit.Assert.assertNotNull(factory60);
    org.junit.Assert.assertNotNull(factory61);
    org.junit.Assert.assertNotNull(factory63);
    org.junit.Assert.assertNotNull(factory65);
    org.junit.Assert.assertNotNull(factory67);
    org.junit.Assert.assertNotNull(factory69);
    org.junit.Assert.assertNotNull(factory72);
    org.junit.Assert.assertNotNull(backupEnvironment73);
    org.junit.Assert.assertNotNull(databaseNamePattern74);
    org.junit.Assert.assertNotNull(socketAddress75);
    org.junit.Assert.assertNotNull(path76);
    org.junit.Assert.assertNotNull(factory77);
    org.junit.Assert.assertNotNull(fileMoverService78);
    org.junit.Assert.assertNotNull(path79);
    org.junit.Assert.assertNotNull(fileMoverServiceStream80);
    org.junit.Assert.assertNotNull(fileMoverService81);
    org.junit.Assert.assertNotNull(path82);
  }

  @Test
  public void test0265() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0265");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup("");
    io.github.onograph.backup.Backup backup3 = backup1.isCc(true);
    io.github.onograph.backup.Backup backup5 = backup3.isCc(true);
    io.github.onograph.backup.Backup backup7 = backup3.isBftf(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory9.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory9.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory15.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory15.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment21 = factory15.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern22 = backupEnvironment21.getDatabaseNamePattern();
    boolean boolean23 = backupEnvironment21.getIsBftf();
    java.nio.file.Path path24 = backupEnvironment21.getRpPath();
    try {
      io.github.onograph.backup.Backup.BackupRespState backupRespState25 = backup7.bakBackupBackupRespState(
          "database.id", path24);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.RuntimeException; message: *** Error:  3b02b00a-232a-454b-823b-025cc97a58b8");
    } catch (java.lang.RuntimeException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(backup3);
    org.junit.Assert.assertNotNull(backup5);
    org.junit.Assert.assertNotNull(backup7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(backupEnvironment21);
    org.junit.Assert.assertNotNull(databaseNamePattern22);
    org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    org.junit.Assert.assertNotNull(path24);
  }

  @Test
  public void test0266() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0266");
    }
    io.github.onograph.backup.CommandProviderGdbRestorerCommandImpl commandProviderGdbRestorerCommandImpl0 = new io.github.onograph.backup.CommandProviderGdbRestorerCommandImpl();
    org.neo4j.cli.Command.CommandType commandType1 = commandProviderGdbRestorerCommandImpl0.commandType();
    int int2 = commandProviderGdbRestorerCommandImpl0.getPriority();
    org.neo4j.cli.Command.CommandType commandType3 = commandProviderGdbRestorerCommandImpl0.commandType();
    org.neo4j.cli.ExecutionContext executionContext4 = null;
    try {
      io.github.onograph.backup.GdbRestorerCommand gdbRestorerCommand5 = commandProviderGdbRestorerCommandImpl0.createCommand(
          executionContext4);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue(
        "'" + commandType1 + "' != '" + org.neo4j.cli.Command.CommandType.RESTORE_DB + "'",
        commandType1.equals(org.neo4j.cli.Command.CommandType.RESTORE_DB));
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    org.junit.Assert.assertTrue(
        "'" + commandType3 + "' != '" + org.neo4j.cli.Command.CommandType.RESTORE_DB + "'",
        commandType3.equals(org.neo4j.cli.Command.CommandType.RESTORE_DB));
  }

  @Test
  public void test0267() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0267");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.time.SystemNanoClock systemNanoClock5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator2.systemNanoClock(
        systemNanoClock5);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction7 = null;
    io.github.onograph.backup.BackupRunner.Generator generator8 = generator6.fFileSystemAbstraction(
        fileSystemAbstraction7);
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory9 = null;
    io.github.onograph.backup.BackupRunner.Generator generator10 = generator8.progressMonitorFactory(
        progressMonitorFactory9);
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(generator8);
    org.junit.Assert.assertNotNull(generator10);
  }

  @Test
  public void test0268() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0268");
    }
    io.github.onograph.backup.CommandProviderBackupImpl commandProviderBackupImpl0 = new io.github.onograph.backup.CommandProviderBackupImpl();
    int int1 = commandProviderBackupImpl0.getPriority();
    org.neo4j.cli.Command.CommandType commandType2 = commandProviderBackupImpl0.commandType();
    org.neo4j.cli.ExecutionContext executionContext3 = null;
    try {
      io.github.onograph.backup.BackupCommand backupCommand4 = commandProviderBackupImpl0.createCommand(
          executionContext3);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    org.junit.Assert.assertTrue(
        "'" + commandType2 + "' != '" + org.neo4j.cli.Command.CommandType.ONLINE_BACKUP + "'",
        commandType2.equals(org.neo4j.cli.Command.CommandType.ONLINE_BACKUP));
  }

  @Test
  public void test0269() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0269");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    java.io.PrintStream printStream3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory4.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory10.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory10.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment16 = factory10.bulBackupEnvironment();
    boolean boolean17 = backupEnvironment16.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional18 = backupEnvironment16.geicmaOptional();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional19 = backupEnvironment16.geicmaOptional();
    java.nio.file.Path path20 = backupEnvironment16.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory21.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory21.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory21.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory27.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory27.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment33 = factory27.bulBackupEnvironment();
    boolean boolean34 = backupEnvironment33.getIsBftf();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern35 = backupEnvironment33.getDatabaseNamePattern();
    java.nio.file.Path path36 = backupEnvironment33.getRpPath();
    java.nio.file.Path path37 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path36);
    org.neo4j.io.layout.DatabaseLayout databaseLayout38 = null;
    try {
      io.github.onograph.backup.GdbRestorer gdbRestorer39 = new io.github.onograph.backup.GdbRestorer(
          fileSystemAbstraction0, true, false, printStream3, path20, path37, databaseLayout38);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(backupEnvironment16);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional18);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional19);
    org.junit.Assert.assertNotNull(path20);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(backupEnvironment33);
    org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    org.junit.Assert.assertNotNull(databaseNamePattern35);
    org.junit.Assert.assertNotNull(path36);
    org.junit.Assert.assertNotNull(path37);
  }

  @Test
  public void test0270() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0270");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.GdbIdRepo gdbIdRepo1 = new io.github.onograph.backup.GdbIdRepo(
        fileSystemAbstraction0);
    org.neo4j.kernel.database.DatabaseId databaseId2 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory3 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory5 = factory3.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory3.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory3.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory9.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment15 = factory9.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern16 = backupEnvironment15.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress17 = backupEnvironment15.getSocketAddress();
    java.nio.file.Path path18 = backupEnvironment15.getRpPath();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction19 = null;
    io.github.onograph.backup.FileMover fileMover20 = new io.github.onograph.backup.FileMover(
        fileSystemAbstraction19);
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory21.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory21.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory21.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory27.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory27.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment33 = factory27.bulBackupEnvironment();
    boolean boolean34 = backupEnvironment33.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional35 = backupEnvironment33.geicmaOptional();
    java.nio.file.Path path36 = backupEnvironment33.getPbPath();
    java.nio.file.Path path37 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path36);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream38 = fileMover20._trrfrmnStream(
        path36);
    io.github.onograph.backup.BackupEnvironment.Factory factory39 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory39.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory42 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory44 = factory42.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory46 = factory42.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory48 = factory42.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory50 = factory48.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory53 = factory48.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment54 = factory48.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern55 = backupEnvironment54.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress56 = backupEnvironment54.getSocketAddress();
    java.nio.file.Path path57 = backupEnvironment54.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory58 = factory39.pbPath(path57);
    io.github.onograph.backup.BackupEnvironment.Factory factory59 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory61 = factory59.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory62 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory64 = factory62.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory66 = factory62.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory68 = factory62.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory70 = factory68.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory73 = factory68.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment74 = factory68.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern75 = backupEnvironment74.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress76 = backupEnvironment74.getSocketAddress();
    java.nio.file.Path path77 = backupEnvironment74.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory78 = factory59.pbPath(path77);
    io.github.onograph.backup.FileMoverService fileMoverService79 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path57, path77);
    java.nio.file.Path path80 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path57);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream81 = fileMover20._trrfrmnStream(
        path80);
    io.github.onograph.backup.FileMoverService fileMoverService82 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path18, path80);
    java.nio.file.Path path83 = fileMoverService82.filPath();
    try {
      gdbIdRepo1.wrdaiForDaPa(databaseId2, path83);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory3);
    org.junit.Assert.assertNotNull(factory5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(backupEnvironment15);
    org.junit.Assert.assertNotNull(databaseNamePattern16);
    org.junit.Assert.assertNotNull(socketAddress17);
    org.junit.Assert.assertNotNull(path18);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(backupEnvironment33);
    org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional35);
    org.junit.Assert.assertNotNull(path36);
    org.junit.Assert.assertNotNull(path37);
    org.junit.Assert.assertNotNull(fileMoverServiceStream38);
    org.junit.Assert.assertNotNull(factory39);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(factory42);
    org.junit.Assert.assertNotNull(factory44);
    org.junit.Assert.assertNotNull(factory46);
    org.junit.Assert.assertNotNull(factory48);
    org.junit.Assert.assertNotNull(factory50);
    org.junit.Assert.assertNotNull(factory53);
    org.junit.Assert.assertNotNull(backupEnvironment54);
    org.junit.Assert.assertNotNull(databaseNamePattern55);
    org.junit.Assert.assertNotNull(socketAddress56);
    org.junit.Assert.assertNotNull(path57);
    org.junit.Assert.assertNotNull(factory58);
    org.junit.Assert.assertNotNull(factory59);
    org.junit.Assert.assertNotNull(factory61);
    org.junit.Assert.assertNotNull(factory62);
    org.junit.Assert.assertNotNull(factory64);
    org.junit.Assert.assertNotNull(factory66);
    org.junit.Assert.assertNotNull(factory68);
    org.junit.Assert.assertNotNull(factory70);
    org.junit.Assert.assertNotNull(factory73);
    org.junit.Assert.assertNotNull(backupEnvironment74);
    org.junit.Assert.assertNotNull(databaseNamePattern75);
    org.junit.Assert.assertNotNull(socketAddress76);
    org.junit.Assert.assertNotNull(path77);
    org.junit.Assert.assertNotNull(factory78);
    org.junit.Assert.assertNotNull(fileMoverService79);
    org.junit.Assert.assertNotNull(path80);
    org.junit.Assert.assertNotNull(fileMoverServiceStream81);
    org.junit.Assert.assertNotNull(fileMoverService82);
    org.junit.Assert.assertNotNull(path83);
  }

  @Test
  public void test0271() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0271");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.logging.LogProvider logProvider5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator2.itraLogProvider(
        logProvider5);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction7 = null;
    io.github.onograph.backup.BackupRunner.Generator generator8 = generator2.fFileSystemAbstraction(
        fileSystemAbstraction7);
    org.neo4j.logging.LogProvider logProvider9 = null;
    io.github.onograph.backup.BackupRunner.Generator generator10 = generator8.itraLogProvider(
        logProvider9);
    io.github.onograph.backup.BackupRunner backupRunner11 = generator10.bulBackupRunner();
    io.github.onograph.backup.BackupEnvironment backupEnvironment12 = null;
    try {
      backupRunner11.excebcpForBa(backupEnvironment12);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(generator8);
    org.junit.Assert.assertNotNull(generator10);
    org.junit.Assert.assertNotNull(backupRunner11);
  }

  @Test
  public void test0272() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0272");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = factory2.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory2.isCc(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    java.nio.file.Path path11 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory8.prPath(path11);
    java.nio.file.Path path13 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory12.prPath(path13);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory15.isCc(false);
    java.nio.file.Path path18 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory15.prPath(path18);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config21 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory20.config(config21);
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory22.isRp(true);
    org.neo4j.configuration.Config config25 = factory22.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory15.config(config25);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory14.config(config25);
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = factory7.config(config25);
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = factory7.databaseNamePattern(
        "database.id");
    org.neo4j.configuration.helpers.SocketAddress socketAddress31 = factory7.getSocketAddress();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(config5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(config25);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNull(socketAddress31);
  }

  @Test
  public void test0273() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0273");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.FileMover fileMover1 = new io.github.onograph.backup.FileMover(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory8.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment14 = factory8.bulBackupEnvironment();
    boolean boolean15 = backupEnvironment14.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional16 = backupEnvironment14.geicmaOptional();
    java.nio.file.Path path17 = backupEnvironment14.getPbPath();
    java.nio.file.Path path18 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path17);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream19 = fileMover1._trrfrmnStream(
        path17);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory20.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory20.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory20.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = factory26.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory26.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment32 = factory26.bulBackupEnvironment();
    boolean boolean33 = backupEnvironment32.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional34 = backupEnvironment32.geicmaOptional();
    java.nio.file.Path path35 = backupEnvironment32.getPbPath();
    java.nio.file.Path path36 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path35);
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory39 = factory37.isGcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory40 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config41 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory42 = factory40.config(config41);
    io.github.onograph.backup.BackupEnvironment.Factory factory44 = factory42.isRp(true);
    org.neo4j.configuration.Config config45 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory46 = factory44.config(config45);
    org.neo4j.configuration.helpers.SocketAddress socketAddress47 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory48 = factory44.wihadsBackupEnvironmentFactory(
        socketAddress47);
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory51 = factory49.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory52 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory54 = factory52.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory56 = factory52.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory58 = factory52.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory60 = factory58.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory63 = factory58.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment64 = factory58.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern65 = backupEnvironment64.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress66 = backupEnvironment64.getSocketAddress();
    java.nio.file.Path path67 = backupEnvironment64.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory68 = factory49.pbPath(path67);
    io.github.onograph.backup.BackupEnvironment.Factory factory69 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory71 = factory69.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory72 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory74 = factory72.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory76 = factory72.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory78 = factory72.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory80 = factory78.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory83 = factory78.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment84 = factory78.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern85 = backupEnvironment84.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress86 = backupEnvironment84.getSocketAddress();
    java.nio.file.Path path87 = backupEnvironment84.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory88 = factory69.pbPath(path87);
    io.github.onograph.backup.FileMoverService fileMoverService89 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path67, path87);
    io.github.onograph.backup.BackupEnvironment.Factory factory90 = factory44.pbPath(path87);
    boolean boolean91 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path87);
    io.github.onograph.backup.BackupEnvironment.Factory factory92 = factory37.prPath(path87);
    io.github.onograph.backup.FileMoverService fileMoverService93 = io.github.onograph.backup.FileMoverService.movifeseFileMoverService(
        path35, path87);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream94 = fileMover1._trrfrmnStream(
        path35);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(backupEnvironment14);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional16);
    org.junit.Assert.assertNotNull(path17);
    org.junit.Assert.assertNotNull(path18);
    org.junit.Assert.assertNotNull(fileMoverServiceStream19);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(backupEnvironment32);
    org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional34);
    org.junit.Assert.assertNotNull(path35);
    org.junit.Assert.assertNotNull(path36);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(factory39);
    org.junit.Assert.assertNotNull(factory40);
    org.junit.Assert.assertNotNull(factory42);
    org.junit.Assert.assertNotNull(factory44);
    org.junit.Assert.assertNotNull(factory46);
    org.junit.Assert.assertNotNull(factory48);
    org.junit.Assert.assertNotNull(factory49);
    org.junit.Assert.assertNotNull(factory51);
    org.junit.Assert.assertNotNull(factory52);
    org.junit.Assert.assertNotNull(factory54);
    org.junit.Assert.assertNotNull(factory56);
    org.junit.Assert.assertNotNull(factory58);
    org.junit.Assert.assertNotNull(factory60);
    org.junit.Assert.assertNotNull(factory63);
    org.junit.Assert.assertNotNull(backupEnvironment64);
    org.junit.Assert.assertNotNull(databaseNamePattern65);
    org.junit.Assert.assertNotNull(socketAddress66);
    org.junit.Assert.assertNotNull(path67);
    org.junit.Assert.assertNotNull(factory68);
    org.junit.Assert.assertNotNull(factory69);
    org.junit.Assert.assertNotNull(factory71);
    org.junit.Assert.assertNotNull(factory72);
    org.junit.Assert.assertNotNull(factory74);
    org.junit.Assert.assertNotNull(factory76);
    org.junit.Assert.assertNotNull(factory78);
    org.junit.Assert.assertNotNull(factory80);
    org.junit.Assert.assertNotNull(factory83);
    org.junit.Assert.assertNotNull(backupEnvironment84);
    org.junit.Assert.assertNotNull(databaseNamePattern85);
    org.junit.Assert.assertNotNull(socketAddress86);
    org.junit.Assert.assertNotNull(path87);
    org.junit.Assert.assertNotNull(factory88);
    org.junit.Assert.assertNotNull(fileMoverService89);
    org.junit.Assert.assertNotNull(factory90);
    org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    org.junit.Assert.assertNotNull(factory92);
    org.junit.Assert.assertNotNull(fileMoverService93);
    org.junit.Assert.assertNotNull(fileMoverServiceStream94);
  }

  @Test
  public void test0274() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0274");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory6.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment12 = factory6.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern13 = backupEnvironment12.getDatabaseNamePattern();
    boolean boolean14 = backupEnvironment12.getIsBftf();
    boolean boolean15 = backupEnvironment12.getIsBftf();
    java.nio.file.Path path16 = backupEnvironment12.getRpPath();
    java.nio.file.Path path17 = backupEnvironment12.getPbPath();
    boolean boolean18 = backupEnvironment12.getIsRp();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(backupEnvironment12);
    org.junit.Assert.assertNotNull(databaseNamePattern13);
    org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    org.junit.Assert.assertNotNull(path16);
    org.junit.Assert.assertNotNull(path17);
    org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
  }

  @Test
  public void test0275() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0275");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.config(config5);
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config8 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory7.config(config8);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.isRp(true);
    org.neo4j.configuration.Config config12 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.config(config12);
    org.neo4j.configuration.helpers.SocketAddress socketAddress14 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory11.wihadsBackupEnvironmentFactory(
        socketAddress14);
    org.neo4j.configuration.helpers.SocketAddress socketAddress16 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory11.wihadsBackupEnvironmentFactory(
        socketAddress16);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory11.wihadsBackupEnvironmentFactory(
        (int) (short) -1, "hi!");
    org.neo4j.configuration.Config config21 = factory20.gecfConfig();
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags22 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction23 = null;
    org.neo4j.logging.LogProvider logProvider24 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory25.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = factory28.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory28.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory28.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory34.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory39 = factory34.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment40 = factory34.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern41 = backupEnvironment40.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress42 = backupEnvironment40.getSocketAddress();
    java.nio.file.Path path43 = backupEnvironment40.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory44 = factory25.pbPath(path43);
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = factory45.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory48 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory50 = factory48.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory52 = factory48.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory54 = factory48.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory56 = factory54.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory59 = factory54.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment60 = factory54.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern61 = backupEnvironment60.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress62 = backupEnvironment60.getSocketAddress();
    java.nio.file.Path path63 = backupEnvironment60.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory64 = factory45.pbPath(path63);
    io.github.onograph.backup.FileMoverService fileMoverService65 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path43, path63);
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory66 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl67 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config21, consistencyFlags22, fileSystemAbstraction23, logProvider24, path63,
        progressMonitorFactory66);
    io.github.onograph.backup.BackupEnvironment.Factory factory68 = factory4.config(config21);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(config21);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(factory39);
    org.junit.Assert.assertNotNull(backupEnvironment40);
    org.junit.Assert.assertNotNull(databaseNamePattern41);
    org.junit.Assert.assertNotNull(socketAddress42);
    org.junit.Assert.assertNotNull(path43);
    org.junit.Assert.assertNotNull(factory44);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory48);
    org.junit.Assert.assertNotNull(factory50);
    org.junit.Assert.assertNotNull(factory52);
    org.junit.Assert.assertNotNull(factory54);
    org.junit.Assert.assertNotNull(factory56);
    org.junit.Assert.assertNotNull(factory59);
    org.junit.Assert.assertNotNull(backupEnvironment60);
    org.junit.Assert.assertNotNull(databaseNamePattern61);
    org.junit.Assert.assertNotNull(socketAddress62);
    org.junit.Assert.assertNotNull(path63);
    org.junit.Assert.assertNotNull(factory64);
    org.junit.Assert.assertNotNull(fileMoverService65);
    org.junit.Assert.assertNotNull(factory68);
  }

  @Test
  public void test0276() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0276");
    }
    io.github.onograph.backup.CommandProviderBackupImpl commandProviderBackupImpl0 = new io.github.onograph.backup.CommandProviderBackupImpl();
    int int1 = commandProviderBackupImpl0.getPriority();
    int int2 = commandProviderBackupImpl0.getPriority();
    int int3 = commandProviderBackupImpl0.getPriority();
    org.neo4j.cli.ExecutionContext executionContext4 = null;
    try {
      io.github.onograph.backup.BackupCommand backupCommand5 = commandProviderBackupImpl0.createCommand(
          executionContext4);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
  }

  @Test
  public void test0277() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0277");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = factory2.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory2.isCc(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    java.nio.file.Path path11 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory8.prPath(path11);
    java.nio.file.Path path13 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory12.prPath(path13);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory15.isCc(false);
    java.nio.file.Path path18 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory15.prPath(path18);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config21 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory20.config(config21);
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory22.isRp(true);
    org.neo4j.configuration.Config config25 = factory22.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory15.config(config25);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory14.config(config25);
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = factory7.config(config25);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction29 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory30.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory30.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory30.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = factory36.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory36.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment42 = factory36.bulBackupEnvironment();
    boolean boolean43 = backupEnvironment42.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional44 = backupEnvironment42.geicmaOptional();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern45 = backupEnvironment42.getDatabaseNamePattern();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional46 = backupEnvironment42.geicmaOptional();
    org.neo4j.memory.MemoryTracker memoryTracker47 = backupEnvironment42.getMemoryTracker();
    org.neo4j.io.pagecache.PageCache pageCache48 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager49 = new io.github.onograph.backup.BackupRestorationManager(
        config25, fileSystemAbstraction29, memoryTracker47, pageCache48);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction50 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory51 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory53 = factory51.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory55 = factory51.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory57 = factory51.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory59 = factory57.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory62 = factory57.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment63 = factory57.bulBackupEnvironment();
    org.neo4j.memory.MemoryTracker memoryTracker64 = backupEnvironment63.getMemoryTracker();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern65 = backupEnvironment63.getDatabaseNamePattern();
    boolean boolean66 = backupEnvironment63.getIsBftf();
    java.nio.file.Path path67 = backupEnvironment63.getRpPath();
    boolean boolean68 = backupEnvironment63.getIsRp();
    org.neo4j.memory.MemoryTracker memoryTracker69 = backupEnvironment63.getMemoryTracker();
    org.neo4j.io.pagecache.PageCache pageCache70 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager71 = new io.github.onograph.backup.BackupRestorationManager(
        config25, fileSystemAbstraction50, memoryTracker69, pageCache70);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(config5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(config25);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(backupEnvironment42);
    org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional44);
    org.junit.Assert.assertNotNull(databaseNamePattern45);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional46);
    org.junit.Assert.assertNotNull(memoryTracker47);
    org.junit.Assert.assertNotNull(factory51);
    org.junit.Assert.assertNotNull(factory53);
    org.junit.Assert.assertNotNull(factory55);
    org.junit.Assert.assertNotNull(factory57);
    org.junit.Assert.assertNotNull(factory59);
    org.junit.Assert.assertNotNull(factory62);
    org.junit.Assert.assertNotNull(backupEnvironment63);
    org.junit.Assert.assertNotNull(memoryTracker64);
    org.junit.Assert.assertNotNull(databaseNamePattern65);
    org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    org.junit.Assert.assertNotNull(path67);
    org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    org.junit.Assert.assertNotNull(memoryTracker69);
  }

  @Test
  public void test0278() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0278");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory8.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment14 = factory8.bulBackupEnvironment();
    boolean boolean15 = backupEnvironment14.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional16 = backupEnvironment14.geicmaOptional();
    java.nio.file.Path path17 = backupEnvironment14.getPbPath();
    java.nio.file.Path path18 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path17);
    java.nio.file.Path path19 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path18);
    boolean boolean20 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path19);
    java.nio.file.Path path21 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path19);
    java.nio.file.Path path22 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path21);
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory23.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = factory26.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = factory26.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory26.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory32.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = factory32.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment38 = factory32.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern39 = backupEnvironment38.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress40 = backupEnvironment38.getSocketAddress();
    java.nio.file.Path path41 = backupEnvironment38.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory42 = factory23.pbPath(path41);
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = factory43.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory46 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory48 = factory46.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory50 = factory46.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory52 = factory46.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory54 = factory52.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory57 = factory52.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment58 = factory52.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern59 = backupEnvironment58.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress60 = backupEnvironment58.getSocketAddress();
    java.nio.file.Path path61 = backupEnvironment58.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory62 = factory43.pbPath(path61);
    io.github.onograph.backup.FileMoverService fileMoverService63 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path41, path61);
    java.nio.file.Path path64 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path61);
    io.github.onograph.backup.FileMoverService fileMoverService65 = io.github.onograph.backup.FileMoverService.movifeseFileMoverService(
        path21, path64);
    org.neo4j.logging.LogProvider logProvider66 = null;
    org.neo4j.io.pagecache.PageCache pageCache67 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer68 = null;
    try {
      io.github.onograph.backup.BackupMetaService backupMetaService69 = new io.github.onograph.backup.BackupMetaService(
          fileSystemAbstraction0, "database.id", path21, logProvider66, pageCache67,
          pageCacheTracer68);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(backupEnvironment14);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional16);
    org.junit.Assert.assertNotNull(path17);
    org.junit.Assert.assertNotNull(path18);
    org.junit.Assert.assertNotNull(path19);
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    org.junit.Assert.assertNotNull(path21);
    org.junit.Assert.assertNotNull(path22);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(backupEnvironment38);
    org.junit.Assert.assertNotNull(databaseNamePattern39);
    org.junit.Assert.assertNotNull(socketAddress40);
    org.junit.Assert.assertNotNull(path41);
    org.junit.Assert.assertNotNull(factory42);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory46);
    org.junit.Assert.assertNotNull(factory48);
    org.junit.Assert.assertNotNull(factory50);
    org.junit.Assert.assertNotNull(factory52);
    org.junit.Assert.assertNotNull(factory54);
    org.junit.Assert.assertNotNull(factory57);
    org.junit.Assert.assertNotNull(backupEnvironment58);
    org.junit.Assert.assertNotNull(databaseNamePattern59);
    org.junit.Assert.assertNotNull(socketAddress60);
    org.junit.Assert.assertNotNull(path61);
    org.junit.Assert.assertNotNull(factory62);
    org.junit.Assert.assertNotNull(fileMoverService63);
    org.junit.Assert.assertNotNull(path64);
    org.junit.Assert.assertNotNull(fileMoverService65);
  }

  @Test
  public void test0279() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0279");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isSicc(
        (java.lang.Boolean) true);
    try {
      io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.databaseNamePattern(
          "");
      org.junit.Assert.fail(
          "Expected exception of type java.lang.IllegalArgumentException; message: The provided database name is empty.");
    } catch (java.lang.IllegalArgumentException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
  }

  @Test
  public void test0280() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0280");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory6.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isFtfb(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory13.isRp(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory16.isCc(false);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions19 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory16.miAuthMetaOptions(
        authMetaOptions19);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory20.isGcc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory20.isCc(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory20.isCc(true);
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern27 = factory26.gedtenprDatabaseNamePattern();
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = factory15.databaseNamePattern(
        databaseNamePattern27);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(databaseNamePattern27);
    org.junit.Assert.assertNotNull(factory28);
  }

  @Test
  public void test0281() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0281");
    }
    io.github.onograph.backup.CommandProviderBackupImpl commandProviderBackupImpl0 = new io.github.onograph.backup.CommandProviderBackupImpl();
    org.neo4j.cli.Command.CommandType commandType1 = commandProviderBackupImpl0.commandType();
    org.neo4j.cli.Command.CommandType commandType2 = commandProviderBackupImpl0.commandType();
    org.neo4j.cli.ExecutionContext executionContext3 = null;
    try {
      io.github.onograph.backup.BackupCommand backupCommand4 = commandProviderBackupImpl0.createCommand(
          executionContext3);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue(
        "'" + commandType1 + "' != '" + org.neo4j.cli.Command.CommandType.ONLINE_BACKUP + "'",
        commandType1.equals(org.neo4j.cli.Command.CommandType.ONLINE_BACKUP));
    org.junit.Assert.assertTrue(
        "'" + commandType2 + "' != '" + org.neo4j.cli.Command.CommandType.ONLINE_BACKUP + "'",
        commandType2.equals(org.neo4j.cli.Command.CommandType.ONLINE_BACKUP));
  }

  @Test
  public void test0282() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0282");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.config(config5);
    org.neo4j.configuration.helpers.SocketAddress socketAddress7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress7);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config10 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.config(config10);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isRp(true);
    org.neo4j.configuration.Config config14 = factory11.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory4.config(config14);
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern16 = factory15.gedtenprDatabaseNamePattern();
    java.nio.file.Path path17 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory15.pbPath(path17);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(config14);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(databaseNamePattern16);
    org.junit.Assert.assertNotNull(factory18);
  }

  @Test
  public void test0283() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0283");
    }
    io.github.onograph.backup.CommandProviderBackupImpl commandProviderBackupImpl0 = new io.github.onograph.backup.CommandProviderBackupImpl();
    org.neo4j.cli.Command.CommandType commandType1 = commandProviderBackupImpl0.commandType();
    org.neo4j.cli.Command.CommandType commandType2 = commandProviderBackupImpl0.commandType();
    org.neo4j.cli.Command.CommandType commandType3 = commandProviderBackupImpl0.commandType();
    org.neo4j.cli.ExecutionContext executionContext4 = null;
    try {
      io.github.onograph.backup.BackupCommand backupCommand5 = commandProviderBackupImpl0.createCommand(
          executionContext4);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue(
        "'" + commandType1 + "' != '" + org.neo4j.cli.Command.CommandType.ONLINE_BACKUP + "'",
        commandType1.equals(org.neo4j.cli.Command.CommandType.ONLINE_BACKUP));
    org.junit.Assert.assertTrue(
        "'" + commandType2 + "' != '" + org.neo4j.cli.Command.CommandType.ONLINE_BACKUP + "'",
        commandType2.equals(org.neo4j.cli.Command.CommandType.ONLINE_BACKUP));
    org.junit.Assert.assertTrue(
        "'" + commandType3 + "' != '" + org.neo4j.cli.Command.CommandType.ONLINE_BACKUP + "'",
        commandType3.equals(org.neo4j.cli.Command.CommandType.ONLINE_BACKUP));
  }

  @Test
  public void test0284() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0284");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupIOService backupIOService1 = new io.github.onograph.backup.BackupIOService(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory8.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment14 = factory8.bulBackupEnvironment();
    boolean boolean15 = backupEnvironment14.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional16 = backupEnvironment14.geicmaOptional();
    java.nio.file.Path path17 = backupEnvironment14.getPbPath();
    java.nio.file.Path path18 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path17);
    java.nio.file.Path path19 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path18);
    boolean boolean20 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path19);
    try {
      backupIOService1.deedForPa(path19);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(backupEnvironment14);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional16);
    org.junit.Assert.assertNotNull(path17);
    org.junit.Assert.assertNotNull(path18);
    org.junit.Assert.assertNotNull(path19);
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
  }

  @Test
  public void test0285() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0285");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isIcc(
        (java.lang.Boolean) true);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
  }

  @Test
  public void test0286() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0286");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.logging.LogProvider logProvider5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator2.itraLogProvider(
        logProvider5);
    org.neo4j.time.SystemNanoClock systemNanoClock7 = null;
    io.github.onograph.backup.BackupRunner.Generator generator8 = generator6.systemNanoClock(
        systemNanoClock7);
    org.neo4j.logging.LogProvider logProvider9 = null;
    io.github.onograph.backup.BackupRunner.Generator generator10 = generator6.itraLogProvider(
        logProvider9);
    org.neo4j.monitoring.Monitors monitors11 = null;
    io.github.onograph.backup.BackupRunner.Generator generator12 = generator6.monitors(monitors11);
    org.neo4j.time.SystemNanoClock systemNanoClock13 = null;
    io.github.onograph.backup.BackupRunner.Generator generator14 = generator6.systemNanoClock(
        systemNanoClock13);
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(generator8);
    org.junit.Assert.assertNotNull(generator10);
    org.junit.Assert.assertNotNull(generator12);
    org.junit.Assert.assertNotNull(generator14);
  }

  @Test
  public void test0287() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0287");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.logging.LogProvider logProvider5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator2.itraLogProvider(
        logProvider5);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction7 = null;
    io.github.onograph.backup.BackupRunner.Generator generator8 = generator2.fFileSystemAbstraction(
        fileSystemAbstraction7);
    org.neo4j.logging.LogProvider logProvider9 = null;
    io.github.onograph.backup.BackupRunner.Generator generator10 = generator8.itraLogProvider(
        logProvider9);
    io.github.onograph.backup.BackupRunner backupRunner11 = generator10.bulBackupRunner();
    io.github.onograph.backup.BackupRunner backupRunner12 = generator10.bulBackupRunner();
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory13.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory13.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory13.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory19.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory19.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment25 = factory19.bulBackupEnvironment();
    boolean boolean26 = backupEnvironment25.getIsBftf();
    try {
      backupRunner12.excebcpForBa(backupEnvironment25);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(generator8);
    org.junit.Assert.assertNotNull(generator10);
    org.junit.Assert.assertNotNull(backupRunner11);
    org.junit.Assert.assertNotNull(backupRunner12);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(backupEnvironment25);
    org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
  }

  @Test
  public void test0288() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0288");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupIOService backupIOService1 = new io.github.onograph.backup.BackupIOService(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory8.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment14 = factory8.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern15 = backupEnvironment14.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress16 = backupEnvironment14.getSocketAddress();
    java.nio.file.Path path17 = backupEnvironment14.getRpPath();
    boolean boolean18 = backupEnvironment14.getIsBftf();
    java.nio.file.Path path19 = backupEnvironment14.getRpPath();
    java.nio.file.Path path20 = backupEnvironment14.getRpPath();
    try {
      boolean boolean21 = backupIOService1.isExsForPa(path20);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(backupEnvironment14);
    org.junit.Assert.assertNotNull(databaseNamePattern15);
    org.junit.Assert.assertNotNull(socketAddress16);
    org.junit.Assert.assertNotNull(path17);
    org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    org.junit.Assert.assertNotNull(path19);
    org.junit.Assert.assertNotNull(path20);
  }

  @Test
  public void test0289() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0289");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup("");
    io.github.onograph.backup.Backup backup3 = backup1.isCc(true);
    java.io.OutputStream outputStream4 = null;
    try {
      io.github.onograph.backup.Backup backup5 = backup3.outputStream(outputStream4);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: outputStream");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(backup3);
  }

  @Test
  public void test0290() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0290");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isSicc(
        (java.lang.Boolean) true);
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern7 = factory2.gedtenprDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress8 = factory2.getSocketAddress();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(databaseNamePattern7);
    org.junit.Assert.assertNull(socketAddress8);
  }

  @Test
  public void test0291() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0291");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory8.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment14 = factory8.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern15 = backupEnvironment14.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress16 = backupEnvironment14.getSocketAddress();
    java.nio.file.Path path17 = backupEnvironment14.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory18.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory18.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory18.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory24.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory24.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment30 = factory24.bulBackupEnvironment();
    boolean boolean31 = backupEnvironment30.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional32 = backupEnvironment30.geicmaOptional();
    java.nio.file.Path path33 = backupEnvironment30.getPbPath();
    java.nio.file.Path path34 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path33);
    java.nio.file.Path path35 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path34);
    boolean boolean36 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path35);
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory39 = factory37.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory37.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = factory37.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = factory43.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory48 = factory43.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment49 = factory43.bulBackupEnvironment();
    boolean boolean50 = backupEnvironment49.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional51 = backupEnvironment49.geicmaOptional();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional52 = backupEnvironment49.geicmaOptional();
    java.nio.file.Path path53 = backupEnvironment49.getPbPath();
    java.nio.file.Path path54 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path53);
    io.github.onograph.backup.FileMoverService fileMoverService55 = io.github.onograph.backup.FileMoverService.movifeseFileMoverService(
        path35, path54);
    io.github.onograph.backup.FileMoverService fileMoverService56 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path17, path35);
    org.neo4j.logging.LogProvider logProvider57 = null;
    org.neo4j.io.pagecache.PageCache pageCache58 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer59 = null;
    try {
      io.github.onograph.backup.BackupMetaService backupMetaService60 = new io.github.onograph.backup.BackupMetaService(
          fileSystemAbstraction0, "", path17, logProvider57, pageCache58, pageCacheTracer59);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(backupEnvironment14);
    org.junit.Assert.assertNotNull(databaseNamePattern15);
    org.junit.Assert.assertNotNull(socketAddress16);
    org.junit.Assert.assertNotNull(path17);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(backupEnvironment30);
    org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional32);
    org.junit.Assert.assertNotNull(path33);
    org.junit.Assert.assertNotNull(path34);
    org.junit.Assert.assertNotNull(path35);
    org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(factory39);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory48);
    org.junit.Assert.assertNotNull(backupEnvironment49);
    org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional51);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional52);
    org.junit.Assert.assertNotNull(path53);
    org.junit.Assert.assertNotNull(path54);
    org.junit.Assert.assertNotNull(fileMoverService55);
    org.junit.Assert.assertNotNull(fileMoverService56);
  }

  @Test
  public void test0292() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0292");
    }
    io.github.onograph.backup.BackupMetaDTO backupMetaDTO0 = null;
    java.lang.String[] strArray4 = new java.lang.String[]{"", "hi!", "database.id"};
    java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
    boolean boolean6 = java.util.Collections.addAll(
        (java.util.Collection<java.lang.String>) strList5, strArray4);
    try {
      io.github.onograph.backup.BackupMetaService.wrtmedaForBaLi(backupMetaDTO0,
          (java.util.List<java.lang.String>) strList5);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(strArray4);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
  }

  @Test
  public void test0293() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0293");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.logging.LogProvider logProvider5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator2.itraLogProvider(
        logProvider5);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction7 = null;
    io.github.onograph.backup.BackupRunner.Generator generator8 = generator2.fFileSystemAbstraction(
        fileSystemAbstraction7);
    org.neo4j.logging.LogProvider logProvider9 = null;
    io.github.onograph.backup.BackupRunner.Generator generator10 = generator8.itraLogProvider(
        logProvider9);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction11 = null;
    io.github.onograph.backup.BackupRunner.Generator generator12 = generator8.fFileSystemAbstraction(
        fileSystemAbstraction11);
    org.neo4j.monitoring.Monitors monitors13 = null;
    io.github.onograph.backup.BackupRunner.Generator generator14 = generator12.monitors(monitors13);
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(generator8);
    org.junit.Assert.assertNotNull(generator10);
    org.junit.Assert.assertNotNull(generator12);
    org.junit.Assert.assertNotNull(generator14);
  }

  @Test
  public void test0294() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0294");
    }
    io.github.onograph.backup.CommandProviderBackupImpl commandProviderBackupImpl0 = new io.github.onograph.backup.CommandProviderBackupImpl();
    int int1 = commandProviderBackupImpl0.getPriority();
    int int2 = commandProviderBackupImpl0.getPriority();
    org.neo4j.cli.Command.CommandType commandType3 = commandProviderBackupImpl0.commandType();
    org.neo4j.cli.ExecutionContext executionContext4 = null;
    try {
      io.github.onograph.backup.BackupCommand backupCommand5 = commandProviderBackupImpl0.createCommand(
          executionContext4);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    org.junit.Assert.assertTrue(
        "'" + commandType3 + "' != '" + org.neo4j.cli.Command.CommandType.ONLINE_BACKUP + "'",
        commandType3.equals(org.neo4j.cli.Command.CommandType.ONLINE_BACKUP));
  }

  @Test
  public void test0295() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0295");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupIOService backupIOService1 = new io.github.onograph.backup.BackupIOService(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isGcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory5 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config6 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory5.config(config6);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory7.isRp(true);
    org.neo4j.configuration.Config config10 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.config(config10);
    org.neo4j.configuration.helpers.SocketAddress socketAddress12 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory9.wihadsBackupEnvironmentFactory(
        socketAddress12);
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory14.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory17.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory17.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory17.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory23.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = factory23.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment29 = factory23.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern30 = backupEnvironment29.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress31 = backupEnvironment29.getSocketAddress();
    java.nio.file.Path path32 = backupEnvironment29.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory14.pbPath(path32);
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory34.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory39 = factory37.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory37.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = factory37.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = factory43.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory48 = factory43.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment49 = factory43.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern50 = backupEnvironment49.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress51 = backupEnvironment49.getSocketAddress();
    java.nio.file.Path path52 = backupEnvironment49.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory53 = factory34.pbPath(path52);
    io.github.onograph.backup.FileMoverService fileMoverService54 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path32, path52);
    io.github.onograph.backup.BackupEnvironment.Factory factory55 = factory9.pbPath(path52);
    boolean boolean56 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path52);
    io.github.onograph.backup.BackupEnvironment.Factory factory57 = factory2.prPath(path52);
    try {
      boolean boolean58 = backupIOService1.isExsForPa(path52);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(backupEnvironment29);
    org.junit.Assert.assertNotNull(databaseNamePattern30);
    org.junit.Assert.assertNotNull(socketAddress31);
    org.junit.Assert.assertNotNull(path32);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(factory39);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory48);
    org.junit.Assert.assertNotNull(backupEnvironment49);
    org.junit.Assert.assertNotNull(databaseNamePattern50);
    org.junit.Assert.assertNotNull(socketAddress51);
    org.junit.Assert.assertNotNull(path52);
    org.junit.Assert.assertNotNull(factory53);
    org.junit.Assert.assertNotNull(fileMoverService54);
    org.junit.Assert.assertNotNull(factory55);
    org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    org.junit.Assert.assertNotNull(factory57);
  }

  @Test
  public void test0296() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0296");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = factory2.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory2.isCc(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    java.nio.file.Path path11 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory8.prPath(path11);
    java.nio.file.Path path13 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory12.prPath(path13);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory15.isCc(false);
    java.nio.file.Path path18 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory15.prPath(path18);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config21 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory20.config(config21);
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory22.isRp(true);
    org.neo4j.configuration.Config config25 = factory22.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory15.config(config25);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory14.config(config25);
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = factory7.config(config25);
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags29 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction30 = null;
    org.neo4j.logging.LogProvider logProvider31 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction32 = null;
    io.github.onograph.backup.FileMover fileMover33 = new io.github.onograph.backup.FileMover(
        fileSystemAbstraction32);
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory34.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = factory34.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory40 = factory34.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory42 = factory40.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = factory40.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment46 = factory40.bulBackupEnvironment();
    boolean boolean47 = backupEnvironment46.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional48 = backupEnvironment46.geicmaOptional();
    java.nio.file.Path path49 = backupEnvironment46.getPbPath();
    java.nio.file.Path path50 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path49);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream51 = fileMover33._trrfrmnStream(
        path49);
    io.github.onograph.backup.BackupEnvironment.Factory factory52 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory54 = factory52.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory55 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory57 = factory55.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory59 = factory55.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory61 = factory55.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory63 = factory61.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory66 = factory61.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment67 = factory61.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern68 = backupEnvironment67.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress69 = backupEnvironment67.getSocketAddress();
    java.nio.file.Path path70 = backupEnvironment67.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory71 = factory52.pbPath(path70);
    io.github.onograph.backup.BackupEnvironment.Factory factory72 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory74 = factory72.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory75 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory77 = factory75.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory79 = factory75.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory81 = factory75.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory83 = factory81.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory86 = factory81.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment87 = factory81.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern88 = backupEnvironment87.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress89 = backupEnvironment87.getSocketAddress();
    java.nio.file.Path path90 = backupEnvironment87.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory91 = factory72.pbPath(path90);
    io.github.onograph.backup.FileMoverService fileMoverService92 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path70, path90);
    java.nio.file.Path path93 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path70);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream94 = fileMover33._trrfrmnStream(
        path93);
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory95 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl96 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config25, consistencyFlags29, fileSystemAbstraction30, logProvider31, path93,
        progressMonitorFactory95);
    org.neo4j.io.layout.DatabaseLayout databaseLayout97 = null;
    try {
      backupVerificationServiceImpl96.chcsyForDa(databaseLayout97);
      org.junit.Assert.fail(
          "Expected exception of type io.github.onograph.backup.BackupVerificationErrorException; message: *** Error:  2915f124-983c-439d-b1ae-a9c5ad06642b");
    } catch (io.github.onograph.backup.BackupVerificationErrorException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(config5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(config25);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(factory40);
    org.junit.Assert.assertNotNull(factory42);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(backupEnvironment46);
    org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional48);
    org.junit.Assert.assertNotNull(path49);
    org.junit.Assert.assertNotNull(path50);
    org.junit.Assert.assertNotNull(fileMoverServiceStream51);
    org.junit.Assert.assertNotNull(factory52);
    org.junit.Assert.assertNotNull(factory54);
    org.junit.Assert.assertNotNull(factory55);
    org.junit.Assert.assertNotNull(factory57);
    org.junit.Assert.assertNotNull(factory59);
    org.junit.Assert.assertNotNull(factory61);
    org.junit.Assert.assertNotNull(factory63);
    org.junit.Assert.assertNotNull(factory66);
    org.junit.Assert.assertNotNull(backupEnvironment67);
    org.junit.Assert.assertNotNull(databaseNamePattern68);
    org.junit.Assert.assertNotNull(socketAddress69);
    org.junit.Assert.assertNotNull(path70);
    org.junit.Assert.assertNotNull(factory71);
    org.junit.Assert.assertNotNull(factory72);
    org.junit.Assert.assertNotNull(factory74);
    org.junit.Assert.assertNotNull(factory75);
    org.junit.Assert.assertNotNull(factory77);
    org.junit.Assert.assertNotNull(factory79);
    org.junit.Assert.assertNotNull(factory81);
    org.junit.Assert.assertNotNull(factory83);
    org.junit.Assert.assertNotNull(factory86);
    org.junit.Assert.assertNotNull(backupEnvironment87);
    org.junit.Assert.assertNotNull(databaseNamePattern88);
    org.junit.Assert.assertNotNull(socketAddress89);
    org.junit.Assert.assertNotNull(path90);
    org.junit.Assert.assertNotNull(factory91);
    org.junit.Assert.assertNotNull(fileMoverService92);
    org.junit.Assert.assertNotNull(path93);
    org.junit.Assert.assertNotNull(fileMoverServiceStream94);
  }

  @Test
  public void test0297() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0297");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    java.nio.file.Path path5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.prPath(path5);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isIcc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isFtfb(true);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions11 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory8.miAuthMetaOptions(
        authMetaOptions11);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory13.isCc(false);
    java.nio.file.Path path16 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory13.prPath(path16);
    org.neo4j.configuration.helpers.SocketAddress socketAddress18 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory17.wihadsBackupEnvironmentFactory(
        socketAddress18);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config21 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory20.config(config21);
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory22.isRp(true);
    org.neo4j.configuration.Config config25 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory24.config(config25);
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = factory24.databaseNamePattern(
        "database.id");
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory29.isCc(false);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions32 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory29.miAuthMetaOptions(
        authMetaOptions32);
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = factory33.isGcc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = factory35.isIcc(
        (java.lang.Boolean) false);
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern38 = factory35.gedtenprDatabaseNamePattern();
    io.github.onograph.backup.BackupEnvironment.Factory factory39 = factory24.databaseNamePattern(
        databaseNamePattern38);
    io.github.onograph.backup.BackupEnvironment.Factory factory40 = factory17.databaseNamePattern(
        databaseNamePattern38);
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory12.databaseNamePattern(
        databaseNamePattern38);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(databaseNamePattern38);
    org.junit.Assert.assertNotNull(factory39);
    org.junit.Assert.assertNotNull(factory40);
    org.junit.Assert.assertNotNull(factory41);
  }

  @Test
  public void test0298() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0298");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator2.fFileSystemAbstraction(
        fileSystemAbstraction5);
    org.neo4j.logging.LogProvider logProvider7 = null;
    io.github.onograph.backup.BackupRunner.Generator generator8 = generator6.uLogProvider(
        logProvider7);
    org.neo4j.time.SystemNanoClock systemNanoClock9 = null;
    io.github.onograph.backup.BackupRunner.Generator generator10 = generator6.systemNanoClock(
        systemNanoClock9);
    io.github.onograph.backup.BackupRunner backupRunner11 = generator10.bulBackupRunner();
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory12.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory12.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory12.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory18.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory18.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment24 = factory18.bulBackupEnvironment();
    boolean boolean25 = backupEnvironment24.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional26 = backupEnvironment24.geicmaOptional();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional27 = backupEnvironment24.geicmaOptional();
    boolean boolean28 = backupEnvironment24.getIsBftf();
    try {
      backupRunner11.excebcpForBa(backupEnvironment24);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(generator8);
    org.junit.Assert.assertNotNull(generator10);
    org.junit.Assert.assertNotNull(backupRunner11);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(backupEnvironment24);
    org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional26);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional27);
    org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
  }

  @Test
  public void test0299() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0299");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.miAuthMetaOptions(
        authMetaOptions3);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isGcc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.isCc(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory4.isCc(true);
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern11 = factory10.gedtenprDatabaseNamePattern();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern12 = factory10.gedtenprDatabaseNamePattern();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(databaseNamePattern11);
    org.junit.Assert.assertNotNull(databaseNamePattern12);
  }

  @Test
  public void test0300() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0300");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.config(config3);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isRp(true);
    org.neo4j.configuration.Config config7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.config(config7);
    org.neo4j.configuration.helpers.SocketAddress socketAddress9 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory6.wihadsBackupEnvironmentFactory(
        socketAddress9);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory11.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory11.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory17.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory17.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment23 = factory17.bulBackupEnvironment();
    boolean boolean24 = backupEnvironment23.getIsBftf();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern25 = backupEnvironment23.getDatabaseNamePattern();
    java.nio.file.Path path26 = backupEnvironment23.getRpPath();
    java.nio.file.Path path27 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path26);
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = factory10.prPath(path26);
    org.neo4j.logging.LogProvider logProvider29 = null;
    org.neo4j.io.pagecache.PageCache pageCache30 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer31 = null;
    try {
      io.github.onograph.backup.BackupMetaService backupMetaService32 = new io.github.onograph.backup.BackupMetaService(
          fileSystemAbstraction0, "database.id", path26, logProvider29, pageCache30,
          pageCacheTracer31);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(backupEnvironment23);
    org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    org.junit.Assert.assertNotNull(databaseNamePattern25);
    org.junit.Assert.assertNotNull(path26);
    org.junit.Assert.assertNotNull(path27);
    org.junit.Assert.assertNotNull(factory28);
  }

  @Test
  public void test0301() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0301");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.GdbIdRepo gdbIdRepo1 = new io.github.onograph.backup.GdbIdRepo(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory8.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment14 = factory8.bulBackupEnvironment();
    boolean boolean15 = backupEnvironment14.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional16 = backupEnvironment14.geicmaOptional();
    java.nio.file.Path path17 = backupEnvironment14.getPbPath();
    java.nio.file.Path path18 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path17);
    java.nio.file.Path path19 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path18);
    boolean boolean20 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path19);
    java.nio.file.Path path21 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path19);
    java.nio.file.Path path22 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path21);
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory23.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = factory26.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = factory26.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory26.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory32.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = factory32.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment38 = factory32.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern39 = backupEnvironment38.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress40 = backupEnvironment38.getSocketAddress();
    java.nio.file.Path path41 = backupEnvironment38.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory42 = factory23.pbPath(path41);
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = factory43.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory46 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory48 = factory46.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory50 = factory46.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory52 = factory46.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory54 = factory52.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory57 = factory52.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment58 = factory52.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern59 = backupEnvironment58.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress60 = backupEnvironment58.getSocketAddress();
    java.nio.file.Path path61 = backupEnvironment58.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory62 = factory43.pbPath(path61);
    io.github.onograph.backup.FileMoverService fileMoverService63 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path41, path61);
    java.nio.file.Path path64 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path61);
    io.github.onograph.backup.FileMoverService fileMoverService65 = io.github.onograph.backup.FileMoverService.movifeseFileMoverService(
        path21, path64);
    java.nio.file.Path path66 = fileMoverService65.filPath();
    try {
      java.util.Optional<org.neo4j.kernel.database.DatabaseId> databaseIdOptional67 = gdbIdRepo1.reddtaiOptional(
          path66);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(backupEnvironment14);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional16);
    org.junit.Assert.assertNotNull(path17);
    org.junit.Assert.assertNotNull(path18);
    org.junit.Assert.assertNotNull(path19);
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    org.junit.Assert.assertNotNull(path21);
    org.junit.Assert.assertNotNull(path22);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(backupEnvironment38);
    org.junit.Assert.assertNotNull(databaseNamePattern39);
    org.junit.Assert.assertNotNull(socketAddress40);
    org.junit.Assert.assertNotNull(path41);
    org.junit.Assert.assertNotNull(factory42);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory46);
    org.junit.Assert.assertNotNull(factory48);
    org.junit.Assert.assertNotNull(factory50);
    org.junit.Assert.assertNotNull(factory52);
    org.junit.Assert.assertNotNull(factory54);
    org.junit.Assert.assertNotNull(factory57);
    org.junit.Assert.assertNotNull(backupEnvironment58);
    org.junit.Assert.assertNotNull(databaseNamePattern59);
    org.junit.Assert.assertNotNull(socketAddress60);
    org.junit.Assert.assertNotNull(path61);
    org.junit.Assert.assertNotNull(factory62);
    org.junit.Assert.assertNotNull(fileMoverService63);
    org.junit.Assert.assertNotNull(path64);
    org.junit.Assert.assertNotNull(fileMoverService65);
    org.junit.Assert.assertNotNull(path66);
  }

  @Test
  public void test0302() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0302");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory3 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory5 = factory3.isGcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory3.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory8.isRp(false);
    java.nio.file.Path path13 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory12.prPath(path13);
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern15 = factory14.gedtenprDatabaseNamePattern();
    org.neo4j.configuration.Config config16 = factory14.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory7.config(config16);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory0.config(config16);
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory0.wihadsBackupEnvironmentFactory(
        (int) (byte) 0, "hi!");
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory0.wihadsBackupEnvironmentFactory(
        (int) 'a', "database.id");
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory3);
    org.junit.Assert.assertNotNull(factory5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(databaseNamePattern15);
    org.junit.Assert.assertNotNull(config16);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory24);
  }

  @Test
  public void test0303() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0303");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupIOService backupIOService1 = new io.github.onograph.backup.BackupIOService(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory8.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment14 = factory8.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern15 = backupEnvironment14.getDatabaseNamePattern();
    boolean boolean16 = backupEnvironment14.getIsBftf();
    boolean boolean17 = backupEnvironment14.getIsBftf();
    java.nio.file.Path path18 = backupEnvironment14.getRpPath();
    try {
      backupIOService1.deedForPa(path18);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(backupEnvironment14);
    org.junit.Assert.assertNotNull(databaseNamePattern15);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    org.junit.Assert.assertNotNull(path18);
  }

  @Test
  public void test0304() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0304");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupMetadataRepository backupMetadataRepository1 = new io.github.onograph.backup.BackupMetadataRepository(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.config(config3);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isSicc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config8 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory7.config(config8);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.isRp(true);
    org.neo4j.configuration.Config config12 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.config(config12);
    org.neo4j.configuration.helpers.SocketAddress socketAddress14 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory11.wihadsBackupEnvironmentFactory(
        socketAddress14);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory16.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory19.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory19.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory19.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory25.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = factory25.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment31 = factory25.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern32 = backupEnvironment31.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress33 = backupEnvironment31.getSocketAddress();
    java.nio.file.Path path34 = backupEnvironment31.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = factory16.pbPath(path34);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = factory36.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory39 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory39.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = factory39.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = factory39.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = factory45.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory50 = factory45.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment51 = factory45.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern52 = backupEnvironment51.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress53 = backupEnvironment51.getSocketAddress();
    java.nio.file.Path path54 = backupEnvironment51.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory55 = factory36.pbPath(path54);
    io.github.onograph.backup.FileMoverService fileMoverService56 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path34, path54);
    io.github.onograph.backup.BackupEnvironment.Factory factory57 = factory11.pbPath(path54);
    io.github.onograph.backup.BackupEnvironment.Factory factory58 = factory6.prPath(path54);
    java.lang.String[] strArray62 = new java.lang.String[]{"hi!", "hi!", "database.id"};
    java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
    boolean boolean64 = java.util.Collections.addAll(
        (java.util.Collection<java.lang.String>) strList63, strArray62);
    try {
      backupMetadataRepository1.wrtForPaLi(path54, (java.util.List<java.lang.String>) strList63);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(backupEnvironment31);
    org.junit.Assert.assertNotNull(databaseNamePattern32);
    org.junit.Assert.assertNotNull(socketAddress33);
    org.junit.Assert.assertNotNull(path34);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(factory39);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory50);
    org.junit.Assert.assertNotNull(backupEnvironment51);
    org.junit.Assert.assertNotNull(databaseNamePattern52);
    org.junit.Assert.assertNotNull(socketAddress53);
    org.junit.Assert.assertNotNull(path54);
    org.junit.Assert.assertNotNull(factory55);
    org.junit.Assert.assertNotNull(fileMoverService56);
    org.junit.Assert.assertNotNull(factory57);
    org.junit.Assert.assertNotNull(factory58);
    org.junit.Assert.assertNotNull(strArray62);
    org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
  }

  @Test
  public void test0305() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0305");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isGcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory3 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config4 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory5 = factory3.config(config4);
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory5.isRp(true);
    org.neo4j.configuration.Config config8 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory7.config(config8);
    org.neo4j.configuration.helpers.SocketAddress socketAddress10 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory7.wihadsBackupEnvironmentFactory(
        socketAddress10);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory12.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory15.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory15.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory15.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory21.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory21.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment27 = factory21.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern28 = backupEnvironment27.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress29 = backupEnvironment27.getSocketAddress();
    java.nio.file.Path path30 = backupEnvironment27.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory12.pbPath(path30);
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory32.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = factory35.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory39 = factory35.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory35.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = factory41.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory46 = factory41.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment47 = factory41.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern48 = backupEnvironment47.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress49 = backupEnvironment47.getSocketAddress();
    java.nio.file.Path path50 = backupEnvironment47.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory51 = factory32.pbPath(path50);
    io.github.onograph.backup.FileMoverService fileMoverService52 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path30, path50);
    io.github.onograph.backup.BackupEnvironment.Factory factory53 = factory7.pbPath(path50);
    boolean boolean54 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path50);
    io.github.onograph.backup.BackupEnvironment.Factory factory55 = factory0.prPath(path50);
    io.github.onograph.backup.BackupEnvironment.Factory factory57 = factory55.shouldPrep(true);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions58 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory59 = factory57.miAuthMetaOptions(
        authMetaOptions58);
    org.neo4j.configuration.helpers.SocketAddress socketAddress60 = factory59.getSocketAddress();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory3);
    org.junit.Assert.assertNotNull(factory5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(backupEnvironment27);
    org.junit.Assert.assertNotNull(databaseNamePattern28);
    org.junit.Assert.assertNotNull(socketAddress29);
    org.junit.Assert.assertNotNull(path30);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(factory39);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory46);
    org.junit.Assert.assertNotNull(backupEnvironment47);
    org.junit.Assert.assertNotNull(databaseNamePattern48);
    org.junit.Assert.assertNotNull(socketAddress49);
    org.junit.Assert.assertNotNull(path50);
    org.junit.Assert.assertNotNull(factory51);
    org.junit.Assert.assertNotNull(fileMoverService52);
    org.junit.Assert.assertNotNull(factory53);
    org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    org.junit.Assert.assertNotNull(factory55);
    org.junit.Assert.assertNotNull(factory57);
    org.junit.Assert.assertNotNull(factory59);
    org.junit.Assert.assertNull(socketAddress60);
  }

  @Test
  public void test0306() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0306");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.config(config5);
    org.neo4j.configuration.helpers.SocketAddress socketAddress7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress7);
    org.neo4j.configuration.helpers.SocketAddress socketAddress9 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress9);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory4.wihadsBackupEnvironmentFactory(
        (int) (short) -1, "hi!");
    org.neo4j.configuration.Config config14 = factory13.gecfConfig();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction15 = null;
    io.github.onograph.cluster.raft.module.cuprot.LifecycleCatchupManagerImpl lifecycleCatchupManagerImpl16 = null;
    org.neo4j.scheduler.JobScheduler jobScheduler17 = null;
    org.neo4j.logging.LogProvider logProvider18 = null;
    org.neo4j.monitoring.Monitors monitors19 = null;
    org.neo4j.io.pagecache.PageCache pageCache20 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer21 = null;
    org.neo4j.time.SystemNanoClock systemNanoClock22 = null;
    try {
      io.github.onograph.backup.RemoteBackupManager remoteBackupManager23 = new io.github.onograph.backup.RemoteBackupManager(
          config14, fileSystemAbstraction15, lifecycleCatchupManagerImpl16, jobScheduler17,
          logProvider18, monitors19, pageCache20, pageCacheTracer21, systemNanoClock22);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(config14);
  }

  @Test
  public void test0307() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0307");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory6.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isFtfb(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory13.isRp(false);
    java.nio.file.Path path16 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory13.pbPath(path16);
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory13.isIcc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory13.isIcc(
        (java.lang.Boolean) true);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory21);
  }

  @Test
  public void test0308() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0308");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.GdbIdRepo gdbIdRepo1 = new io.github.onograph.backup.GdbIdRepo(
        fileSystemAbstraction0);
    org.neo4j.kernel.database.DatabaseId databaseId2 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory3 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory5 = factory3.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory3.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory3.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory9.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment15 = factory9.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern16 = backupEnvironment15.getDatabaseNamePattern();
    boolean boolean17 = backupEnvironment15.getIsBftf();
    java.nio.file.Path path18 = backupEnvironment15.getRpPath();
    try {
      gdbIdRepo1.wrdaiForDaPa(databaseId2, path18);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory3);
    org.junit.Assert.assertNotNull(factory5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(backupEnvironment15);
    org.junit.Assert.assertNotNull(databaseNamePattern16);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    org.junit.Assert.assertNotNull(path18);
  }

  @Test
  public void test0309() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0309");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup("");
    io.github.onograph.backup.Backup backup3 = backup1.isCc(true);
    io.github.onograph.backup.Backup backup5 = backup3.isCc(true);
    io.github.onograph.backup.Backup backup7 = backup5.isCc(true);
    io.github.onograph.backup.Backup backup9 = backup5.isCc(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory11.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory11.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory17.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory17.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment23 = factory17.bulBackupEnvironment();
    boolean boolean24 = backupEnvironment23.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional25 = backupEnvironment23.geicmaOptional();
    java.nio.file.Path path26 = backupEnvironment23.getPbPath();
    java.nio.file.Path path27 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path26);
    java.nio.file.Path path28 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path27);
    boolean boolean29 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path28);
    java.nio.file.Path path30 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path28);
    java.nio.file.Path path31 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path30);
    try {
      io.github.onograph.backup.Backup.BackupRespState backupRespState32 = backup9.bakBackupBackupRespState(
          "", path30);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.RuntimeException; message: *** Error:  3b02b00a-232a-454b-823b-025cc97a58b8");
    } catch (java.lang.RuntimeException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(backup3);
    org.junit.Assert.assertNotNull(backup5);
    org.junit.Assert.assertNotNull(backup7);
    org.junit.Assert.assertNotNull(backup9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(backupEnvironment23);
    org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional25);
    org.junit.Assert.assertNotNull(path26);
    org.junit.Assert.assertNotNull(path27);
    org.junit.Assert.assertNotNull(path28);
    org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    org.junit.Assert.assertNotNull(path30);
    org.junit.Assert.assertNotNull(path31);
  }

  @Test
  public void test0310() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0310");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.config(config5);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.databaseNamePattern(
        "database.id");
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.isCc(false);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions12 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory9.miAuthMetaOptions(
        authMetaOptions12);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory13.isGcc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory15.isIcc(
        (java.lang.Boolean) false);
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern18 = factory15.gedtenprDatabaseNamePattern();
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory4.databaseNamePattern(
        databaseNamePattern18);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config21 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory20.config(config21);
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory22.isRp(true);
    org.neo4j.configuration.Config config25 = factory22.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory22.isCc(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = factory28.isCc(false);
    java.nio.file.Path path31 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory28.prPath(path31);
    java.nio.file.Path path33 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory32.prPath(path33);
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = factory35.isCc(false);
    java.nio.file.Path path38 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory39 = factory35.prPath(path38);
    io.github.onograph.backup.BackupEnvironment.Factory factory40 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config41 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory42 = factory40.config(config41);
    io.github.onograph.backup.BackupEnvironment.Factory factory44 = factory42.isRp(true);
    org.neo4j.configuration.Config config45 = factory42.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory46 = factory35.config(config45);
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = factory34.config(config45);
    io.github.onograph.backup.BackupEnvironment.Factory factory48 = factory27.config(config45);
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = factory19.config(config45);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction50 = null;
    org.neo4j.logging.LogProvider logProvider51 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer52 = null;
    org.neo4j.time.SystemNanoClock systemNanoClock53 = null;
    try {
      io.github.onograph.backup.DefaultBackupServiceHandler defaultBackupServiceHandler54 = io.github.onograph.backup.DefaultBackupServiceHandler.strliclDefaultBackupServiceHandler(
          config45, fileSystemAbstraction50, logProvider51, pageCacheTracer52, systemNanoClock53);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(databaseNamePattern18);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(config25);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(factory39);
    org.junit.Assert.assertNotNull(factory40);
    org.junit.Assert.assertNotNull(factory42);
    org.junit.Assert.assertNotNull(factory44);
    org.junit.Assert.assertNotNull(config45);
    org.junit.Assert.assertNotNull(factory46);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory48);
    org.junit.Assert.assertNotNull(factory49);
  }

  @Test
  public void test0311() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0311");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.GdbIdRepo gdbIdRepo1 = new io.github.onograph.backup.GdbIdRepo(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.config(config3);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isSicc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config8 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory7.config(config8);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.isRp(true);
    org.neo4j.configuration.Config config12 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.config(config12);
    org.neo4j.configuration.helpers.SocketAddress socketAddress14 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory11.wihadsBackupEnvironmentFactory(
        socketAddress14);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory16.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory19.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory19.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory19.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory25.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = factory25.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment31 = factory25.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern32 = backupEnvironment31.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress33 = backupEnvironment31.getSocketAddress();
    java.nio.file.Path path34 = backupEnvironment31.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = factory16.pbPath(path34);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = factory36.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory39 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory39.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = factory39.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = factory39.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = factory45.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory50 = factory45.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment51 = factory45.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern52 = backupEnvironment51.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress53 = backupEnvironment51.getSocketAddress();
    java.nio.file.Path path54 = backupEnvironment51.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory55 = factory36.pbPath(path54);
    io.github.onograph.backup.FileMoverService fileMoverService56 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path34, path54);
    io.github.onograph.backup.BackupEnvironment.Factory factory57 = factory11.pbPath(path54);
    io.github.onograph.backup.BackupEnvironment.Factory factory58 = factory6.prPath(path54);
    try {
      java.util.Optional<org.neo4j.kernel.database.DatabaseId> databaseIdOptional59 = gdbIdRepo1.reddtaiOptional(
          path54);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(backupEnvironment31);
    org.junit.Assert.assertNotNull(databaseNamePattern32);
    org.junit.Assert.assertNotNull(socketAddress33);
    org.junit.Assert.assertNotNull(path34);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(factory39);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory50);
    org.junit.Assert.assertNotNull(backupEnvironment51);
    org.junit.Assert.assertNotNull(databaseNamePattern52);
    org.junit.Assert.assertNotNull(socketAddress53);
    org.junit.Assert.assertNotNull(path54);
    org.junit.Assert.assertNotNull(factory55);
    org.junit.Assert.assertNotNull(fileMoverService56);
    org.junit.Assert.assertNotNull(factory57);
    org.junit.Assert.assertNotNull(factory58);
  }

  @Test
  public void test0312() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0312");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.config(config5);
    org.neo4j.configuration.helpers.SocketAddress socketAddress7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress7);
    org.neo4j.configuration.helpers.SocketAddress socketAddress9 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress9);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory4.wihadsBackupEnvironmentFactory(
        (int) (short) -1, "hi!");
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions14 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory13.miAuthMetaOptions(
        authMetaOptions14);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
  }

  @Test
  public void test0313() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0313");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.GdbIdRepo gdbIdRepo1 = new io.github.onograph.backup.GdbIdRepo(
        fileSystemAbstraction0);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction2 = null;
    io.github.onograph.backup.FileMover fileMover3 = new io.github.onograph.backup.FileMover(
        fileSystemAbstraction2);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory4.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory10.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory10.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment16 = factory10.bulBackupEnvironment();
    boolean boolean17 = backupEnvironment16.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional18 = backupEnvironment16.geicmaOptional();
    java.nio.file.Path path19 = backupEnvironment16.getPbPath();
    java.nio.file.Path path20 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path19);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream21 = fileMover3._trrfrmnStream(
        path19);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory22.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory25.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory25.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory25.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory31.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory31.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment37 = factory31.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern38 = backupEnvironment37.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress39 = backupEnvironment37.getSocketAddress();
    java.nio.file.Path path40 = backupEnvironment37.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory22.pbPath(path40);
    io.github.onograph.backup.BackupEnvironment.Factory factory42 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory44 = factory42.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = factory45.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = factory45.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory51 = factory45.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory53 = factory51.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory56 = factory51.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment57 = factory51.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern58 = backupEnvironment57.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress59 = backupEnvironment57.getSocketAddress();
    java.nio.file.Path path60 = backupEnvironment57.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory61 = factory42.pbPath(path60);
    io.github.onograph.backup.FileMoverService fileMoverService62 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path40, path60);
    java.nio.file.Path path63 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path40);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream64 = fileMover3._trrfrmnStream(
        path63);
    java.nio.file.Path path65 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path63);
    try {
      java.util.Optional<org.neo4j.kernel.database.DatabaseId> databaseIdOptional66 = gdbIdRepo1.reddtaiOptional(
          path63);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(backupEnvironment16);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional18);
    org.junit.Assert.assertNotNull(path19);
    org.junit.Assert.assertNotNull(path20);
    org.junit.Assert.assertNotNull(fileMoverServiceStream21);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(backupEnvironment37);
    org.junit.Assert.assertNotNull(databaseNamePattern38);
    org.junit.Assert.assertNotNull(socketAddress39);
    org.junit.Assert.assertNotNull(path40);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(factory42);
    org.junit.Assert.assertNotNull(factory44);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory49);
    org.junit.Assert.assertNotNull(factory51);
    org.junit.Assert.assertNotNull(factory53);
    org.junit.Assert.assertNotNull(factory56);
    org.junit.Assert.assertNotNull(backupEnvironment57);
    org.junit.Assert.assertNotNull(databaseNamePattern58);
    org.junit.Assert.assertNotNull(socketAddress59);
    org.junit.Assert.assertNotNull(path60);
    org.junit.Assert.assertNotNull(factory61);
    org.junit.Assert.assertNotNull(fileMoverService62);
    org.junit.Assert.assertNotNull(path63);
    org.junit.Assert.assertNotNull(fileMoverServiceStream64);
    org.junit.Assert.assertNotNull(path65);
  }

  @Test
  public void test0314() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0314");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.logging.LogProvider logProvider5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator2.itraLogProvider(
        logProvider5);
    io.github.onograph.backup.BackupRunner backupRunner7 = generator6.bulBackupRunner();
    org.neo4j.logging.LogProvider logProvider8 = null;
    io.github.onograph.backup.BackupRunner.Generator generator9 = generator6.itraLogProvider(
        logProvider8);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction10 = null;
    io.github.onograph.backup.BackupRunner.Generator generator11 = generator9.fFileSystemAbstraction(
        fileSystemAbstraction10);
    org.neo4j.logging.LogProvider logProvider12 = null;
    io.github.onograph.backup.BackupRunner.Generator generator13 = generator9.itraLogProvider(
        logProvider12);
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(backupRunner7);
    org.junit.Assert.assertNotNull(generator9);
    org.junit.Assert.assertNotNull(generator11);
    org.junit.Assert.assertNotNull(generator13);
  }

  @Test
  public void test0315() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0315");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.GdbIdRepo gdbIdRepo1 = new io.github.onograph.backup.GdbIdRepo(
        fileSystemAbstraction0);
    org.neo4j.kernel.database.DatabaseId databaseId2 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory3 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory5 = factory3.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory3.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory3.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory9.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment15 = factory9.bulBackupEnvironment();
    boolean boolean16 = backupEnvironment15.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional17 = backupEnvironment15.geicmaOptional();
    java.nio.file.Path path18 = backupEnvironment15.getPbPath();
    java.nio.file.Path path19 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path18);
    java.nio.file.Path path20 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path19);
    boolean boolean21 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path20);
    java.nio.file.Path path22 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path20);
    java.nio.file.Path path23 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path22);
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory24.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory27.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory27.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory27.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = factory33.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = factory33.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment39 = factory33.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern40 = backupEnvironment39.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress41 = backupEnvironment39.getSocketAddress();
    java.nio.file.Path path42 = backupEnvironment39.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = factory24.pbPath(path42);
    io.github.onograph.backup.BackupEnvironment.Factory factory44 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory46 = factory44.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = factory47.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory51 = factory47.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory53 = factory47.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory55 = factory53.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory58 = factory53.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment59 = factory53.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern60 = backupEnvironment59.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress61 = backupEnvironment59.getSocketAddress();
    java.nio.file.Path path62 = backupEnvironment59.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory63 = factory44.pbPath(path62);
    io.github.onograph.backup.FileMoverService fileMoverService64 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path42, path62);
    java.nio.file.Path path65 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path62);
    io.github.onograph.backup.FileMoverService fileMoverService66 = io.github.onograph.backup.FileMoverService.movifeseFileMoverService(
        path22, path65);
    java.nio.file.Path path67 = fileMoverService66.filPath();
    try {
      gdbIdRepo1.wrdaiForDaPa(databaseId2, path67);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory3);
    org.junit.Assert.assertNotNull(factory5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(backupEnvironment15);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional17);
    org.junit.Assert.assertNotNull(path18);
    org.junit.Assert.assertNotNull(path19);
    org.junit.Assert.assertNotNull(path20);
    org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    org.junit.Assert.assertNotNull(path22);
    org.junit.Assert.assertNotNull(path23);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(backupEnvironment39);
    org.junit.Assert.assertNotNull(databaseNamePattern40);
    org.junit.Assert.assertNotNull(socketAddress41);
    org.junit.Assert.assertNotNull(path42);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory44);
    org.junit.Assert.assertNotNull(factory46);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory49);
    org.junit.Assert.assertNotNull(factory51);
    org.junit.Assert.assertNotNull(factory53);
    org.junit.Assert.assertNotNull(factory55);
    org.junit.Assert.assertNotNull(factory58);
    org.junit.Assert.assertNotNull(backupEnvironment59);
    org.junit.Assert.assertNotNull(databaseNamePattern60);
    org.junit.Assert.assertNotNull(socketAddress61);
    org.junit.Assert.assertNotNull(path62);
    org.junit.Assert.assertNotNull(factory63);
    org.junit.Assert.assertNotNull(fileMoverService64);
    org.junit.Assert.assertNotNull(path65);
    org.junit.Assert.assertNotNull(fileMoverService66);
    org.junit.Assert.assertNotNull(path67);
  }

  @Test
  public void test0316() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0316");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator4.progressMonitorFactory(
        progressMonitorFactory5);
    org.neo4j.monitoring.Monitors monitors7 = null;
    io.github.onograph.backup.BackupRunner.Generator generator8 = generator6.monitors(monitors7);
    org.neo4j.logging.LogProvider logProvider9 = null;
    io.github.onograph.backup.BackupRunner.Generator generator10 = generator8.itraLogProvider(
        logProvider9);
    org.neo4j.time.SystemNanoClock systemNanoClock11 = null;
    io.github.onograph.backup.BackupRunner.Generator generator12 = generator8.systemNanoClock(
        systemNanoClock11);
    org.neo4j.time.SystemNanoClock systemNanoClock13 = null;
    io.github.onograph.backup.BackupRunner.Generator generator14 = generator8.systemNanoClock(
        systemNanoClock13);
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(generator8);
    org.junit.Assert.assertNotNull(generator10);
    org.junit.Assert.assertNotNull(generator12);
    org.junit.Assert.assertNotNull(generator14);
  }

  @Test
  public void test0317() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0317");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    java.nio.file.Path path5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.prPath(path5);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isFtfb(true);
    org.neo4j.configuration.helpers.SocketAddress socketAddress9 = factory8.getSocketAddress();
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory8.wihadsBackupEnvironmentFactory(
        (-1), "");
    try {
      io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory12.databaseNamePattern(
          "hi!");
      org.junit.Assert.fail(
          "Expected exception of type java.lang.IllegalArgumentException; message: Database name 'hi!' contains illegal characters. Use simple ascii characters, numbers, dots, question marks, asterisk and dashes.");
    } catch (java.lang.IllegalArgumentException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNull(socketAddress9);
    org.junit.Assert.assertNotNull(factory12);
  }

  @Test
  public void test0318() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0318");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isGcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory5 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory5.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory5.isRp(false);
    java.nio.file.Path path10 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.prPath(path10);
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern12 = factory11.gedtenprDatabaseNamePattern();
    org.neo4j.configuration.Config config13 = factory11.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory4.config(config13);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction15 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config17 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory16.config(config17);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory18.isRp(true);
    org.neo4j.configuration.Config config21 = factory18.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory18.isCc(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory24.isCc(false);
    java.nio.file.Path path27 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = factory24.prPath(path27);
    java.nio.file.Path path29 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = factory28.prPath(path29);
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory31.isCc(false);
    java.nio.file.Path path34 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = factory31.prPath(path34);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config37 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = factory36.config(config37);
    io.github.onograph.backup.BackupEnvironment.Factory factory40 = factory38.isRp(true);
    org.neo4j.configuration.Config config41 = factory38.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory42 = factory31.config(config41);
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = factory30.config(config41);
    io.github.onograph.backup.BackupEnvironment.Factory factory44 = factory23.config(config41);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction45 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory46 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory48 = factory46.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory50 = factory46.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory52 = factory46.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory54 = factory52.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory57 = factory52.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment58 = factory52.bulBackupEnvironment();
    org.neo4j.memory.MemoryTracker memoryTracker59 = backupEnvironment58.getMemoryTracker();
    org.neo4j.io.pagecache.PageCache pageCache60 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager61 = new io.github.onograph.backup.BackupRestorationManager(
        config41, fileSystemAbstraction45, memoryTracker59, pageCache60);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction62 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory63 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory65 = factory63.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory67 = factory63.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory69 = factory63.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory71 = factory69.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory74 = factory69.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment75 = factory69.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern76 = backupEnvironment75.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress77 = backupEnvironment75.getSocketAddress();
    java.nio.file.Path path78 = backupEnvironment75.getRpPath();
    boolean boolean79 = backupEnvironment75.getIsBftf();
    java.nio.file.Path path80 = backupEnvironment75.getRpPath();
    org.neo4j.memory.MemoryTracker memoryTracker81 = backupEnvironment75.getMemoryTracker();
    org.neo4j.io.pagecache.PageCache pageCache82 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager83 = new io.github.onograph.backup.BackupRestorationManager(
        config41, fileSystemAbstraction62, memoryTracker81, pageCache82);
    org.neo4j.io.pagecache.PageCache pageCache84 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager85 = new io.github.onograph.backup.BackupRestorationManager(
        config13, fileSystemAbstraction15, memoryTracker81, pageCache84);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction86 = null;
    io.github.onograph.cluster.raft.module.cuprot.LifecycleCatchupManagerImpl lifecycleCatchupManagerImpl87 = null;
    org.neo4j.scheduler.JobScheduler jobScheduler88 = null;
    org.neo4j.logging.LogProvider logProvider89 = null;
    org.neo4j.monitoring.Monitors monitors90 = null;
    org.neo4j.io.pagecache.PageCache pageCache91 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer92 = null;
    org.neo4j.time.SystemNanoClock systemNanoClock93 = null;
    try {
      io.github.onograph.backup.RemoteBackupManager remoteBackupManager94 = new io.github.onograph.backup.RemoteBackupManager(
          config13, fileSystemAbstraction86, lifecycleCatchupManagerImpl87, jobScheduler88,
          logProvider89, monitors90, pageCache91, pageCacheTracer92, systemNanoClock93);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(databaseNamePattern12);
    org.junit.Assert.assertNotNull(config13);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(config21);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(factory40);
    org.junit.Assert.assertNotNull(config41);
    org.junit.Assert.assertNotNull(factory42);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory44);
    org.junit.Assert.assertNotNull(factory46);
    org.junit.Assert.assertNotNull(factory48);
    org.junit.Assert.assertNotNull(factory50);
    org.junit.Assert.assertNotNull(factory52);
    org.junit.Assert.assertNotNull(factory54);
    org.junit.Assert.assertNotNull(factory57);
    org.junit.Assert.assertNotNull(backupEnvironment58);
    org.junit.Assert.assertNotNull(memoryTracker59);
    org.junit.Assert.assertNotNull(factory63);
    org.junit.Assert.assertNotNull(factory65);
    org.junit.Assert.assertNotNull(factory67);
    org.junit.Assert.assertNotNull(factory69);
    org.junit.Assert.assertNotNull(factory71);
    org.junit.Assert.assertNotNull(factory74);
    org.junit.Assert.assertNotNull(backupEnvironment75);
    org.junit.Assert.assertNotNull(databaseNamePattern76);
    org.junit.Assert.assertNotNull(socketAddress77);
    org.junit.Assert.assertNotNull(path78);
    org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    org.junit.Assert.assertNotNull(path80);
    org.junit.Assert.assertNotNull(memoryTracker81);
  }

  @Test
  public void test0319() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0319");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupIOService backupIOService1 = new io.github.onograph.backup.BackupIOService(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isGcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory5 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config6 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory5.config(config6);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory7.isRp(true);
    org.neo4j.configuration.Config config10 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.config(config10);
    org.neo4j.configuration.helpers.SocketAddress socketAddress12 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory9.wihadsBackupEnvironmentFactory(
        socketAddress12);
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory14.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory17.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory17.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory17.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory23.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = factory23.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment29 = factory23.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern30 = backupEnvironment29.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress31 = backupEnvironment29.getSocketAddress();
    java.nio.file.Path path32 = backupEnvironment29.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory14.pbPath(path32);
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory34.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory39 = factory37.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory37.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = factory37.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = factory43.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory48 = factory43.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment49 = factory43.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern50 = backupEnvironment49.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress51 = backupEnvironment49.getSocketAddress();
    java.nio.file.Path path52 = backupEnvironment49.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory53 = factory34.pbPath(path52);
    io.github.onograph.backup.FileMoverService fileMoverService54 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path32, path52);
    io.github.onograph.backup.BackupEnvironment.Factory factory55 = factory9.pbPath(path52);
    boolean boolean56 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path52);
    io.github.onograph.backup.BackupEnvironment.Factory factory57 = factory2.prPath(path52);
    try {
      backupIOService1.deedForPa(path52);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(backupEnvironment29);
    org.junit.Assert.assertNotNull(databaseNamePattern30);
    org.junit.Assert.assertNotNull(socketAddress31);
    org.junit.Assert.assertNotNull(path32);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(factory39);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory48);
    org.junit.Assert.assertNotNull(backupEnvironment49);
    org.junit.Assert.assertNotNull(databaseNamePattern50);
    org.junit.Assert.assertNotNull(socketAddress51);
    org.junit.Assert.assertNotNull(path52);
    org.junit.Assert.assertNotNull(factory53);
    org.junit.Assert.assertNotNull(fileMoverService54);
    org.junit.Assert.assertNotNull(factory55);
    org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    org.junit.Assert.assertNotNull(factory57);
  }

  @Test
  public void test0320() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0320");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup("hi!");
    io.github.onograph.backup.Backup backup3 = backup1.isCc(false);
    io.github.onograph.backup.Backup backup5 = backup1.isCc(false);
    io.github.onograph.backup.Backup backup7 = backup1.isBftf(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory9.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory9.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory15.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory15.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment21 = factory15.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern22 = backupEnvironment21.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress23 = backupEnvironment21.getSocketAddress();
    java.nio.file.Path path24 = backupEnvironment21.getRpPath();
    boolean boolean25 = backupEnvironment21.getIsBftf();
    java.nio.file.Path path26 = backupEnvironment21.getRpPath();
    java.nio.file.Path path27 = backupEnvironment21.getRpPath();
    try {
      io.github.onograph.backup.Backup.BackupRespState backupRespState28 = backup1.bakBackupBackupRespState(
          "hi!", path27);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.RuntimeException; message: *** Error:  3b02b00a-232a-454b-823b-025cc97a58b8");
    } catch (java.lang.RuntimeException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(backup3);
    org.junit.Assert.assertNotNull(backup5);
    org.junit.Assert.assertNotNull(backup7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(backupEnvironment21);
    org.junit.Assert.assertNotNull(databaseNamePattern22);
    org.junit.Assert.assertNotNull(socketAddress23);
    org.junit.Assert.assertNotNull(path24);
    org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    org.junit.Assert.assertNotNull(path26);
    org.junit.Assert.assertNotNull(path27);
  }

  @Test
  public void test0321() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0321");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup("");
    io.github.onograph.backup.Backup backup3 = backup1.isCc(true);
    io.github.onograph.backup.Backup backup5 = backup3.isCc(true);
    io.github.onograph.backup.Backup backup7 = backup3.isBftf(false);
    io.github.onograph.backup.Backup backup9 = backup7.isCc(true);
    io.github.onograph.backup.Backup backup11 = backup7.isCc(true);
    java.io.OutputStream outputStream12 = null;
    try {
      io.github.onograph.backup.Backup backup13 = backup7.outputStream(outputStream12);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: outputStream");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(backup3);
    org.junit.Assert.assertNotNull(backup5);
    org.junit.Assert.assertNotNull(backup7);
    org.junit.Assert.assertNotNull(backup9);
    org.junit.Assert.assertNotNull(backup11);
  }

  @Test
  public void test0322() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0322");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.GdbIdRepo gdbIdRepo1 = new io.github.onograph.backup.GdbIdRepo(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    java.nio.file.Path path5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.prPath(path5);
    java.nio.file.Path path7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.prPath(path7);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.isCc(false);
    java.nio.file.Path path12 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory9.prPath(path12);
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config15 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory14.config(config15);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory16.isRp(true);
    org.neo4j.configuration.Config config19 = factory16.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory9.config(config19);
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory8.config(config19);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory22.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory25.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory25.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory25.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory31.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory31.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment37 = factory31.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern38 = backupEnvironment37.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress39 = backupEnvironment37.getSocketAddress();
    java.nio.file.Path path40 = backupEnvironment37.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory22.pbPath(path40);
    io.github.onograph.backup.BackupEnvironment.Factory factory42 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory44 = factory42.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = factory45.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = factory45.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory51 = factory45.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory53 = factory51.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory56 = factory51.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment57 = factory51.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern58 = backupEnvironment57.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress59 = backupEnvironment57.getSocketAddress();
    java.nio.file.Path path60 = backupEnvironment57.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory61 = factory42.pbPath(path60);
    io.github.onograph.backup.FileMoverService fileMoverService62 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path40, path60);
    java.nio.file.Path path63 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path60);
    io.github.onograph.backup.BackupEnvironment.Factory factory64 = factory8.prPath(path63);
    boolean boolean65 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path63);
    try {
      java.util.Optional<org.neo4j.kernel.database.DatabaseId> databaseIdOptional66 = gdbIdRepo1.reddtaiOptional(
          path63);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(config19);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(backupEnvironment37);
    org.junit.Assert.assertNotNull(databaseNamePattern38);
    org.junit.Assert.assertNotNull(socketAddress39);
    org.junit.Assert.assertNotNull(path40);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(factory42);
    org.junit.Assert.assertNotNull(factory44);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory49);
    org.junit.Assert.assertNotNull(factory51);
    org.junit.Assert.assertNotNull(factory53);
    org.junit.Assert.assertNotNull(factory56);
    org.junit.Assert.assertNotNull(backupEnvironment57);
    org.junit.Assert.assertNotNull(databaseNamePattern58);
    org.junit.Assert.assertNotNull(socketAddress59);
    org.junit.Assert.assertNotNull(path60);
    org.junit.Assert.assertNotNull(factory61);
    org.junit.Assert.assertNotNull(fileMoverService62);
    org.junit.Assert.assertNotNull(path63);
    org.junit.Assert.assertNotNull(factory64);
    org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
  }

  @Test
  public void test0323() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0323");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory8.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment14 = factory8.bulBackupEnvironment();
    boolean boolean15 = backupEnvironment14.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional16 = backupEnvironment14.geicmaOptional();
    java.nio.file.Path path17 = backupEnvironment14.getPbPath();
    java.nio.file.Path path18 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path17);
    java.nio.file.Path path19 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path18);
    boolean boolean20 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path19);
    java.nio.file.Path path21 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path19);
    java.nio.file.Path path22 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path21);
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory23.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = factory26.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = factory26.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory26.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory32.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = factory32.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment38 = factory32.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern39 = backupEnvironment38.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress40 = backupEnvironment38.getSocketAddress();
    java.nio.file.Path path41 = backupEnvironment38.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory42 = factory23.pbPath(path41);
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = factory43.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory46 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory48 = factory46.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory50 = factory46.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory52 = factory46.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory54 = factory52.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory57 = factory52.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment58 = factory52.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern59 = backupEnvironment58.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress60 = backupEnvironment58.getSocketAddress();
    java.nio.file.Path path61 = backupEnvironment58.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory62 = factory43.pbPath(path61);
    io.github.onograph.backup.FileMoverService fileMoverService63 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path41, path61);
    java.nio.file.Path path64 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path61);
    io.github.onograph.backup.FileMoverService fileMoverService65 = io.github.onograph.backup.FileMoverService.movifeseFileMoverService(
        path21, path64);
    java.nio.file.Path path66 = fileMoverService65.filPath();
    org.neo4j.logging.LogProvider logProvider67 = null;
    org.neo4j.io.pagecache.PageCache pageCache68 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer69 = null;
    try {
      io.github.onograph.backup.BackupMetaService backupMetaService70 = new io.github.onograph.backup.BackupMetaService(
          fileSystemAbstraction0, "", path66, logProvider67, pageCache68, pageCacheTracer69);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(backupEnvironment14);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional16);
    org.junit.Assert.assertNotNull(path17);
    org.junit.Assert.assertNotNull(path18);
    org.junit.Assert.assertNotNull(path19);
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    org.junit.Assert.assertNotNull(path21);
    org.junit.Assert.assertNotNull(path22);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(backupEnvironment38);
    org.junit.Assert.assertNotNull(databaseNamePattern39);
    org.junit.Assert.assertNotNull(socketAddress40);
    org.junit.Assert.assertNotNull(path41);
    org.junit.Assert.assertNotNull(factory42);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory46);
    org.junit.Assert.assertNotNull(factory48);
    org.junit.Assert.assertNotNull(factory50);
    org.junit.Assert.assertNotNull(factory52);
    org.junit.Assert.assertNotNull(factory54);
    org.junit.Assert.assertNotNull(factory57);
    org.junit.Assert.assertNotNull(backupEnvironment58);
    org.junit.Assert.assertNotNull(databaseNamePattern59);
    org.junit.Assert.assertNotNull(socketAddress60);
    org.junit.Assert.assertNotNull(path61);
    org.junit.Assert.assertNotNull(factory62);
    org.junit.Assert.assertNotNull(fileMoverService63);
    org.junit.Assert.assertNotNull(path64);
    org.junit.Assert.assertNotNull(fileMoverService65);
    org.junit.Assert.assertNotNull(path66);
  }

  @Test
  public void test0324() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0324");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup("hi!");
    io.github.onograph.backup.Backup backup3 = backup1.isCc(false);
    io.github.onograph.backup.Backup backup5 = backup1.isCc(false);
    io.github.onograph.backup.Backup backup7 = backup1.isBftf(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory9.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory9.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory15.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory15.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment21 = factory15.bulBackupEnvironment();
    org.neo4j.memory.MemoryTracker memoryTracker22 = backupEnvironment21.getMemoryTracker();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern23 = backupEnvironment21.getDatabaseNamePattern();
    boolean boolean24 = backupEnvironment21.getIsBftf();
    java.nio.file.Path path25 = backupEnvironment21.getRpPath();
    try {
      io.github.onograph.backup.Backup.BackupRespState backupRespState26 = backup1.bakBackupBackupRespState(
          "hi!", path25);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.RuntimeException; message: *** Error:  3b02b00a-232a-454b-823b-025cc97a58b8");
    } catch (java.lang.RuntimeException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(backup3);
    org.junit.Assert.assertNotNull(backup5);
    org.junit.Assert.assertNotNull(backup7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(backupEnvironment21);
    org.junit.Assert.assertNotNull(memoryTracker22);
    org.junit.Assert.assertNotNull(databaseNamePattern23);
    org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    org.junit.Assert.assertNotNull(path25);
  }

  @Test
  public void test0325() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0325");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    io.github.onograph.backup.BackupRunner backupRunner5 = generator2.bulBackupRunner();
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    java.nio.file.Path path9 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory6.prPath(path9);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory6.isSicc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment backupEnvironment13 = factory12.bulBackupEnvironment();
    boolean boolean14 = backupEnvironment13.getIsRp();
    try {
      backupRunner5.excebcpForBa(backupEnvironment13);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(backupRunner5);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(backupEnvironment13);
    org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
  }

  @Test
  public void test0326() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0326");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup("");
    io.github.onograph.backup.Backup backup3 = backup1.isCc(true);
    io.github.onograph.backup.Backup backup5 = backup3.isCc(true);
    io.github.onograph.backup.Backup backup7 = backup5.isBftf(false);
    io.github.onograph.backup.Backup backup9 = backup5.isCc(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory11.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory11.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory17.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory17.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment23 = factory17.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern24 = backupEnvironment23.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress25 = backupEnvironment23.getSocketAddress();
    java.nio.file.Path path26 = backupEnvironment23.getRpPath();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction27 = null;
    io.github.onograph.backup.FileMover fileMover28 = new io.github.onograph.backup.FileMover(
        fileSystemAbstraction27);
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory29.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory29.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = factory29.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = factory35.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory40 = factory35.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment41 = factory35.bulBackupEnvironment();
    boolean boolean42 = backupEnvironment41.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional43 = backupEnvironment41.geicmaOptional();
    java.nio.file.Path path44 = backupEnvironment41.getPbPath();
    java.nio.file.Path path45 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path44);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream46 = fileMover28._trrfrmnStream(
        path44);
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = factory47.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory50 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory52 = factory50.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory54 = factory50.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory56 = factory50.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory58 = factory56.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory61 = factory56.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment62 = factory56.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern63 = backupEnvironment62.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress64 = backupEnvironment62.getSocketAddress();
    java.nio.file.Path path65 = backupEnvironment62.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory66 = factory47.pbPath(path65);
    io.github.onograph.backup.BackupEnvironment.Factory factory67 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory69 = factory67.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory70 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory72 = factory70.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory74 = factory70.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory76 = factory70.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory78 = factory76.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory81 = factory76.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment82 = factory76.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern83 = backupEnvironment82.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress84 = backupEnvironment82.getSocketAddress();
    java.nio.file.Path path85 = backupEnvironment82.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory86 = factory67.pbPath(path85);
    io.github.onograph.backup.FileMoverService fileMoverService87 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path65, path85);
    java.nio.file.Path path88 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path65);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream89 = fileMover28._trrfrmnStream(
        path88);
    io.github.onograph.backup.FileMoverService fileMoverService90 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path26, path88);
    java.nio.file.Path path91 = fileMoverService90.filPath();
    java.nio.file.Path path92 = fileMoverService90.filPath();
    java.nio.file.Path path93 = fileMoverService90.filPath();
    java.nio.file.Path path94 = fileMoverService90.filPath();
    try {
      io.github.onograph.backup.Backup.BackupRespState backupRespState95 = backup9.bakBackupBackupRespState(
          "database.id", path94);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.RuntimeException; message: *** Error:  3b02b00a-232a-454b-823b-025cc97a58b8");
    } catch (java.lang.RuntimeException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(backup3);
    org.junit.Assert.assertNotNull(backup5);
    org.junit.Assert.assertNotNull(backup7);
    org.junit.Assert.assertNotNull(backup9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(backupEnvironment23);
    org.junit.Assert.assertNotNull(databaseNamePattern24);
    org.junit.Assert.assertNotNull(socketAddress25);
    org.junit.Assert.assertNotNull(path26);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(factory40);
    org.junit.Assert.assertNotNull(backupEnvironment41);
    org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional43);
    org.junit.Assert.assertNotNull(path44);
    org.junit.Assert.assertNotNull(path45);
    org.junit.Assert.assertNotNull(fileMoverServiceStream46);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory49);
    org.junit.Assert.assertNotNull(factory50);
    org.junit.Assert.assertNotNull(factory52);
    org.junit.Assert.assertNotNull(factory54);
    org.junit.Assert.assertNotNull(factory56);
    org.junit.Assert.assertNotNull(factory58);
    org.junit.Assert.assertNotNull(factory61);
    org.junit.Assert.assertNotNull(backupEnvironment62);
    org.junit.Assert.assertNotNull(databaseNamePattern63);
    org.junit.Assert.assertNotNull(socketAddress64);
    org.junit.Assert.assertNotNull(path65);
    org.junit.Assert.assertNotNull(factory66);
    org.junit.Assert.assertNotNull(factory67);
    org.junit.Assert.assertNotNull(factory69);
    org.junit.Assert.assertNotNull(factory70);
    org.junit.Assert.assertNotNull(factory72);
    org.junit.Assert.assertNotNull(factory74);
    org.junit.Assert.assertNotNull(factory76);
    org.junit.Assert.assertNotNull(factory78);
    org.junit.Assert.assertNotNull(factory81);
    org.junit.Assert.assertNotNull(backupEnvironment82);
    org.junit.Assert.assertNotNull(databaseNamePattern83);
    org.junit.Assert.assertNotNull(socketAddress84);
    org.junit.Assert.assertNotNull(path85);
    org.junit.Assert.assertNotNull(factory86);
    org.junit.Assert.assertNotNull(fileMoverService87);
    org.junit.Assert.assertNotNull(path88);
    org.junit.Assert.assertNotNull(fileMoverServiceStream89);
    org.junit.Assert.assertNotNull(fileMoverService90);
    org.junit.Assert.assertNotNull(path91);
    org.junit.Assert.assertNotNull(path92);
    org.junit.Assert.assertNotNull(path93);
    org.junit.Assert.assertNotNull(path94);
  }

  @Test
  public void test0327() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0327");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.logging.LogProvider logProvider5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator2.itraLogProvider(
        logProvider5);
    org.neo4j.logging.LogProvider logProvider7 = null;
    io.github.onograph.backup.BackupRunner.Generator generator8 = generator6.uLogProvider(
        logProvider7);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction9 = null;
    io.github.onograph.backup.BackupRunner.Generator generator10 = generator6.fFileSystemAbstraction(
        fileSystemAbstraction9);
    org.neo4j.monitoring.Monitors monitors11 = null;
    io.github.onograph.backup.BackupRunner.Generator generator12 = generator6.monitors(monitors11);
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(generator8);
    org.junit.Assert.assertNotNull(generator10);
    org.junit.Assert.assertNotNull(generator12);
  }

  @Test
  public void test0328() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0328");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup("");
    io.github.onograph.backup.Backup backup3 = backup1.isCc(true);
    io.github.onograph.backup.Backup backup5 = backup3.isCc(true);
    io.github.onograph.backup.Backup backup7 = backup5.isBftf(true);
    io.github.onograph.backup.Backup backup9 = backup5.isCc(true);
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(backup3);
    org.junit.Assert.assertNotNull(backup5);
    org.junit.Assert.assertNotNull(backup7);
    org.junit.Assert.assertNotNull(backup9);
  }

  @Test
  public void test0329() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0329");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupMetadataRepository backupMetadataRepository1 = new io.github.onograph.backup.BackupMetadataRepository(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.config(config3);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isSicc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config8 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory7.config(config8);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.isRp(true);
    org.neo4j.configuration.Config config12 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.config(config12);
    org.neo4j.configuration.helpers.SocketAddress socketAddress14 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory11.wihadsBackupEnvironmentFactory(
        socketAddress14);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory16.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory19.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory19.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory19.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory25.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = factory25.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment31 = factory25.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern32 = backupEnvironment31.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress33 = backupEnvironment31.getSocketAddress();
    java.nio.file.Path path34 = backupEnvironment31.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = factory16.pbPath(path34);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = factory36.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory39 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory39.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = factory39.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = factory39.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = factory45.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory50 = factory45.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment51 = factory45.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern52 = backupEnvironment51.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress53 = backupEnvironment51.getSocketAddress();
    java.nio.file.Path path54 = backupEnvironment51.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory55 = factory36.pbPath(path54);
    io.github.onograph.backup.FileMoverService fileMoverService56 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path34, path54);
    io.github.onograph.backup.BackupEnvironment.Factory factory57 = factory11.pbPath(path54);
    io.github.onograph.backup.BackupEnvironment.Factory factory58 = factory6.prPath(path54);
    java.lang.String[] strArray60 = new java.lang.String[]{"database.id"};
    java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
    boolean boolean62 = java.util.Collections.addAll(
        (java.util.Collection<java.lang.String>) strList61, strArray60);
    try {
      backupMetadataRepository1.wrtForPaLi(path54, (java.util.List<java.lang.String>) strList61);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(backupEnvironment31);
    org.junit.Assert.assertNotNull(databaseNamePattern32);
    org.junit.Assert.assertNotNull(socketAddress33);
    org.junit.Assert.assertNotNull(path34);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(factory39);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory50);
    org.junit.Assert.assertNotNull(backupEnvironment51);
    org.junit.Assert.assertNotNull(databaseNamePattern52);
    org.junit.Assert.assertNotNull(socketAddress53);
    org.junit.Assert.assertNotNull(path54);
    org.junit.Assert.assertNotNull(factory55);
    org.junit.Assert.assertNotNull(fileMoverService56);
    org.junit.Assert.assertNotNull(factory57);
    org.junit.Assert.assertNotNull(factory58);
    org.junit.Assert.assertNotNull(strArray60);
    org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
  }

  @Test
  public void test0330() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0330");
    }
    io.github.onograph.backup.BackupMetaDTO backupMetaDTO0 = null;
    java.lang.String[] strArray3 = new java.lang.String[]{"hi!", ""};
    java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
    boolean boolean5 = java.util.Collections.addAll(
        (java.util.Collection<java.lang.String>) strList4, strArray3);
    try {
      io.github.onograph.backup.BackupMetaService.wrtmedaForBaLi(backupMetaDTO0,
          (java.util.List<java.lang.String>) strList4);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(strArray3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
  }

  @Test
  public void test0331() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0331");
    }
    io.github.onograph.backup.CommandProviderGdbRestorerCommandImpl commandProviderGdbRestorerCommandImpl0 = new io.github.onograph.backup.CommandProviderGdbRestorerCommandImpl();
    int int1 = commandProviderGdbRestorerCommandImpl0.getPriority();
    org.neo4j.cli.Command.CommandType commandType2 = commandProviderGdbRestorerCommandImpl0.commandType();
    org.neo4j.cli.Command.CommandType commandType3 = commandProviderGdbRestorerCommandImpl0.commandType();
    org.neo4j.cli.Command.CommandType commandType4 = commandProviderGdbRestorerCommandImpl0.commandType();
    org.neo4j.cli.Command.CommandType commandType5 = commandProviderGdbRestorerCommandImpl0.commandType();
    org.neo4j.cli.Command.CommandType commandType6 = commandProviderGdbRestorerCommandImpl0.commandType();
    int int7 = commandProviderGdbRestorerCommandImpl0.getPriority();
    org.neo4j.cli.ExecutionContext executionContext8 = null;
    try {
      io.github.onograph.backup.GdbRestorerCommand gdbRestorerCommand9 = commandProviderGdbRestorerCommandImpl0.createCommand(
          executionContext8);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    org.junit.Assert.assertTrue(
        "'" + commandType2 + "' != '" + org.neo4j.cli.Command.CommandType.RESTORE_DB + "'",
        commandType2.equals(org.neo4j.cli.Command.CommandType.RESTORE_DB));
    org.junit.Assert.assertTrue(
        "'" + commandType3 + "' != '" + org.neo4j.cli.Command.CommandType.RESTORE_DB + "'",
        commandType3.equals(org.neo4j.cli.Command.CommandType.RESTORE_DB));
    org.junit.Assert.assertTrue(
        "'" + commandType4 + "' != '" + org.neo4j.cli.Command.CommandType.RESTORE_DB + "'",
        commandType4.equals(org.neo4j.cli.Command.CommandType.RESTORE_DB));
    org.junit.Assert.assertTrue(
        "'" + commandType5 + "' != '" + org.neo4j.cli.Command.CommandType.RESTORE_DB + "'",
        commandType5.equals(org.neo4j.cli.Command.CommandType.RESTORE_DB));
    org.junit.Assert.assertTrue(
        "'" + commandType6 + "' != '" + org.neo4j.cli.Command.CommandType.RESTORE_DB + "'",
        commandType6.equals(org.neo4j.cli.Command.CommandType.RESTORE_DB));
    org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
  }

  @Test
  public void test0332() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0332");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.config(config5);
    org.neo4j.configuration.helpers.SocketAddress socketAddress7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress7);
    org.neo4j.configuration.helpers.SocketAddress socketAddress9 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress9);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory4.wihadsBackupEnvironmentFactory(
        (int) (short) -1, "hi!");
    org.neo4j.configuration.Config config14 = factory13.gecfConfig();
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags15 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction16 = null;
    org.neo4j.logging.LogProvider logProvider17 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory18.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory21.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory21.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory21.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory27.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory27.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment33 = factory27.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern34 = backupEnvironment33.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress35 = backupEnvironment33.getSocketAddress();
    java.nio.file.Path path36 = backupEnvironment33.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = factory18.pbPath(path36);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory40 = factory38.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = factory41.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = factory41.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = factory41.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = factory47.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory52 = factory47.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment53 = factory47.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern54 = backupEnvironment53.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress55 = backupEnvironment53.getSocketAddress();
    java.nio.file.Path path56 = backupEnvironment53.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory57 = factory38.pbPath(path56);
    io.github.onograph.backup.FileMoverService fileMoverService58 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path36, path56);
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory59 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl60 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config14, consistencyFlags15, fileSystemAbstraction16, logProvider17, path56,
        progressMonitorFactory59);
    org.neo4j.io.layout.DatabaseLayout databaseLayout61 = null;
    try {
      backupVerificationServiceImpl60.chcsyForDa(databaseLayout61);
      org.junit.Assert.fail(
          "Expected exception of type io.github.onograph.backup.BackupVerificationErrorException; message: *** Error:  2915f124-983c-439d-b1ae-a9c5ad06642b");
    } catch (io.github.onograph.backup.BackupVerificationErrorException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(config14);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(backupEnvironment33);
    org.junit.Assert.assertNotNull(databaseNamePattern34);
    org.junit.Assert.assertNotNull(socketAddress35);
    org.junit.Assert.assertNotNull(path36);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(factory40);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory49);
    org.junit.Assert.assertNotNull(factory52);
    org.junit.Assert.assertNotNull(backupEnvironment53);
    org.junit.Assert.assertNotNull(databaseNamePattern54);
    org.junit.Assert.assertNotNull(socketAddress55);
    org.junit.Assert.assertNotNull(path56);
    org.junit.Assert.assertNotNull(factory57);
    org.junit.Assert.assertNotNull(fileMoverService58);
  }

  @Test
  public void test0333() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0333");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.miAuthMetaOptions(
        authMetaOptions3);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isGcc(
        (java.lang.Boolean) false);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.miAuthMetaOptions(
        authMetaOptions7);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isIcc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory10.wihadsBackupEnvironmentFactory(
        (int) (byte) -1, "hi!");
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory10.isFtfb(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory15.isFtfb(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory15.isIcc(
        (java.lang.Boolean) true);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
  }

  @Test
  public void test0334() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0334");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    java.io.PrintStream printStream3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory4.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory10.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory10.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment16 = factory10.bulBackupEnvironment();
    org.neo4j.memory.MemoryTracker memoryTracker17 = backupEnvironment16.getMemoryTracker();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern18 = backupEnvironment16.getDatabaseNamePattern();
    boolean boolean19 = backupEnvironment16.getIsBftf();
    org.neo4j.configuration.helpers.SocketAddress socketAddress20 = backupEnvironment16.getSocketAddress();
    java.nio.file.Path path21 = backupEnvironment16.getRpPath();
    java.nio.file.Path path22 = backupEnvironment16.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory23.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory23.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory23.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory29.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory29.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment35 = factory29.bulBackupEnvironment();
    boolean boolean36 = backupEnvironment35.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional37 = backupEnvironment35.geicmaOptional();
    java.nio.file.Path path38 = backupEnvironment35.getPbPath();
    java.nio.file.Path path39 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path38);
    io.github.onograph.backup.BackupEnvironment.Factory factory40 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory42 = factory40.isGcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config44 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = factory43.config(config44);
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = factory45.isRp(true);
    org.neo4j.configuration.Config config48 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = factory47.config(config48);
    org.neo4j.configuration.helpers.SocketAddress socketAddress50 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory51 = factory47.wihadsBackupEnvironmentFactory(
        socketAddress50);
    io.github.onograph.backup.BackupEnvironment.Factory factory52 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory54 = factory52.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory55 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory57 = factory55.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory59 = factory55.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory61 = factory55.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory63 = factory61.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory66 = factory61.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment67 = factory61.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern68 = backupEnvironment67.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress69 = backupEnvironment67.getSocketAddress();
    java.nio.file.Path path70 = backupEnvironment67.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory71 = factory52.pbPath(path70);
    io.github.onograph.backup.BackupEnvironment.Factory factory72 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory74 = factory72.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory75 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory77 = factory75.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory79 = factory75.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory81 = factory75.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory83 = factory81.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory86 = factory81.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment87 = factory81.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern88 = backupEnvironment87.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress89 = backupEnvironment87.getSocketAddress();
    java.nio.file.Path path90 = backupEnvironment87.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory91 = factory72.pbPath(path90);
    io.github.onograph.backup.FileMoverService fileMoverService92 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path70, path90);
    io.github.onograph.backup.BackupEnvironment.Factory factory93 = factory47.pbPath(path90);
    boolean boolean94 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path90);
    io.github.onograph.backup.BackupEnvironment.Factory factory95 = factory40.prPath(path90);
    io.github.onograph.backup.FileMoverService fileMoverService96 = io.github.onograph.backup.FileMoverService.movifeseFileMoverService(
        path38, path90);
    org.neo4j.io.layout.DatabaseLayout databaseLayout97 = null;
    try {
      io.github.onograph.backup.GdbRestorer gdbRestorer98 = new io.github.onograph.backup.GdbRestorer(
          fileSystemAbstraction0, false, false, printStream3, path22, path90, databaseLayout97);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(backupEnvironment16);
    org.junit.Assert.assertNotNull(memoryTracker17);
    org.junit.Assert.assertNotNull(databaseNamePattern18);
    org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    org.junit.Assert.assertNotNull(socketAddress20);
    org.junit.Assert.assertNotNull(path21);
    org.junit.Assert.assertNotNull(path22);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(backupEnvironment35);
    org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional37);
    org.junit.Assert.assertNotNull(path38);
    org.junit.Assert.assertNotNull(path39);
    org.junit.Assert.assertNotNull(factory40);
    org.junit.Assert.assertNotNull(factory42);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory49);
    org.junit.Assert.assertNotNull(factory51);
    org.junit.Assert.assertNotNull(factory52);
    org.junit.Assert.assertNotNull(factory54);
    org.junit.Assert.assertNotNull(factory55);
    org.junit.Assert.assertNotNull(factory57);
    org.junit.Assert.assertNotNull(factory59);
    org.junit.Assert.assertNotNull(factory61);
    org.junit.Assert.assertNotNull(factory63);
    org.junit.Assert.assertNotNull(factory66);
    org.junit.Assert.assertNotNull(backupEnvironment67);
    org.junit.Assert.assertNotNull(databaseNamePattern68);
    org.junit.Assert.assertNotNull(socketAddress69);
    org.junit.Assert.assertNotNull(path70);
    org.junit.Assert.assertNotNull(factory71);
    org.junit.Assert.assertNotNull(factory72);
    org.junit.Assert.assertNotNull(factory74);
    org.junit.Assert.assertNotNull(factory75);
    org.junit.Assert.assertNotNull(factory77);
    org.junit.Assert.assertNotNull(factory79);
    org.junit.Assert.assertNotNull(factory81);
    org.junit.Assert.assertNotNull(factory83);
    org.junit.Assert.assertNotNull(factory86);
    org.junit.Assert.assertNotNull(backupEnvironment87);
    org.junit.Assert.assertNotNull(databaseNamePattern88);
    org.junit.Assert.assertNotNull(socketAddress89);
    org.junit.Assert.assertNotNull(path90);
    org.junit.Assert.assertNotNull(factory91);
    org.junit.Assert.assertNotNull(fileMoverService92);
    org.junit.Assert.assertNotNull(factory93);
    org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    org.junit.Assert.assertNotNull(factory95);
    org.junit.Assert.assertNotNull(fileMoverService96);
  }

  @Test
  public void test0335() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0335");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupMetadataRepository backupMetadataRepository1 = new io.github.onograph.backup.BackupMetadataRepository(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.config(config3);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isRp(true);
    org.neo4j.configuration.Config config7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.config(config7);
    org.neo4j.configuration.helpers.SocketAddress socketAddress9 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory6.wihadsBackupEnvironmentFactory(
        socketAddress9);
    org.neo4j.configuration.helpers.SocketAddress socketAddress11 = factory6.getSocketAddress();
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory6.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory13.isIcc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment backupEnvironment16 = factory15.bulBackupEnvironment();
    java.nio.file.Path path17 = backupEnvironment16.getPbPath();
    java.lang.String[] strArray19 = new java.lang.String[]{"database.id"};
    java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
    boolean boolean21 = java.util.Collections.addAll(
        (java.util.Collection<java.lang.String>) strList20, strArray19);
    try {
      backupMetadataRepository1.wrtForPaLi(path17, (java.util.List<java.lang.String>) strList20);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNull(socketAddress11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(backupEnvironment16);
    org.junit.Assert.assertNotNull(path17);
    org.junit.Assert.assertNotNull(strArray19);
    org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
  }

  @Test
  public void test0336() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0336");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.GdbIdRepo gdbIdRepo1 = new io.github.onograph.backup.GdbIdRepo(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory8.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment14 = factory8.bulBackupEnvironment();
    boolean boolean15 = backupEnvironment14.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional16 = backupEnvironment14.geicmaOptional();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional17 = backupEnvironment14.geicmaOptional();
    java.nio.file.Path path18 = backupEnvironment14.getRpPath();
    try {
      java.util.Optional<org.neo4j.kernel.database.DatabaseId> databaseIdOptional19 = gdbIdRepo1.reddtaiOptional(
          path18);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(backupEnvironment14);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional16);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional17);
    org.junit.Assert.assertNotNull(path18);
  }

  @Test
  public void test0337() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0337");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup("");
    io.github.onograph.backup.Backup backup3 = backup1.isCc(true);
    io.github.onograph.backup.Backup backup5 = backup3.isCc(true);
    io.github.onograph.backup.Backup backup7 = backup5.isCc(true);
    io.github.onograph.backup.Backup backup9 = backup5.isCc(true);
    io.github.onograph.backup.Backup backup11 = backup5.isBftf(false);
    io.github.onograph.backup.Backup backup13 = backup11.isBftf(true);
    java.io.OutputStream outputStream14 = null;
    try {
      io.github.onograph.backup.Backup backup15 = backup13.outputStream(outputStream14);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: outputStream");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(backup3);
    org.junit.Assert.assertNotNull(backup5);
    org.junit.Assert.assertNotNull(backup7);
    org.junit.Assert.assertNotNull(backup9);
    org.junit.Assert.assertNotNull(backup11);
    org.junit.Assert.assertNotNull(backup13);
  }

  @Test
  public void test0338() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0338");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction2 = null;
    io.github.onograph.backup.FileMover fileMover3 = new io.github.onograph.backup.FileMover(
        fileSystemAbstraction2);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction4 = null;
    io.github.onograph.backup.FileMover fileMover5 = new io.github.onograph.backup.FileMover(
        fileSystemAbstraction4);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory6.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory6.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory12.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory12.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment18 = factory12.bulBackupEnvironment();
    boolean boolean19 = backupEnvironment18.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional20 = backupEnvironment18.geicmaOptional();
    java.nio.file.Path path21 = backupEnvironment18.getPbPath();
    java.nio.file.Path path22 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path21);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream23 = fileMover5._trrfrmnStream(
        path21);
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory24.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory27.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory27.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory27.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = factory33.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = factory33.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment39 = factory33.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern40 = backupEnvironment39.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress41 = backupEnvironment39.getSocketAddress();
    java.nio.file.Path path42 = backupEnvironment39.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = factory24.pbPath(path42);
    io.github.onograph.backup.BackupEnvironment.Factory factory44 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory46 = factory44.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = factory47.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory51 = factory47.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory53 = factory47.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory55 = factory53.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory58 = factory53.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment59 = factory53.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern60 = backupEnvironment59.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress61 = backupEnvironment59.getSocketAddress();
    java.nio.file.Path path62 = backupEnvironment59.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory63 = factory44.pbPath(path62);
    io.github.onograph.backup.FileMoverService fileMoverService64 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path42, path62);
    java.nio.file.Path path65 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path42);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream66 = fileMover5._trrfrmnStream(
        path65);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream67 = fileMover3._trrfrmnStream(
        path65);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction68 = null;
    io.github.onograph.backup.FileMover fileMover69 = new io.github.onograph.backup.FileMover(
        fileSystemAbstraction68);
    io.github.onograph.backup.BackupEnvironment.Factory factory70 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory72 = factory70.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory74 = factory70.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory76 = factory70.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory78 = factory76.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory81 = factory76.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment82 = factory76.bulBackupEnvironment();
    boolean boolean83 = backupEnvironment82.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional84 = backupEnvironment82.geicmaOptional();
    java.nio.file.Path path85 = backupEnvironment82.getPbPath();
    java.nio.file.Path path86 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path85);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream87 = fileMover69._trrfrmnStream(
        path85);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream88 = fileMover3._trrfrmnStream(
        path85);
    java.nio.file.Path path89 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path85);
    org.neo4j.logging.LogProvider logProvider90 = null;
    org.neo4j.io.pagecache.PageCache pageCache91 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer92 = null;
    try {
      io.github.onograph.backup.BackupMetaService backupMetaService93 = new io.github.onograph.backup.BackupMetaService(
          fileSystemAbstraction0, "", path89, logProvider90, pageCache91, pageCacheTracer92);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(backupEnvironment18);
    org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional20);
    org.junit.Assert.assertNotNull(path21);
    org.junit.Assert.assertNotNull(path22);
    org.junit.Assert.assertNotNull(fileMoverServiceStream23);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(backupEnvironment39);
    org.junit.Assert.assertNotNull(databaseNamePattern40);
    org.junit.Assert.assertNotNull(socketAddress41);
    org.junit.Assert.assertNotNull(path42);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory44);
    org.junit.Assert.assertNotNull(factory46);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory49);
    org.junit.Assert.assertNotNull(factory51);
    org.junit.Assert.assertNotNull(factory53);
    org.junit.Assert.assertNotNull(factory55);
    org.junit.Assert.assertNotNull(factory58);
    org.junit.Assert.assertNotNull(backupEnvironment59);
    org.junit.Assert.assertNotNull(databaseNamePattern60);
    org.junit.Assert.assertNotNull(socketAddress61);
    org.junit.Assert.assertNotNull(path62);
    org.junit.Assert.assertNotNull(factory63);
    org.junit.Assert.assertNotNull(fileMoverService64);
    org.junit.Assert.assertNotNull(path65);
    org.junit.Assert.assertNotNull(fileMoverServiceStream66);
    org.junit.Assert.assertNotNull(fileMoverServiceStream67);
    org.junit.Assert.assertNotNull(factory70);
    org.junit.Assert.assertNotNull(factory72);
    org.junit.Assert.assertNotNull(factory74);
    org.junit.Assert.assertNotNull(factory76);
    org.junit.Assert.assertNotNull(factory78);
    org.junit.Assert.assertNotNull(factory81);
    org.junit.Assert.assertNotNull(backupEnvironment82);
    org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional84);
    org.junit.Assert.assertNotNull(path85);
    org.junit.Assert.assertNotNull(path86);
    org.junit.Assert.assertNotNull(fileMoverServiceStream87);
    org.junit.Assert.assertNotNull(fileMoverServiceStream88);
    org.junit.Assert.assertNotNull(path89);
  }

  @Test
  public void test0339() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0339");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.logging.LogProvider logProvider5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator2.itraLogProvider(
        logProvider5);
    org.neo4j.time.SystemNanoClock systemNanoClock7 = null;
    io.github.onograph.backup.BackupRunner.Generator generator8 = generator6.systemNanoClock(
        systemNanoClock7);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction9 = null;
    io.github.onograph.backup.BackupRunner.Generator generator10 = generator8.fFileSystemAbstraction(
        fileSystemAbstraction9);
    org.neo4j.logging.LogProvider logProvider11 = null;
    io.github.onograph.backup.BackupRunner.Generator generator12 = generator10.uLogProvider(
        logProvider11);
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(generator8);
    org.junit.Assert.assertNotNull(generator10);
    org.junit.Assert.assertNotNull(generator12);
  }

  @Test
  public void test0340() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0340");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupIOService backupIOService1 = new io.github.onograph.backup.BackupIOService(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory8.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment14 = factory8.bulBackupEnvironment();
    boolean boolean15 = backupEnvironment14.getIsBftf();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern16 = backupEnvironment14.getDatabaseNamePattern();
    java.nio.file.Path path17 = backupEnvironment14.getRpPath();
    java.nio.file.Path path18 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path17);
    try {
      boolean boolean19 = backupIOService1.isExsForPa(path18);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(backupEnvironment14);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    org.junit.Assert.assertNotNull(databaseNamePattern16);
    org.junit.Assert.assertNotNull(path17);
    org.junit.Assert.assertNotNull(path18);
  }

  @Test
  public void test0341() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0341");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    java.nio.file.Path path3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.prPath(path3);
    java.nio.file.Path path5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.prPath(path5);
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory7.isCc(false);
    java.nio.file.Path path10 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory7.prPath(path10);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config13 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory12.config(config13);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory14.isRp(true);
    org.neo4j.configuration.Config config17 = factory14.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory7.config(config17);
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory6.config(config17);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory20.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory23.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory23.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory23.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory29.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory29.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment35 = factory29.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern36 = backupEnvironment35.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress37 = backupEnvironment35.getSocketAddress();
    java.nio.file.Path path38 = backupEnvironment35.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory39 = factory20.pbPath(path38);
    io.github.onograph.backup.BackupEnvironment.Factory factory40 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory42 = factory40.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = factory43.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = factory43.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = factory43.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory51 = factory49.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory54 = factory49.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment55 = factory49.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern56 = backupEnvironment55.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress57 = backupEnvironment55.getSocketAddress();
    java.nio.file.Path path58 = backupEnvironment55.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory59 = factory40.pbPath(path58);
    io.github.onograph.backup.FileMoverService fileMoverService60 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path38, path58);
    java.nio.file.Path path61 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path58);
    io.github.onograph.backup.BackupEnvironment.Factory factory62 = factory6.prPath(path61);
    io.github.onograph.backup.BackupEnvironment.Factory factory63 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory65 = factory63.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory67 = factory63.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory69 = factory63.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory71 = factory69.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory74 = factory69.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment75 = factory69.bulBackupEnvironment();
    boolean boolean76 = backupEnvironment75.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional77 = backupEnvironment75.geicmaOptional();
    java.nio.file.Path path78 = backupEnvironment75.getPbPath();
    java.nio.file.Path path79 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path78);
    java.nio.file.Path path80 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path79);
    boolean boolean81 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path80);
    java.nio.file.Path path82 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path80);
    io.github.onograph.backup.BackupEnvironment.Factory factory83 = factory62.pbPath(path80);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(config17);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(backupEnvironment35);
    org.junit.Assert.assertNotNull(databaseNamePattern36);
    org.junit.Assert.assertNotNull(socketAddress37);
    org.junit.Assert.assertNotNull(path38);
    org.junit.Assert.assertNotNull(factory39);
    org.junit.Assert.assertNotNull(factory40);
    org.junit.Assert.assertNotNull(factory42);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory49);
    org.junit.Assert.assertNotNull(factory51);
    org.junit.Assert.assertNotNull(factory54);
    org.junit.Assert.assertNotNull(backupEnvironment55);
    org.junit.Assert.assertNotNull(databaseNamePattern56);
    org.junit.Assert.assertNotNull(socketAddress57);
    org.junit.Assert.assertNotNull(path58);
    org.junit.Assert.assertNotNull(factory59);
    org.junit.Assert.assertNotNull(fileMoverService60);
    org.junit.Assert.assertNotNull(path61);
    org.junit.Assert.assertNotNull(factory62);
    org.junit.Assert.assertNotNull(factory63);
    org.junit.Assert.assertNotNull(factory65);
    org.junit.Assert.assertNotNull(factory67);
    org.junit.Assert.assertNotNull(factory69);
    org.junit.Assert.assertNotNull(factory71);
    org.junit.Assert.assertNotNull(factory74);
    org.junit.Assert.assertNotNull(backupEnvironment75);
    org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional77);
    org.junit.Assert.assertNotNull(path78);
    org.junit.Assert.assertNotNull(path79);
    org.junit.Assert.assertNotNull(path80);
    org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    org.junit.Assert.assertNotNull(path82);
    org.junit.Assert.assertNotNull(factory83);
  }

  @Test
  public void test0342() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0342");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isSicc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory5 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config6 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory5.config(config6);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory7.isRp(true);
    org.neo4j.configuration.Config config10 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.config(config10);
    org.neo4j.configuration.helpers.SocketAddress socketAddress12 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory9.wihadsBackupEnvironmentFactory(
        socketAddress12);
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory14.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory17.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory17.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory17.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory23.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = factory23.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment29 = factory23.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern30 = backupEnvironment29.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress31 = backupEnvironment29.getSocketAddress();
    java.nio.file.Path path32 = backupEnvironment29.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory14.pbPath(path32);
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory34.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory39 = factory37.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory37.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = factory37.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = factory43.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory48 = factory43.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment49 = factory43.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern50 = backupEnvironment49.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress51 = backupEnvironment49.getSocketAddress();
    java.nio.file.Path path52 = backupEnvironment49.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory53 = factory34.pbPath(path52);
    io.github.onograph.backup.FileMoverService fileMoverService54 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path32, path52);
    io.github.onograph.backup.BackupEnvironment.Factory factory55 = factory9.pbPath(path52);
    io.github.onograph.backup.BackupEnvironment.Factory factory56 = factory4.prPath(path52);
    java.lang.Class<?> wildcardClass57 = factory56.getClass();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(backupEnvironment29);
    org.junit.Assert.assertNotNull(databaseNamePattern30);
    org.junit.Assert.assertNotNull(socketAddress31);
    org.junit.Assert.assertNotNull(path32);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(factory39);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory48);
    org.junit.Assert.assertNotNull(backupEnvironment49);
    org.junit.Assert.assertNotNull(databaseNamePattern50);
    org.junit.Assert.assertNotNull(socketAddress51);
    org.junit.Assert.assertNotNull(path52);
    org.junit.Assert.assertNotNull(factory53);
    org.junit.Assert.assertNotNull(fileMoverService54);
    org.junit.Assert.assertNotNull(factory55);
    org.junit.Assert.assertNotNull(factory56);
    org.junit.Assert.assertNotNull(wildcardClass57);
  }

  @Test
  public void test0343() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0343");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupIOService backupIOService1 = new io.github.onograph.backup.BackupIOService(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory8.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment14 = factory8.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern15 = backupEnvironment14.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress16 = backupEnvironment14.getSocketAddress();
    java.nio.file.Path path17 = backupEnvironment14.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory18.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory18.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory18.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory24.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory24.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment30 = factory24.bulBackupEnvironment();
    boolean boolean31 = backupEnvironment30.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional32 = backupEnvironment30.geicmaOptional();
    java.nio.file.Path path33 = backupEnvironment30.getPbPath();
    java.nio.file.Path path34 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path33);
    java.nio.file.Path path35 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path34);
    boolean boolean36 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path35);
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory39 = factory37.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory37.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = factory37.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = factory43.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory48 = factory43.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment49 = factory43.bulBackupEnvironment();
    boolean boolean50 = backupEnvironment49.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional51 = backupEnvironment49.geicmaOptional();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional52 = backupEnvironment49.geicmaOptional();
    java.nio.file.Path path53 = backupEnvironment49.getPbPath();
    java.nio.file.Path path54 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path53);
    io.github.onograph.backup.FileMoverService fileMoverService55 = io.github.onograph.backup.FileMoverService.movifeseFileMoverService(
        path35, path54);
    io.github.onograph.backup.FileMoverService fileMoverService56 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path17, path35);
    try {
      backupIOService1.deedForPa(path17);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(backupEnvironment14);
    org.junit.Assert.assertNotNull(databaseNamePattern15);
    org.junit.Assert.assertNotNull(socketAddress16);
    org.junit.Assert.assertNotNull(path17);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(backupEnvironment30);
    org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional32);
    org.junit.Assert.assertNotNull(path33);
    org.junit.Assert.assertNotNull(path34);
    org.junit.Assert.assertNotNull(path35);
    org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(factory39);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory48);
    org.junit.Assert.assertNotNull(backupEnvironment49);
    org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional51);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional52);
    org.junit.Assert.assertNotNull(path53);
    org.junit.Assert.assertNotNull(path54);
    org.junit.Assert.assertNotNull(fileMoverService55);
    org.junit.Assert.assertNotNull(fileMoverService56);
  }

  @Test
  public void test0344() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0344");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    org.neo4j.logging.LogProvider logProvider1 = null;
    org.neo4j.logging.Log log2 = null;
    io.github.onograph.backup.RemoteBackupService remoteBackupService3 = new io.github.onograph.backup.RemoteBackupService(
        fileSystemAbstraction0, logProvider1, log2);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory4.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory10.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config14 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory13.config(config14);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory15.isRp(true);
    org.neo4j.configuration.Config config18 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory17.config(config18);
    org.neo4j.configuration.helpers.SocketAddress socketAddress20 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory17.wihadsBackupEnvironmentFactory(
        socketAddress20);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config23 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory22.config(config23);
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory24.isRp(true);
    org.neo4j.configuration.Config config27 = factory24.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = factory17.config(config27);
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory12.config(config27);
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags30 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction31 = null;
    org.neo4j.logging.LogProvider logProvider32 = null;
    java.nio.file.Path path33 = null;
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory34 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl35 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config27, consistencyFlags30, fileSystemAbstraction31, logProvider32, path33,
        progressMonitorFactory34);
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags36 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction37 = null;
    org.neo4j.logging.LogProvider logProvider38 = null;
    java.nio.file.Path path39 = null;
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory40 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl41 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config27, consistencyFlags36, fileSystemAbstraction37, logProvider38, path39,
        progressMonitorFactory40);
    io.github.onograph.backup.BackupEnvironment.Factory factory42 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory44 = factory42.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory46 = factory42.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory48 = factory42.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory50 = factory48.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory53 = factory48.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment54 = factory48.bulBackupEnvironment();
    org.neo4j.memory.MemoryTracker memoryTracker55 = backupEnvironment54.getMemoryTracker();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern56 = backupEnvironment54.getDatabaseNamePattern();
    boolean boolean57 = backupEnvironment54.getIsBftf();
    java.nio.file.Path path58 = backupEnvironment54.getRpPath();
    boolean boolean59 = backupEnvironment54.getIsRp();
    io.github.onograph.backup.DefaultBackupServiceHandler defaultBackupServiceHandler61 = null;
    io.github.onograph.backup.GdbStoreTransferWatcherRebImpl gdbStoreTransferWatcherRebImpl62 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer63 = null;
    io.github.onograph.backup.RemoteBackupManager remoteBackupManager64 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory65 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config66 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory67 = factory65.config(config66);
    io.github.onograph.backup.BackupEnvironment.Factory factory69 = factory67.isRp(true);
    org.neo4j.configuration.Config config70 = factory67.gecfConfig();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction71 = null;
    org.neo4j.memory.MemoryTracker memoryTracker72 = null;
    org.neo4j.io.pagecache.PageCache pageCache73 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager74 = new io.github.onograph.backup.BackupRestorationManager(
        config70, fileSystemAbstraction71, memoryTracker72, pageCache73);
    try {
      remoteBackupService3.bakForBaPaBaDeBaReStGd(
          (io.github.onograph.backup.BackupVerificationService) backupVerificationServiceImpl41,
          backupEnvironment54, "database.id", defaultBackupServiceHandler61,
          gdbStoreTransferWatcherRebImpl62, pageCacheTracer63, remoteBackupManager64,
          backupRestorationManager74);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(config27);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory42);
    org.junit.Assert.assertNotNull(factory44);
    org.junit.Assert.assertNotNull(factory46);
    org.junit.Assert.assertNotNull(factory48);
    org.junit.Assert.assertNotNull(factory50);
    org.junit.Assert.assertNotNull(factory53);
    org.junit.Assert.assertNotNull(backupEnvironment54);
    org.junit.Assert.assertNotNull(memoryTracker55);
    org.junit.Assert.assertNotNull(databaseNamePattern56);
    org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    org.junit.Assert.assertNotNull(path58);
    org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    org.junit.Assert.assertNotNull(factory65);
    org.junit.Assert.assertNotNull(factory67);
    org.junit.Assert.assertNotNull(factory69);
    org.junit.Assert.assertNotNull(config70);
  }

  @Test
  public void test0345() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0345");
    }
    io.github.onograph.backup.CommandProviderBackupImpl commandProviderBackupImpl0 = new io.github.onograph.backup.CommandProviderBackupImpl();
    org.neo4j.cli.ExecutionContext executionContext1 = null;
    try {
      io.github.onograph.backup.BackupCommand backupCommand2 = commandProviderBackupImpl0.createCommand(
          executionContext1);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test0346() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0346");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.GdbIdRepo gdbIdRepo1 = new io.github.onograph.backup.GdbIdRepo(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory8.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment14 = factory8.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern15 = backupEnvironment14.getDatabaseNamePattern();
    boolean boolean16 = backupEnvironment14.getIsBftf();
    boolean boolean17 = backupEnvironment14.getIsBftf();
    java.nio.file.Path path18 = backupEnvironment14.getRpPath();
    java.nio.file.Path path19 = backupEnvironment14.getPbPath();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction20 = null;
    io.github.onograph.backup.FileMover fileMover21 = new io.github.onograph.backup.FileMover(
        fileSystemAbstraction20);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory22.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory22.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = factory22.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = factory28.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory28.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment34 = factory28.bulBackupEnvironment();
    boolean boolean35 = backupEnvironment34.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional36 = backupEnvironment34.geicmaOptional();
    java.nio.file.Path path37 = backupEnvironment34.getPbPath();
    java.nio.file.Path path38 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path37);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream39 = fileMover21._trrfrmnStream(
        path37);
    io.github.onograph.backup.BackupEnvironment.Factory factory40 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory42 = factory40.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = factory43.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = factory43.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = factory43.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory51 = factory49.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory54 = factory49.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment55 = factory49.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern56 = backupEnvironment55.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress57 = backupEnvironment55.getSocketAddress();
    java.nio.file.Path path58 = backupEnvironment55.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory59 = factory40.pbPath(path58);
    io.github.onograph.backup.BackupEnvironment.Factory factory60 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory62 = factory60.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory63 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory65 = factory63.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory67 = factory63.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory69 = factory63.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory71 = factory69.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory74 = factory69.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment75 = factory69.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern76 = backupEnvironment75.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress77 = backupEnvironment75.getSocketAddress();
    java.nio.file.Path path78 = backupEnvironment75.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory79 = factory60.pbPath(path78);
    io.github.onograph.backup.FileMoverService fileMoverService80 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path58, path78);
    java.nio.file.Path path81 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path58);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream82 = fileMover21._trrfrmnStream(
        path81);
    java.nio.file.Path path83 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path81);
    io.github.onograph.backup.FileMoverService fileMoverService84 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path19, path83);
    try {
      java.util.Optional<org.neo4j.kernel.database.DatabaseId> databaseIdOptional85 = gdbIdRepo1.reddtaiOptional(
          path83);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(backupEnvironment14);
    org.junit.Assert.assertNotNull(databaseNamePattern15);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    org.junit.Assert.assertNotNull(path18);
    org.junit.Assert.assertNotNull(path19);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(backupEnvironment34);
    org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional36);
    org.junit.Assert.assertNotNull(path37);
    org.junit.Assert.assertNotNull(path38);
    org.junit.Assert.assertNotNull(fileMoverServiceStream39);
    org.junit.Assert.assertNotNull(factory40);
    org.junit.Assert.assertNotNull(factory42);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory49);
    org.junit.Assert.assertNotNull(factory51);
    org.junit.Assert.assertNotNull(factory54);
    org.junit.Assert.assertNotNull(backupEnvironment55);
    org.junit.Assert.assertNotNull(databaseNamePattern56);
    org.junit.Assert.assertNotNull(socketAddress57);
    org.junit.Assert.assertNotNull(path58);
    org.junit.Assert.assertNotNull(factory59);
    org.junit.Assert.assertNotNull(factory60);
    org.junit.Assert.assertNotNull(factory62);
    org.junit.Assert.assertNotNull(factory63);
    org.junit.Assert.assertNotNull(factory65);
    org.junit.Assert.assertNotNull(factory67);
    org.junit.Assert.assertNotNull(factory69);
    org.junit.Assert.assertNotNull(factory71);
    org.junit.Assert.assertNotNull(factory74);
    org.junit.Assert.assertNotNull(backupEnvironment75);
    org.junit.Assert.assertNotNull(databaseNamePattern76);
    org.junit.Assert.assertNotNull(socketAddress77);
    org.junit.Assert.assertNotNull(path78);
    org.junit.Assert.assertNotNull(factory79);
    org.junit.Assert.assertNotNull(fileMoverService80);
    org.junit.Assert.assertNotNull(path81);
    org.junit.Assert.assertNotNull(fileMoverServiceStream82);
    org.junit.Assert.assertNotNull(path83);
    org.junit.Assert.assertNotNull(fileMoverService84);
  }

  @Test
  public void test0347() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0347");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator4.progressMonitorFactory(
        progressMonitorFactory5);
    org.neo4j.monitoring.Monitors monitors7 = null;
    io.github.onograph.backup.BackupRunner.Generator generator8 = generator6.monitors(monitors7);
    java.lang.Class<?> wildcardClass9 = generator8.getClass();
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(generator8);
    org.junit.Assert.assertNotNull(wildcardClass9);
  }

  @Test
  public void test0348() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0348");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory8.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment14 = factory8.bulBackupEnvironment();
    org.neo4j.memory.MemoryTracker memoryTracker15 = backupEnvironment14.getMemoryTracker();
    boolean boolean16 = backupEnvironment14.getIsRp();
    java.nio.file.Path path17 = backupEnvironment14.getPbPath();
    org.neo4j.logging.LogProvider logProvider18 = null;
    org.neo4j.io.pagecache.PageCache pageCache19 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer20 = null;
    try {
      io.github.onograph.backup.BackupMetaService backupMetaService21 = new io.github.onograph.backup.BackupMetaService(
          fileSystemAbstraction0, "database.id", path17, logProvider18, pageCache19,
          pageCacheTracer20);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(backupEnvironment14);
    org.junit.Assert.assertNotNull(memoryTracker15);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    org.junit.Assert.assertNotNull(path17);
  }

  @Test
  public void test0349() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0349");
    }
    io.github.onograph.backup.BackupMetaDTO backupMetaDTO0 = null;
    java.lang.String[] strArray4 = new java.lang.String[]{"hi!", "hi!", ""};
    java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
    boolean boolean6 = java.util.Collections.addAll(
        (java.util.Collection<java.lang.String>) strList5, strArray4);
    try {
      io.github.onograph.backup.BackupMetaService.wrtmedaForBaLi(backupMetaDTO0,
          (java.util.List<java.lang.String>) strList5);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(strArray4);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
  }

  @Test
  public void test0350() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0350");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = factory2.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory2.isCc(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    java.nio.file.Path path11 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory8.prPath(path11);
    java.nio.file.Path path13 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory12.prPath(path13);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory15.isCc(false);
    java.nio.file.Path path18 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory15.prPath(path18);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config21 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory20.config(config21);
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory22.isRp(true);
    org.neo4j.configuration.Config config25 = factory22.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory15.config(config25);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory14.config(config25);
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = factory7.config(config25);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction29 = null;
    io.github.onograph.cluster.raft.module.cuprot.LifecycleCatchupManagerImpl lifecycleCatchupManagerImpl30 = null;
    org.neo4j.scheduler.JobScheduler jobScheduler31 = null;
    org.neo4j.logging.LogProvider logProvider32 = null;
    org.neo4j.monitoring.Monitors monitors33 = null;
    org.neo4j.io.pagecache.PageCache pageCache34 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer35 = null;
    org.neo4j.time.SystemNanoClock systemNanoClock36 = null;
    try {
      io.github.onograph.backup.RemoteBackupManager remoteBackupManager37 = new io.github.onograph.backup.RemoteBackupManager(
          config25, fileSystemAbstraction29, lifecycleCatchupManagerImpl30, jobScheduler31,
          logProvider32, monitors33, pageCache34, pageCacheTracer35, systemNanoClock36);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(config5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(config25);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory28);
  }

  @Test
  public void test0351() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0351");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.logging.LogProvider logProvider5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator2.itraLogProvider(
        logProvider5);
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory7 = null;
    io.github.onograph.backup.BackupRunner.Generator generator8 = generator6.progressMonitorFactory(
        progressMonitorFactory7);
    io.github.onograph.backup.BackupRunner backupRunner9 = generator8.bulBackupRunner();
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory10.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory10.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory10.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory16.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory16.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment22 = factory16.bulBackupEnvironment();
    boolean boolean23 = backupEnvironment22.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional24 = backupEnvironment22.geicmaOptional();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern25 = backupEnvironment22.getDatabaseNamePattern();
    try {
      backupRunner9.excebcpForBa(backupEnvironment22);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(generator8);
    org.junit.Assert.assertNotNull(backupRunner9);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(backupEnvironment22);
    org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional24);
    org.junit.Assert.assertNotNull(databaseNamePattern25);
  }

  @Test
  public void test0352() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0352");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    java.nio.file.Path path5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.prPath(path5);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isIcc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isFtfb(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory10.shouldPrep(false);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
  }

  @Test
  public void test0353() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0353");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isSicc(
        (java.lang.Boolean) true);
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern7 = factory6.gedtenprDatabaseNamePattern();
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory6.isRp(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.isGcc(
        (java.lang.Boolean) true);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(databaseNamePattern7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
  }

  @Test
  public void test0354() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0354");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isGcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
  }

  @Test
  public void test0355() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0355");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.GdbIdRepo gdbIdRepo1 = new io.github.onograph.backup.GdbIdRepo(
        fileSystemAbstraction0);
    org.neo4j.kernel.database.DatabaseId databaseId2 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory3 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory5 = factory3.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory3.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory3.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory9.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment15 = factory9.bulBackupEnvironment();
    boolean boolean16 = backupEnvironment15.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional17 = backupEnvironment15.geicmaOptional();
    java.nio.file.Path path18 = backupEnvironment15.getPbPath();
    java.nio.file.Path path19 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path18);
    java.nio.file.Path path20 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path19);
    boolean boolean21 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path20);
    java.nio.file.Path path22 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path20);
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory23.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory23.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory23.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory29.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory29.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment35 = factory29.bulBackupEnvironment();
    boolean boolean36 = backupEnvironment35.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional37 = backupEnvironment35.geicmaOptional();
    java.nio.file.Path path38 = backupEnvironment35.getPbPath();
    java.nio.file.Path path39 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path38);
    java.nio.file.Path path40 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path39);
    io.github.onograph.backup.FileMoverService fileMoverService41 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path20, path39);
    java.nio.file.Path path42 = fileMoverService41.filPath();
    java.nio.file.Path path43 = fileMoverService41.filPath();
    try {
      gdbIdRepo1.wrdaiForDaPa(databaseId2, path43);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory3);
    org.junit.Assert.assertNotNull(factory5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(backupEnvironment15);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional17);
    org.junit.Assert.assertNotNull(path18);
    org.junit.Assert.assertNotNull(path19);
    org.junit.Assert.assertNotNull(path20);
    org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    org.junit.Assert.assertNotNull(path22);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(backupEnvironment35);
    org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional37);
    org.junit.Assert.assertNotNull(path38);
    org.junit.Assert.assertNotNull(path39);
    org.junit.Assert.assertNotNull(path40);
    org.junit.Assert.assertNotNull(fileMoverService41);
    org.junit.Assert.assertNotNull(path42);
    org.junit.Assert.assertNotNull(path43);
  }

  @Test
  public void test0356() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0356");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.GdbIdRepo gdbIdRepo1 = new io.github.onograph.backup.GdbIdRepo(
        fileSystemAbstraction0);
    org.neo4j.kernel.database.DatabaseId databaseId2 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory3 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config4 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory5 = factory3.config(config4);
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory5.isRp(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory5.isSicc(
        (java.lang.Boolean) true);
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern10 = factory5.gedtenprDatabaseNamePattern();
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory5.isFtfb(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config14 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory13.config(config14);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory15.isRp(true);
    org.neo4j.configuration.Config config18 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory17.config(config18);
    org.neo4j.configuration.helpers.SocketAddress socketAddress20 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory17.wihadsBackupEnvironmentFactory(
        socketAddress20);
    org.neo4j.configuration.helpers.SocketAddress socketAddress22 = factory17.getSocketAddress();
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory17.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory24.isIcc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment backupEnvironment27 = factory26.bulBackupEnvironment();
    java.nio.file.Path path28 = backupEnvironment27.getPbPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory5.prPath(path28);
    try {
      gdbIdRepo1.wrdaiForDaPa(databaseId2, path28);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory3);
    org.junit.Assert.assertNotNull(factory5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(databaseNamePattern10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNull(socketAddress22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(backupEnvironment27);
    org.junit.Assert.assertNotNull(path28);
    org.junit.Assert.assertNotNull(factory29);
  }

  @Test
  public void test0357() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0357");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = factory2.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory2.isCc(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    java.nio.file.Path path11 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory8.prPath(path11);
    java.nio.file.Path path13 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory12.prPath(path13);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory15.isCc(false);
    java.nio.file.Path path18 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory15.prPath(path18);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config21 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory20.config(config21);
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory22.isRp(true);
    org.neo4j.configuration.Config config25 = factory22.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory15.config(config25);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory14.config(config25);
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = factory7.config(config25);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction29 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory30.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory30.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory30.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = factory36.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory36.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment42 = factory36.bulBackupEnvironment();
    org.neo4j.memory.MemoryTracker memoryTracker43 = backupEnvironment42.getMemoryTracker();
    org.neo4j.io.pagecache.PageCache pageCache44 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager45 = new io.github.onograph.backup.BackupRestorationManager(
        config25, fileSystemAbstraction29, memoryTracker43, pageCache44);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction46 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = factory47.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory51 = factory47.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory53 = factory47.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory55 = factory53.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory58 = factory53.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment59 = factory53.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern60 = backupEnvironment59.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress61 = backupEnvironment59.getSocketAddress();
    java.nio.file.Path path62 = backupEnvironment59.getRpPath();
    boolean boolean63 = backupEnvironment59.getIsBftf();
    java.nio.file.Path path64 = backupEnvironment59.getRpPath();
    org.neo4j.memory.MemoryTracker memoryTracker65 = backupEnvironment59.getMemoryTracker();
    org.neo4j.io.pagecache.PageCache pageCache66 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager67 = new io.github.onograph.backup.BackupRestorationManager(
        config25, fileSystemAbstraction46, memoryTracker65, pageCache66);
    org.neo4j.io.layout.DatabaseLayout databaseLayout68 = null;
    try {
      backupRestorationManager67.reorForDa(databaseLayout68);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(config5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(config25);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(backupEnvironment42);
    org.junit.Assert.assertNotNull(memoryTracker43);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory49);
    org.junit.Assert.assertNotNull(factory51);
    org.junit.Assert.assertNotNull(factory53);
    org.junit.Assert.assertNotNull(factory55);
    org.junit.Assert.assertNotNull(factory58);
    org.junit.Assert.assertNotNull(backupEnvironment59);
    org.junit.Assert.assertNotNull(databaseNamePattern60);
    org.junit.Assert.assertNotNull(socketAddress61);
    org.junit.Assert.assertNotNull(path62);
    org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    org.junit.Assert.assertNotNull(path64);
    org.junit.Assert.assertNotNull(memoryTracker65);
  }

  @Test
  public void test0358() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0358");
    }
    io.github.onograph.backup.CommandProviderBackupImpl commandProviderBackupImpl0 = new io.github.onograph.backup.CommandProviderBackupImpl();
    int int1 = commandProviderBackupImpl0.getPriority();
    int int2 = commandProviderBackupImpl0.getPriority();
    org.neo4j.cli.Command.CommandType commandType3 = commandProviderBackupImpl0.commandType();
    org.neo4j.cli.Command.CommandType commandType4 = commandProviderBackupImpl0.commandType();
    int int5 = commandProviderBackupImpl0.getPriority();
    org.neo4j.cli.Command.CommandType commandType6 = commandProviderBackupImpl0.commandType();
    org.neo4j.cli.ExecutionContext executionContext7 = null;
    try {
      io.github.onograph.backup.BackupCommand backupCommand8 = commandProviderBackupImpl0.createCommand(
          executionContext7);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    org.junit.Assert.assertTrue(
        "'" + commandType3 + "' != '" + org.neo4j.cli.Command.CommandType.ONLINE_BACKUP + "'",
        commandType3.equals(org.neo4j.cli.Command.CommandType.ONLINE_BACKUP));
    org.junit.Assert.assertTrue(
        "'" + commandType4 + "' != '" + org.neo4j.cli.Command.CommandType.ONLINE_BACKUP + "'",
        commandType4.equals(org.neo4j.cli.Command.CommandType.ONLINE_BACKUP));
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    org.junit.Assert.assertTrue(
        "'" + commandType6 + "' != '" + org.neo4j.cli.Command.CommandType.ONLINE_BACKUP + "'",
        commandType6.equals(org.neo4j.cli.Command.CommandType.ONLINE_BACKUP));
  }

  @Test
  public void test0359() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0359");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isIcc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory3 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config4 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory5 = factory3.config(config4);
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory5.isSicc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory8.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory8.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory14.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory14.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment20 = factory14.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern21 = backupEnvironment20.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress22 = backupEnvironment20.getSocketAddress();
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory7.wihadsBackupEnvironmentFactory(
        socketAddress22);
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory0.wihadsBackupEnvironmentFactory(
        socketAddress22);
    try {
      io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory0.databaseNamePattern(
          "");
      org.junit.Assert.fail(
          "Expected exception of type java.lang.IllegalArgumentException; message: The provided database name is empty.");
    } catch (java.lang.IllegalArgumentException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory3);
    org.junit.Assert.assertNotNull(factory5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(backupEnvironment20);
    org.junit.Assert.assertNotNull(databaseNamePattern21);
    org.junit.Assert.assertNotNull(socketAddress22);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory24);
  }

  @Test
  public void test0360() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0360");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    java.io.PrintStream printStream3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isCc(false);
    java.nio.file.Path path7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.prPath(path7);
    java.nio.file.Path path9 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.prPath(path9);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isCc(false);
    java.nio.file.Path path14 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory11.prPath(path14);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config17 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory16.config(config17);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory18.isRp(true);
    org.neo4j.configuration.Config config21 = factory18.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory11.config(config21);
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory10.config(config21);
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory24.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory27.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory27.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory27.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = factory33.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = factory33.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment39 = factory33.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern40 = backupEnvironment39.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress41 = backupEnvironment39.getSocketAddress();
    java.nio.file.Path path42 = backupEnvironment39.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = factory24.pbPath(path42);
    io.github.onograph.backup.BackupEnvironment.Factory factory44 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory46 = factory44.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = factory47.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory51 = factory47.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory53 = factory47.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory55 = factory53.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory58 = factory53.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment59 = factory53.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern60 = backupEnvironment59.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress61 = backupEnvironment59.getSocketAddress();
    java.nio.file.Path path62 = backupEnvironment59.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory63 = factory44.pbPath(path62);
    io.github.onograph.backup.FileMoverService fileMoverService64 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path42, path62);
    java.nio.file.Path path65 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path62);
    io.github.onograph.backup.BackupEnvironment.Factory factory66 = factory10.prPath(path65);
    boolean boolean67 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path65);
    io.github.onograph.backup.BackupEnvironment.Factory factory68 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory70 = factory68.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory72 = factory68.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory74 = factory68.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory76 = factory74.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory79 = factory74.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment80 = factory74.bulBackupEnvironment();
    boolean boolean81 = backupEnvironment80.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional82 = backupEnvironment80.geicmaOptional();
    java.nio.file.Path path83 = backupEnvironment80.getPbPath();
    java.nio.file.Path path84 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path83);
    java.nio.file.Path path85 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path84);
    org.neo4j.io.layout.DatabaseLayout databaseLayout86 = null;
    try {
      io.github.onograph.backup.GdbRestorer gdbRestorer87 = new io.github.onograph.backup.GdbRestorer(
          fileSystemAbstraction0, true, false, printStream3, path65, path85, databaseLayout86);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(config21);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(backupEnvironment39);
    org.junit.Assert.assertNotNull(databaseNamePattern40);
    org.junit.Assert.assertNotNull(socketAddress41);
    org.junit.Assert.assertNotNull(path42);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory44);
    org.junit.Assert.assertNotNull(factory46);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory49);
    org.junit.Assert.assertNotNull(factory51);
    org.junit.Assert.assertNotNull(factory53);
    org.junit.Assert.assertNotNull(factory55);
    org.junit.Assert.assertNotNull(factory58);
    org.junit.Assert.assertNotNull(backupEnvironment59);
    org.junit.Assert.assertNotNull(databaseNamePattern60);
    org.junit.Assert.assertNotNull(socketAddress61);
    org.junit.Assert.assertNotNull(path62);
    org.junit.Assert.assertNotNull(factory63);
    org.junit.Assert.assertNotNull(fileMoverService64);
    org.junit.Assert.assertNotNull(path65);
    org.junit.Assert.assertNotNull(factory66);
    org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    org.junit.Assert.assertNotNull(factory68);
    org.junit.Assert.assertNotNull(factory70);
    org.junit.Assert.assertNotNull(factory72);
    org.junit.Assert.assertNotNull(factory74);
    org.junit.Assert.assertNotNull(factory76);
    org.junit.Assert.assertNotNull(factory79);
    org.junit.Assert.assertNotNull(backupEnvironment80);
    org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional82);
    org.junit.Assert.assertNotNull(path83);
    org.junit.Assert.assertNotNull(path84);
    org.junit.Assert.assertNotNull(path85);
  }

  @Test
  public void test0361() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0361");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupIOService backupIOService1 = new io.github.onograph.backup.BackupIOService(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory8.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment14 = factory8.bulBackupEnvironment();
    boolean boolean15 = backupEnvironment14.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional16 = backupEnvironment14.geicmaOptional();
    java.nio.file.Path path17 = backupEnvironment14.getPbPath();
    java.nio.file.Path path18 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path17);
    java.nio.file.Path path19 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path18);
    java.nio.file.Path path20 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path18);
    try {
      backupIOService1.deedForPa(path18);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(backupEnvironment14);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional16);
    org.junit.Assert.assertNotNull(path17);
    org.junit.Assert.assertNotNull(path18);
    org.junit.Assert.assertNotNull(path19);
    org.junit.Assert.assertNotNull(path20);
  }

  @Test
  public void test0362() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0362");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory6.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment12 = factory6.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern13 = backupEnvironment12.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress14 = backupEnvironment12.getSocketAddress();
    boolean boolean15 = backupEnvironment12.getIsRp();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(backupEnvironment12);
    org.junit.Assert.assertNotNull(databaseNamePattern13);
    org.junit.Assert.assertNotNull(socketAddress14);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
  }

  @Test
  public void test0363() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0363");
    }
    io.github.onograph.backup.CommandProviderGdbRestorerCommandImpl commandProviderGdbRestorerCommandImpl0 = new io.github.onograph.backup.CommandProviderGdbRestorerCommandImpl();
    org.neo4j.cli.Command.CommandType commandType1 = commandProviderGdbRestorerCommandImpl0.commandType();
    int int2 = commandProviderGdbRestorerCommandImpl0.getPriority();
    org.neo4j.cli.ExecutionContext executionContext3 = null;
    try {
      io.github.onograph.backup.GdbRestorerCommand gdbRestorerCommand4 = commandProviderGdbRestorerCommandImpl0.createCommand(
          executionContext3);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue(
        "'" + commandType1 + "' != '" + org.neo4j.cli.Command.CommandType.RESTORE_DB + "'",
        commandType1.equals(org.neo4j.cli.Command.CommandType.RESTORE_DB));
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
  }

  @Test
  public void test0364() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0364");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    org.neo4j.logging.LogProvider logProvider1 = null;
    org.neo4j.logging.Log log2 = null;
    io.github.onograph.backup.RemoteBackupService remoteBackupService3 = new io.github.onograph.backup.RemoteBackupService(
        fileSystemAbstraction0, logProvider1, log2);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isCc(false);
    java.nio.file.Path path7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.prPath(path7);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config10 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.config(config10);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isRp(true);
    org.neo4j.configuration.Config config14 = factory11.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory4.config(config14);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction16 = null;
    org.neo4j.configuration.Config config17 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction18 = null;
    java.nio.file.Path[] pathArray19 = new java.nio.file.Path[]{};
    java.util.LinkedHashSet<java.nio.file.Path> pathSet20 = new java.util.LinkedHashSet<java.nio.file.Path>();
    boolean boolean21 = java.util.Collections.addAll(
        (java.util.Collection<java.nio.file.Path>) pathSet20, pathArray19);
    io.github.onograph.backup.BackupRestoreMeta backupRestoreMeta22 = new io.github.onograph.backup.BackupRestoreMeta(
        config17, fileSystemAbstraction18, (java.util.Set<java.nio.file.Path>) pathSet20);
    io.github.onograph.backup.BackupRestoreMeta backupRestoreMeta23 = new io.github.onograph.backup.BackupRestoreMeta(
        config14, fileSystemAbstraction16, (java.util.Set<java.nio.file.Path>) pathSet20);
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags24 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction25 = null;
    org.neo4j.logging.LogProvider logProvider26 = null;
    java.nio.file.Path path27 = null;
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory28 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl29 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config14, consistencyFlags24, fileSystemAbstraction25, logProvider26, path27,
        progressMonitorFactory28);
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory30.isCc(false);
    java.nio.file.Path path33 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory30.prPath(path33);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory30.isSicc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment backupEnvironment37 = factory30.bulBackupEnvironment();
    io.github.onograph.backup.DefaultBackupServiceHandler defaultBackupServiceHandler39 = null;
    io.github.onograph.backup.GdbStoreTransferWatcherRebImpl gdbStoreTransferWatcherRebImpl40 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer41 = null;
    io.github.onograph.backup.RemoteBackupManager remoteBackupManager42 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = factory43.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = factory43.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = factory43.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory51 = factory49.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory52 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config53 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory54 = factory52.config(config53);
    io.github.onograph.backup.BackupEnvironment.Factory factory56 = factory54.isRp(true);
    org.neo4j.configuration.Config config57 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory58 = factory56.config(config57);
    org.neo4j.configuration.helpers.SocketAddress socketAddress59 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory60 = factory56.wihadsBackupEnvironmentFactory(
        socketAddress59);
    io.github.onograph.backup.BackupEnvironment.Factory factory61 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config62 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory63 = factory61.config(config62);
    io.github.onograph.backup.BackupEnvironment.Factory factory65 = factory63.isRp(true);
    org.neo4j.configuration.Config config66 = factory63.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory67 = factory56.config(config66);
    io.github.onograph.backup.BackupEnvironment.Factory factory68 = factory51.config(config66);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction69 = null;
    org.neo4j.memory.MemoryTracker memoryTracker70 = null;
    org.neo4j.io.pagecache.PageCache pageCache71 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager72 = new io.github.onograph.backup.BackupRestorationManager(
        config66, fileSystemAbstraction69, memoryTracker70, pageCache71);
    try {
      remoteBackupService3.bakForBaPaBaDeBaReStGd(
          (io.github.onograph.backup.BackupVerificationService) backupVerificationServiceImpl29,
          backupEnvironment37, "database.id", defaultBackupServiceHandler39,
          gdbStoreTransferWatcherRebImpl40, pageCacheTracer41, remoteBackupManager42,
          backupRestorationManager72);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(config14);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(pathArray19);
    org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(backupEnvironment37);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory49);
    org.junit.Assert.assertNotNull(factory51);
    org.junit.Assert.assertNotNull(factory52);
    org.junit.Assert.assertNotNull(factory54);
    org.junit.Assert.assertNotNull(factory56);
    org.junit.Assert.assertNotNull(factory58);
    org.junit.Assert.assertNotNull(factory60);
    org.junit.Assert.assertNotNull(factory61);
    org.junit.Assert.assertNotNull(factory63);
    org.junit.Assert.assertNotNull(factory65);
    org.junit.Assert.assertNotNull(config66);
    org.junit.Assert.assertNotNull(factory67);
    org.junit.Assert.assertNotNull(factory68);
  }

  @Test
  public void test0365() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0365");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory6.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment12 = factory6.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern13 = backupEnvironment12.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress14 = backupEnvironment12.getSocketAddress();
    java.nio.file.Path path15 = backupEnvironment12.getRpPath();
    boolean boolean16 = backupEnvironment12.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional17 = backupEnvironment12.geicmaOptional();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(backupEnvironment12);
    org.junit.Assert.assertNotNull(databaseNamePattern13);
    org.junit.Assert.assertNotNull(socketAddress14);
    org.junit.Assert.assertNotNull(path15);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional17);
  }

  @Test
  public void test0366() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0366");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory6.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment12 = factory6.bulBackupEnvironment();
    org.neo4j.memory.MemoryTracker memoryTracker13 = backupEnvironment12.getMemoryTracker();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern14 = backupEnvironment12.getDatabaseNamePattern();
    boolean boolean15 = backupEnvironment12.getIsBftf();
    java.nio.file.Path path16 = backupEnvironment12.getRpPath();
    boolean boolean17 = backupEnvironment12.getIsRp();
    org.neo4j.memory.MemoryTracker memoryTracker18 = backupEnvironment12.getMemoryTracker();
    boolean boolean19 = backupEnvironment12.getIsBftf();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(backupEnvironment12);
    org.junit.Assert.assertNotNull(memoryTracker13);
    org.junit.Assert.assertNotNull(databaseNamePattern14);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    org.junit.Assert.assertNotNull(path16);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    org.junit.Assert.assertNotNull(memoryTracker18);
    org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
  }

  @Test
  public void test0367() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0367");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupMetadataRepository backupMetadataRepository1 = new io.github.onograph.backup.BackupMetadataRepository(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.config(config3);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isRp(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.isSicc(
        (java.lang.Boolean) true);
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern9 = factory4.gedtenprDatabaseNamePattern();
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory4.isFtfb(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config13 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory12.config(config13);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory14.isRp(true);
    org.neo4j.configuration.Config config17 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory16.config(config17);
    org.neo4j.configuration.helpers.SocketAddress socketAddress19 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory16.wihadsBackupEnvironmentFactory(
        socketAddress19);
    org.neo4j.configuration.helpers.SocketAddress socketAddress21 = factory16.getSocketAddress();
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory16.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory23.isIcc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment backupEnvironment26 = factory25.bulBackupEnvironment();
    java.nio.file.Path path27 = backupEnvironment26.getPbPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = factory4.prPath(path27);
    java.lang.String[] strArray32 = new java.lang.String[]{"", "database.id", "hi!"};
    java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
    boolean boolean34 = java.util.Collections.addAll(
        (java.util.Collection<java.lang.String>) strList33, strArray32);
    try {
      backupMetadataRepository1.wrtForPaLi(path27, (java.util.List<java.lang.String>) strList33);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(databaseNamePattern9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNull(socketAddress21);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(backupEnvironment26);
    org.junit.Assert.assertNotNull(path27);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(strArray32);
    org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
  }

  @Test
  public void test0368() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0368");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isIcc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory3 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config4 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory5 = factory3.config(config4);
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory5.isSicc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory8.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory8.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory14.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory14.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment20 = factory14.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern21 = backupEnvironment20.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress22 = backupEnvironment20.getSocketAddress();
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory7.wihadsBackupEnvironmentFactory(
        socketAddress22);
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory0.wihadsBackupEnvironmentFactory(
        socketAddress22);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions25 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory24.miAuthMetaOptions(
        authMetaOptions25);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory3);
    org.junit.Assert.assertNotNull(factory5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(backupEnvironment20);
    org.junit.Assert.assertNotNull(databaseNamePattern21);
    org.junit.Assert.assertNotNull(socketAddress22);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory26);
  }

  @Test
  public void test0369() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0369");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory6.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment12 = factory6.bulBackupEnvironment();
    org.neo4j.memory.MemoryTracker memoryTracker13 = backupEnvironment12.getMemoryTracker();
    boolean boolean14 = backupEnvironment12.getIsRp();
    org.neo4j.configuration.helpers.SocketAddress socketAddress15 = backupEnvironment12.getSocketAddress();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(backupEnvironment12);
    org.junit.Assert.assertNotNull(memoryTracker13);
    org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    org.junit.Assert.assertNotNull(socketAddress15);
  }

  @Test
  public void test0370() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0370");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isSicc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isFtfb(false);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions9 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.miAuthMetaOptions(
        authMetaOptions9);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory10.isRp(true);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
  }

  @Test
  public void test0371() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0371");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup("");
    io.github.onograph.backup.Backup backup3 = backup1.isCc(true);
    io.github.onograph.backup.Backup backup5 = backup3.isCc(true);
    io.github.onograph.backup.Backup backup7 = backup5.isCc(true);
    io.github.onograph.backup.Backup backup9 = backup7.isBftf(false);
    java.io.OutputStream outputStream10 = null;
    try {
      io.github.onograph.backup.Backup backup11 = backup9.outputStream(outputStream10);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: outputStream");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(backup3);
    org.junit.Assert.assertNotNull(backup5);
    org.junit.Assert.assertNotNull(backup7);
    org.junit.Assert.assertNotNull(backup9);
  }

  @Test
  public void test0372() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0372");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup("hi!");
    io.github.onograph.backup.Backup backup3 = backup1.isCc(false);
    io.github.onograph.backup.Backup backup5 = backup3.isBftf(true);
    io.github.onograph.backup.Backup backup7 = backup3.isBftf(true);
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(backup3);
    org.junit.Assert.assertNotNull(backup5);
    org.junit.Assert.assertNotNull(backup7);
  }

  @Test
  public void test0373() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0373");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory6.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment12 = factory6.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern13 = backupEnvironment12.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress14 = backupEnvironment12.getSocketAddress();
    java.nio.file.Path path15 = backupEnvironment12.getRpPath();
    boolean boolean16 = backupEnvironment12.getIsBftf();
    java.nio.file.Path path17 = backupEnvironment12.getRpPath();
    java.nio.file.Path path18 = backupEnvironment12.getRpPath();
    boolean boolean19 = backupEnvironment12.getIsRp();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(backupEnvironment12);
    org.junit.Assert.assertNotNull(databaseNamePattern13);
    org.junit.Assert.assertNotNull(socketAddress14);
    org.junit.Assert.assertNotNull(path15);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    org.junit.Assert.assertNotNull(path17);
    org.junit.Assert.assertNotNull(path18);
    org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
  }

  @Test
  public void test0374() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0374");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.GdbIdRepo gdbIdRepo1 = new io.github.onograph.backup.GdbIdRepo(
        fileSystemAbstraction0);
    org.neo4j.kernel.database.DatabaseId databaseId2 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory3 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory5 = factory3.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory3.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory3.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory9.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment15 = factory9.bulBackupEnvironment();
    org.neo4j.memory.MemoryTracker memoryTracker16 = backupEnvironment15.getMemoryTracker();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern17 = backupEnvironment15.getDatabaseNamePattern();
    boolean boolean18 = backupEnvironment15.getIsBftf();
    java.nio.file.Path path19 = backupEnvironment15.getRpPath();
    java.nio.file.Path path20 = backupEnvironment15.getPbPath();
    java.nio.file.Path path21 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path20);
    try {
      gdbIdRepo1.wrdaiForDaPa(databaseId2, path21);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory3);
    org.junit.Assert.assertNotNull(factory5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(backupEnvironment15);
    org.junit.Assert.assertNotNull(memoryTracker16);
    org.junit.Assert.assertNotNull(databaseNamePattern17);
    org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    org.junit.Assert.assertNotNull(path19);
    org.junit.Assert.assertNotNull(path20);
    org.junit.Assert.assertNotNull(path21);
  }

  @Test
  public void test0375() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0375");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator4.progressMonitorFactory(
        progressMonitorFactory5);
    org.neo4j.monitoring.Monitors monitors7 = null;
    io.github.onograph.backup.BackupRunner.Generator generator8 = generator6.monitors(monitors7);
    org.neo4j.logging.LogProvider logProvider9 = null;
    io.github.onograph.backup.BackupRunner.Generator generator10 = generator8.itraLogProvider(
        logProvider9);
    org.neo4j.time.SystemNanoClock systemNanoClock11 = null;
    io.github.onograph.backup.BackupRunner.Generator generator12 = generator8.systemNanoClock(
        systemNanoClock11);
    org.neo4j.time.SystemNanoClock systemNanoClock13 = null;
    io.github.onograph.backup.BackupRunner.Generator generator14 = generator12.systemNanoClock(
        systemNanoClock13);
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(generator8);
    org.junit.Assert.assertNotNull(generator10);
    org.junit.Assert.assertNotNull(generator12);
    org.junit.Assert.assertNotNull(generator14);
  }

  @Test
  public void test0376() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0376");
    }
    io.github.onograph.backup.CommandProviderBackupImpl commandProviderBackupImpl0 = new io.github.onograph.backup.CommandProviderBackupImpl();
    int int1 = commandProviderBackupImpl0.getPriority();
    int int2 = commandProviderBackupImpl0.getPriority();
    org.neo4j.cli.Command.CommandType commandType3 = commandProviderBackupImpl0.commandType();
    int int4 = commandProviderBackupImpl0.getPriority();
    org.neo4j.cli.ExecutionContext executionContext5 = null;
    try {
      io.github.onograph.backup.BackupCommand backupCommand6 = commandProviderBackupImpl0.createCommand(
          executionContext5);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    org.junit.Assert.assertTrue(
        "'" + commandType3 + "' != '" + org.neo4j.cli.Command.CommandType.ONLINE_BACKUP + "'",
        commandType3.equals(org.neo4j.cli.Command.CommandType.ONLINE_BACKUP));
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
  }

  @Test
  public void test0377() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0377");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.miAuthMetaOptions(
        authMetaOptions3);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isCc(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory7.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory7.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory7.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory13.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory13.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment19 = factory13.bulBackupEnvironment();
    boolean boolean20 = backupEnvironment19.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional21 = backupEnvironment19.geicmaOptional();
    java.nio.file.Path path22 = backupEnvironment19.getPbPath();
    java.nio.file.Path path23 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path22);
    java.nio.file.Path path24 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path23);
    boolean boolean25 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path24);
    java.nio.file.Path path26 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path24);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory27.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory27.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory27.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = factory33.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = factory33.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment39 = factory33.bulBackupEnvironment();
    boolean boolean40 = backupEnvironment39.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional41 = backupEnvironment39.geicmaOptional();
    java.nio.file.Path path42 = backupEnvironment39.getPbPath();
    java.nio.file.Path path43 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path42);
    java.nio.file.Path path44 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path43);
    io.github.onograph.backup.FileMoverService fileMoverService45 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path24, path43);
    io.github.onograph.backup.BackupEnvironment.Factory factory46 = factory4.prPath(path43);
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = factory47.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory51 = factory47.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory53 = factory47.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory55 = factory53.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory58 = factory53.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment59 = factory53.bulBackupEnvironment();
    boolean boolean60 = backupEnvironment59.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional61 = backupEnvironment59.geicmaOptional();
    java.nio.file.Path path62 = backupEnvironment59.getPbPath();
    java.nio.file.Path path63 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path62);
    java.nio.file.Path path64 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path63);
    boolean boolean65 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path64);
    java.nio.file.Path path66 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path64);
    io.github.onograph.backup.BackupEnvironment.Factory factory67 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory69 = factory67.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory71 = factory67.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory73 = factory67.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory75 = factory73.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory78 = factory73.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment79 = factory73.bulBackupEnvironment();
    boolean boolean80 = backupEnvironment79.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional81 = backupEnvironment79.geicmaOptional();
    java.nio.file.Path path82 = backupEnvironment79.getPbPath();
    java.nio.file.Path path83 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path82);
    java.nio.file.Path path84 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path83);
    io.github.onograph.backup.FileMoverService fileMoverService85 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path64, path83);
    java.nio.file.Path path86 = fileMoverService85.filPath();
    io.github.onograph.backup.FileMoverService fileMoverService87 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path43, path86);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(backupEnvironment19);
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional21);
    org.junit.Assert.assertNotNull(path22);
    org.junit.Assert.assertNotNull(path23);
    org.junit.Assert.assertNotNull(path24);
    org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    org.junit.Assert.assertNotNull(path26);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(backupEnvironment39);
    org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional41);
    org.junit.Assert.assertNotNull(path42);
    org.junit.Assert.assertNotNull(path43);
    org.junit.Assert.assertNotNull(path44);
    org.junit.Assert.assertNotNull(fileMoverService45);
    org.junit.Assert.assertNotNull(factory46);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory49);
    org.junit.Assert.assertNotNull(factory51);
    org.junit.Assert.assertNotNull(factory53);
    org.junit.Assert.assertNotNull(factory55);
    org.junit.Assert.assertNotNull(factory58);
    org.junit.Assert.assertNotNull(backupEnvironment59);
    org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional61);
    org.junit.Assert.assertNotNull(path62);
    org.junit.Assert.assertNotNull(path63);
    org.junit.Assert.assertNotNull(path64);
    org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    org.junit.Assert.assertNotNull(path66);
    org.junit.Assert.assertNotNull(factory67);
    org.junit.Assert.assertNotNull(factory69);
    org.junit.Assert.assertNotNull(factory71);
    org.junit.Assert.assertNotNull(factory73);
    org.junit.Assert.assertNotNull(factory75);
    org.junit.Assert.assertNotNull(factory78);
    org.junit.Assert.assertNotNull(backupEnvironment79);
    org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional81);
    org.junit.Assert.assertNotNull(path82);
    org.junit.Assert.assertNotNull(path83);
    org.junit.Assert.assertNotNull(path84);
    org.junit.Assert.assertNotNull(fileMoverService85);
    org.junit.Assert.assertNotNull(path86);
    org.junit.Assert.assertNotNull(fileMoverService87);
  }

  @Test
  public void test0378() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0378");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    java.nio.file.Path path3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.prPath(path3);
    org.neo4j.configuration.helpers.SocketAddress socketAddress5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress5);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory6.isSicc(
        (java.lang.Boolean) false);
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern11 = factory10.gedtenprDatabaseNamePattern();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(databaseNamePattern11);
  }

  @Test
  public void test0379() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0379");
    }
    io.github.onograph.backup.BackupRunner backupRunner0 = io.github.onograph.backup.BackupRunner.buldeuBackupRunner();
    io.github.onograph.backup.BackupEnvironment.Factory factory1 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory3 = factory1.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory5 = factory1.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory1.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory7.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory7.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment13 = factory7.bulBackupEnvironment();
    boolean boolean14 = backupEnvironment13.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional15 = backupEnvironment13.geicmaOptional();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional16 = backupEnvironment13.geicmaOptional();
    java.nio.file.Path path17 = backupEnvironment13.getRpPath();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern18 = backupEnvironment13.getDatabaseNamePattern();
    boolean boolean19 = backupEnvironment13.getIsRp();
    java.nio.file.Path path20 = backupEnvironment13.getPbPath();
    try {
      backupRunner0.excebcpForBa(backupEnvironment13);
      org.junit.Assert.fail(
          "Expected exception of type io.github.onograph.backup.BackupException; message: java.lang.NullPointerException");
    } catch (io.github.onograph.backup.BackupException e) {
    }
    org.junit.Assert.assertNotNull(backupRunner0);
    org.junit.Assert.assertNotNull(factory1);
    org.junit.Assert.assertNotNull(factory3);
    org.junit.Assert.assertNotNull(factory5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(backupEnvironment13);
    org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional15);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional16);
    org.junit.Assert.assertNotNull(path17);
    org.junit.Assert.assertNotNull(databaseNamePattern18);
    org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    org.junit.Assert.assertNotNull(path20);
  }

  @Test
  public void test0380() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0380");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup("hi!");
    io.github.onograph.backup.Backup backup3 = backup1.isCc(false);
    io.github.onograph.backup.Backup backup5 = backup1.isCc(false);
    java.io.OutputStream outputStream6 = null;
    try {
      io.github.onograph.backup.Backup backup7 = backup1.outputStream(outputStream6);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: outputStream");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(backup3);
    org.junit.Assert.assertNotNull(backup5);
  }

  @Test
  public void test0381() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0381");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory6.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isSicc(
        (java.lang.Boolean) false);
    org.neo4j.configuration.Config config14 = factory11.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config16 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory15.config(config16);
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory17.isRp(true);
    org.neo4j.configuration.Config config20 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory19.config(config20);
    org.neo4j.configuration.helpers.SocketAddress socketAddress22 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory19.wihadsBackupEnvironmentFactory(
        socketAddress22);
    org.neo4j.configuration.helpers.SocketAddress socketAddress24 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory19.wihadsBackupEnvironmentFactory(
        socketAddress24);
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = factory19.wihadsBackupEnvironmentFactory(
        (int) (short) -1, "hi!");
    org.neo4j.configuration.Config config29 = factory28.gecfConfig();
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags30 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction31 = null;
    org.neo4j.logging.LogProvider logProvider32 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = factory33.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = factory36.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory40 = factory36.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory42 = factory36.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory44 = factory42.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = factory42.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment48 = factory42.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern49 = backupEnvironment48.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress50 = backupEnvironment48.getSocketAddress();
    java.nio.file.Path path51 = backupEnvironment48.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory52 = factory33.pbPath(path51);
    io.github.onograph.backup.BackupEnvironment.Factory factory53 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory55 = factory53.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory56 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory58 = factory56.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory60 = factory56.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory62 = factory56.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory64 = factory62.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory67 = factory62.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment68 = factory62.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern69 = backupEnvironment68.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress70 = backupEnvironment68.getSocketAddress();
    java.nio.file.Path path71 = backupEnvironment68.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory72 = factory53.pbPath(path71);
    io.github.onograph.backup.FileMoverService fileMoverService73 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path51, path71);
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory74 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl75 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config29, consistencyFlags30, fileSystemAbstraction31, logProvider32, path71,
        progressMonitorFactory74);
    io.github.onograph.backup.BackupEnvironment.Factory factory76 = factory11.prPath(path71);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(config14);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(config29);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(factory40);
    org.junit.Assert.assertNotNull(factory42);
    org.junit.Assert.assertNotNull(factory44);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(backupEnvironment48);
    org.junit.Assert.assertNotNull(databaseNamePattern49);
    org.junit.Assert.assertNotNull(socketAddress50);
    org.junit.Assert.assertNotNull(path51);
    org.junit.Assert.assertNotNull(factory52);
    org.junit.Assert.assertNotNull(factory53);
    org.junit.Assert.assertNotNull(factory55);
    org.junit.Assert.assertNotNull(factory56);
    org.junit.Assert.assertNotNull(factory58);
    org.junit.Assert.assertNotNull(factory60);
    org.junit.Assert.assertNotNull(factory62);
    org.junit.Assert.assertNotNull(factory64);
    org.junit.Assert.assertNotNull(factory67);
    org.junit.Assert.assertNotNull(backupEnvironment68);
    org.junit.Assert.assertNotNull(databaseNamePattern69);
    org.junit.Assert.assertNotNull(socketAddress70);
    org.junit.Assert.assertNotNull(path71);
    org.junit.Assert.assertNotNull(factory72);
    org.junit.Assert.assertNotNull(fileMoverService73);
    org.junit.Assert.assertNotNull(factory76);
  }

  @Test
  public void test0382() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0382");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.config(config5);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.databaseNamePattern(
        "database.id");
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.isCc(false);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions12 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory9.miAuthMetaOptions(
        authMetaOptions12);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory13.isGcc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory15.isIcc(
        (java.lang.Boolean) false);
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern18 = factory15.gedtenprDatabaseNamePattern();
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory4.databaseNamePattern(
        databaseNamePattern18);
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory4.isGcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory4.isFtfb(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory24.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = factory24.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = factory24.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory30.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = factory30.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment36 = factory30.bulBackupEnvironment();
    boolean boolean37 = backupEnvironment36.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional38 = backupEnvironment36.geicmaOptional();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional39 = backupEnvironment36.geicmaOptional();
    java.nio.file.Path path40 = backupEnvironment36.getPbPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory4.pbPath(path40);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(databaseNamePattern18);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(backupEnvironment36);
    org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional38);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional39);
    org.junit.Assert.assertNotNull(path40);
    org.junit.Assert.assertNotNull(factory41);
  }

  @Test
  public void test0383() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0383");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.GdbIdRepo gdbIdRepo1 = new io.github.onograph.backup.GdbIdRepo(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory5 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory5.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory5.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory5.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory11.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment17 = factory11.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern18 = backupEnvironment17.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress19 = backupEnvironment17.getSocketAddress();
    java.nio.file.Path path20 = backupEnvironment17.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory2.pbPath(path20);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory22.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory25.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory25.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory25.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory31.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory31.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment37 = factory31.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern38 = backupEnvironment37.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress39 = backupEnvironment37.getSocketAddress();
    java.nio.file.Path path40 = backupEnvironment37.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory22.pbPath(path40);
    io.github.onograph.backup.FileMoverService fileMoverService42 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path20, path40);
    java.nio.file.Path path43 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path40);
    io.github.onograph.backup.BackupEnvironment.Factory factory44 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config45 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory46 = factory44.config(config45);
    io.github.onograph.backup.BackupEnvironment.Factory factory48 = factory46.isRp(true);
    org.neo4j.configuration.Config config49 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory50 = factory48.config(config49);
    org.neo4j.configuration.helpers.SocketAddress socketAddress51 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory52 = factory48.wihadsBackupEnvironmentFactory(
        socketAddress51);
    io.github.onograph.backup.BackupEnvironment.Factory factory53 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory55 = factory53.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory56 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory58 = factory56.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory60 = factory56.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory62 = factory56.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory64 = factory62.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory67 = factory62.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment68 = factory62.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern69 = backupEnvironment68.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress70 = backupEnvironment68.getSocketAddress();
    java.nio.file.Path path71 = backupEnvironment68.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory72 = factory53.pbPath(path71);
    io.github.onograph.backup.BackupEnvironment.Factory factory73 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory75 = factory73.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory76 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory78 = factory76.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory80 = factory76.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory82 = factory76.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory84 = factory82.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory87 = factory82.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment88 = factory82.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern89 = backupEnvironment88.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress90 = backupEnvironment88.getSocketAddress();
    java.nio.file.Path path91 = backupEnvironment88.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory92 = factory73.pbPath(path91);
    io.github.onograph.backup.FileMoverService fileMoverService93 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path71, path91);
    io.github.onograph.backup.BackupEnvironment.Factory factory94 = factory48.pbPath(path91);
    io.github.onograph.backup.FileMoverService fileMoverService95 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path40, path91);
    try {
      java.util.Optional<org.neo4j.kernel.database.DatabaseId> databaseIdOptional96 = gdbIdRepo1.reddtaiOptional(
          path91);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(backupEnvironment17);
    org.junit.Assert.assertNotNull(databaseNamePattern18);
    org.junit.Assert.assertNotNull(socketAddress19);
    org.junit.Assert.assertNotNull(path20);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(backupEnvironment37);
    org.junit.Assert.assertNotNull(databaseNamePattern38);
    org.junit.Assert.assertNotNull(socketAddress39);
    org.junit.Assert.assertNotNull(path40);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(fileMoverService42);
    org.junit.Assert.assertNotNull(path43);
    org.junit.Assert.assertNotNull(factory44);
    org.junit.Assert.assertNotNull(factory46);
    org.junit.Assert.assertNotNull(factory48);
    org.junit.Assert.assertNotNull(factory50);
    org.junit.Assert.assertNotNull(factory52);
    org.junit.Assert.assertNotNull(factory53);
    org.junit.Assert.assertNotNull(factory55);
    org.junit.Assert.assertNotNull(factory56);
    org.junit.Assert.assertNotNull(factory58);
    org.junit.Assert.assertNotNull(factory60);
    org.junit.Assert.assertNotNull(factory62);
    org.junit.Assert.assertNotNull(factory64);
    org.junit.Assert.assertNotNull(factory67);
    org.junit.Assert.assertNotNull(backupEnvironment68);
    org.junit.Assert.assertNotNull(databaseNamePattern69);
    org.junit.Assert.assertNotNull(socketAddress70);
    org.junit.Assert.assertNotNull(path71);
    org.junit.Assert.assertNotNull(factory72);
    org.junit.Assert.assertNotNull(factory73);
    org.junit.Assert.assertNotNull(factory75);
    org.junit.Assert.assertNotNull(factory76);
    org.junit.Assert.assertNotNull(factory78);
    org.junit.Assert.assertNotNull(factory80);
    org.junit.Assert.assertNotNull(factory82);
    org.junit.Assert.assertNotNull(factory84);
    org.junit.Assert.assertNotNull(factory87);
    org.junit.Assert.assertNotNull(backupEnvironment88);
    org.junit.Assert.assertNotNull(databaseNamePattern89);
    org.junit.Assert.assertNotNull(socketAddress90);
    org.junit.Assert.assertNotNull(path91);
    org.junit.Assert.assertNotNull(factory92);
    org.junit.Assert.assertNotNull(fileMoverService93);
    org.junit.Assert.assertNotNull(factory94);
    org.junit.Assert.assertNotNull(fileMoverService95);
  }

  @Test
  public void test0384() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0384");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupIOService backupIOService1 = new io.github.onograph.backup.BackupIOService(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory8.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment14 = factory8.bulBackupEnvironment();
    boolean boolean15 = backupEnvironment14.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional16 = backupEnvironment14.geicmaOptional();
    org.neo4j.configuration.helpers.SocketAddress socketAddress17 = backupEnvironment14.getSocketAddress();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional18 = backupEnvironment14.geicmaOptional();
    java.nio.file.Path path19 = backupEnvironment14.getPbPath();
    try {
      backupIOService1.deedForPa(path19);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(backupEnvironment14);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional16);
    org.junit.Assert.assertNotNull(socketAddress17);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional18);
    org.junit.Assert.assertNotNull(path19);
  }

  @Test
  public void test0385() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0385");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup("");
    io.github.onograph.backup.Backup backup3 = backup1.isCc(true);
    io.github.onograph.backup.Backup backup5 = backup3.isCc(true);
    io.github.onograph.backup.Backup backup7 = backup3.isBftf(false);
    io.github.onograph.backup.Backup backup9 = backup7.isBftf(true);
    io.github.onograph.backup.Backup backup11 = backup9.isCc(true);
    io.github.onograph.backup.Backup backup13 = backup11.isBftf(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory15.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory15.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory15.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory21.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory21.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment27 = factory21.bulBackupEnvironment();
    boolean boolean28 = backupEnvironment27.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional29 = backupEnvironment27.geicmaOptional();
    java.nio.file.Path path30 = backupEnvironment27.getPbPath();
    java.nio.file.Path path31 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path30);
    java.nio.file.Path path32 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path31);
    try {
      io.github.onograph.backup.Backup.BackupRespState backupRespState33 = backup11.bakBackupBackupRespState(
          "", path31);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.RuntimeException; message: *** Error:  3b02b00a-232a-454b-823b-025cc97a58b8");
    } catch (java.lang.RuntimeException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(backup3);
    org.junit.Assert.assertNotNull(backup5);
    org.junit.Assert.assertNotNull(backup7);
    org.junit.Assert.assertNotNull(backup9);
    org.junit.Assert.assertNotNull(backup11);
    org.junit.Assert.assertNotNull(backup13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(backupEnvironment27);
    org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional29);
    org.junit.Assert.assertNotNull(path30);
    org.junit.Assert.assertNotNull(path31);
    org.junit.Assert.assertNotNull(path32);
  }

  @Test
  public void test0386() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0386");
    }
    io.github.onograph.backup.Backup backup2 = io.github.onograph.backup.Backup.froBackup(100, "");
    org.junit.Assert.assertNotNull(backup2);
  }

  @Test
  public void test0387() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0387");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.config(config5);
    org.neo4j.configuration.helpers.SocketAddress socketAddress7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress7);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isGcc(
        (java.lang.Boolean) true);
    org.neo4j.configuration.Config config11 = factory8.gecfConfig();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(config11);
  }

  @Test
  public void test0388() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0388");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.config(config5);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.databaseNamePattern(
        "database.id");
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.isCc(false);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions12 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory9.miAuthMetaOptions(
        authMetaOptions12);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory13.isGcc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory15.isIcc(
        (java.lang.Boolean) false);
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern18 = factory15.gedtenprDatabaseNamePattern();
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory4.databaseNamePattern(
        databaseNamePattern18);
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory4.isGcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory4.isFtfb(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory24.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = factory24.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = factory24.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory30.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = factory30.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment36 = factory30.bulBackupEnvironment();
    boolean boolean37 = backupEnvironment36.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional38 = backupEnvironment36.geicmaOptional();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional39 = backupEnvironment36.geicmaOptional();
    java.nio.file.Path path40 = backupEnvironment36.getPbPath();
    java.nio.file.Path path41 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path40);
    io.github.onograph.backup.BackupEnvironment.Factory factory42 = factory4.prPath(path40);
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = factory43.isIcc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory46 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config47 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory48 = factory46.config(config47);
    io.github.onograph.backup.BackupEnvironment.Factory factory50 = factory48.isSicc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory51 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory53 = factory51.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory55 = factory51.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory57 = factory51.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory59 = factory57.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory62 = factory57.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment63 = factory57.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern64 = backupEnvironment63.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress65 = backupEnvironment63.getSocketAddress();
    io.github.onograph.backup.BackupEnvironment.Factory factory66 = factory50.wihadsBackupEnvironmentFactory(
        socketAddress65);
    io.github.onograph.backup.BackupEnvironment.Factory factory67 = factory43.wihadsBackupEnvironmentFactory(
        socketAddress65);
    io.github.onograph.backup.BackupEnvironment.Factory factory68 = factory42.wihadsBackupEnvironmentFactory(
        socketAddress65);
    io.github.onograph.backup.BackupEnvironment.Factory factory70 = factory42.isSicc(
        (java.lang.Boolean) true);
    java.lang.Class<?> wildcardClass71 = factory42.getClass();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(databaseNamePattern18);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(backupEnvironment36);
    org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional38);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional39);
    org.junit.Assert.assertNotNull(path40);
    org.junit.Assert.assertNotNull(path41);
    org.junit.Assert.assertNotNull(factory42);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory46);
    org.junit.Assert.assertNotNull(factory48);
    org.junit.Assert.assertNotNull(factory50);
    org.junit.Assert.assertNotNull(factory51);
    org.junit.Assert.assertNotNull(factory53);
    org.junit.Assert.assertNotNull(factory55);
    org.junit.Assert.assertNotNull(factory57);
    org.junit.Assert.assertNotNull(factory59);
    org.junit.Assert.assertNotNull(factory62);
    org.junit.Assert.assertNotNull(backupEnvironment63);
    org.junit.Assert.assertNotNull(databaseNamePattern64);
    org.junit.Assert.assertNotNull(socketAddress65);
    org.junit.Assert.assertNotNull(factory66);
    org.junit.Assert.assertNotNull(factory67);
    org.junit.Assert.assertNotNull(factory68);
    org.junit.Assert.assertNotNull(factory70);
    org.junit.Assert.assertNotNull(wildcardClass71);
  }

  @Test
  public void test0389() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0389");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory6.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment12 = factory6.bulBackupEnvironment();
    org.neo4j.memory.MemoryTracker memoryTracker13 = backupEnvironment12.getMemoryTracker();
    java.nio.file.Path path14 = backupEnvironment12.getPbPath();
    boolean boolean15 = backupEnvironment12.getIsBftf();
    boolean boolean16 = backupEnvironment12.getIsCc();
    boolean boolean17 = backupEnvironment12.getIsRp();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(backupEnvironment12);
    org.junit.Assert.assertNotNull(memoryTracker13);
    org.junit.Assert.assertNotNull(path14);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
  }

  @Test
  public void test0390() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0390");
    }
    io.github.onograph.backup.SetupForBackupRestorationCommandProvider setupForBackupRestorationCommandProvider0 = new io.github.onograph.backup.SetupForBackupRestorationCommandProvider();
    org.neo4j.cli.Command.CommandType commandType1 = setupForBackupRestorationCommandProvider0.commandType();
    org.neo4j.cli.ExecutionContext executionContext2 = null;
    try {
      io.github.onograph.backup.SetupForBackupRestorationCommand setupForBackupRestorationCommand3 = setupForBackupRestorationCommandProvider0.createCommand(
          executionContext2);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue(
        "'" + commandType1 + "' != '" + org.neo4j.cli.Command.CommandType.PREPARE_RESTORE + "'",
        commandType1.equals(org.neo4j.cli.Command.CommandType.PREPARE_RESTORE));
  }

  @Test
  public void test0391() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0391");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.config(config5);
    org.neo4j.configuration.helpers.SocketAddress socketAddress7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress7);
    org.neo4j.configuration.helpers.SocketAddress socketAddress9 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress9);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory4.wihadsBackupEnvironmentFactory(
        (int) (short) -1, "hi!");
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory4.wihadsBackupEnvironmentFactory(
        0, "hi!");
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config18 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory17.config(config18);
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory19.isRp(true);
    org.neo4j.configuration.Config config22 = factory19.gecfConfig();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction23 = null;
    org.neo4j.memory.MemoryTracker memoryTracker24 = null;
    org.neo4j.io.pagecache.PageCache pageCache25 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager26 = new io.github.onograph.backup.BackupRestorationManager(
        config22, fileSystemAbstraction23, memoryTracker24, pageCache25);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory4.config(config22);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction28 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory29.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory29.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = factory29.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = factory35.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory40 = factory35.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment41 = factory35.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern42 = backupEnvironment41.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress43 = backupEnvironment41.getSocketAddress();
    java.nio.file.Path path44 = backupEnvironment41.getRpPath();
    boolean boolean45 = backupEnvironment41.getIsBftf();
    java.nio.file.Path path46 = backupEnvironment41.getRpPath();
    org.neo4j.memory.MemoryTracker memoryTracker47 = backupEnvironment41.getMemoryTracker();
    org.neo4j.io.pagecache.PageCache pageCache48 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager49 = new io.github.onograph.backup.BackupRestorationManager(
        config22, fileSystemAbstraction28, memoryTracker47, pageCache48);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction50 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory51 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory53 = factory51.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory55 = factory51.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory57 = factory51.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory59 = factory57.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory62 = factory57.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment63 = factory57.bulBackupEnvironment();
    boolean boolean64 = backupEnvironment63.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional65 = backupEnvironment63.geicmaOptional();
    org.neo4j.memory.MemoryTracker memoryTracker66 = backupEnvironment63.getMemoryTracker();
    org.neo4j.io.pagecache.PageCache pageCache67 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager68 = new io.github.onograph.backup.BackupRestorationManager(
        config22, fileSystemAbstraction50, memoryTracker66, pageCache67);
    org.neo4j.io.layout.DatabaseLayout databaseLayout69 = null;
    try {
      backupRestorationManager68.reorForDa(databaseLayout69);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(config22);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(factory40);
    org.junit.Assert.assertNotNull(backupEnvironment41);
    org.junit.Assert.assertNotNull(databaseNamePattern42);
    org.junit.Assert.assertNotNull(socketAddress43);
    org.junit.Assert.assertNotNull(path44);
    org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    org.junit.Assert.assertNotNull(path46);
    org.junit.Assert.assertNotNull(memoryTracker47);
    org.junit.Assert.assertNotNull(factory51);
    org.junit.Assert.assertNotNull(factory53);
    org.junit.Assert.assertNotNull(factory55);
    org.junit.Assert.assertNotNull(factory57);
    org.junit.Assert.assertNotNull(factory59);
    org.junit.Assert.assertNotNull(factory62);
    org.junit.Assert.assertNotNull(backupEnvironment63);
    org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional65);
    org.junit.Assert.assertNotNull(memoryTracker66);
  }

  @Test
  public void test0392() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0392");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = factory2.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory2.isCc(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    java.nio.file.Path path11 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory8.prPath(path11);
    org.neo4j.configuration.helpers.SocketAddress socketAddress13 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory12.wihadsBackupEnvironmentFactory(
        socketAddress13);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config16 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory15.config(config16);
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory17.isRp(true);
    org.neo4j.configuration.Config config20 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory19.config(config20);
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory19.databaseNamePattern(
        "database.id");
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory24.isCc(false);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions27 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = factory24.miAuthMetaOptions(
        authMetaOptions27);
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = factory28.isGcc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory30.isIcc(
        (java.lang.Boolean) false);
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern33 = factory30.gedtenprDatabaseNamePattern();
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory19.databaseNamePattern(
        databaseNamePattern33);
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = factory12.databaseNamePattern(
        databaseNamePattern33);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory7.databaseNamePattern(
        databaseNamePattern33);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = factory7.isIcc(
        (java.lang.Boolean) false);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(config5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(databaseNamePattern33);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(factory38);
  }

  @Test
  public void test0393() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0393");
    }
    io.github.onograph.backup.CommandProviderGdbRestorerCommandImpl commandProviderGdbRestorerCommandImpl0 = new io.github.onograph.backup.CommandProviderGdbRestorerCommandImpl();
    int int1 = commandProviderGdbRestorerCommandImpl0.getPriority();
    org.neo4j.cli.Command.CommandType commandType2 = commandProviderGdbRestorerCommandImpl0.commandType();
    org.neo4j.cli.Command.CommandType commandType3 = commandProviderGdbRestorerCommandImpl0.commandType();
    org.neo4j.cli.Command.CommandType commandType4 = commandProviderGdbRestorerCommandImpl0.commandType();
    org.neo4j.cli.Command.CommandType commandType5 = commandProviderGdbRestorerCommandImpl0.commandType();
    org.neo4j.cli.Command.CommandType commandType6 = commandProviderGdbRestorerCommandImpl0.commandType();
    org.neo4j.cli.ExecutionContext executionContext7 = null;
    try {
      io.github.onograph.backup.GdbRestorerCommand gdbRestorerCommand8 = commandProviderGdbRestorerCommandImpl0.createCommand(
          executionContext7);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    org.junit.Assert.assertTrue(
        "'" + commandType2 + "' != '" + org.neo4j.cli.Command.CommandType.RESTORE_DB + "'",
        commandType2.equals(org.neo4j.cli.Command.CommandType.RESTORE_DB));
    org.junit.Assert.assertTrue(
        "'" + commandType3 + "' != '" + org.neo4j.cli.Command.CommandType.RESTORE_DB + "'",
        commandType3.equals(org.neo4j.cli.Command.CommandType.RESTORE_DB));
    org.junit.Assert.assertTrue(
        "'" + commandType4 + "' != '" + org.neo4j.cli.Command.CommandType.RESTORE_DB + "'",
        commandType4.equals(org.neo4j.cli.Command.CommandType.RESTORE_DB));
    org.junit.Assert.assertTrue(
        "'" + commandType5 + "' != '" + org.neo4j.cli.Command.CommandType.RESTORE_DB + "'",
        commandType5.equals(org.neo4j.cli.Command.CommandType.RESTORE_DB));
    org.junit.Assert.assertTrue(
        "'" + commandType6 + "' != '" + org.neo4j.cli.Command.CommandType.RESTORE_DB + "'",
        commandType6.equals(org.neo4j.cli.Command.CommandType.RESTORE_DB));
  }

  @Test
  public void test0394() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0394");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup("hi!");
    io.github.onograph.backup.Backup backup3 = backup1.isCc(false);
    io.github.onograph.backup.Backup backup5 = backup1.isCc(false);
    io.github.onograph.backup.Backup backup7 = backup1.isBftf(false);
    java.io.OutputStream outputStream8 = null;
    try {
      io.github.onograph.backup.Backup backup9 = backup1.outputStream(outputStream8);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: outputStream");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(backup3);
    org.junit.Assert.assertNotNull(backup5);
    org.junit.Assert.assertNotNull(backup7);
  }

  @Test
  public void test0395() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0395");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.config(config5);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.databaseNamePattern(
        "database.id");
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.isCc(false);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions12 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory9.miAuthMetaOptions(
        authMetaOptions12);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory13.isGcc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory15.isIcc(
        (java.lang.Boolean) false);
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern18 = factory15.gedtenprDatabaseNamePattern();
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory4.databaseNamePattern(
        databaseNamePattern18);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config21 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory20.config(config21);
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory22.isRp(true);
    org.neo4j.configuration.Config config25 = factory22.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory22.isCc(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = factory28.isCc(false);
    java.nio.file.Path path31 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory28.prPath(path31);
    java.nio.file.Path path33 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory32.prPath(path33);
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = factory35.isCc(false);
    java.nio.file.Path path38 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory39 = factory35.prPath(path38);
    io.github.onograph.backup.BackupEnvironment.Factory factory40 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config41 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory42 = factory40.config(config41);
    io.github.onograph.backup.BackupEnvironment.Factory factory44 = factory42.isRp(true);
    org.neo4j.configuration.Config config45 = factory42.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory46 = factory35.config(config45);
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = factory34.config(config45);
    io.github.onograph.backup.BackupEnvironment.Factory factory48 = factory27.config(config45);
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = factory19.config(config45);
    io.github.onograph.backup.BackupEnvironment.Factory factory51 = factory49.shouldPrep(true);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions52 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory53 = factory51.miAuthMetaOptions(
        authMetaOptions52);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(databaseNamePattern18);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(config25);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(factory39);
    org.junit.Assert.assertNotNull(factory40);
    org.junit.Assert.assertNotNull(factory42);
    org.junit.Assert.assertNotNull(factory44);
    org.junit.Assert.assertNotNull(config45);
    org.junit.Assert.assertNotNull(factory46);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory48);
    org.junit.Assert.assertNotNull(factory49);
    org.junit.Assert.assertNotNull(factory51);
    org.junit.Assert.assertNotNull(factory53);
  }

  @Test
  public void test0396() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0396");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory6.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment12 = factory6.bulBackupEnvironment();
    boolean boolean13 = backupEnvironment12.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional14 = backupEnvironment12.geicmaOptional();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern15 = backupEnvironment12.getDatabaseNamePattern();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional16 = backupEnvironment12.geicmaOptional();
    org.neo4j.memory.MemoryTracker memoryTracker17 = backupEnvironment12.getMemoryTracker();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern18 = backupEnvironment12.getDatabaseNamePattern();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(backupEnvironment12);
    org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional14);
    org.junit.Assert.assertNotNull(databaseNamePattern15);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional16);
    org.junit.Assert.assertNotNull(memoryTracker17);
    org.junit.Assert.assertNotNull(databaseNamePattern18);
  }

  @Test
  public void test0397() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0397");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.logging.LogProvider logProvider5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator2.itraLogProvider(
        logProvider5);
    io.github.onograph.backup.BackupRunner backupRunner7 = generator6.bulBackupRunner();
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory8.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory8.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory14.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory14.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment20 = factory14.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern21 = backupEnvironment20.getDatabaseNamePattern();
    boolean boolean22 = backupEnvironment20.getIsBftf();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern23 = backupEnvironment20.getDatabaseNamePattern();
    try {
      backupRunner7.excebcpForBa(backupEnvironment20);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(backupRunner7);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(backupEnvironment20);
    org.junit.Assert.assertNotNull(databaseNamePattern21);
    org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    org.junit.Assert.assertNotNull(databaseNamePattern23);
  }

  @Test
  public void test0398() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0398");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.miAuthMetaOptions(
        authMetaOptions3);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isGcc(
        (java.lang.Boolean) false);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.miAuthMetaOptions(
        authMetaOptions7);
    org.neo4j.configuration.Config config9 = factory8.gecfConfig();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction10 = null;
    io.github.onograph.cluster.raft.module.cuprot.LifecycleCatchupManagerImpl lifecycleCatchupManagerImpl11 = null;
    org.neo4j.scheduler.JobScheduler jobScheduler12 = null;
    org.neo4j.logging.LogProvider logProvider13 = null;
    org.neo4j.monitoring.Monitors monitors14 = null;
    org.neo4j.io.pagecache.PageCache pageCache15 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer16 = null;
    org.neo4j.time.SystemNanoClock systemNanoClock17 = null;
    try {
      io.github.onograph.backup.RemoteBackupManager remoteBackupManager18 = new io.github.onograph.backup.RemoteBackupManager(
          config9, fileSystemAbstraction10, lifecycleCatchupManagerImpl11, jobScheduler12,
          logProvider13, monitors14, pageCache15, pageCacheTracer16, systemNanoClock17);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(config9);
  }

  @Test
  public void test0399() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0399");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isSicc(
        (java.lang.Boolean) true);
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern7 = factory2.gedtenprDatabaseNamePattern();
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory2.isFtfb(false);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions10 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory2.miAuthMetaOptions(
        authMetaOptions10);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(databaseNamePattern7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
  }

  @Test
  public void test0400() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0400");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupMetadataRepository backupMetadataRepository1 = new io.github.onograph.backup.BackupMetadataRepository(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory8.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment14 = factory8.bulBackupEnvironment();
    boolean boolean15 = backupEnvironment14.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional16 = backupEnvironment14.geicmaOptional();
    java.nio.file.Path path17 = backupEnvironment14.getPbPath();
    java.nio.file.Path path18 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path17);
    java.nio.file.Path path19 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path18);
    java.nio.file.Path path20 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path18);
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory21.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory21.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory21.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory27.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory27.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment33 = factory27.bulBackupEnvironment();
    boolean boolean34 = backupEnvironment33.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional35 = backupEnvironment33.geicmaOptional();
    java.nio.file.Path path36 = backupEnvironment33.getPbPath();
    java.nio.file.Path path37 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path36);
    java.nio.file.Path path38 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path37);
    boolean boolean39 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path38);
    java.nio.file.Path path40 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path38);
    io.github.onograph.backup.FileMoverService fileMoverService41 = io.github.onograph.backup.FileMoverService.movifeseFileMoverService(
        path20, path40);
    java.util.List<java.lang.String> strList42 = null;
    try {
      backupMetadataRepository1.wrtForPaLi(path40, strList42);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(backupEnvironment14);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional16);
    org.junit.Assert.assertNotNull(path17);
    org.junit.Assert.assertNotNull(path18);
    org.junit.Assert.assertNotNull(path19);
    org.junit.Assert.assertNotNull(path20);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(backupEnvironment33);
    org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional35);
    org.junit.Assert.assertNotNull(path36);
    org.junit.Assert.assertNotNull(path37);
    org.junit.Assert.assertNotNull(path38);
    org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    org.junit.Assert.assertNotNull(path40);
    org.junit.Assert.assertNotNull(fileMoverService41);
  }

  @Test
  public void test0401() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0401");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    java.nio.file.Path path5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.prPath(path5);
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern7 = factory6.gedtenprDatabaseNamePattern();
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory6.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory6.shouldPrep(false);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(databaseNamePattern7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
  }

  @Test
  public void test0402() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0402");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory6.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment12 = factory6.bulBackupEnvironment();
    boolean boolean13 = backupEnvironment12.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional14 = backupEnvironment12.geicmaOptional();
    org.neo4j.configuration.helpers.SocketAddress socketAddress15 = backupEnvironment12.getSocketAddress();
    boolean boolean16 = backupEnvironment12.getIsCc();
    java.nio.file.Path path17 = backupEnvironment12.getPbPath();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(backupEnvironment12);
    org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional14);
    org.junit.Assert.assertNotNull(socketAddress15);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    org.junit.Assert.assertNotNull(path17);
  }

  @Test
  public void test0403() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0403");
    }
    io.github.onograph.backup.Backup backup2 = io.github.onograph.backup.Backup.froBackup((int) '4',
        "hi!");
    org.junit.Assert.assertNotNull(backup2);
  }

  @Test
  public void test0404() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0404");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    java.nio.file.Path path3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.prPath(path3);
    io.github.onograph.backup.BackupEnvironment.Factory factory5 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config6 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory5.config(config6);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory7.isRp(true);
    org.neo4j.configuration.Config config10 = factory7.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory0.config(config10);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory0.shouldPrep(false);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction14 = null;
    io.github.onograph.backup.FileMover fileMover15 = new io.github.onograph.backup.FileMover(
        fileSystemAbstraction14);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory16.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory16.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory16.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory22.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory22.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment28 = factory22.bulBackupEnvironment();
    boolean boolean29 = backupEnvironment28.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional30 = backupEnvironment28.geicmaOptional();
    java.nio.file.Path path31 = backupEnvironment28.getPbPath();
    java.nio.file.Path path32 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path31);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream33 = fileMover15._trrfrmnStream(
        path31);
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory34.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory39 = factory37.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory37.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = factory37.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = factory43.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory48 = factory43.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment49 = factory43.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern50 = backupEnvironment49.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress51 = backupEnvironment49.getSocketAddress();
    java.nio.file.Path path52 = backupEnvironment49.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory53 = factory34.pbPath(path52);
    io.github.onograph.backup.BackupEnvironment.Factory factory54 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory56 = factory54.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory57 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory59 = factory57.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory61 = factory57.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory63 = factory57.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory65 = factory63.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory68 = factory63.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment69 = factory63.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern70 = backupEnvironment69.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress71 = backupEnvironment69.getSocketAddress();
    java.nio.file.Path path72 = backupEnvironment69.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory73 = factory54.pbPath(path72);
    io.github.onograph.backup.FileMoverService fileMoverService74 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path52, path72);
    java.nio.file.Path path75 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path52);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream76 = fileMover15._trrfrmnStream(
        path75);
    io.github.onograph.backup.BackupEnvironment.Factory factory77 = factory13.prPath(path75);
    io.github.onograph.backup.BackupEnvironment.Factory factory79 = factory13.isSicc(
        (java.lang.Boolean) false);
    java.nio.file.Path path80 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory81 = factory13.prPath(path80);
    org.neo4j.configuration.helpers.SocketAddress socketAddress82 = factory13.getSocketAddress();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(config10);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(backupEnvironment28);
    org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional30);
    org.junit.Assert.assertNotNull(path31);
    org.junit.Assert.assertNotNull(path32);
    org.junit.Assert.assertNotNull(fileMoverServiceStream33);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(factory39);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory48);
    org.junit.Assert.assertNotNull(backupEnvironment49);
    org.junit.Assert.assertNotNull(databaseNamePattern50);
    org.junit.Assert.assertNotNull(socketAddress51);
    org.junit.Assert.assertNotNull(path52);
    org.junit.Assert.assertNotNull(factory53);
    org.junit.Assert.assertNotNull(factory54);
    org.junit.Assert.assertNotNull(factory56);
    org.junit.Assert.assertNotNull(factory57);
    org.junit.Assert.assertNotNull(factory59);
    org.junit.Assert.assertNotNull(factory61);
    org.junit.Assert.assertNotNull(factory63);
    org.junit.Assert.assertNotNull(factory65);
    org.junit.Assert.assertNotNull(factory68);
    org.junit.Assert.assertNotNull(backupEnvironment69);
    org.junit.Assert.assertNotNull(databaseNamePattern70);
    org.junit.Assert.assertNotNull(socketAddress71);
    org.junit.Assert.assertNotNull(path72);
    org.junit.Assert.assertNotNull(factory73);
    org.junit.Assert.assertNotNull(fileMoverService74);
    org.junit.Assert.assertNotNull(path75);
    org.junit.Assert.assertNotNull(fileMoverServiceStream76);
    org.junit.Assert.assertNotNull(factory77);
    org.junit.Assert.assertNotNull(factory79);
    org.junit.Assert.assertNotNull(factory81);
    org.junit.Assert.assertNull(socketAddress82);
  }

  @Test
  public void test0405() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0405");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    java.nio.file.Path path3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.prPath(path3);
    io.github.onograph.backup.BackupEnvironment.Factory factory5 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config6 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory5.config(config6);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory7.isRp(true);
    org.neo4j.configuration.Config config10 = factory7.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory0.config(config10);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction12 = null;
    org.neo4j.configuration.Config config13 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction14 = null;
    java.nio.file.Path[] pathArray15 = new java.nio.file.Path[]{};
    java.util.LinkedHashSet<java.nio.file.Path> pathSet16 = new java.util.LinkedHashSet<java.nio.file.Path>();
    boolean boolean17 = java.util.Collections.addAll(
        (java.util.Collection<java.nio.file.Path>) pathSet16, pathArray15);
    io.github.onograph.backup.BackupRestoreMeta backupRestoreMeta18 = new io.github.onograph.backup.BackupRestoreMeta(
        config13, fileSystemAbstraction14, (java.util.Set<java.nio.file.Path>) pathSet16);
    io.github.onograph.backup.BackupRestoreMeta backupRestoreMeta19 = new io.github.onograph.backup.BackupRestoreMeta(
        config10, fileSystemAbstraction12, (java.util.Set<java.nio.file.Path>) pathSet16);
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags20 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction21 = null;
    org.neo4j.logging.LogProvider logProvider22 = null;
    java.nio.file.Path path23 = null;
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory24 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl25 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config10, consistencyFlags20, fileSystemAbstraction21, logProvider22, path23,
        progressMonitorFactory24);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction26 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config28 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory27.config(config28);
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory29.isRp(true);
    org.neo4j.configuration.Config config32 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory31.config(config32);
    org.neo4j.configuration.helpers.SocketAddress socketAddress34 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = factory31.wihadsBackupEnvironmentFactory(
        socketAddress34);
    org.neo4j.configuration.helpers.SocketAddress socketAddress36 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = factory31.wihadsBackupEnvironmentFactory(
        socketAddress36);
    io.github.onograph.backup.BackupEnvironment.Factory factory40 = factory31.wihadsBackupEnvironmentFactory(
        (int) (short) -1, "hi!");
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = factory31.wihadsBackupEnvironmentFactory(
        0, "hi!");
    io.github.onograph.backup.BackupEnvironment.Factory factory44 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config45 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory46 = factory44.config(config45);
    io.github.onograph.backup.BackupEnvironment.Factory factory48 = factory46.isRp(true);
    org.neo4j.configuration.Config config49 = factory46.gecfConfig();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction50 = null;
    org.neo4j.memory.MemoryTracker memoryTracker51 = null;
    org.neo4j.io.pagecache.PageCache pageCache52 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager53 = new io.github.onograph.backup.BackupRestorationManager(
        config49, fileSystemAbstraction50, memoryTracker51, pageCache52);
    io.github.onograph.backup.BackupEnvironment.Factory factory54 = factory31.config(config49);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction55 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory56 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory58 = factory56.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory60 = factory56.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory62 = factory56.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory64 = factory62.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory67 = factory62.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment68 = factory62.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern69 = backupEnvironment68.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress70 = backupEnvironment68.getSocketAddress();
    java.nio.file.Path path71 = backupEnvironment68.getRpPath();
    boolean boolean72 = backupEnvironment68.getIsBftf();
    java.nio.file.Path path73 = backupEnvironment68.getRpPath();
    org.neo4j.memory.MemoryTracker memoryTracker74 = backupEnvironment68.getMemoryTracker();
    org.neo4j.io.pagecache.PageCache pageCache75 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager76 = new io.github.onograph.backup.BackupRestorationManager(
        config49, fileSystemAbstraction55, memoryTracker74, pageCache75);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction77 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory78 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory80 = factory78.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory82 = factory78.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory84 = factory78.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory86 = factory84.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory89 = factory84.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment90 = factory84.bulBackupEnvironment();
    boolean boolean91 = backupEnvironment90.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional92 = backupEnvironment90.geicmaOptional();
    org.neo4j.memory.MemoryTracker memoryTracker93 = backupEnvironment90.getMemoryTracker();
    org.neo4j.io.pagecache.PageCache pageCache94 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager95 = new io.github.onograph.backup.BackupRestorationManager(
        config49, fileSystemAbstraction77, memoryTracker93, pageCache94);
    org.neo4j.io.pagecache.PageCache pageCache96 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager97 = new io.github.onograph.backup.BackupRestorationManager(
        config10, fileSystemAbstraction26, memoryTracker93, pageCache96);
    org.neo4j.io.layout.DatabaseLayout databaseLayout98 = null;
    try {
      backupRestorationManager97.reorForDa(databaseLayout98);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(config10);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(pathArray15);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(factory40);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory44);
    org.junit.Assert.assertNotNull(factory46);
    org.junit.Assert.assertNotNull(factory48);
    org.junit.Assert.assertNotNull(config49);
    org.junit.Assert.assertNotNull(factory54);
    org.junit.Assert.assertNotNull(factory56);
    org.junit.Assert.assertNotNull(factory58);
    org.junit.Assert.assertNotNull(factory60);
    org.junit.Assert.assertNotNull(factory62);
    org.junit.Assert.assertNotNull(factory64);
    org.junit.Assert.assertNotNull(factory67);
    org.junit.Assert.assertNotNull(backupEnvironment68);
    org.junit.Assert.assertNotNull(databaseNamePattern69);
    org.junit.Assert.assertNotNull(socketAddress70);
    org.junit.Assert.assertNotNull(path71);
    org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    org.junit.Assert.assertNotNull(path73);
    org.junit.Assert.assertNotNull(memoryTracker74);
    org.junit.Assert.assertNotNull(factory78);
    org.junit.Assert.assertNotNull(factory80);
    org.junit.Assert.assertNotNull(factory82);
    org.junit.Assert.assertNotNull(factory84);
    org.junit.Assert.assertNotNull(factory86);
    org.junit.Assert.assertNotNull(factory89);
    org.junit.Assert.assertNotNull(backupEnvironment90);
    org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional92);
    org.junit.Assert.assertNotNull(memoryTracker93);
  }

  @Test
  public void test0406() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0406");
    }
    io.github.onograph.backup.BackupMetaDTO backupMetaDTO0 = null;
    java.lang.String[] strArray3 = new java.lang.String[]{"database.id", ""};
    java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
    boolean boolean5 = java.util.Collections.addAll(
        (java.util.Collection<java.lang.String>) strList4, strArray3);
    try {
      io.github.onograph.backup.BackupMetaService.wrtmedaForBaLi(backupMetaDTO0,
          (java.util.List<java.lang.String>) strList4);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(strArray3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
  }

  @Test
  public void test0407() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0407");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isGcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isSicc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isGcc(
        (java.lang.Boolean) true);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
  }

  @Test
  public void test0408() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0408");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.logging.LogProvider logProvider5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator2.itraLogProvider(
        logProvider5);
    org.neo4j.logging.LogProvider logProvider7 = null;
    io.github.onograph.backup.BackupRunner.Generator generator8 = generator6.uLogProvider(
        logProvider7);
    org.neo4j.monitoring.Monitors monitors9 = null;
    io.github.onograph.backup.BackupRunner.Generator generator10 = generator6.monitors(monitors9);
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(generator8);
    org.junit.Assert.assertNotNull(generator10);
  }

  @Test
  public void test0409() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0409");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isGcc(
        (java.lang.Boolean) false);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
  }

  @Test
  public void test0410() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0410");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory6.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment12 = factory6.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern13 = backupEnvironment12.getDatabaseNamePattern();
    boolean boolean14 = backupEnvironment12.getIsBftf();
    boolean boolean15 = backupEnvironment12.getIsBftf();
    java.nio.file.Path path16 = backupEnvironment12.getRpPath();
    java.nio.file.Path path17 = backupEnvironment12.getPbPath();
    java.nio.file.Path path18 = backupEnvironment12.getRpPath();
    org.neo4j.configuration.helpers.SocketAddress socketAddress19 = backupEnvironment12.getSocketAddress();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(backupEnvironment12);
    org.junit.Assert.assertNotNull(databaseNamePattern13);
    org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    org.junit.Assert.assertNotNull(path16);
    org.junit.Assert.assertNotNull(path17);
    org.junit.Assert.assertNotNull(path18);
    org.junit.Assert.assertNotNull(socketAddress19);
  }

  @Test
  public void test0411() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0411");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupIOService backupIOService1 = new io.github.onograph.backup.BackupIOService(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.config(config3);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isRp(true);
    org.neo4j.configuration.Config config7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.config(config7);
    org.neo4j.configuration.helpers.SocketAddress socketAddress9 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory6.wihadsBackupEnvironmentFactory(
        socketAddress9);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory10.isSicc(
        (java.lang.Boolean) false);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction13 = null;
    io.github.onograph.backup.FileMover fileMover14 = new io.github.onograph.backup.FileMover(
        fileSystemAbstraction13);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory15.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory15.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory15.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory21.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory21.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment27 = factory21.bulBackupEnvironment();
    boolean boolean28 = backupEnvironment27.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional29 = backupEnvironment27.geicmaOptional();
    java.nio.file.Path path30 = backupEnvironment27.getPbPath();
    java.nio.file.Path path31 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path30);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream32 = fileMover14._trrfrmnStream(
        path30);
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = factory33.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = factory36.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory40 = factory36.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory42 = factory36.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory44 = factory42.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = factory42.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment48 = factory42.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern49 = backupEnvironment48.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress50 = backupEnvironment48.getSocketAddress();
    java.nio.file.Path path51 = backupEnvironment48.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory52 = factory33.pbPath(path51);
    io.github.onograph.backup.BackupEnvironment.Factory factory53 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory55 = factory53.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory56 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory58 = factory56.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory60 = factory56.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory62 = factory56.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory64 = factory62.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory67 = factory62.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment68 = factory62.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern69 = backupEnvironment68.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress70 = backupEnvironment68.getSocketAddress();
    java.nio.file.Path path71 = backupEnvironment68.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory72 = factory53.pbPath(path71);
    io.github.onograph.backup.FileMoverService fileMoverService73 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path51, path71);
    java.nio.file.Path path74 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path51);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream75 = fileMover14._trrfrmnStream(
        path74);
    java.nio.file.Path path76 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path74);
    io.github.onograph.backup.BackupEnvironment.Factory factory77 = factory10.prPath(path76);
    try {
      backupIOService1.deedForPa(path76);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(backupEnvironment27);
    org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional29);
    org.junit.Assert.assertNotNull(path30);
    org.junit.Assert.assertNotNull(path31);
    org.junit.Assert.assertNotNull(fileMoverServiceStream32);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(factory40);
    org.junit.Assert.assertNotNull(factory42);
    org.junit.Assert.assertNotNull(factory44);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(backupEnvironment48);
    org.junit.Assert.assertNotNull(databaseNamePattern49);
    org.junit.Assert.assertNotNull(socketAddress50);
    org.junit.Assert.assertNotNull(path51);
    org.junit.Assert.assertNotNull(factory52);
    org.junit.Assert.assertNotNull(factory53);
    org.junit.Assert.assertNotNull(factory55);
    org.junit.Assert.assertNotNull(factory56);
    org.junit.Assert.assertNotNull(factory58);
    org.junit.Assert.assertNotNull(factory60);
    org.junit.Assert.assertNotNull(factory62);
    org.junit.Assert.assertNotNull(factory64);
    org.junit.Assert.assertNotNull(factory67);
    org.junit.Assert.assertNotNull(backupEnvironment68);
    org.junit.Assert.assertNotNull(databaseNamePattern69);
    org.junit.Assert.assertNotNull(socketAddress70);
    org.junit.Assert.assertNotNull(path71);
    org.junit.Assert.assertNotNull(factory72);
    org.junit.Assert.assertNotNull(fileMoverService73);
    org.junit.Assert.assertNotNull(path74);
    org.junit.Assert.assertNotNull(fileMoverServiceStream75);
    org.junit.Assert.assertNotNull(path76);
    org.junit.Assert.assertNotNull(factory77);
  }

  @Test
  public void test0412() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0412");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    org.neo4j.configuration.helpers.SocketAddress socketAddress3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.wihadsBackupEnvironmentFactory(
        socketAddress3);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isGcc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.isCc(true);
    org.neo4j.configuration.helpers.SocketAddress socketAddress9 = factory4.getSocketAddress();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNull(socketAddress9);
  }

  @Test
  public void test0413() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0413");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory6.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment12 = factory6.bulBackupEnvironment();
    boolean boolean13 = backupEnvironment12.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional14 = backupEnvironment12.geicmaOptional();
    boolean boolean15 = backupEnvironment12.getIsRp();
    boolean boolean16 = backupEnvironment12.getIsBftf();
    boolean boolean17 = backupEnvironment12.getIsCc();
    boolean boolean18 = backupEnvironment12.getIsBftf();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(backupEnvironment12);
    org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional14);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
  }

  @Test
  public void test0414() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0414");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = factory2.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory2.isCc(true);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions8 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory2.miAuthMetaOptions(
        authMetaOptions8);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory10.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory10.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory10.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory16.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory16.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment22 = factory16.bulBackupEnvironment();
    boolean boolean23 = backupEnvironment22.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional24 = backupEnvironment22.geicmaOptional();
    java.nio.file.Path path25 = backupEnvironment22.getPbPath();
    java.nio.file.Path path26 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path25);
    java.nio.file.Path path27 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path26);
    boolean boolean28 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path27);
    java.nio.file.Path path29 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path27);
    java.nio.file.Path path30 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path29);
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory31.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory34.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = factory34.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory40 = factory34.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory42 = factory40.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = factory40.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment46 = factory40.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern47 = backupEnvironment46.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress48 = backupEnvironment46.getSocketAddress();
    java.nio.file.Path path49 = backupEnvironment46.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory50 = factory31.pbPath(path49);
    io.github.onograph.backup.BackupEnvironment.Factory factory51 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory53 = factory51.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory54 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory56 = factory54.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory58 = factory54.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory60 = factory54.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory62 = factory60.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory65 = factory60.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment66 = factory60.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern67 = backupEnvironment66.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress68 = backupEnvironment66.getSocketAddress();
    java.nio.file.Path path69 = backupEnvironment66.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory70 = factory51.pbPath(path69);
    io.github.onograph.backup.FileMoverService fileMoverService71 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path49, path69);
    java.nio.file.Path path72 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path69);
    io.github.onograph.backup.FileMoverService fileMoverService73 = io.github.onograph.backup.FileMoverService.movifeseFileMoverService(
        path29, path72);
    java.nio.file.Path path74 = fileMoverService73.filPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory75 = factory2.prPath(path74);
    io.github.onograph.backup.BackupEnvironment.Factory factory77 = factory2.isCc(true);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(config5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(backupEnvironment22);
    org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional24);
    org.junit.Assert.assertNotNull(path25);
    org.junit.Assert.assertNotNull(path26);
    org.junit.Assert.assertNotNull(path27);
    org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    org.junit.Assert.assertNotNull(path29);
    org.junit.Assert.assertNotNull(path30);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(factory40);
    org.junit.Assert.assertNotNull(factory42);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(backupEnvironment46);
    org.junit.Assert.assertNotNull(databaseNamePattern47);
    org.junit.Assert.assertNotNull(socketAddress48);
    org.junit.Assert.assertNotNull(path49);
    org.junit.Assert.assertNotNull(factory50);
    org.junit.Assert.assertNotNull(factory51);
    org.junit.Assert.assertNotNull(factory53);
    org.junit.Assert.assertNotNull(factory54);
    org.junit.Assert.assertNotNull(factory56);
    org.junit.Assert.assertNotNull(factory58);
    org.junit.Assert.assertNotNull(factory60);
    org.junit.Assert.assertNotNull(factory62);
    org.junit.Assert.assertNotNull(factory65);
    org.junit.Assert.assertNotNull(backupEnvironment66);
    org.junit.Assert.assertNotNull(databaseNamePattern67);
    org.junit.Assert.assertNotNull(socketAddress68);
    org.junit.Assert.assertNotNull(path69);
    org.junit.Assert.assertNotNull(factory70);
    org.junit.Assert.assertNotNull(fileMoverService71);
    org.junit.Assert.assertNotNull(path72);
    org.junit.Assert.assertNotNull(fileMoverService73);
    org.junit.Assert.assertNotNull(path74);
    org.junit.Assert.assertNotNull(factory75);
    org.junit.Assert.assertNotNull(factory77);
  }

  @Test
  public void test0415() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0415");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory6.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment12 = factory6.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern13 = backupEnvironment12.getDatabaseNamePattern();
    java.lang.Class<?> wildcardClass14 = backupEnvironment12.getClass();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(backupEnvironment12);
    org.junit.Assert.assertNotNull(databaseNamePattern13);
    org.junit.Assert.assertNotNull(wildcardClass14);
  }

  @Test
  public void test0416() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0416");
    }
    io.github.onograph.backup.SetupForBackupRestorationCommandProvider setupForBackupRestorationCommandProvider0 = new io.github.onograph.backup.SetupForBackupRestorationCommandProvider();
    int int1 = setupForBackupRestorationCommandProvider0.getPriority();
    org.neo4j.cli.Command.CommandType commandType2 = setupForBackupRestorationCommandProvider0.commandType();
    org.neo4j.cli.Command.CommandType commandType3 = setupForBackupRestorationCommandProvider0.commandType();
    org.neo4j.cli.Command.CommandType commandType4 = setupForBackupRestorationCommandProvider0.commandType();
    org.neo4j.cli.ExecutionContext executionContext5 = null;
    try {
      io.github.onograph.backup.SetupForBackupRestorationCommand setupForBackupRestorationCommand6 = setupForBackupRestorationCommandProvider0.createCommand(
          executionContext5);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    org.junit.Assert.assertTrue(
        "'" + commandType2 + "' != '" + org.neo4j.cli.Command.CommandType.PREPARE_RESTORE + "'",
        commandType2.equals(org.neo4j.cli.Command.CommandType.PREPARE_RESTORE));
    org.junit.Assert.assertTrue(
        "'" + commandType3 + "' != '" + org.neo4j.cli.Command.CommandType.PREPARE_RESTORE + "'",
        commandType3.equals(org.neo4j.cli.Command.CommandType.PREPARE_RESTORE));
    org.junit.Assert.assertTrue(
        "'" + commandType4 + "' != '" + org.neo4j.cli.Command.CommandType.PREPARE_RESTORE + "'",
        commandType4.equals(org.neo4j.cli.Command.CommandType.PREPARE_RESTORE));
  }

  @Test
  public void test0417() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0417");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.GdbIdRepo gdbIdRepo1 = new io.github.onograph.backup.GdbIdRepo(
        fileSystemAbstraction0);
    org.neo4j.kernel.database.DatabaseId databaseId2 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory3 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory5 = factory3.isCc(false);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions6 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory3.miAuthMetaOptions(
        authMetaOptions6);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory7.isCc(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory10.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory10.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory10.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory16.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory16.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment22 = factory16.bulBackupEnvironment();
    boolean boolean23 = backupEnvironment22.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional24 = backupEnvironment22.geicmaOptional();
    java.nio.file.Path path25 = backupEnvironment22.getPbPath();
    java.nio.file.Path path26 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path25);
    java.nio.file.Path path27 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path26);
    boolean boolean28 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path27);
    java.nio.file.Path path29 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path27);
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory30.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory30.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory30.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = factory36.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory36.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment42 = factory36.bulBackupEnvironment();
    boolean boolean43 = backupEnvironment42.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional44 = backupEnvironment42.geicmaOptional();
    java.nio.file.Path path45 = backupEnvironment42.getPbPath();
    java.nio.file.Path path46 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path45);
    java.nio.file.Path path47 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path46);
    io.github.onograph.backup.FileMoverService fileMoverService48 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path27, path46);
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = factory7.prPath(path46);
    try {
      gdbIdRepo1.wrdaiForDaPa(databaseId2, path46);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory3);
    org.junit.Assert.assertNotNull(factory5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(backupEnvironment22);
    org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional24);
    org.junit.Assert.assertNotNull(path25);
    org.junit.Assert.assertNotNull(path26);
    org.junit.Assert.assertNotNull(path27);
    org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    org.junit.Assert.assertNotNull(path29);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(backupEnvironment42);
    org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional44);
    org.junit.Assert.assertNotNull(path45);
    org.junit.Assert.assertNotNull(path46);
    org.junit.Assert.assertNotNull(path47);
    org.junit.Assert.assertNotNull(fileMoverService48);
    org.junit.Assert.assertNotNull(factory49);
  }

  @Test
  public void test0418() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0418");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.logging.LogProvider logProvider5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator2.itraLogProvider(
        logProvider5);
    org.neo4j.logging.LogProvider logProvider7 = null;
    io.github.onograph.backup.BackupRunner.Generator generator8 = generator6.uLogProvider(
        logProvider7);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction9 = null;
    io.github.onograph.backup.BackupRunner.Generator generator10 = generator6.fFileSystemAbstraction(
        fileSystemAbstraction9);
    org.neo4j.logging.LogProvider logProvider11 = null;
    io.github.onograph.backup.BackupRunner.Generator generator12 = generator10.itraLogProvider(
        logProvider11);
    org.neo4j.logging.LogProvider logProvider13 = null;
    io.github.onograph.backup.BackupRunner.Generator generator14 = generator12.itraLogProvider(
        logProvider13);
    org.neo4j.logging.LogProvider logProvider15 = null;
    io.github.onograph.backup.BackupRunner.Generator generator16 = generator14.itraLogProvider(
        logProvider15);
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(generator8);
    org.junit.Assert.assertNotNull(generator10);
    org.junit.Assert.assertNotNull(generator12);
    org.junit.Assert.assertNotNull(generator14);
    org.junit.Assert.assertNotNull(generator16);
  }

  @Test
  public void test0419() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0419");
    }
    io.github.onograph.backup.CommandProviderBackupImpl commandProviderBackupImpl0 = new io.github.onograph.backup.CommandProviderBackupImpl();
    int int1 = commandProviderBackupImpl0.getPriority();
    int int2 = commandProviderBackupImpl0.getPriority();
    org.neo4j.cli.Command.CommandType commandType3 = commandProviderBackupImpl0.commandType();
    org.neo4j.cli.Command.CommandType commandType4 = commandProviderBackupImpl0.commandType();
    int int5 = commandProviderBackupImpl0.getPriority();
    org.neo4j.cli.Command.CommandType commandType6 = commandProviderBackupImpl0.commandType();
    org.neo4j.cli.Command.CommandType commandType7 = commandProviderBackupImpl0.commandType();
    org.neo4j.cli.ExecutionContext executionContext8 = null;
    try {
      io.github.onograph.backup.BackupCommand backupCommand9 = commandProviderBackupImpl0.createCommand(
          executionContext8);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    org.junit.Assert.assertTrue(
        "'" + commandType3 + "' != '" + org.neo4j.cli.Command.CommandType.ONLINE_BACKUP + "'",
        commandType3.equals(org.neo4j.cli.Command.CommandType.ONLINE_BACKUP));
    org.junit.Assert.assertTrue(
        "'" + commandType4 + "' != '" + org.neo4j.cli.Command.CommandType.ONLINE_BACKUP + "'",
        commandType4.equals(org.neo4j.cli.Command.CommandType.ONLINE_BACKUP));
    org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    org.junit.Assert.assertTrue(
        "'" + commandType6 + "' != '" + org.neo4j.cli.Command.CommandType.ONLINE_BACKUP + "'",
        commandType6.equals(org.neo4j.cli.Command.CommandType.ONLINE_BACKUP));
    org.junit.Assert.assertTrue(
        "'" + commandType7 + "' != '" + org.neo4j.cli.Command.CommandType.ONLINE_BACKUP + "'",
        commandType7.equals(org.neo4j.cli.Command.CommandType.ONLINE_BACKUP));
  }

  @Test
  public void test0420() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0420");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory6.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment12 = factory6.bulBackupEnvironment();
    boolean boolean13 = backupEnvironment12.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional14 = backupEnvironment12.geicmaOptional();
    org.neo4j.configuration.helpers.SocketAddress socketAddress15 = backupEnvironment12.getSocketAddress();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional16 = backupEnvironment12.geicmaOptional();
    boolean boolean17 = backupEnvironment12.getIsRp();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(backupEnvironment12);
    org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional14);
    org.junit.Assert.assertNotNull(socketAddress15);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional16);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
  }

  @Test
  public void test0421() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0421");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isSicc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory0.isSicc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory0.isIcc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory0.databaseNamePattern(
        "database.id");
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory0.isRp(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory15.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory15.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory15.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory21.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory21.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment27 = factory21.bulBackupEnvironment();
    boolean boolean28 = backupEnvironment27.getIsRp();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional29 = backupEnvironment27.geicmaOptional();
    org.neo4j.configuration.helpers.SocketAddress socketAddress30 = backupEnvironment27.getSocketAddress();
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory14.wihadsBackupEnvironmentFactory(
        socketAddress30);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(backupEnvironment27);
    org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional29);
    org.junit.Assert.assertNotNull(socketAddress30);
    org.junit.Assert.assertNotNull(factory31);
  }

  @Test
  public void test0422() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0422");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.config(config5);
    org.neo4j.configuration.helpers.SocketAddress socketAddress7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress7);
    org.neo4j.configuration.helpers.SocketAddress socketAddress9 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress9);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory4.wihadsBackupEnvironmentFactory(
        (int) (short) -1, "hi!");
    org.neo4j.configuration.Config config14 = factory13.gecfConfig();
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags15 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction16 = null;
    org.neo4j.logging.LogProvider logProvider17 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory18.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory21.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory21.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory21.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory27.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory27.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment33 = factory27.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern34 = backupEnvironment33.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress35 = backupEnvironment33.getSocketAddress();
    java.nio.file.Path path36 = backupEnvironment33.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = factory18.pbPath(path36);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory40 = factory38.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = factory41.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = factory41.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = factory41.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = factory47.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory52 = factory47.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment53 = factory47.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern54 = backupEnvironment53.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress55 = backupEnvironment53.getSocketAddress();
    java.nio.file.Path path56 = backupEnvironment53.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory57 = factory38.pbPath(path56);
    io.github.onograph.backup.FileMoverService fileMoverService58 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path36, path56);
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory59 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl60 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config14, consistencyFlags15, fileSystemAbstraction16, logProvider17, path56,
        progressMonitorFactory59);
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags61 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction62 = null;
    org.neo4j.logging.LogProvider logProvider63 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory64 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory66 = factory64.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory68 = factory64.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory70 = factory64.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory72 = factory70.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory75 = factory70.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment76 = factory70.bulBackupEnvironment();
    org.neo4j.memory.MemoryTracker memoryTracker77 = backupEnvironment76.getMemoryTracker();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern78 = backupEnvironment76.getDatabaseNamePattern();
    boolean boolean79 = backupEnvironment76.getIsBftf();
    java.nio.file.Path path80 = backupEnvironment76.getRpPath();
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory81 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl82 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config14, consistencyFlags61, fileSystemAbstraction62, logProvider63, path80,
        progressMonitorFactory81);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction83 = null;
    org.neo4j.logging.LogProvider logProvider84 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer85 = null;
    org.neo4j.time.SystemNanoClock systemNanoClock86 = null;
    try {
      io.github.onograph.backup.DefaultBackupServiceHandler defaultBackupServiceHandler87 = io.github.onograph.backup.DefaultBackupServiceHandler.strliclDefaultBackupServiceHandler(
          config14, fileSystemAbstraction83, logProvider84, pageCacheTracer85, systemNanoClock86);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(config14);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(backupEnvironment33);
    org.junit.Assert.assertNotNull(databaseNamePattern34);
    org.junit.Assert.assertNotNull(socketAddress35);
    org.junit.Assert.assertNotNull(path36);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(factory40);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory49);
    org.junit.Assert.assertNotNull(factory52);
    org.junit.Assert.assertNotNull(backupEnvironment53);
    org.junit.Assert.assertNotNull(databaseNamePattern54);
    org.junit.Assert.assertNotNull(socketAddress55);
    org.junit.Assert.assertNotNull(path56);
    org.junit.Assert.assertNotNull(factory57);
    org.junit.Assert.assertNotNull(fileMoverService58);
    org.junit.Assert.assertNotNull(factory64);
    org.junit.Assert.assertNotNull(factory66);
    org.junit.Assert.assertNotNull(factory68);
    org.junit.Assert.assertNotNull(factory70);
    org.junit.Assert.assertNotNull(factory72);
    org.junit.Assert.assertNotNull(factory75);
    org.junit.Assert.assertNotNull(backupEnvironment76);
    org.junit.Assert.assertNotNull(memoryTracker77);
    org.junit.Assert.assertNotNull(databaseNamePattern78);
    org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    org.junit.Assert.assertNotNull(path80);
  }

  @Test
  public void test0423() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0423");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.config(config5);
    org.neo4j.configuration.helpers.SocketAddress socketAddress7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress7);
    org.neo4j.configuration.helpers.SocketAddress socketAddress9 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress9);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory4.wihadsBackupEnvironmentFactory(
        (int) (short) -1, "hi!");
    org.neo4j.configuration.Config config14 = factory13.gecfConfig();
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags15 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction16 = null;
    org.neo4j.logging.LogProvider logProvider17 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory18.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory21.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory21.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory21.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory27.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory27.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment33 = factory27.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern34 = backupEnvironment33.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress35 = backupEnvironment33.getSocketAddress();
    java.nio.file.Path path36 = backupEnvironment33.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = factory18.pbPath(path36);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory40 = factory38.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = factory41.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = factory41.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = factory41.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = factory47.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory52 = factory47.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment53 = factory47.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern54 = backupEnvironment53.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress55 = backupEnvironment53.getSocketAddress();
    java.nio.file.Path path56 = backupEnvironment53.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory57 = factory38.pbPath(path56);
    io.github.onograph.backup.FileMoverService fileMoverService58 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path36, path56);
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory59 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl60 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config14, consistencyFlags15, fileSystemAbstraction16, logProvider17, path56,
        progressMonitorFactory59);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction61 = null;
    org.neo4j.logging.LogProvider logProvider62 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer63 = null;
    org.neo4j.time.SystemNanoClock systemNanoClock64 = null;
    try {
      io.github.onograph.backup.DefaultBackupServiceHandler defaultBackupServiceHandler65 = io.github.onograph.backup.DefaultBackupServiceHandler.strliclDefaultBackupServiceHandler(
          config14, fileSystemAbstraction61, logProvider62, pageCacheTracer63, systemNanoClock64);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(config14);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(backupEnvironment33);
    org.junit.Assert.assertNotNull(databaseNamePattern34);
    org.junit.Assert.assertNotNull(socketAddress35);
    org.junit.Assert.assertNotNull(path36);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(factory40);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory49);
    org.junit.Assert.assertNotNull(factory52);
    org.junit.Assert.assertNotNull(backupEnvironment53);
    org.junit.Assert.assertNotNull(databaseNamePattern54);
    org.junit.Assert.assertNotNull(socketAddress55);
    org.junit.Assert.assertNotNull(path56);
    org.junit.Assert.assertNotNull(factory57);
    org.junit.Assert.assertNotNull(fileMoverService58);
  }

  @Test
  public void test0424() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0424");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isIcc(
        (java.lang.Boolean) false);
    java.lang.Class<?> wildcardClass3 = factory2.getClass();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(wildcardClass3);
  }

  @Test
  public void test0425() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0425");
    }
    io.github.onograph.backup.BackupMetaDTO backupMetaDTO0 = null;
    java.lang.String[] strArray4 = new java.lang.String[]{"", "database.id", "hi!"};
    java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
    boolean boolean6 = java.util.Collections.addAll(
        (java.util.Collection<java.lang.String>) strList5, strArray4);
    try {
      io.github.onograph.backup.BackupMetaService.wrtmedaForBaLi(backupMetaDTO0,
          (java.util.List<java.lang.String>) strList5);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(strArray4);
    org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
  }

  @Test
  public void test0426() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0426");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup("");
    io.github.onograph.backup.Backup backup3 = backup1.isCc(true);
    io.github.onograph.backup.Backup backup5 = backup3.isCc(true);
    io.github.onograph.backup.Backup backup7 = backup5.isCc(true);
    io.github.onograph.backup.Backup backup9 = backup7.isBftf(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory11.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory11.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory17.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory17.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment23 = factory17.bulBackupEnvironment();
    boolean boolean24 = backupEnvironment23.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional25 = backupEnvironment23.geicmaOptional();
    java.nio.file.Path path26 = backupEnvironment23.getPbPath();
    java.nio.file.Path path27 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path26);
    java.nio.file.Path path28 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path27);
    try {
      io.github.onograph.backup.Backup.BackupRespState backupRespState29 = backup7.bakBackupBackupRespState(
          "hi!", path27);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.RuntimeException; message: *** Error:  3b02b00a-232a-454b-823b-025cc97a58b8");
    } catch (java.lang.RuntimeException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(backup3);
    org.junit.Assert.assertNotNull(backup5);
    org.junit.Assert.assertNotNull(backup7);
    org.junit.Assert.assertNotNull(backup9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(backupEnvironment23);
    org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional25);
    org.junit.Assert.assertNotNull(path26);
    org.junit.Assert.assertNotNull(path27);
    org.junit.Assert.assertNotNull(path28);
  }

  @Test
  public void test0427() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0427");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory6.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isFtfb(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory13.isRp(false);
    java.nio.file.Path path16 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory13.pbPath(path16);
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory17.isGcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config21 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory20.config(config21);
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory22.isRp(true);
    org.neo4j.configuration.Config config25 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory24.config(config25);
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = factory24.databaseNamePattern(
        "database.id");
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory29.isCc(false);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions32 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory29.miAuthMetaOptions(
        authMetaOptions32);
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = factory33.isGcc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = factory35.isIcc(
        (java.lang.Boolean) false);
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern38 = factory35.gedtenprDatabaseNamePattern();
    io.github.onograph.backup.BackupEnvironment.Factory factory39 = factory24.databaseNamePattern(
        databaseNamePattern38);
    io.github.onograph.backup.BackupEnvironment.Factory factory40 = factory19.databaseNamePattern(
        databaseNamePattern38);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(databaseNamePattern38);
    org.junit.Assert.assertNotNull(factory39);
    org.junit.Assert.assertNotNull(factory40);
  }

  @Test
  public void test0428() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0428");
    }
    io.github.onograph.backup.CommandProviderBackupImpl commandProviderBackupImpl0 = new io.github.onograph.backup.CommandProviderBackupImpl();
    int int1 = commandProviderBackupImpl0.getPriority();
    int int2 = commandProviderBackupImpl0.getPriority();
    org.neo4j.cli.Command.CommandType commandType3 = commandProviderBackupImpl0.commandType();
    int int4 = commandProviderBackupImpl0.getPriority();
    org.neo4j.cli.Command.CommandType commandType5 = commandProviderBackupImpl0.commandType();
    org.neo4j.cli.ExecutionContext executionContext6 = null;
    try {
      io.github.onograph.backup.BackupCommand backupCommand7 = commandProviderBackupImpl0.createCommand(
          executionContext6);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    org.junit.Assert.assertTrue(
        "'" + commandType3 + "' != '" + org.neo4j.cli.Command.CommandType.ONLINE_BACKUP + "'",
        commandType3.equals(org.neo4j.cli.Command.CommandType.ONLINE_BACKUP));
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    org.junit.Assert.assertTrue(
        "'" + commandType5 + "' != '" + org.neo4j.cli.Command.CommandType.ONLINE_BACKUP + "'",
        commandType5.equals(org.neo4j.cli.Command.CommandType.ONLINE_BACKUP));
  }

  @Test
  public void test0429() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0429");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    org.neo4j.logging.LogProvider logProvider1 = null;
    org.neo4j.logging.Log log2 = null;
    io.github.onograph.backup.RemoteBackupService remoteBackupService3 = new io.github.onograph.backup.RemoteBackupService(
        fileSystemAbstraction0, logProvider1, log2);
    org.neo4j.configuration.Config config4 = null;
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags5 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction6 = null;
    org.neo4j.logging.LogProvider logProvider7 = null;
    java.nio.file.Path path8 = null;
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory9 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl10 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config4, consistencyFlags5, fileSystemAbstraction6, logProvider7, path8,
        progressMonitorFactory9);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory11.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory11.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory17.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory17.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment23 = factory17.bulBackupEnvironment();
    boolean boolean24 = backupEnvironment23.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional25 = backupEnvironment23.geicmaOptional();
    java.nio.file.Path path26 = backupEnvironment23.getPbPath();
    java.nio.file.Path path27 = backupEnvironment23.getPbPath();
    io.github.onograph.backup.DefaultBackupServiceHandler defaultBackupServiceHandler29 = null;
    io.github.onograph.backup.GdbStoreTransferWatcherRebImpl gdbStoreTransferWatcherRebImpl30 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer31 = null;
    io.github.onograph.backup.RemoteBackupManager remoteBackupManager32 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config34 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = factory33.config(config34);
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = factory35.isRp(true);
    org.neo4j.configuration.Config config38 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory39 = factory37.config(config38);
    org.neo4j.configuration.helpers.SocketAddress socketAddress40 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory37.wihadsBackupEnvironmentFactory(
        socketAddress40);
    org.neo4j.configuration.helpers.SocketAddress socketAddress42 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = factory37.wihadsBackupEnvironmentFactory(
        socketAddress42);
    io.github.onograph.backup.BackupEnvironment.Factory factory46 = factory37.wihadsBackupEnvironmentFactory(
        (int) (short) -1, "hi!");
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = factory37.wihadsBackupEnvironmentFactory(
        0, "hi!");
    io.github.onograph.backup.BackupEnvironment.Factory factory50 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config51 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory52 = factory50.config(config51);
    io.github.onograph.backup.BackupEnvironment.Factory factory54 = factory52.isRp(true);
    org.neo4j.configuration.Config config55 = factory52.gecfConfig();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction56 = null;
    org.neo4j.memory.MemoryTracker memoryTracker57 = null;
    org.neo4j.io.pagecache.PageCache pageCache58 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager59 = new io.github.onograph.backup.BackupRestorationManager(
        config55, fileSystemAbstraction56, memoryTracker57, pageCache58);
    io.github.onograph.backup.BackupEnvironment.Factory factory60 = factory37.config(config55);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction61 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory62 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory64 = factory62.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory66 = factory62.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory68 = factory62.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory70 = factory68.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory73 = factory68.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment74 = factory68.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern75 = backupEnvironment74.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress76 = backupEnvironment74.getSocketAddress();
    java.nio.file.Path path77 = backupEnvironment74.getRpPath();
    boolean boolean78 = backupEnvironment74.getIsBftf();
    java.nio.file.Path path79 = backupEnvironment74.getRpPath();
    org.neo4j.memory.MemoryTracker memoryTracker80 = backupEnvironment74.getMemoryTracker();
    org.neo4j.io.pagecache.PageCache pageCache81 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager82 = new io.github.onograph.backup.BackupRestorationManager(
        config55, fileSystemAbstraction61, memoryTracker80, pageCache81);
    try {
      remoteBackupService3.bakForBaPaBaDeBaReStGd(
          (io.github.onograph.backup.BackupVerificationService) backupVerificationServiceImpl10,
          backupEnvironment23, "hi!", defaultBackupServiceHandler29,
          gdbStoreTransferWatcherRebImpl30, pageCacheTracer31, remoteBackupManager32,
          backupRestorationManager82);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(backupEnvironment23);
    org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional25);
    org.junit.Assert.assertNotNull(path26);
    org.junit.Assert.assertNotNull(path27);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(factory39);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory46);
    org.junit.Assert.assertNotNull(factory49);
    org.junit.Assert.assertNotNull(factory50);
    org.junit.Assert.assertNotNull(factory52);
    org.junit.Assert.assertNotNull(factory54);
    org.junit.Assert.assertNotNull(config55);
    org.junit.Assert.assertNotNull(factory60);
    org.junit.Assert.assertNotNull(factory62);
    org.junit.Assert.assertNotNull(factory64);
    org.junit.Assert.assertNotNull(factory66);
    org.junit.Assert.assertNotNull(factory68);
    org.junit.Assert.assertNotNull(factory70);
    org.junit.Assert.assertNotNull(factory73);
    org.junit.Assert.assertNotNull(backupEnvironment74);
    org.junit.Assert.assertNotNull(databaseNamePattern75);
    org.junit.Assert.assertNotNull(socketAddress76);
    org.junit.Assert.assertNotNull(path77);
    org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    org.junit.Assert.assertNotNull(path79);
    org.junit.Assert.assertNotNull(memoryTracker80);
  }

  @Test
  public void test0430() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0430");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.GdbIdRepo gdbIdRepo1 = new io.github.onograph.backup.GdbIdRepo(
        fileSystemAbstraction0);
    org.neo4j.kernel.database.DatabaseId databaseId2 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory3 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory5 = factory3.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory6.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory6.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory12.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory12.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment18 = factory12.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern19 = backupEnvironment18.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress20 = backupEnvironment18.getSocketAddress();
    java.nio.file.Path path21 = backupEnvironment18.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory3.pbPath(path21);
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory23.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = factory26.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = factory26.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory26.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory32.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = factory32.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment38 = factory32.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern39 = backupEnvironment38.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress40 = backupEnvironment38.getSocketAddress();
    java.nio.file.Path path41 = backupEnvironment38.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory42 = factory23.pbPath(path41);
    io.github.onograph.backup.FileMoverService fileMoverService43 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path21, path41);
    boolean boolean44 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path21);
    try {
      gdbIdRepo1.wrdaiForDaPa(databaseId2, path21);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory3);
    org.junit.Assert.assertNotNull(factory5);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(backupEnvironment18);
    org.junit.Assert.assertNotNull(databaseNamePattern19);
    org.junit.Assert.assertNotNull(socketAddress20);
    org.junit.Assert.assertNotNull(path21);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(backupEnvironment38);
    org.junit.Assert.assertNotNull(databaseNamePattern39);
    org.junit.Assert.assertNotNull(socketAddress40);
    org.junit.Assert.assertNotNull(path41);
    org.junit.Assert.assertNotNull(factory42);
    org.junit.Assert.assertNotNull(fileMoverService43);
    org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
  }

  @Test
  public void test0431() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0431");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory6.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment12 = factory6.bulBackupEnvironment();
    boolean boolean13 = backupEnvironment12.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional14 = backupEnvironment12.geicmaOptional();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional15 = backupEnvironment12.geicmaOptional();
    java.nio.file.Path path16 = backupEnvironment12.getRpPath();
    org.neo4j.configuration.helpers.SocketAddress socketAddress17 = backupEnvironment12.getSocketAddress();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(backupEnvironment12);
    org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional14);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional15);
    org.junit.Assert.assertNotNull(path16);
    org.junit.Assert.assertNotNull(socketAddress17);
  }

  @Test
  public void test0432() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0432");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup("hi!");
    io.github.onograph.backup.Backup backup3 = backup1.isCc(false);
    io.github.onograph.backup.Backup backup5 = backup1.isCc(false);
    java.io.OutputStream outputStream6 = null;
    try {
      io.github.onograph.backup.Backup backup7 = backup5.outputStream(outputStream6);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: outputStream");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(backup3);
    org.junit.Assert.assertNotNull(backup5);
  }

  @Test
  public void test0433() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0433");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isSicc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory0.isSicc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory0.isRp(false);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
  }

  @Test
  public void test0434() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0434");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory6.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment12 = factory6.bulBackupEnvironment();
    org.neo4j.memory.MemoryTracker memoryTracker13 = backupEnvironment12.getMemoryTracker();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern14 = backupEnvironment12.getDatabaseNamePattern();
    boolean boolean15 = backupEnvironment12.getIsBftf();
    java.nio.file.Path path16 = backupEnvironment12.getRpPath();
    boolean boolean17 = backupEnvironment12.getIsCc();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(backupEnvironment12);
    org.junit.Assert.assertNotNull(memoryTracker13);
    org.junit.Assert.assertNotNull(databaseNamePattern14);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    org.junit.Assert.assertNotNull(path16);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
  }

  @Test
  public void test0435() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0435");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupIOService backupIOService1 = new io.github.onograph.backup.BackupIOService(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory8.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment14 = factory8.bulBackupEnvironment();
    org.neo4j.memory.MemoryTracker memoryTracker15 = backupEnvironment14.getMemoryTracker();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern16 = backupEnvironment14.getDatabaseNamePattern();
    boolean boolean17 = backupEnvironment14.getIsBftf();
    org.neo4j.configuration.helpers.SocketAddress socketAddress18 = backupEnvironment14.getSocketAddress();
    java.nio.file.Path path19 = backupEnvironment14.getRpPath();
    java.nio.file.Path path20 = backupEnvironment14.getRpPath();
    try {
      boolean boolean21 = backupIOService1.isExsForPa(path20);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(backupEnvironment14);
    org.junit.Assert.assertNotNull(memoryTracker15);
    org.junit.Assert.assertNotNull(databaseNamePattern16);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    org.junit.Assert.assertNotNull(socketAddress18);
    org.junit.Assert.assertNotNull(path19);
    org.junit.Assert.assertNotNull(path20);
  }

  @Test
  public void test0436() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0436");
    }
    io.github.onograph.backup.BackupMetaDTO backupMetaDTO0 = null;
    java.lang.String[] strArray3 = new java.lang.String[]{"", "hi!"};
    java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
    boolean boolean5 = java.util.Collections.addAll(
        (java.util.Collection<java.lang.String>) strList4, strArray3);
    try {
      io.github.onograph.backup.BackupMetaService.wrtmedaForBaLi(backupMetaDTO0,
          (java.util.List<java.lang.String>) strList4);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(strArray3);
    org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
  }

  @Test
  public void test0437() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0437");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.config(config5);
    org.neo4j.configuration.helpers.SocketAddress socketAddress7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress7);
    org.neo4j.configuration.helpers.SocketAddress socketAddress9 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress9);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory4.wihadsBackupEnvironmentFactory(
        (int) (short) -1, "hi!");
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory4.wihadsBackupEnvironmentFactory(
        0, "hi!");
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory4.isRp(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory19.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory19.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory19.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory25.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = factory25.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment31 = factory25.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern32 = backupEnvironment31.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress33 = backupEnvironment31.getSocketAddress();
    java.nio.file.Path path34 = backupEnvironment31.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = factory35.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory39 = factory35.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory35.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = factory41.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory46 = factory41.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment47 = factory41.bulBackupEnvironment();
    boolean boolean48 = backupEnvironment47.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional49 = backupEnvironment47.geicmaOptional();
    java.nio.file.Path path50 = backupEnvironment47.getPbPath();
    java.nio.file.Path path51 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path50);
    java.nio.file.Path path52 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path51);
    boolean boolean53 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path52);
    io.github.onograph.backup.BackupEnvironment.Factory factory54 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory56 = factory54.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory58 = factory54.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory60 = factory54.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory62 = factory60.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory65 = factory60.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment66 = factory60.bulBackupEnvironment();
    boolean boolean67 = backupEnvironment66.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional68 = backupEnvironment66.geicmaOptional();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional69 = backupEnvironment66.geicmaOptional();
    java.nio.file.Path path70 = backupEnvironment66.getPbPath();
    java.nio.file.Path path71 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path70);
    io.github.onograph.backup.FileMoverService fileMoverService72 = io.github.onograph.backup.FileMoverService.movifeseFileMoverService(
        path52, path71);
    io.github.onograph.backup.FileMoverService fileMoverService73 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path34, path52);
    io.github.onograph.backup.BackupEnvironment.Factory factory74 = factory18.prPath(path52);
    boolean boolean75 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path52);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(backupEnvironment31);
    org.junit.Assert.assertNotNull(databaseNamePattern32);
    org.junit.Assert.assertNotNull(socketAddress33);
    org.junit.Assert.assertNotNull(path34);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(factory39);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory46);
    org.junit.Assert.assertNotNull(backupEnvironment47);
    org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional49);
    org.junit.Assert.assertNotNull(path50);
    org.junit.Assert.assertNotNull(path51);
    org.junit.Assert.assertNotNull(path52);
    org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    org.junit.Assert.assertNotNull(factory54);
    org.junit.Assert.assertNotNull(factory56);
    org.junit.Assert.assertNotNull(factory58);
    org.junit.Assert.assertNotNull(factory60);
    org.junit.Assert.assertNotNull(factory62);
    org.junit.Assert.assertNotNull(factory65);
    org.junit.Assert.assertNotNull(backupEnvironment66);
    org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional68);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional69);
    org.junit.Assert.assertNotNull(path70);
    org.junit.Assert.assertNotNull(path71);
    org.junit.Assert.assertNotNull(fileMoverService72);
    org.junit.Assert.assertNotNull(fileMoverService73);
    org.junit.Assert.assertNotNull(factory74);
    org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
  }

  @Test
  public void test0438() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0438");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = factory2.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory2.isCc(true);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions8 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory2.miAuthMetaOptions(
        authMetaOptions8);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory10.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory10.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory10.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory16.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory16.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment22 = factory16.bulBackupEnvironment();
    boolean boolean23 = backupEnvironment22.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional24 = backupEnvironment22.geicmaOptional();
    java.nio.file.Path path25 = backupEnvironment22.getPbPath();
    java.nio.file.Path path26 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path25);
    java.nio.file.Path path27 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path26);
    boolean boolean28 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path27);
    java.nio.file.Path path29 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path27);
    java.nio.file.Path path30 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path29);
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory31.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory34.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = factory34.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory40 = factory34.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory42 = factory40.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = factory40.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment46 = factory40.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern47 = backupEnvironment46.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress48 = backupEnvironment46.getSocketAddress();
    java.nio.file.Path path49 = backupEnvironment46.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory50 = factory31.pbPath(path49);
    io.github.onograph.backup.BackupEnvironment.Factory factory51 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory53 = factory51.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory54 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory56 = factory54.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory58 = factory54.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory60 = factory54.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory62 = factory60.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory65 = factory60.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment66 = factory60.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern67 = backupEnvironment66.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress68 = backupEnvironment66.getSocketAddress();
    java.nio.file.Path path69 = backupEnvironment66.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory70 = factory51.pbPath(path69);
    io.github.onograph.backup.FileMoverService fileMoverService71 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path49, path69);
    java.nio.file.Path path72 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path69);
    io.github.onograph.backup.FileMoverService fileMoverService73 = io.github.onograph.backup.FileMoverService.movifeseFileMoverService(
        path29, path72);
    java.nio.file.Path path74 = fileMoverService73.filPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory75 = factory2.prPath(path74);
    io.github.onograph.backup.BackupEnvironment.Factory factory76 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config77 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory78 = factory76.config(config77);
    io.github.onograph.backup.BackupEnvironment.Factory factory80 = factory78.isRp(true);
    org.neo4j.configuration.Config config81 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory82 = factory80.config(config81);
    org.neo4j.configuration.helpers.SocketAddress socketAddress83 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory84 = factory80.wihadsBackupEnvironmentFactory(
        socketAddress83);
    org.neo4j.configuration.helpers.SocketAddress socketAddress85 = factory80.getSocketAddress();
    io.github.onograph.backup.BackupEnvironment.Factory factory87 = factory80.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory89 = factory87.isIcc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment backupEnvironment90 = factory89.bulBackupEnvironment();
    java.nio.file.Path path91 = backupEnvironment90.getPbPath();
    io.github.onograph.backup.FileMoverService fileMoverService92 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path74, path91);
    java.nio.file.Path path93 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path74);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(config5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(backupEnvironment22);
    org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional24);
    org.junit.Assert.assertNotNull(path25);
    org.junit.Assert.assertNotNull(path26);
    org.junit.Assert.assertNotNull(path27);
    org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    org.junit.Assert.assertNotNull(path29);
    org.junit.Assert.assertNotNull(path30);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(factory40);
    org.junit.Assert.assertNotNull(factory42);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(backupEnvironment46);
    org.junit.Assert.assertNotNull(databaseNamePattern47);
    org.junit.Assert.assertNotNull(socketAddress48);
    org.junit.Assert.assertNotNull(path49);
    org.junit.Assert.assertNotNull(factory50);
    org.junit.Assert.assertNotNull(factory51);
    org.junit.Assert.assertNotNull(factory53);
    org.junit.Assert.assertNotNull(factory54);
    org.junit.Assert.assertNotNull(factory56);
    org.junit.Assert.assertNotNull(factory58);
    org.junit.Assert.assertNotNull(factory60);
    org.junit.Assert.assertNotNull(factory62);
    org.junit.Assert.assertNotNull(factory65);
    org.junit.Assert.assertNotNull(backupEnvironment66);
    org.junit.Assert.assertNotNull(databaseNamePattern67);
    org.junit.Assert.assertNotNull(socketAddress68);
    org.junit.Assert.assertNotNull(path69);
    org.junit.Assert.assertNotNull(factory70);
    org.junit.Assert.assertNotNull(fileMoverService71);
    org.junit.Assert.assertNotNull(path72);
    org.junit.Assert.assertNotNull(fileMoverService73);
    org.junit.Assert.assertNotNull(path74);
    org.junit.Assert.assertNotNull(factory75);
    org.junit.Assert.assertNotNull(factory76);
    org.junit.Assert.assertNotNull(factory78);
    org.junit.Assert.assertNotNull(factory80);
    org.junit.Assert.assertNotNull(factory82);
    org.junit.Assert.assertNotNull(factory84);
    org.junit.Assert.assertNull(socketAddress85);
    org.junit.Assert.assertNotNull(factory87);
    org.junit.Assert.assertNotNull(factory89);
    org.junit.Assert.assertNotNull(backupEnvironment90);
    org.junit.Assert.assertNotNull(path91);
    org.junit.Assert.assertNotNull(fileMoverService92);
    org.junit.Assert.assertNotNull(path93);
  }

  @Test
  public void test0439() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0439");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isSicc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory0.isGcc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isSicc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory11.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory11.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory17.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory17.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment23 = factory17.bulBackupEnvironment();
    boolean boolean24 = backupEnvironment23.getIsRp();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional25 = backupEnvironment23.geicmaOptional();
    org.neo4j.configuration.helpers.SocketAddress socketAddress26 = backupEnvironment23.getSocketAddress();
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory10.wihadsBackupEnvironmentFactory(
        socketAddress26);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(backupEnvironment23);
    org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional25);
    org.junit.Assert.assertNotNull(socketAddress26);
    org.junit.Assert.assertNotNull(factory27);
  }

  @Test
  public void test0440() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0440");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.config(config5);
    org.neo4j.configuration.helpers.SocketAddress socketAddress7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress7);
    org.neo4j.configuration.helpers.SocketAddress socketAddress9 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress9);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory4.isGcc(
        (java.lang.Boolean) true);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions13 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory4.miAuthMetaOptions(
        authMetaOptions13);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions15 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory4.miAuthMetaOptions(
        authMetaOptions15);
    org.neo4j.configuration.Config config17 = factory4.gecfConfig();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(config17);
  }

  @Test
  public void test0441() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0441");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.miAuthMetaOptions(
        authMetaOptions3);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isCc(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory7.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory7.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory7.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory13.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory13.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment19 = factory13.bulBackupEnvironment();
    boolean boolean20 = backupEnvironment19.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional21 = backupEnvironment19.geicmaOptional();
    java.nio.file.Path path22 = backupEnvironment19.getPbPath();
    java.nio.file.Path path23 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path22);
    java.nio.file.Path path24 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path23);
    boolean boolean25 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path24);
    java.nio.file.Path path26 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path24);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory27.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory27.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory27.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = factory33.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = factory33.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment39 = factory33.bulBackupEnvironment();
    boolean boolean40 = backupEnvironment39.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional41 = backupEnvironment39.geicmaOptional();
    java.nio.file.Path path42 = backupEnvironment39.getPbPath();
    java.nio.file.Path path43 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path42);
    java.nio.file.Path path44 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path43);
    io.github.onograph.backup.FileMoverService fileMoverService45 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path24, path43);
    io.github.onograph.backup.BackupEnvironment.Factory factory46 = factory4.prPath(path43);
    io.github.onograph.backup.BackupEnvironment.Factory factory48 = factory46.isRp(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory50 = factory46.shouldPrep(false);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(backupEnvironment19);
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional21);
    org.junit.Assert.assertNotNull(path22);
    org.junit.Assert.assertNotNull(path23);
    org.junit.Assert.assertNotNull(path24);
    org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    org.junit.Assert.assertNotNull(path26);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(backupEnvironment39);
    org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional41);
    org.junit.Assert.assertNotNull(path42);
    org.junit.Assert.assertNotNull(path43);
    org.junit.Assert.assertNotNull(path44);
    org.junit.Assert.assertNotNull(fileMoverService45);
    org.junit.Assert.assertNotNull(factory46);
    org.junit.Assert.assertNotNull(factory48);
    org.junit.Assert.assertNotNull(factory50);
  }

  @Test
  public void test0442() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0442");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory6.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment12 = factory6.bulBackupEnvironment();
    boolean boolean13 = backupEnvironment12.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional14 = backupEnvironment12.geicmaOptional();
    java.nio.file.Path path15 = backupEnvironment12.getPbPath();
    java.nio.file.Path path16 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path15);
    java.nio.file.Path path17 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path16);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory18.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory18.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory18.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory24.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory24.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment30 = factory24.bulBackupEnvironment();
    boolean boolean31 = backupEnvironment30.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional32 = backupEnvironment30.geicmaOptional();
    java.nio.file.Path path33 = backupEnvironment30.getPbPath();
    java.nio.file.Path path34 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path33);
    io.github.onograph.backup.FileMoverService fileMoverService35 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path16, path34);
    java.nio.file.Path path36 = fileMoverService35.filPath();
    java.nio.file.Path path37 = fileMoverService35.filPath();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(backupEnvironment12);
    org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional14);
    org.junit.Assert.assertNotNull(path15);
    org.junit.Assert.assertNotNull(path16);
    org.junit.Assert.assertNotNull(path17);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(backupEnvironment30);
    org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional32);
    org.junit.Assert.assertNotNull(path33);
    org.junit.Assert.assertNotNull(path34);
    org.junit.Assert.assertNotNull(fileMoverService35);
    org.junit.Assert.assertNotNull(path36);
    org.junit.Assert.assertNotNull(path37);
  }

  @Test
  public void test0443() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0443");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory6.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment12 = factory6.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern13 = backupEnvironment12.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress14 = backupEnvironment12.getSocketAddress();
    java.nio.file.Path path15 = backupEnvironment12.getRpPath();
    boolean boolean16 = backupEnvironment12.getIsBftf();
    java.nio.file.Path path17 = backupEnvironment12.getRpPath();
    org.neo4j.memory.MemoryTracker memoryTracker18 = backupEnvironment12.getMemoryTracker();
    java.nio.file.Path path19 = backupEnvironment12.getRpPath();
    org.neo4j.configuration.helpers.SocketAddress socketAddress20 = backupEnvironment12.getSocketAddress();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(backupEnvironment12);
    org.junit.Assert.assertNotNull(databaseNamePattern13);
    org.junit.Assert.assertNotNull(socketAddress14);
    org.junit.Assert.assertNotNull(path15);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    org.junit.Assert.assertNotNull(path17);
    org.junit.Assert.assertNotNull(memoryTracker18);
    org.junit.Assert.assertNotNull(path19);
    org.junit.Assert.assertNotNull(socketAddress20);
  }

  @Test
  public void test0444() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0444");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.time.SystemNanoClock systemNanoClock5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator2.systemNanoClock(
        systemNanoClock5);
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory7 = null;
    io.github.onograph.backup.BackupRunner.Generator generator8 = generator2.progressMonitorFactory(
        progressMonitorFactory7);
    org.neo4j.time.SystemNanoClock systemNanoClock9 = null;
    io.github.onograph.backup.BackupRunner.Generator generator10 = generator2.systemNanoClock(
        systemNanoClock9);
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(generator8);
    org.junit.Assert.assertNotNull(generator10);
  }

  @Test
  public void test0445() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0445");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.FileMover fileMover1 = new io.github.onograph.backup.FileMover(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory8.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment14 = factory8.bulBackupEnvironment();
    boolean boolean15 = backupEnvironment14.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional16 = backupEnvironment14.geicmaOptional();
    java.nio.file.Path path17 = backupEnvironment14.getPbPath();
    java.nio.file.Path path18 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path17);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream19 = fileMover1._trrfrmnStream(
        path17);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory20.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory23.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory23.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory23.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory29.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory29.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment35 = factory29.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern36 = backupEnvironment35.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress37 = backupEnvironment35.getSocketAddress();
    java.nio.file.Path path38 = backupEnvironment35.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory39 = factory20.pbPath(path38);
    io.github.onograph.backup.BackupEnvironment.Factory factory40 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory42 = factory40.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = factory43.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = factory43.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = factory43.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory51 = factory49.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory54 = factory49.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment55 = factory49.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern56 = backupEnvironment55.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress57 = backupEnvironment55.getSocketAddress();
    java.nio.file.Path path58 = backupEnvironment55.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory59 = factory40.pbPath(path58);
    io.github.onograph.backup.FileMoverService fileMoverService60 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path38, path58);
    java.nio.file.Path path61 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path38);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream62 = fileMover1._trrfrmnStream(
        path61);
    io.github.onograph.backup.BackupEnvironment.Factory factory63 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory65 = factory63.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory67 = factory63.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory69 = factory63.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory71 = factory69.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory74 = factory69.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment75 = factory69.bulBackupEnvironment();
    boolean boolean76 = backupEnvironment75.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional77 = backupEnvironment75.geicmaOptional();
    java.nio.file.Path path78 = backupEnvironment75.getPbPath();
    java.nio.file.Path path79 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path78);
    java.nio.file.Path path80 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path79);
    io.github.onograph.backup.BackupEnvironment.Factory factory81 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory83 = factory81.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory85 = factory81.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory87 = factory81.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory89 = factory87.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory92 = factory87.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment93 = factory87.bulBackupEnvironment();
    boolean boolean94 = backupEnvironment93.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional95 = backupEnvironment93.geicmaOptional();
    java.nio.file.Path path96 = backupEnvironment93.getPbPath();
    java.nio.file.Path path97 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path96);
    io.github.onograph.backup.FileMoverService fileMoverService98 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path79, path97);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream99 = fileMover1._trrfrmnStream(
        path79);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(backupEnvironment14);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional16);
    org.junit.Assert.assertNotNull(path17);
    org.junit.Assert.assertNotNull(path18);
    org.junit.Assert.assertNotNull(fileMoverServiceStream19);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(backupEnvironment35);
    org.junit.Assert.assertNotNull(databaseNamePattern36);
    org.junit.Assert.assertNotNull(socketAddress37);
    org.junit.Assert.assertNotNull(path38);
    org.junit.Assert.assertNotNull(factory39);
    org.junit.Assert.assertNotNull(factory40);
    org.junit.Assert.assertNotNull(factory42);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory49);
    org.junit.Assert.assertNotNull(factory51);
    org.junit.Assert.assertNotNull(factory54);
    org.junit.Assert.assertNotNull(backupEnvironment55);
    org.junit.Assert.assertNotNull(databaseNamePattern56);
    org.junit.Assert.assertNotNull(socketAddress57);
    org.junit.Assert.assertNotNull(path58);
    org.junit.Assert.assertNotNull(factory59);
    org.junit.Assert.assertNotNull(fileMoverService60);
    org.junit.Assert.assertNotNull(path61);
    org.junit.Assert.assertNotNull(fileMoverServiceStream62);
    org.junit.Assert.assertNotNull(factory63);
    org.junit.Assert.assertNotNull(factory65);
    org.junit.Assert.assertNotNull(factory67);
    org.junit.Assert.assertNotNull(factory69);
    org.junit.Assert.assertNotNull(factory71);
    org.junit.Assert.assertNotNull(factory74);
    org.junit.Assert.assertNotNull(backupEnvironment75);
    org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional77);
    org.junit.Assert.assertNotNull(path78);
    org.junit.Assert.assertNotNull(path79);
    org.junit.Assert.assertNotNull(path80);
    org.junit.Assert.assertNotNull(factory81);
    org.junit.Assert.assertNotNull(factory83);
    org.junit.Assert.assertNotNull(factory85);
    org.junit.Assert.assertNotNull(factory87);
    org.junit.Assert.assertNotNull(factory89);
    org.junit.Assert.assertNotNull(factory92);
    org.junit.Assert.assertNotNull(backupEnvironment93);
    org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional95);
    org.junit.Assert.assertNotNull(path96);
    org.junit.Assert.assertNotNull(path97);
    org.junit.Assert.assertNotNull(fileMoverService98);
    org.junit.Assert.assertNotNull(fileMoverServiceStream99);
  }

  @Test
  public void test0446() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0446");
    }
    io.github.onograph.backup.Backup backup1 = io.github.onograph.backup.Backup.froBackup("");
    io.github.onograph.backup.Backup backup3 = backup1.isCc(true);
    io.github.onograph.backup.Backup backup5 = backup3.isCc(true);
    io.github.onograph.backup.Backup backup7 = backup5.isCc(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory9.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory9.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory15.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory15.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment21 = factory15.bulBackupEnvironment();
    boolean boolean22 = backupEnvironment21.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional23 = backupEnvironment21.geicmaOptional();
    java.nio.file.Path path24 = backupEnvironment21.getPbPath();
    java.nio.file.Path path25 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path24);
    java.nio.file.Path path26 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path25);
    boolean boolean27 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path26);
    java.nio.file.Path path28 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path26);
    java.nio.file.Path path29 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path28);
    java.nio.file.Path path30 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path29);
    try {
      io.github.onograph.backup.Backup.BackupRespState backupRespState31 = backup5.bakBackupBackupRespState(
          "", path29);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.RuntimeException; message: *** Error:  3b02b00a-232a-454b-823b-025cc97a58b8");
    } catch (java.lang.RuntimeException e) {
    }
    org.junit.Assert.assertNotNull(backup1);
    org.junit.Assert.assertNotNull(backup3);
    org.junit.Assert.assertNotNull(backup5);
    org.junit.Assert.assertNotNull(backup7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(backupEnvironment21);
    org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional23);
    org.junit.Assert.assertNotNull(path24);
    org.junit.Assert.assertNotNull(path25);
    org.junit.Assert.assertNotNull(path26);
    org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    org.junit.Assert.assertNotNull(path28);
    org.junit.Assert.assertNotNull(path29);
    org.junit.Assert.assertNotNull(path30);
  }

  @Test
  public void test0447() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0447");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator2.fFileSystemAbstraction(
        fileSystemAbstraction5);
    io.github.onograph.backup.BackupRunner backupRunner7 = generator6.bulBackupRunner();
    org.neo4j.logging.LogProvider logProvider8 = null;
    io.github.onograph.backup.BackupRunner.Generator generator9 = generator6.itraLogProvider(
        logProvider8);
    org.neo4j.time.SystemNanoClock systemNanoClock10 = null;
    io.github.onograph.backup.BackupRunner.Generator generator11 = generator9.systemNanoClock(
        systemNanoClock10);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction12 = null;
    io.github.onograph.backup.BackupRunner.Generator generator13 = generator11.fFileSystemAbstraction(
        fileSystemAbstraction12);
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(backupRunner7);
    org.junit.Assert.assertNotNull(generator9);
    org.junit.Assert.assertNotNull(generator11);
    org.junit.Assert.assertNotNull(generator13);
  }

  @Test
  public void test0448() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0448");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory6.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment12 = factory6.bulBackupEnvironment();
    boolean boolean13 = backupEnvironment12.getIsRp();
    boolean boolean14 = backupEnvironment12.getIsBftf();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(backupEnvironment12);
    org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
  }

  @Test
  public void test0449() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0449");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.GdbIdRepo gdbIdRepo1 = new io.github.onograph.backup.GdbIdRepo(
        fileSystemAbstraction0);
    org.neo4j.kernel.database.DatabaseId databaseId2 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory3 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory5 = factory3.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory3.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory3.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory9.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment15 = factory9.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern16 = backupEnvironment15.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress17 = backupEnvironment15.getSocketAddress();
    java.nio.file.Path path18 = backupEnvironment15.getRpPath();
    boolean boolean19 = backupEnvironment15.getIsBftf();
    java.nio.file.Path path20 = backupEnvironment15.getRpPath();
    org.neo4j.memory.MemoryTracker memoryTracker21 = backupEnvironment15.getMemoryTracker();
    java.nio.file.Path path22 = backupEnvironment15.getRpPath();
    java.nio.file.Path path23 = backupEnvironment15.getRpPath();
    try {
      gdbIdRepo1.wrdaiForDaPa(databaseId2, path23);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory3);
    org.junit.Assert.assertNotNull(factory5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(backupEnvironment15);
    org.junit.Assert.assertNotNull(databaseNamePattern16);
    org.junit.Assert.assertNotNull(socketAddress17);
    org.junit.Assert.assertNotNull(path18);
    org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    org.junit.Assert.assertNotNull(path20);
    org.junit.Assert.assertNotNull(memoryTracker21);
    org.junit.Assert.assertNotNull(path22);
    org.junit.Assert.assertNotNull(path23);
  }

  @Test
  public void test0450() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0450");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    java.nio.file.Path path3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.prPath(path3);
    org.neo4j.configuration.helpers.SocketAddress socketAddress5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress5);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.isSicc(
        (java.lang.Boolean) true);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions9 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.miAuthMetaOptions(
        authMetaOptions9);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory8.wihadsBackupEnvironmentFactory(
        (int) (short) 0, "");
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory13.databaseNamePattern(
        "database.id");
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory13.isIcc(
        (java.lang.Boolean) true);
    org.neo4j.configuration.Config config18 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory17.config(config18);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
  }

  @Test
  public void test0451() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0451");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.logging.LogProvider logProvider5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator2.itraLogProvider(
        logProvider5);
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory7 = null;
    io.github.onograph.backup.BackupRunner.Generator generator8 = generator6.progressMonitorFactory(
        progressMonitorFactory7);
    io.github.onograph.backup.BackupRunner backupRunner9 = generator8.bulBackupRunner();
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory10.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory10.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory10.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory16.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory16.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment22 = factory16.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern23 = backupEnvironment22.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress24 = backupEnvironment22.getSocketAddress();
    java.nio.file.Path path25 = backupEnvironment22.getRpPath();
    boolean boolean26 = backupEnvironment22.getIsBftf();
    try {
      backupRunner9.excebcpForBa(backupEnvironment22);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(generator8);
    org.junit.Assert.assertNotNull(backupRunner9);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(backupEnvironment22);
    org.junit.Assert.assertNotNull(databaseNamePattern23);
    org.junit.Assert.assertNotNull(socketAddress24);
    org.junit.Assert.assertNotNull(path25);
    org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
  }

  @Test
  public void test0452() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0452");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config10 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.config(config10);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isRp(true);
    org.neo4j.configuration.Config config14 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory13.config(config14);
    org.neo4j.configuration.helpers.SocketAddress socketAddress16 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory13.wihadsBackupEnvironmentFactory(
        socketAddress16);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config19 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory18.config(config19);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory20.isRp(true);
    org.neo4j.configuration.Config config23 = factory20.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory13.config(config23);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory8.config(config23);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction26 = null;
    org.neo4j.memory.MemoryTracker memoryTracker27 = null;
    org.neo4j.io.pagecache.PageCache pageCache28 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager29 = new io.github.onograph.backup.BackupRestorationManager(
        config23, fileSystemAbstraction26, memoryTracker27, pageCache28);
    org.neo4j.io.layout.DatabaseLayout databaseLayout30 = null;
    try {
      backupRestorationManager29.reorForDa(databaseLayout30);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(config23);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory25);
  }

  @Test
  public void test0453() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0453");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.GdbIdRepo gdbIdRepo1 = new io.github.onograph.backup.GdbIdRepo(
        fileSystemAbstraction0);
    org.neo4j.kernel.database.DatabaseId databaseId2 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory3 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory5 = factory3.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory3.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory3.isIcc(
        (java.lang.Boolean) true);
    java.nio.file.Path path10 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory3.pbPath(path10);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory12.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory12.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory12.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory18.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory18.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment24 = factory18.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern25 = backupEnvironment24.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress26 = backupEnvironment24.getSocketAddress();
    java.nio.file.Path path27 = backupEnvironment24.getRpPath();
    boolean boolean28 = backupEnvironment24.getIsBftf();
    java.nio.file.Path path29 = backupEnvironment24.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = factory11.prPath(path29);
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory31.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = factory31.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = factory31.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory39 = factory37.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory42 = factory37.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment43 = factory37.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern44 = backupEnvironment43.getDatabaseNamePattern();
    boolean boolean45 = backupEnvironment43.getIsBftf();
    boolean boolean46 = backupEnvironment43.getIsBftf();
    java.nio.file.Path path47 = backupEnvironment43.getRpPath();
    io.github.onograph.backup.FileMoverService fileMoverService48 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path29, path47);
    try {
      gdbIdRepo1.wrdaiForDaPa(databaseId2, path29);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory3);
    org.junit.Assert.assertNotNull(factory5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(backupEnvironment24);
    org.junit.Assert.assertNotNull(databaseNamePattern25);
    org.junit.Assert.assertNotNull(socketAddress26);
    org.junit.Assert.assertNotNull(path27);
    org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    org.junit.Assert.assertNotNull(path29);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(factory39);
    org.junit.Assert.assertNotNull(factory42);
    org.junit.Assert.assertNotNull(backupEnvironment43);
    org.junit.Assert.assertNotNull(databaseNamePattern44);
    org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    org.junit.Assert.assertNotNull(path47);
    org.junit.Assert.assertNotNull(fileMoverService48);
  }

  @Test
  public void test0454() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0454");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.logging.LogProvider logProvider5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator2.itraLogProvider(
        logProvider5);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction7 = null;
    io.github.onograph.backup.BackupRunner.Generator generator8 = generator2.fFileSystemAbstraction(
        fileSystemAbstraction7);
    org.neo4j.logging.LogProvider logProvider9 = null;
    io.github.onograph.backup.BackupRunner.Generator generator10 = generator8.itraLogProvider(
        logProvider9);
    org.neo4j.time.SystemNanoClock systemNanoClock11 = null;
    io.github.onograph.backup.BackupRunner.Generator generator12 = generator10.systemNanoClock(
        systemNanoClock11);
    org.neo4j.logging.LogProvider logProvider13 = null;
    io.github.onograph.backup.BackupRunner.Generator generator14 = generator12.itraLogProvider(
        logProvider13);
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(generator8);
    org.junit.Assert.assertNotNull(generator10);
    org.junit.Assert.assertNotNull(generator12);
    org.junit.Assert.assertNotNull(generator14);
  }

  @Test
  public void test0455() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0455");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory3 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory5 = factory3.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory3.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory3.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory9.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment15 = factory9.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern16 = backupEnvironment15.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress17 = backupEnvironment15.getSocketAddress();
    java.nio.file.Path path18 = backupEnvironment15.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory0.pbPath(path18);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory20.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory23.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory23.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory23.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory29.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory29.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment35 = factory29.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern36 = backupEnvironment35.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress37 = backupEnvironment35.getSocketAddress();
    java.nio.file.Path path38 = backupEnvironment35.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory39 = factory20.pbPath(path38);
    io.github.onograph.backup.FileMoverService fileMoverService40 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path18, path38);
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = factory41.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory44 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory46 = factory44.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory48 = factory44.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory50 = factory44.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory52 = factory50.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory55 = factory50.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment56 = factory50.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern57 = backupEnvironment56.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress58 = backupEnvironment56.getSocketAddress();
    java.nio.file.Path path59 = backupEnvironment56.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory60 = factory41.pbPath(path59);
    io.github.onograph.backup.BackupEnvironment.Factory factory61 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory63 = factory61.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory64 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory66 = factory64.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory68 = factory64.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory70 = factory64.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory72 = factory70.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory75 = factory70.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment76 = factory70.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern77 = backupEnvironment76.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress78 = backupEnvironment76.getSocketAddress();
    java.nio.file.Path path79 = backupEnvironment76.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory80 = factory61.pbPath(path79);
    io.github.onograph.backup.FileMoverService fileMoverService81 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path59, path79);
    java.nio.file.Path path82 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path79);
    java.nio.file.CopyOption copyOption83 = null;
    java.nio.file.CopyOption[] copyOptionArray84 = new java.nio.file.CopyOption[]{copyOption83};
    try {
      fileMoverService40.movForPaCo(path79, copyOptionArray84);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory3);
    org.junit.Assert.assertNotNull(factory5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(backupEnvironment15);
    org.junit.Assert.assertNotNull(databaseNamePattern16);
    org.junit.Assert.assertNotNull(socketAddress17);
    org.junit.Assert.assertNotNull(path18);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(backupEnvironment35);
    org.junit.Assert.assertNotNull(databaseNamePattern36);
    org.junit.Assert.assertNotNull(socketAddress37);
    org.junit.Assert.assertNotNull(path38);
    org.junit.Assert.assertNotNull(factory39);
    org.junit.Assert.assertNotNull(fileMoverService40);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory44);
    org.junit.Assert.assertNotNull(factory46);
    org.junit.Assert.assertNotNull(factory48);
    org.junit.Assert.assertNotNull(factory50);
    org.junit.Assert.assertNotNull(factory52);
    org.junit.Assert.assertNotNull(factory55);
    org.junit.Assert.assertNotNull(backupEnvironment56);
    org.junit.Assert.assertNotNull(databaseNamePattern57);
    org.junit.Assert.assertNotNull(socketAddress58);
    org.junit.Assert.assertNotNull(path59);
    org.junit.Assert.assertNotNull(factory60);
    org.junit.Assert.assertNotNull(factory61);
    org.junit.Assert.assertNotNull(factory63);
    org.junit.Assert.assertNotNull(factory64);
    org.junit.Assert.assertNotNull(factory66);
    org.junit.Assert.assertNotNull(factory68);
    org.junit.Assert.assertNotNull(factory70);
    org.junit.Assert.assertNotNull(factory72);
    org.junit.Assert.assertNotNull(factory75);
    org.junit.Assert.assertNotNull(backupEnvironment76);
    org.junit.Assert.assertNotNull(databaseNamePattern77);
    org.junit.Assert.assertNotNull(socketAddress78);
    org.junit.Assert.assertNotNull(path79);
    org.junit.Assert.assertNotNull(factory80);
    org.junit.Assert.assertNotNull(fileMoverService81);
    org.junit.Assert.assertNotNull(path82);
    org.junit.Assert.assertNotNull(copyOptionArray84);
  }

  @Test
  public void test0456() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0456");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.config(config5);
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory7.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory7.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory7.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory13.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory13.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory18.isFtfb(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory20.isRp(false);
    java.nio.file.Path path23 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory20.prPath(path23);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config26 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory25.config(config26);
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory27.isRp(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory27.isSicc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory27.isFtfb(false);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions34 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = factory27.miAuthMetaOptions(
        authMetaOptions34);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = factory36.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory40 = factory36.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory42 = factory36.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory44 = factory42.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = factory42.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment48 = factory42.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern49 = backupEnvironment48.getDatabaseNamePattern();
    boolean boolean50 = backupEnvironment48.getIsBftf();
    org.neo4j.configuration.helpers.SocketAddress socketAddress51 = backupEnvironment48.getSocketAddress();
    io.github.onograph.backup.BackupEnvironment.Factory factory52 = factory35.wihadsBackupEnvironmentFactory(
        socketAddress51);
    io.github.onograph.backup.BackupEnvironment.Factory factory53 = factory20.wihadsBackupEnvironmentFactory(
        socketAddress51);
    io.github.onograph.backup.BackupEnvironment.Factory factory54 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress51);
    io.github.onograph.backup.BackupEnvironment.Factory factory56 = factory54.shouldPrep(false);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(factory40);
    org.junit.Assert.assertNotNull(factory42);
    org.junit.Assert.assertNotNull(factory44);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(backupEnvironment48);
    org.junit.Assert.assertNotNull(databaseNamePattern49);
    org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    org.junit.Assert.assertNotNull(socketAddress51);
    org.junit.Assert.assertNotNull(factory52);
    org.junit.Assert.assertNotNull(factory53);
    org.junit.Assert.assertNotNull(factory54);
    org.junit.Assert.assertNotNull(factory56);
  }

  @Test
  public void test0457() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0457");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory6.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment12 = factory6.bulBackupEnvironment();
    boolean boolean13 = backupEnvironment12.getIsRp();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional14 = backupEnvironment12.geicmaOptional();
    boolean boolean15 = backupEnvironment12.getIsCc();
    boolean boolean16 = backupEnvironment12.getIsRp();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional17 = backupEnvironment12.geicmaOptional();
    org.neo4j.memory.MemoryTracker memoryTracker18 = backupEnvironment12.getMemoryTracker();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(backupEnvironment12);
    org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional14);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional17);
    org.junit.Assert.assertNotNull(memoryTracker18);
  }

  @Test
  public void test0458() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0458");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.GdbIdRepo gdbIdRepo1 = new io.github.onograph.backup.GdbIdRepo(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory5 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory5.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory5.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory5.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory11.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment17 = factory11.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern18 = backupEnvironment17.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress19 = backupEnvironment17.getSocketAddress();
    java.nio.file.Path path20 = backupEnvironment17.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory2.pbPath(path20);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory22.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory25.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory25.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory25.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory31.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory31.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment37 = factory31.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern38 = backupEnvironment37.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress39 = backupEnvironment37.getSocketAddress();
    java.nio.file.Path path40 = backupEnvironment37.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory22.pbPath(path40);
    io.github.onograph.backup.FileMoverService fileMoverService42 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path20, path40);
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = factory43.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = factory43.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = factory43.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory51 = factory49.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory54 = factory49.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment55 = factory49.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern56 = backupEnvironment55.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress57 = backupEnvironment55.getSocketAddress();
    java.nio.file.Path path58 = backupEnvironment55.getPbPath();
    io.github.onograph.backup.FileMoverService fileMoverService59 = io.github.onograph.backup.FileMoverService.movifeseFileMoverService(
        path40, path58);
    try {
      java.util.Optional<org.neo4j.kernel.database.DatabaseId> databaseIdOptional60 = gdbIdRepo1.reddtaiOptional(
          path58);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(backupEnvironment17);
    org.junit.Assert.assertNotNull(databaseNamePattern18);
    org.junit.Assert.assertNotNull(socketAddress19);
    org.junit.Assert.assertNotNull(path20);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(backupEnvironment37);
    org.junit.Assert.assertNotNull(databaseNamePattern38);
    org.junit.Assert.assertNotNull(socketAddress39);
    org.junit.Assert.assertNotNull(path40);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(fileMoverService42);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory49);
    org.junit.Assert.assertNotNull(factory51);
    org.junit.Assert.assertNotNull(factory54);
    org.junit.Assert.assertNotNull(backupEnvironment55);
    org.junit.Assert.assertNotNull(databaseNamePattern56);
    org.junit.Assert.assertNotNull(socketAddress57);
    org.junit.Assert.assertNotNull(path58);
    org.junit.Assert.assertNotNull(fileMoverService59);
  }

  @Test
  public void test0459() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0459");
    }
    java.nio.file.Path path0 = null;
    java.nio.file.Path path1 = null;
    io.github.onograph.backup.FileMoverService fileMoverService2 = io.github.onograph.backup.FileMoverService.movifeseFileMoverService(
        path0, path1);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction3 = null;
    io.github.onograph.backup.FileMover fileMover4 = new io.github.onograph.backup.FileMover(
        fileSystemAbstraction3);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction5 = null;
    io.github.onograph.backup.FileMover fileMover6 = new io.github.onograph.backup.FileMover(
        fileSystemAbstraction5);
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory7.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory7.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory7.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory13.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory13.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment19 = factory13.bulBackupEnvironment();
    boolean boolean20 = backupEnvironment19.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional21 = backupEnvironment19.geicmaOptional();
    java.nio.file.Path path22 = backupEnvironment19.getPbPath();
    java.nio.file.Path path23 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path22);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream24 = fileMover6._trrfrmnStream(
        path22);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory25.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = factory28.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory28.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory28.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory34.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory39 = factory34.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment40 = factory34.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern41 = backupEnvironment40.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress42 = backupEnvironment40.getSocketAddress();
    java.nio.file.Path path43 = backupEnvironment40.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory44 = factory25.pbPath(path43);
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = factory45.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory48 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory50 = factory48.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory52 = factory48.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory54 = factory48.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory56 = factory54.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory59 = factory54.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment60 = factory54.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern61 = backupEnvironment60.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress62 = backupEnvironment60.getSocketAddress();
    java.nio.file.Path path63 = backupEnvironment60.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory64 = factory45.pbPath(path63);
    io.github.onograph.backup.FileMoverService fileMoverService65 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path43, path63);
    java.nio.file.Path path66 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path43);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream67 = fileMover6._trrfrmnStream(
        path66);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream68 = fileMover4._trrfrmnStream(
        path66);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction69 = null;
    io.github.onograph.backup.FileMover fileMover70 = new io.github.onograph.backup.FileMover(
        fileSystemAbstraction69);
    io.github.onograph.backup.BackupEnvironment.Factory factory71 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory73 = factory71.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory75 = factory71.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory77 = factory71.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory79 = factory77.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory82 = factory77.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment83 = factory77.bulBackupEnvironment();
    boolean boolean84 = backupEnvironment83.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional85 = backupEnvironment83.geicmaOptional();
    java.nio.file.Path path86 = backupEnvironment83.getPbPath();
    java.nio.file.Path path87 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path86);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream88 = fileMover70._trrfrmnStream(
        path86);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream89 = fileMover4._trrfrmnStream(
        path86);
    java.nio.file.Path path90 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path86);
    java.nio.file.CopyOption copyOption91 = null;
    java.nio.file.CopyOption[] copyOptionArray92 = new java.nio.file.CopyOption[]{copyOption91};
    try {
      fileMoverService2.movForPaCo(path90, copyOptionArray92);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(fileMoverService2);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(backupEnvironment19);
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional21);
    org.junit.Assert.assertNotNull(path22);
    org.junit.Assert.assertNotNull(path23);
    org.junit.Assert.assertNotNull(fileMoverServiceStream24);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(factory39);
    org.junit.Assert.assertNotNull(backupEnvironment40);
    org.junit.Assert.assertNotNull(databaseNamePattern41);
    org.junit.Assert.assertNotNull(socketAddress42);
    org.junit.Assert.assertNotNull(path43);
    org.junit.Assert.assertNotNull(factory44);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory48);
    org.junit.Assert.assertNotNull(factory50);
    org.junit.Assert.assertNotNull(factory52);
    org.junit.Assert.assertNotNull(factory54);
    org.junit.Assert.assertNotNull(factory56);
    org.junit.Assert.assertNotNull(factory59);
    org.junit.Assert.assertNotNull(backupEnvironment60);
    org.junit.Assert.assertNotNull(databaseNamePattern61);
    org.junit.Assert.assertNotNull(socketAddress62);
    org.junit.Assert.assertNotNull(path63);
    org.junit.Assert.assertNotNull(factory64);
    org.junit.Assert.assertNotNull(fileMoverService65);
    org.junit.Assert.assertNotNull(path66);
    org.junit.Assert.assertNotNull(fileMoverServiceStream67);
    org.junit.Assert.assertNotNull(fileMoverServiceStream68);
    org.junit.Assert.assertNotNull(factory71);
    org.junit.Assert.assertNotNull(factory73);
    org.junit.Assert.assertNotNull(factory75);
    org.junit.Assert.assertNotNull(factory77);
    org.junit.Assert.assertNotNull(factory79);
    org.junit.Assert.assertNotNull(factory82);
    org.junit.Assert.assertNotNull(backupEnvironment83);
    org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional85);
    org.junit.Assert.assertNotNull(path86);
    org.junit.Assert.assertNotNull(path87);
    org.junit.Assert.assertNotNull(fileMoverServiceStream88);
    org.junit.Assert.assertNotNull(fileMoverServiceStream89);
    org.junit.Assert.assertNotNull(path90);
    org.junit.Assert.assertNotNull(copyOptionArray92);
  }

  @Test
  public void test0460() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0460");
    }
    io.github.onograph.backup.CommandProviderBackupImpl commandProviderBackupImpl0 = new io.github.onograph.backup.CommandProviderBackupImpl();
    org.neo4j.cli.Command.CommandType commandType1 = commandProviderBackupImpl0.commandType();
    int int2 = commandProviderBackupImpl0.getPriority();
    org.neo4j.cli.Command.CommandType commandType3 = commandProviderBackupImpl0.commandType();
    org.junit.Assert.assertTrue(
        "'" + commandType1 + "' != '" + org.neo4j.cli.Command.CommandType.ONLINE_BACKUP + "'",
        commandType1.equals(org.neo4j.cli.Command.CommandType.ONLINE_BACKUP));
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    org.junit.Assert.assertTrue(
        "'" + commandType3 + "' != '" + org.neo4j.cli.Command.CommandType.ONLINE_BACKUP + "'",
        commandType3.equals(org.neo4j.cli.Command.CommandType.ONLINE_BACKUP));
  }

  @Test
  public void test0461() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0461");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory8.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment14 = factory8.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern15 = backupEnvironment14.getDatabaseNamePattern();
    boolean boolean16 = backupEnvironment14.getIsBftf();
    boolean boolean17 = backupEnvironment14.getIsBftf();
    java.nio.file.Path path18 = backupEnvironment14.getRpPath();
    java.nio.file.Path path19 = backupEnvironment14.getPbPath();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction20 = null;
    io.github.onograph.backup.FileMover fileMover21 = new io.github.onograph.backup.FileMover(
        fileSystemAbstraction20);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory22.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory22.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = factory22.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = factory28.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory28.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment34 = factory28.bulBackupEnvironment();
    boolean boolean35 = backupEnvironment34.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional36 = backupEnvironment34.geicmaOptional();
    java.nio.file.Path path37 = backupEnvironment34.getPbPath();
    java.nio.file.Path path38 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path37);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream39 = fileMover21._trrfrmnStream(
        path37);
    io.github.onograph.backup.BackupEnvironment.Factory factory40 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory42 = factory40.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = factory43.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = factory43.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = factory43.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory51 = factory49.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory54 = factory49.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment55 = factory49.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern56 = backupEnvironment55.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress57 = backupEnvironment55.getSocketAddress();
    java.nio.file.Path path58 = backupEnvironment55.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory59 = factory40.pbPath(path58);
    io.github.onograph.backup.BackupEnvironment.Factory factory60 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory62 = factory60.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory63 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory65 = factory63.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory67 = factory63.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory69 = factory63.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory71 = factory69.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory74 = factory69.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment75 = factory69.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern76 = backupEnvironment75.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress77 = backupEnvironment75.getSocketAddress();
    java.nio.file.Path path78 = backupEnvironment75.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory79 = factory60.pbPath(path78);
    io.github.onograph.backup.FileMoverService fileMoverService80 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path58, path78);
    java.nio.file.Path path81 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path58);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream82 = fileMover21._trrfrmnStream(
        path81);
    java.nio.file.Path path83 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path81);
    io.github.onograph.backup.FileMoverService fileMoverService84 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path19, path83);
    org.neo4j.logging.LogProvider logProvider85 = null;
    org.neo4j.io.pagecache.PageCache pageCache86 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer87 = null;
    try {
      io.github.onograph.backup.BackupMetaService backupMetaService88 = new io.github.onograph.backup.BackupMetaService(
          fileSystemAbstraction0, "", path19, logProvider85, pageCache86, pageCacheTracer87);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(backupEnvironment14);
    org.junit.Assert.assertNotNull(databaseNamePattern15);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    org.junit.Assert.assertNotNull(path18);
    org.junit.Assert.assertNotNull(path19);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(backupEnvironment34);
    org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional36);
    org.junit.Assert.assertNotNull(path37);
    org.junit.Assert.assertNotNull(path38);
    org.junit.Assert.assertNotNull(fileMoverServiceStream39);
    org.junit.Assert.assertNotNull(factory40);
    org.junit.Assert.assertNotNull(factory42);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory49);
    org.junit.Assert.assertNotNull(factory51);
    org.junit.Assert.assertNotNull(factory54);
    org.junit.Assert.assertNotNull(backupEnvironment55);
    org.junit.Assert.assertNotNull(databaseNamePattern56);
    org.junit.Assert.assertNotNull(socketAddress57);
    org.junit.Assert.assertNotNull(path58);
    org.junit.Assert.assertNotNull(factory59);
    org.junit.Assert.assertNotNull(factory60);
    org.junit.Assert.assertNotNull(factory62);
    org.junit.Assert.assertNotNull(factory63);
    org.junit.Assert.assertNotNull(factory65);
    org.junit.Assert.assertNotNull(factory67);
    org.junit.Assert.assertNotNull(factory69);
    org.junit.Assert.assertNotNull(factory71);
    org.junit.Assert.assertNotNull(factory74);
    org.junit.Assert.assertNotNull(backupEnvironment75);
    org.junit.Assert.assertNotNull(databaseNamePattern76);
    org.junit.Assert.assertNotNull(socketAddress77);
    org.junit.Assert.assertNotNull(path78);
    org.junit.Assert.assertNotNull(factory79);
    org.junit.Assert.assertNotNull(fileMoverService80);
    org.junit.Assert.assertNotNull(path81);
    org.junit.Assert.assertNotNull(fileMoverServiceStream82);
    org.junit.Assert.assertNotNull(path83);
    org.junit.Assert.assertNotNull(fileMoverService84);
  }

  @Test
  public void test0462() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0462");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory6.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment12 = factory6.bulBackupEnvironment();
    boolean boolean13 = backupEnvironment12.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional14 = backupEnvironment12.geicmaOptional();
    boolean boolean15 = backupEnvironment12.getIsRp();
    boolean boolean16 = backupEnvironment12.getIsBftf();
    java.nio.file.Path path17 = backupEnvironment12.getPbPath();
    boolean boolean18 = backupEnvironment12.getIsCc();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(backupEnvironment12);
    org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional14);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    org.junit.Assert.assertNotNull(path17);
    org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
  }

  @Test
  public void test0463() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0463");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = factory4.gecfConfig();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(config5);
  }

  @Test
  public void test0464() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0464");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory6.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isFtfb(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory13.isRp(false);
    java.nio.file.Path path16 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory13.pbPath(path16);
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory17.isGcc(
        (java.lang.Boolean) true);
    org.neo4j.configuration.helpers.SocketAddress socketAddress20 = factory17.getSocketAddress();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(socketAddress20);
  }

  @Test
  public void test0465() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0465");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    org.neo4j.logging.LogProvider logProvider1 = null;
    org.neo4j.logging.Log log2 = null;
    io.github.onograph.backup.RemoteBackupService remoteBackupService3 = new io.github.onograph.backup.RemoteBackupService(
        fileSystemAbstraction0, logProvider1, log2);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isCc(false);
    java.nio.file.Path path7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.prPath(path7);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config10 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.config(config10);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isRp(true);
    org.neo4j.configuration.Config config14 = factory11.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory4.config(config14);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction16 = null;
    org.neo4j.configuration.Config config17 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction18 = null;
    java.nio.file.Path[] pathArray19 = new java.nio.file.Path[]{};
    java.util.LinkedHashSet<java.nio.file.Path> pathSet20 = new java.util.LinkedHashSet<java.nio.file.Path>();
    boolean boolean21 = java.util.Collections.addAll(
        (java.util.Collection<java.nio.file.Path>) pathSet20, pathArray19);
    io.github.onograph.backup.BackupRestoreMeta backupRestoreMeta22 = new io.github.onograph.backup.BackupRestoreMeta(
        config17, fileSystemAbstraction18, (java.util.Set<java.nio.file.Path>) pathSet20);
    io.github.onograph.backup.BackupRestoreMeta backupRestoreMeta23 = new io.github.onograph.backup.BackupRestoreMeta(
        config14, fileSystemAbstraction16, (java.util.Set<java.nio.file.Path>) pathSet20);
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags24 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction25 = null;
    org.neo4j.logging.LogProvider logProvider26 = null;
    java.nio.file.Path path27 = null;
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory28 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl29 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config14, consistencyFlags24, fileSystemAbstraction25, logProvider26, path27,
        progressMonitorFactory28);
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory30.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory30.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory30.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = factory36.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory36.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment42 = factory36.bulBackupEnvironment();
    org.neo4j.memory.MemoryTracker memoryTracker43 = backupEnvironment42.getMemoryTracker();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern44 = backupEnvironment42.getDatabaseNamePattern();
    boolean boolean45 = backupEnvironment42.getIsBftf();
    org.neo4j.configuration.helpers.SocketAddress socketAddress46 = backupEnvironment42.getSocketAddress();
    io.github.onograph.backup.DefaultBackupServiceHandler defaultBackupServiceHandler48 = null;
    io.github.onograph.backup.GdbStoreTransferWatcherRebImpl gdbStoreTransferWatcherRebImpl49 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer50 = null;
    io.github.onograph.backup.RemoteBackupManager remoteBackupManager51 = null;
    org.neo4j.configuration.Config config52 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction53 = null;
    org.neo4j.memory.MemoryTracker memoryTracker54 = null;
    org.neo4j.io.pagecache.PageCache pageCache55 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager56 = new io.github.onograph.backup.BackupRestorationManager(
        config52, fileSystemAbstraction53, memoryTracker54, pageCache55);
    try {
      remoteBackupService3.bakForBaPaBaDeBaReStGd(
          (io.github.onograph.backup.BackupVerificationService) backupVerificationServiceImpl29,
          backupEnvironment42, "hi!", defaultBackupServiceHandler48,
          gdbStoreTransferWatcherRebImpl49, pageCacheTracer50, remoteBackupManager51,
          backupRestorationManager56);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(config14);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(pathArray19);
    org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(backupEnvironment42);
    org.junit.Assert.assertNotNull(memoryTracker43);
    org.junit.Assert.assertNotNull(databaseNamePattern44);
    org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    org.junit.Assert.assertNotNull(socketAddress46);
  }

  @Test
  public void test0466() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0466");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupIOService backupIOService1 = new io.github.onograph.backup.BackupIOService(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory8.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment14 = factory8.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern15 = backupEnvironment14.getDatabaseNamePattern();
    boolean boolean16 = backupEnvironment14.getIsBftf();
    boolean boolean17 = backupEnvironment14.getIsBftf();
    java.nio.file.Path path18 = backupEnvironment14.getRpPath();
    java.nio.file.Path path19 = backupEnvironment14.getPbPath();
    try {
      boolean boolean20 = backupIOService1.isExsForPa(path19);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(backupEnvironment14);
    org.junit.Assert.assertNotNull(databaseNamePattern15);
    org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    org.junit.Assert.assertNotNull(path18);
    org.junit.Assert.assertNotNull(path19);
  }

  @Test
  public void test0467() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0467");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    org.neo4j.logging.LogProvider logProvider1 = null;
    org.neo4j.logging.Log log2 = null;
    io.github.onograph.backup.RemoteBackupService remoteBackupService3 = new io.github.onograph.backup.RemoteBackupService(
        fileSystemAbstraction0, logProvider1, log2);
    io.github.onograph.backup.BackupVerificationService backupVerificationService4 = io.github.onograph.backup.BackupVerificationService.NOO_BACKUP_VERIFICATION_SERVICE;
    io.github.onograph.backup.BackupEnvironment.Factory factory5 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory5.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory5.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory5.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory11.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment17 = factory11.bulBackupEnvironment();
    boolean boolean18 = backupEnvironment17.getIsRp();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional19 = backupEnvironment17.geicmaOptional();
    boolean boolean20 = backupEnvironment17.getIsCc();
    boolean boolean21 = backupEnvironment17.getIsRp();
    io.github.onograph.backup.DefaultBackupServiceHandler defaultBackupServiceHandler23 = null;
    io.github.onograph.backup.GdbStoreTransferWatcherRebImpl gdbStoreTransferWatcherRebImpl24 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer25 = null;
    io.github.onograph.backup.RemoteBackupManager remoteBackupManager26 = null;
    org.neo4j.configuration.Config config27 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction28 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory29.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory29.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = factory29.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = factory35.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config39 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory40 = factory38.config(config39);
    io.github.onograph.backup.BackupEnvironment.Factory factory42 = factory40.isRp(true);
    org.neo4j.configuration.Config config43 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory44 = factory42.config(config43);
    org.neo4j.configuration.helpers.SocketAddress socketAddress45 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory46 = factory42.wihadsBackupEnvironmentFactory(
        socketAddress45);
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config48 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = factory47.config(config48);
    io.github.onograph.backup.BackupEnvironment.Factory factory51 = factory49.isRp(true);
    org.neo4j.configuration.Config config52 = factory49.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory53 = factory42.config(config52);
    io.github.onograph.backup.BackupEnvironment.Factory factory54 = factory37.config(config52);
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags55 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction56 = null;
    org.neo4j.logging.LogProvider logProvider57 = null;
    java.nio.file.Path path58 = null;
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory59 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl60 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config52, consistencyFlags55, fileSystemAbstraction56, logProvider57, path58,
        progressMonitorFactory59);
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags61 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction62 = null;
    org.neo4j.logging.LogProvider logProvider63 = null;
    java.nio.file.Path path64 = null;
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory65 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl66 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config52, consistencyFlags61, fileSystemAbstraction62, logProvider63, path64,
        progressMonitorFactory65);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction67 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory68 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory70 = factory68.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory72 = factory68.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory74 = factory68.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory76 = factory74.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory79 = factory74.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment80 = factory74.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern81 = backupEnvironment80.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress82 = backupEnvironment80.getSocketAddress();
    java.nio.file.Path path83 = backupEnvironment80.getRpPath();
    boolean boolean84 = backupEnvironment80.getIsBftf();
    java.nio.file.Path path85 = backupEnvironment80.getRpPath();
    org.neo4j.memory.MemoryTracker memoryTracker86 = backupEnvironment80.getMemoryTracker();
    org.neo4j.io.pagecache.PageCache pageCache87 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager88 = new io.github.onograph.backup.BackupRestorationManager(
        config52, fileSystemAbstraction67, memoryTracker86, pageCache87);
    org.neo4j.io.pagecache.PageCache pageCache89 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager90 = new io.github.onograph.backup.BackupRestorationManager(
        config27, fileSystemAbstraction28, memoryTracker86, pageCache89);
    try {
      remoteBackupService3.bakForBaPaBaDeBaReStGd(backupVerificationService4, backupEnvironment17,
          "", defaultBackupServiceHandler23, gdbStoreTransferWatcherRebImpl24, pageCacheTracer25,
          remoteBackupManager26, backupRestorationManager90);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(backupVerificationService4);
    org.junit.Assert.assertNotNull(factory5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(backupEnvironment17);
    org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional19);
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(factory40);
    org.junit.Assert.assertNotNull(factory42);
    org.junit.Assert.assertNotNull(factory44);
    org.junit.Assert.assertNotNull(factory46);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory49);
    org.junit.Assert.assertNotNull(factory51);
    org.junit.Assert.assertNotNull(config52);
    org.junit.Assert.assertNotNull(factory53);
    org.junit.Assert.assertNotNull(factory54);
    org.junit.Assert.assertNotNull(factory68);
    org.junit.Assert.assertNotNull(factory70);
    org.junit.Assert.assertNotNull(factory72);
    org.junit.Assert.assertNotNull(factory74);
    org.junit.Assert.assertNotNull(factory76);
    org.junit.Assert.assertNotNull(factory79);
    org.junit.Assert.assertNotNull(backupEnvironment80);
    org.junit.Assert.assertNotNull(databaseNamePattern81);
    org.junit.Assert.assertNotNull(socketAddress82);
    org.junit.Assert.assertNotNull(path83);
    org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    org.junit.Assert.assertNotNull(path85);
    org.junit.Assert.assertNotNull(memoryTracker86);
  }

  @Test
  public void test0468() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0468");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.config(config5);
    org.neo4j.configuration.helpers.SocketAddress socketAddress7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress7);
    org.neo4j.configuration.helpers.SocketAddress socketAddress9 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress9);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory4.wihadsBackupEnvironmentFactory(
        (int) (short) -1, "hi!");
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory4.wihadsBackupEnvironmentFactory(
        0, "hi!");
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory4.isCc(true);
    org.neo4j.configuration.Config config19 = factory18.gecfConfig();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction20 = null;
    org.neo4j.logging.LogProvider logProvider21 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer22 = null;
    org.neo4j.time.SystemNanoClock systemNanoClock23 = null;
    try {
      io.github.onograph.backup.DefaultBackupServiceHandler defaultBackupServiceHandler24 = io.github.onograph.backup.DefaultBackupServiceHandler.strliclDefaultBackupServiceHandler(
          config19, fileSystemAbstraction20, logProvider21, pageCacheTracer22, systemNanoClock23);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(config19);
  }

  @Test
  public void test0469() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0469");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config10 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.config(config10);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isRp(true);
    org.neo4j.configuration.Config config14 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory13.config(config14);
    org.neo4j.configuration.helpers.SocketAddress socketAddress16 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory13.wihadsBackupEnvironmentFactory(
        socketAddress16);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config19 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory18.config(config19);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory20.isRp(true);
    org.neo4j.configuration.Config config23 = factory20.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory13.config(config23);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory8.config(config23);
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags26 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction27 = null;
    org.neo4j.logging.LogProvider logProvider28 = null;
    java.nio.file.Path path29 = null;
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory30 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl31 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config23, consistencyFlags26, fileSystemAbstraction27, logProvider28, path29,
        progressMonitorFactory30);
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags32 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction33 = null;
    org.neo4j.logging.LogProvider logProvider34 = null;
    java.nio.file.Path path35 = null;
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory36 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl37 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config23, consistencyFlags32, fileSystemAbstraction33, logProvider34, path35,
        progressMonitorFactory36);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction38 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory39 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory39.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = factory39.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = factory39.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = factory45.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory50 = factory45.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment51 = factory45.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern52 = backupEnvironment51.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress53 = backupEnvironment51.getSocketAddress();
    java.nio.file.Path path54 = backupEnvironment51.getRpPath();
    boolean boolean55 = backupEnvironment51.getIsBftf();
    java.nio.file.Path path56 = backupEnvironment51.getRpPath();
    org.neo4j.memory.MemoryTracker memoryTracker57 = backupEnvironment51.getMemoryTracker();
    org.neo4j.io.pagecache.PageCache pageCache58 = null;
    io.github.onograph.backup.BackupRestorationManager backupRestorationManager59 = new io.github.onograph.backup.BackupRestorationManager(
        config23, fileSystemAbstraction38, memoryTracker57, pageCache58);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction60 = null;
    org.neo4j.logging.LogProvider logProvider61 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer62 = null;
    org.neo4j.time.SystemNanoClock systemNanoClock63 = null;
    try {
      io.github.onograph.backup.DefaultBackupServiceHandler defaultBackupServiceHandler64 = io.github.onograph.backup.DefaultBackupServiceHandler.strliclDefaultBackupServiceHandler(
          config23, fileSystemAbstraction60, logProvider61, pageCacheTracer62, systemNanoClock63);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(config23);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory39);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory50);
    org.junit.Assert.assertNotNull(backupEnvironment51);
    org.junit.Assert.assertNotNull(databaseNamePattern52);
    org.junit.Assert.assertNotNull(socketAddress53);
    org.junit.Assert.assertNotNull(path54);
    org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    org.junit.Assert.assertNotNull(path56);
    org.junit.Assert.assertNotNull(memoryTracker57);
  }

  @Test
  public void test0470() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0470");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    java.nio.file.Path path3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.prPath(path3);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isSicc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment backupEnvironment7 = factory6.bulBackupEnvironment();
    java.lang.Class<?> wildcardClass8 = backupEnvironment7.getClass();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(backupEnvironment7);
    org.junit.Assert.assertNotNull(wildcardClass8);
  }

  @Test
  public void test0471() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0471");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.miAuthMetaOptions(
        authMetaOptions3);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isGcc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isIcc(
        (java.lang.Boolean) false);
    try {
      io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.databaseNamePattern(
          "");
      org.junit.Assert.fail(
          "Expected exception of type java.lang.IllegalArgumentException; message: The provided database name is empty.");
    } catch (java.lang.IllegalArgumentException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
  }

  @Test
  public void test0472() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0472");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.config(config5);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.isGcc(
        (java.lang.Boolean) true);
    org.neo4j.configuration.helpers.SocketAddress socketAddress9 = factory8.getSocketAddress();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNull(socketAddress9);
  }

  @Test
  public void test0473() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0473");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory6.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isSicc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory13.isGcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory16.isCc(false);
    java.nio.file.Path path19 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory16.prPath(path19);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = factory16.isSicc(
        (java.lang.Boolean) true);
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern23 = factory22.gedtenprDatabaseNamePattern();
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory13.databaseNamePattern(
        databaseNamePattern23);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(databaseNamePattern23);
    org.junit.Assert.assertNotNull(factory24);
  }

  @Test
  public void test0474() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0474");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.logging.LogProvider logProvider5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator2.itraLogProvider(
        logProvider5);
    org.neo4j.logging.LogProvider logProvider7 = null;
    io.github.onograph.backup.BackupRunner.Generator generator8 = generator6.uLogProvider(
        logProvider7);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction9 = null;
    io.github.onograph.backup.BackupRunner.Generator generator10 = generator8.fFileSystemAbstraction(
        fileSystemAbstraction9);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction11 = null;
    io.github.onograph.backup.BackupRunner.Generator generator12 = generator8.fFileSystemAbstraction(
        fileSystemAbstraction11);
    org.neo4j.logging.LogProvider logProvider13 = null;
    io.github.onograph.backup.BackupRunner.Generator generator14 = generator12.uLogProvider(
        logProvider13);
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory15 = null;
    io.github.onograph.backup.BackupRunner.Generator generator16 = generator14.progressMonitorFactory(
        progressMonitorFactory15);
    org.neo4j.time.SystemNanoClock systemNanoClock17 = null;
    io.github.onograph.backup.BackupRunner.Generator generator18 = generator16.systemNanoClock(
        systemNanoClock17);
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(generator8);
    org.junit.Assert.assertNotNull(generator10);
    org.junit.Assert.assertNotNull(generator12);
    org.junit.Assert.assertNotNull(generator14);
    org.junit.Assert.assertNotNull(generator16);
    org.junit.Assert.assertNotNull(generator18);
  }

  @Test
  public void test0475() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0475");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    java.nio.file.Path path3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.prPath(path3);
    java.nio.file.Path path5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.prPath(path5);
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory7.isCc(false);
    java.nio.file.Path path10 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory7.prPath(path10);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config13 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory12.config(config13);
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory14.isRp(true);
    org.neo4j.configuration.Config config17 = factory14.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory7.config(config17);
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory6.config(config17);
    try {
      io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory6.databaseNamePattern(
          "");
      org.junit.Assert.fail(
          "Expected exception of type java.lang.IllegalArgumentException; message: The provided database name is empty.");
    } catch (java.lang.IllegalArgumentException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(config17);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(factory19);
  }

  @Test
  public void test0476() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0476");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.time.SystemNanoClock systemNanoClock5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator2.systemNanoClock(
        systemNanoClock5);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction7 = null;
    io.github.onograph.backup.BackupRunner.Generator generator8 = generator6.fFileSystemAbstraction(
        fileSystemAbstraction7);
    org.neo4j.time.SystemNanoClock systemNanoClock9 = null;
    io.github.onograph.backup.BackupRunner.Generator generator10 = generator6.systemNanoClock(
        systemNanoClock9);
    org.neo4j.monitoring.Monitors monitors11 = null;
    io.github.onograph.backup.BackupRunner.Generator generator12 = generator6.monitors(monitors11);
    io.github.onograph.backup.BackupRunner backupRunner13 = generator6.bulBackupRunner();
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction14 = null;
    io.github.onograph.backup.BackupRunner.Generator generator15 = generator6.fFileSystemAbstraction(
        fileSystemAbstraction14);
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(generator8);
    org.junit.Assert.assertNotNull(generator10);
    org.junit.Assert.assertNotNull(generator12);
    org.junit.Assert.assertNotNull(backupRunner13);
    org.junit.Assert.assertNotNull(generator15);
  }

  @Test
  public void test0477() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0477");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory6.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment12 = factory6.bulBackupEnvironment();
    boolean boolean13 = backupEnvironment12.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional14 = backupEnvironment12.geicmaOptional();
    org.neo4j.configuration.helpers.SocketAddress socketAddress15 = backupEnvironment12.getSocketAddress();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional16 = backupEnvironment12.geicmaOptional();
    boolean boolean17 = backupEnvironment12.getIsBftf();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(backupEnvironment12);
    org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional14);
    org.junit.Assert.assertNotNull(socketAddress15);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional16);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
  }

  @Test
  public void test0478() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0478");
    }
    io.github.onograph.backup.CommandProviderGdbRestorerCommandImpl commandProviderGdbRestorerCommandImpl0 = new io.github.onograph.backup.CommandProviderGdbRestorerCommandImpl();
    org.neo4j.cli.Command.CommandType commandType1 = commandProviderGdbRestorerCommandImpl0.commandType();
    int int2 = commandProviderGdbRestorerCommandImpl0.getPriority();
    org.neo4j.cli.Command.CommandType commandType3 = commandProviderGdbRestorerCommandImpl0.commandType();
    int int4 = commandProviderGdbRestorerCommandImpl0.getPriority();
    org.neo4j.cli.ExecutionContext executionContext5 = null;
    try {
      io.github.onograph.backup.GdbRestorerCommand gdbRestorerCommand6 = commandProviderGdbRestorerCommandImpl0.createCommand(
          executionContext5);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue(
        "'" + commandType1 + "' != '" + org.neo4j.cli.Command.CommandType.RESTORE_DB + "'",
        commandType1.equals(org.neo4j.cli.Command.CommandType.RESTORE_DB));
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    org.junit.Assert.assertTrue(
        "'" + commandType3 + "' != '" + org.neo4j.cli.Command.CommandType.RESTORE_DB + "'",
        commandType3.equals(org.neo4j.cli.Command.CommandType.RESTORE_DB));
    org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
  }

  @Test
  public void test0479() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0479");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isGcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isIcc(
        (java.lang.Boolean) true);
    org.neo4j.configuration.Config config5 = factory4.gecfConfig();
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags6 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction7 = null;
    org.neo4j.logging.LogProvider logProvider8 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory9.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory9.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory15.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory20 = factory15.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment21 = factory15.bulBackupEnvironment();
    boolean boolean22 = backupEnvironment21.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional23 = backupEnvironment21.geicmaOptional();
    java.nio.file.Path path24 = backupEnvironment21.getPbPath();
    java.nio.file.Path path25 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path24);
    java.nio.file.Path path26 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path24);
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory27 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl28 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config5, consistencyFlags6, fileSystemAbstraction7, logProvider8, path26,
        progressMonitorFactory27);
    org.neo4j.io.layout.DatabaseLayout databaseLayout29 = null;
    try {
      backupVerificationServiceImpl28.chcsyForDa(databaseLayout29);
      org.junit.Assert.fail(
          "Expected exception of type io.github.onograph.backup.BackupVerificationErrorException; message: *** Error:  2915f124-983c-439d-b1ae-a9c5ad06642b");
    } catch (io.github.onograph.backup.BackupVerificationErrorException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(config5);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory20);
    org.junit.Assert.assertNotNull(backupEnvironment21);
    org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional23);
    org.junit.Assert.assertNotNull(path24);
    org.junit.Assert.assertNotNull(path25);
    org.junit.Assert.assertNotNull(path26);
  }

  @Test
  public void test0480() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0480");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    java.io.PrintStream printStream3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.config(config5);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isRp(true);
    org.neo4j.configuration.Config config9 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.config(config9);
    org.neo4j.configuration.helpers.SocketAddress socketAddress11 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory8.wihadsBackupEnvironmentFactory(
        socketAddress11);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory13.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory13.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory13.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory19.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory19.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment25 = factory19.bulBackupEnvironment();
    boolean boolean26 = backupEnvironment25.getIsBftf();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern27 = backupEnvironment25.getDatabaseNamePattern();
    java.nio.file.Path path28 = backupEnvironment25.getRpPath();
    java.nio.file.Path path29 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path28);
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = factory12.prPath(path28);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction31 = null;
    io.github.onograph.backup.FileMover fileMover32 = new io.github.onograph.backup.FileMover(
        fileSystemAbstraction31);
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = factory33.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = factory33.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory39 = factory33.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory39.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory44 = factory39.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment45 = factory39.bulBackupEnvironment();
    boolean boolean46 = backupEnvironment45.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional47 = backupEnvironment45.geicmaOptional();
    java.nio.file.Path path48 = backupEnvironment45.getPbPath();
    java.nio.file.Path path49 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path48);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream50 = fileMover32._trrfrmnStream(
        path48);
    io.github.onograph.backup.BackupEnvironment.Factory factory51 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory53 = factory51.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory55 = factory51.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory57 = factory51.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory59 = factory57.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory62 = factory57.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment63 = factory57.bulBackupEnvironment();
    boolean boolean64 = backupEnvironment63.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional65 = backupEnvironment63.geicmaOptional();
    java.nio.file.Path path66 = backupEnvironment63.getPbPath();
    java.nio.file.Path path67 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path66);
    java.nio.file.Path path68 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path67);
    boolean boolean69 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path68);
    io.github.onograph.backup.BackupEnvironment.Factory factory70 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory72 = factory70.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory74 = factory70.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory76 = factory70.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory78 = factory76.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory81 = factory76.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment82 = factory76.bulBackupEnvironment();
    boolean boolean83 = backupEnvironment82.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional84 = backupEnvironment82.geicmaOptional();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional85 = backupEnvironment82.geicmaOptional();
    java.nio.file.Path path86 = backupEnvironment82.getPbPath();
    java.nio.file.Path path87 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path86);
    io.github.onograph.backup.FileMoverService fileMoverService88 = io.github.onograph.backup.FileMoverService.movifeseFileMoverService(
        path68, path87);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream89 = fileMover32._trrfrmnStream(
        path68);
    org.neo4j.io.layout.DatabaseLayout databaseLayout90 = null;
    try {
      io.github.onograph.backup.GdbRestorer gdbRestorer91 = new io.github.onograph.backup.GdbRestorer(
          fileSystemAbstraction0, false, false, printStream3, path28, path68, databaseLayout90);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(backupEnvironment25);
    org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    org.junit.Assert.assertNotNull(databaseNamePattern27);
    org.junit.Assert.assertNotNull(path28);
    org.junit.Assert.assertNotNull(path29);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(factory39);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(factory44);
    org.junit.Assert.assertNotNull(backupEnvironment45);
    org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional47);
    org.junit.Assert.assertNotNull(path48);
    org.junit.Assert.assertNotNull(path49);
    org.junit.Assert.assertNotNull(fileMoverServiceStream50);
    org.junit.Assert.assertNotNull(factory51);
    org.junit.Assert.assertNotNull(factory53);
    org.junit.Assert.assertNotNull(factory55);
    org.junit.Assert.assertNotNull(factory57);
    org.junit.Assert.assertNotNull(factory59);
    org.junit.Assert.assertNotNull(factory62);
    org.junit.Assert.assertNotNull(backupEnvironment63);
    org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional65);
    org.junit.Assert.assertNotNull(path66);
    org.junit.Assert.assertNotNull(path67);
    org.junit.Assert.assertNotNull(path68);
    org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    org.junit.Assert.assertNotNull(factory70);
    org.junit.Assert.assertNotNull(factory72);
    org.junit.Assert.assertNotNull(factory74);
    org.junit.Assert.assertNotNull(factory76);
    org.junit.Assert.assertNotNull(factory78);
    org.junit.Assert.assertNotNull(factory81);
    org.junit.Assert.assertNotNull(backupEnvironment82);
    org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional84);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional85);
    org.junit.Assert.assertNotNull(path86);
    org.junit.Assert.assertNotNull(path87);
    org.junit.Assert.assertNotNull(fileMoverService88);
    org.junit.Assert.assertNotNull(fileMoverServiceStream89);
  }

  @Test
  public void test0481() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0481");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator4.progressMonitorFactory(
        progressMonitorFactory5);
    org.neo4j.monitoring.Monitors monitors7 = null;
    io.github.onograph.backup.BackupRunner.Generator generator8 = generator6.monitors(monitors7);
    io.github.onograph.backup.BackupRunner backupRunner9 = generator6.bulBackupRunner();
    org.neo4j.logging.LogProvider logProvider10 = null;
    io.github.onograph.backup.BackupRunner.Generator generator11 = generator6.uLogProvider(
        logProvider10);
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(generator8);
    org.junit.Assert.assertNotNull(backupRunner9);
    org.junit.Assert.assertNotNull(generator11);
  }

  @Test
  public void test0482() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0482");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.logging.LogProvider logProvider5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator2.itraLogProvider(
        logProvider5);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction7 = null;
    io.github.onograph.backup.BackupRunner.Generator generator8 = generator6.fFileSystemAbstraction(
        fileSystemAbstraction7);
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory9 = null;
    io.github.onograph.backup.BackupRunner.Generator generator10 = generator8.progressMonitorFactory(
        progressMonitorFactory9);
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory11 = null;
    io.github.onograph.backup.BackupRunner.Generator generator12 = generator8.progressMonitorFactory(
        progressMonitorFactory11);
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(generator8);
    org.junit.Assert.assertNotNull(generator10);
    org.junit.Assert.assertNotNull(generator12);
  }

  @Test
  public void test0483() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0483");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.miAuthMetaOptions(
        authMetaOptions3);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isGcc(
        (java.lang.Boolean) false);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.miAuthMetaOptions(
        authMetaOptions7);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isIcc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory10.wihadsBackupEnvironmentFactory(
        (int) (byte) -1, "hi!");
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory10.isFtfb(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory15.isFtfb(false);
    java.lang.Class<?> wildcardClass18 = factory17.getClass();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(wildcardClass18);
  }

  @Test
  public void test0484() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0484");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    java.nio.file.Path path3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.prPath(path3);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isRp(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory7.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory7.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory7.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory13.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory13.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment19 = factory13.bulBackupEnvironment();
    boolean boolean20 = backupEnvironment19.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional21 = backupEnvironment19.geicmaOptional();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern22 = backupEnvironment19.getDatabaseNamePattern();
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory6.databaseNamePattern(
        databaseNamePattern22);
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory24.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory27.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory27.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory27.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = factory33.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = factory33.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment39 = factory33.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern40 = backupEnvironment39.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress41 = backupEnvironment39.getSocketAddress();
    java.nio.file.Path path42 = backupEnvironment39.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = factory24.pbPath(path42);
    io.github.onograph.backup.BackupEnvironment.Factory factory44 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory46 = factory44.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = factory47.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory51 = factory47.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory53 = factory47.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory55 = factory53.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory58 = factory53.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment59 = factory53.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern60 = backupEnvironment59.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress61 = backupEnvironment59.getSocketAddress();
    java.nio.file.Path path62 = backupEnvironment59.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory63 = factory44.pbPath(path62);
    io.github.onograph.backup.FileMoverService fileMoverService64 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path42, path62);
    java.nio.file.Path path65 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path62);
    io.github.onograph.backup.BackupEnvironment.Factory factory66 = factory23.prPath(path62);
    io.github.onograph.backup.BackupEnvironment.Factory factory68 = factory23.isSicc(
        (java.lang.Boolean) true);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(backupEnvironment19);
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional21);
    org.junit.Assert.assertNotNull(databaseNamePattern22);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(backupEnvironment39);
    org.junit.Assert.assertNotNull(databaseNamePattern40);
    org.junit.Assert.assertNotNull(socketAddress41);
    org.junit.Assert.assertNotNull(path42);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory44);
    org.junit.Assert.assertNotNull(factory46);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory49);
    org.junit.Assert.assertNotNull(factory51);
    org.junit.Assert.assertNotNull(factory53);
    org.junit.Assert.assertNotNull(factory55);
    org.junit.Assert.assertNotNull(factory58);
    org.junit.Assert.assertNotNull(backupEnvironment59);
    org.junit.Assert.assertNotNull(databaseNamePattern60);
    org.junit.Assert.assertNotNull(socketAddress61);
    org.junit.Assert.assertNotNull(path62);
    org.junit.Assert.assertNotNull(factory63);
    org.junit.Assert.assertNotNull(fileMoverService64);
    org.junit.Assert.assertNotNull(path65);
    org.junit.Assert.assertNotNull(factory66);
    org.junit.Assert.assertNotNull(factory68);
  }

  @Test
  public void test0485() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0485");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    java.nio.file.Path path3 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.prPath(path3);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isSicc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory7.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory7.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory7.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory13.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory13.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment19 = factory13.bulBackupEnvironment();
    boolean boolean20 = backupEnvironment19.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional21 = backupEnvironment19.geicmaOptional();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern22 = backupEnvironment19.getDatabaseNamePattern();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional23 = backupEnvironment19.geicmaOptional();
    org.neo4j.memory.MemoryTracker memoryTracker24 = backupEnvironment19.getMemoryTracker();
    org.neo4j.configuration.helpers.SocketAddress socketAddress25 = backupEnvironment19.getSocketAddress();
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory6.wihadsBackupEnvironmentFactory(
        socketAddress25);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory27.isCc(false);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions30 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory27.miAuthMetaOptions(
        authMetaOptions30);
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory31.isGcc(
        (java.lang.Boolean) false);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions34 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = factory33.miAuthMetaOptions(
        authMetaOptions34);
    org.neo4j.configuration.Config config36 = factory35.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = factory26.config(config36);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction38 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory39 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory39.isCc(false);
    java.nio.file.Path path42 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = factory39.prPath(path42);
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = factory39.isSicc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory46 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory48 = factory46.isGcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory50 = factory46.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory51 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory53 = factory51.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory55 = factory51.isRp(false);
    java.nio.file.Path path56 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory57 = factory55.prPath(path56);
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern58 = factory57.gedtenprDatabaseNamePattern();
    org.neo4j.configuration.Config config59 = factory57.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory60 = factory50.config(config59);
    io.github.onograph.backup.BackupEnvironment.Factory factory61 = factory39.config(config59);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction62 = null;
    org.neo4j.configuration.Config config63 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction64 = null;
    java.nio.file.Path[] pathArray65 = new java.nio.file.Path[]{};
    java.util.LinkedHashSet<java.nio.file.Path> pathSet66 = new java.util.LinkedHashSet<java.nio.file.Path>();
    boolean boolean67 = java.util.Collections.addAll(
        (java.util.Collection<java.nio.file.Path>) pathSet66, pathArray65);
    io.github.onograph.backup.BackupRestoreMeta backupRestoreMeta68 = new io.github.onograph.backup.BackupRestoreMeta(
        config63, fileSystemAbstraction64, (java.util.Set<java.nio.file.Path>) pathSet66);
    io.github.onograph.backup.BackupRestoreMeta backupRestoreMeta69 = new io.github.onograph.backup.BackupRestoreMeta(
        config59, fileSystemAbstraction62, (java.util.Set<java.nio.file.Path>) pathSet66);
    io.github.onograph.backup.BackupRestoreMeta backupRestoreMeta70 = new io.github.onograph.backup.BackupRestoreMeta(
        config36, fileSystemAbstraction38, (java.util.Set<java.nio.file.Path>) pathSet66);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(backupEnvironment19);
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional21);
    org.junit.Assert.assertNotNull(databaseNamePattern22);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional23);
    org.junit.Assert.assertNotNull(memoryTracker24);
    org.junit.Assert.assertNotNull(socketAddress25);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(config36);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNotNull(factory39);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory46);
    org.junit.Assert.assertNotNull(factory48);
    org.junit.Assert.assertNotNull(factory50);
    org.junit.Assert.assertNotNull(factory51);
    org.junit.Assert.assertNotNull(factory53);
    org.junit.Assert.assertNotNull(factory55);
    org.junit.Assert.assertNotNull(factory57);
    org.junit.Assert.assertNotNull(databaseNamePattern58);
    org.junit.Assert.assertNotNull(config59);
    org.junit.Assert.assertNotNull(factory60);
    org.junit.Assert.assertNotNull(factory61);
    org.junit.Assert.assertNotNull(pathArray65);
    org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
  }

  @Test
  public void test0486() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0486");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = factory2.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = factory2.isCc(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    java.nio.file.Path path11 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory8.prPath(path11);
    org.neo4j.configuration.helpers.SocketAddress socketAddress13 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory12.wihadsBackupEnvironmentFactory(
        socketAddress13);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config16 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = factory15.config(config16);
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory17.isRp(true);
    org.neo4j.configuration.Config config20 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory19.config(config20);
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory19.databaseNamePattern(
        "database.id");
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory24.isCc(false);
    io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions authMetaOptions27 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = factory24.miAuthMetaOptions(
        authMetaOptions27);
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = factory28.isGcc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory30.isIcc(
        (java.lang.Boolean) false);
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern33 = factory30.gedtenprDatabaseNamePattern();
    io.github.onograph.backup.BackupEnvironment.Factory factory34 = factory19.databaseNamePattern(
        databaseNamePattern33);
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = factory12.databaseNamePattern(
        databaseNamePattern33);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory7.databaseNamePattern(
        databaseNamePattern33);
    java.nio.file.Path path37 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = factory7.prPath(path37);
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(config5);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(factory32);
    org.junit.Assert.assertNotNull(databaseNamePattern33);
    org.junit.Assert.assertNotNull(factory34);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(factory38);
  }

  @Test
  public void test0487() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0487");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.config(config5);
    org.neo4j.configuration.helpers.SocketAddress socketAddress7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress7);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config10 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.config(config10);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isRp(true);
    org.neo4j.configuration.Config config14 = factory11.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory4.config(config14);
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags16 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction17 = null;
    org.neo4j.logging.LogProvider logProvider18 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config20 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory19.config(config20);
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory21.isRp(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory21.isSicc(
        (java.lang.Boolean) true);
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern26 = factory21.gedtenprDatabaseNamePattern();
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = factory21.isFtfb(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config30 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory29.config(config30);
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory31.isRp(true);
    org.neo4j.configuration.Config config34 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = factory33.config(config34);
    org.neo4j.configuration.helpers.SocketAddress socketAddress36 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = factory33.wihadsBackupEnvironmentFactory(
        socketAddress36);
    org.neo4j.configuration.helpers.SocketAddress socketAddress38 = factory33.getSocketAddress();
    io.github.onograph.backup.BackupEnvironment.Factory factory40 = factory33.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory42 = factory40.isIcc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment backupEnvironment43 = factory42.bulBackupEnvironment();
    java.nio.file.Path path44 = backupEnvironment43.getPbPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = factory21.prPath(path44);
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory46 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl47 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config14, consistencyFlags16, fileSystemAbstraction17, logProvider18, path44,
        progressMonitorFactory46);
    org.neo4j.io.layout.DatabaseLayout databaseLayout48 = null;
    try {
      backupVerificationServiceImpl47.chcsyForDa(databaseLayout48);
      org.junit.Assert.fail(
          "Expected exception of type io.github.onograph.backup.BackupVerificationErrorException; message: *** Error:  2915f124-983c-439d-b1ae-a9c5ad06642b");
    } catch (io.github.onograph.backup.BackupVerificationErrorException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(config14);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(databaseNamePattern26);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNull(socketAddress38);
    org.junit.Assert.assertNotNull(factory40);
    org.junit.Assert.assertNotNull(factory42);
    org.junit.Assert.assertNotNull(backupEnvironment43);
    org.junit.Assert.assertNotNull(path44);
    org.junit.Assert.assertNotNull(factory45);
  }

  @Test
  public void test0488() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0488");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    java.nio.file.Path path2 = null;
    org.neo4j.logging.LogProvider logProvider3 = null;
    org.neo4j.io.pagecache.PageCache pageCache4 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer5 = null;
    try {
      io.github.onograph.backup.BackupMetaService backupMetaService6 = new io.github.onograph.backup.BackupMetaService(
          fileSystemAbstraction0, "database.id", path2, logProvider3, pageCache4, pageCacheTracer5);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
  }

  @Test
  public void test0489() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0489");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.GdbIdRepo gdbIdRepo1 = new io.github.onograph.backup.GdbIdRepo(
        fileSystemAbstraction0);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction2 = null;
    io.github.onograph.backup.FileMover fileMover3 = new io.github.onograph.backup.FileMover(
        fileSystemAbstraction2);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory4.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = factory10.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory10.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment16 = factory10.bulBackupEnvironment();
    boolean boolean17 = backupEnvironment16.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional18 = backupEnvironment16.geicmaOptional();
    java.nio.file.Path path19 = backupEnvironment16.getPbPath();
    java.nio.file.Path path20 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path19);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream21 = fileMover3._trrfrmnStream(
        path19);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory22.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = factory25.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory25.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory25.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory31.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory36 = factory31.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment37 = factory31.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern38 = backupEnvironment37.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress39 = backupEnvironment37.getSocketAddress();
    java.nio.file.Path path40 = backupEnvironment37.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory41 = factory22.pbPath(path40);
    io.github.onograph.backup.BackupEnvironment.Factory factory42 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory44 = factory42.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory47 = factory45.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory49 = factory45.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory51 = factory45.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory53 = factory51.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory56 = factory51.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment57 = factory51.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern58 = backupEnvironment57.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress59 = backupEnvironment57.getSocketAddress();
    java.nio.file.Path path60 = backupEnvironment57.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory61 = factory42.pbPath(path60);
    io.github.onograph.backup.FileMoverService fileMoverService62 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path40, path60);
    java.nio.file.Path path63 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path40);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream64 = fileMover3._trrfrmnStream(
        path63);
    io.github.onograph.backup.BackupEnvironment.Factory factory65 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory67 = factory65.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory69 = factory65.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory71 = factory65.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory73 = factory71.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory76 = factory71.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment77 = factory71.bulBackupEnvironment();
    boolean boolean78 = backupEnvironment77.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional79 = backupEnvironment77.geicmaOptional();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern80 = backupEnvironment77.getDatabaseNamePattern();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional81 = backupEnvironment77.geicmaOptional();
    org.neo4j.memory.MemoryTracker memoryTracker82 = backupEnvironment77.getMemoryTracker();
    org.neo4j.configuration.helpers.SocketAddress socketAddress83 = backupEnvironment77.getSocketAddress();
    java.nio.file.Path path84 = backupEnvironment77.getRpPath();
    java.nio.file.Path path85 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path84);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream86 = fileMover3._trrfrmnStream(
        path84);
    try {
      java.util.Optional<org.neo4j.kernel.database.DatabaseId> databaseIdOptional87 = gdbIdRepo1.reddtaiOptional(
          path84);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(backupEnvironment16);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional18);
    org.junit.Assert.assertNotNull(path19);
    org.junit.Assert.assertNotNull(path20);
    org.junit.Assert.assertNotNull(fileMoverServiceStream21);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory36);
    org.junit.Assert.assertNotNull(backupEnvironment37);
    org.junit.Assert.assertNotNull(databaseNamePattern38);
    org.junit.Assert.assertNotNull(socketAddress39);
    org.junit.Assert.assertNotNull(path40);
    org.junit.Assert.assertNotNull(factory41);
    org.junit.Assert.assertNotNull(factory42);
    org.junit.Assert.assertNotNull(factory44);
    org.junit.Assert.assertNotNull(factory45);
    org.junit.Assert.assertNotNull(factory47);
    org.junit.Assert.assertNotNull(factory49);
    org.junit.Assert.assertNotNull(factory51);
    org.junit.Assert.assertNotNull(factory53);
    org.junit.Assert.assertNotNull(factory56);
    org.junit.Assert.assertNotNull(backupEnvironment57);
    org.junit.Assert.assertNotNull(databaseNamePattern58);
    org.junit.Assert.assertNotNull(socketAddress59);
    org.junit.Assert.assertNotNull(path60);
    org.junit.Assert.assertNotNull(factory61);
    org.junit.Assert.assertNotNull(fileMoverService62);
    org.junit.Assert.assertNotNull(path63);
    org.junit.Assert.assertNotNull(fileMoverServiceStream64);
    org.junit.Assert.assertNotNull(factory65);
    org.junit.Assert.assertNotNull(factory67);
    org.junit.Assert.assertNotNull(factory69);
    org.junit.Assert.assertNotNull(factory71);
    org.junit.Assert.assertNotNull(factory73);
    org.junit.Assert.assertNotNull(factory76);
    org.junit.Assert.assertNotNull(backupEnvironment77);
    org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional79);
    org.junit.Assert.assertNotNull(databaseNamePattern80);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional81);
    org.junit.Assert.assertNotNull(memoryTracker82);
    org.junit.Assert.assertNotNull(socketAddress83);
    org.junit.Assert.assertNotNull(path84);
    org.junit.Assert.assertNotNull(path85);
    org.junit.Assert.assertNotNull(fileMoverServiceStream86);
  }

  @Test
  public void test0490() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0490");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory6.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment12 = factory6.bulBackupEnvironment();
    boolean boolean13 = backupEnvironment12.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional14 = backupEnvironment12.geicmaOptional();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional15 = backupEnvironment12.geicmaOptional();
    java.nio.file.Path path16 = backupEnvironment12.getPbPath();
    boolean boolean17 = backupEnvironment12.getIsRp();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(backupEnvironment12);
    org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional14);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional15);
    org.junit.Assert.assertNotNull(path16);
    org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
  }

  @Test
  public void test0491() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0491");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isGcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    org.neo4j.configuration.Config config5 = factory0.gecfConfig();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(config5);
  }

  @Test
  public void test0492() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0492");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isSicc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory0.isGcc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isSicc(
        (java.lang.Boolean) true);
    java.lang.Class<?> wildcardClass11 = factory10.getClass();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(wildcardClass11);
  }

  @Test
  public void test0493() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0493");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory0.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory6.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory6.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment12 = factory6.bulBackupEnvironment();
    boolean boolean13 = backupEnvironment12.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional14 = backupEnvironment12.geicmaOptional();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern15 = backupEnvironment12.getDatabaseNamePattern();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional16 = backupEnvironment12.geicmaOptional();
    org.neo4j.memory.MemoryTracker memoryTracker17 = backupEnvironment12.getMemoryTracker();
    org.neo4j.configuration.helpers.SocketAddress socketAddress18 = backupEnvironment12.getSocketAddress();
    java.nio.file.Path path19 = backupEnvironment12.getRpPath();
    java.nio.file.Path path20 = backupEnvironment12.getPbPath();
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(backupEnvironment12);
    org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional14);
    org.junit.Assert.assertNotNull(databaseNamePattern15);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional16);
    org.junit.Assert.assertNotNull(memoryTracker17);
    org.junit.Assert.assertNotNull(socketAddress18);
    org.junit.Assert.assertNotNull(path19);
    org.junit.Assert.assertNotNull(path20);
  }

  @Test
  public void test0494() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0494");
    }
    io.github.onograph.backup.BackupRunner.Generator generator0 = io.github.onograph.backup.BackupRunner.bulrBackupRunnerGenerator();
    org.neo4j.logging.LogProvider logProvider1 = null;
    io.github.onograph.backup.BackupRunner.Generator generator2 = generator0.itraLogProvider(
        logProvider1);
    org.neo4j.time.SystemNanoClock systemNanoClock3 = null;
    io.github.onograph.backup.BackupRunner.Generator generator4 = generator2.systemNanoClock(
        systemNanoClock3);
    org.neo4j.logging.LogProvider logProvider5 = null;
    io.github.onograph.backup.BackupRunner.Generator generator6 = generator2.itraLogProvider(
        logProvider5);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction7 = null;
    io.github.onograph.backup.BackupRunner.Generator generator8 = generator6.fFileSystemAbstraction(
        fileSystemAbstraction7);
    org.neo4j.time.SystemNanoClock systemNanoClock9 = null;
    io.github.onograph.backup.BackupRunner.Generator generator10 = generator6.systemNanoClock(
        systemNanoClock9);
    org.junit.Assert.assertNotNull(generator0);
    org.junit.Assert.assertNotNull(generator2);
    org.junit.Assert.assertNotNull(generator4);
    org.junit.Assert.assertNotNull(generator6);
    org.junit.Assert.assertNotNull(generator8);
    org.junit.Assert.assertNotNull(generator10);
  }

  @Test
  public void test0495() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0495");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config1 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.config(config1);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isRp(true);
    org.neo4j.configuration.Config config5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.config(config5);
    org.neo4j.configuration.helpers.SocketAddress socketAddress7 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory4.wihadsBackupEnvironmentFactory(
        socketAddress7);
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config10 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory9.config(config10);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory11.isRp(true);
    org.neo4j.configuration.Config config14 = factory11.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory4.config(config14);
    org.neo4j.consistency.checking.full.ConsistencyFlags consistencyFlags16 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction17 = null;
    org.neo4j.logging.LogProvider logProvider18 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config20 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory19.config(config20);
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory21.isRp(true);
    io.github.onograph.backup.BackupEnvironment.Factory factory25 = factory21.isSicc(
        (java.lang.Boolean) true);
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern26 = factory21.gedtenprDatabaseNamePattern();
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = factory21.isFtfb(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config30 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory29.config(config30);
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory31.isRp(true);
    org.neo4j.configuration.Config config34 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = factory33.config(config34);
    org.neo4j.configuration.helpers.SocketAddress socketAddress36 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory37 = factory33.wihadsBackupEnvironmentFactory(
        socketAddress36);
    org.neo4j.configuration.helpers.SocketAddress socketAddress38 = factory33.getSocketAddress();
    io.github.onograph.backup.BackupEnvironment.Factory factory40 = factory33.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory42 = factory40.isIcc(
        (java.lang.Boolean) false);
    io.github.onograph.backup.BackupEnvironment backupEnvironment43 = factory42.bulBackupEnvironment();
    java.nio.file.Path path44 = backupEnvironment43.getPbPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory45 = factory21.prPath(path44);
    org.neo4j.internal.helpers.progress.ProgressMonitorFactory progressMonitorFactory46 = null;
    io.github.onograph.backup.BackupVerificationServiceImpl backupVerificationServiceImpl47 = new io.github.onograph.backup.BackupVerificationServiceImpl(
        config14, consistencyFlags16, fileSystemAbstraction17, logProvider18, path44,
        progressMonitorFactory46);
    org.neo4j.io.layout.DatabaseLayout databaseLayout48 = null;
    try {
      backupVerificationServiceImpl47.chcsyForDa(databaseLayout48);
      org.junit.Assert.fail(
          "Expected exception of type io.github.onograph.backup.BackupVerificationErrorException; message: *** Error:  2915f124-983c-439d-b1ae-a9c5ad06642b");
    } catch (io.github.onograph.backup.BackupVerificationErrorException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(config14);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory25);
    org.junit.Assert.assertNotNull(databaseNamePattern26);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory37);
    org.junit.Assert.assertNull(socketAddress38);
    org.junit.Assert.assertNotNull(factory40);
    org.junit.Assert.assertNotNull(factory42);
    org.junit.Assert.assertNotNull(backupEnvironment43);
    org.junit.Assert.assertNotNull(path44);
    org.junit.Assert.assertNotNull(factory45);
  }

  @Test
  public void test0496() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0496");
    }
    io.github.onograph.backup.BackupEnvironment.Factory factory0 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = factory0.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory0.isRp(false);
    java.nio.file.Path path5 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.prPath(path5);
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern7 = factory6.gedtenprDatabaseNamePattern();
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory6.isRp(false);
    java.nio.file.Path path10 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory6.pbPath(path10);
    io.github.onograph.backup.BackupEnvironment.Factory factory12 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory14 = factory12.isCc(false);
    java.nio.file.Path path15 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory16 = factory12.prPath(path15);
    io.github.onograph.backup.BackupEnvironment.Factory factory17 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    org.neo4j.configuration.Config config18 = null;
    io.github.onograph.backup.BackupEnvironment.Factory factory19 = factory17.config(config18);
    io.github.onograph.backup.BackupEnvironment.Factory factory21 = factory19.isRp(true);
    org.neo4j.configuration.Config config22 = factory19.gecfConfig();
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory12.config(config22);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction24 = null;
    org.neo4j.configuration.Config config25 = null;
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction26 = null;
    java.nio.file.Path[] pathArray27 = new java.nio.file.Path[]{};
    java.util.LinkedHashSet<java.nio.file.Path> pathSet28 = new java.util.LinkedHashSet<java.nio.file.Path>();
    boolean boolean29 = java.util.Collections.addAll(
        (java.util.Collection<java.nio.file.Path>) pathSet28, pathArray27);
    io.github.onograph.backup.BackupRestoreMeta backupRestoreMeta30 = new io.github.onograph.backup.BackupRestoreMeta(
        config25, fileSystemAbstraction26, (java.util.Set<java.nio.file.Path>) pathSet28);
    io.github.onograph.backup.BackupRestoreMeta backupRestoreMeta31 = new io.github.onograph.backup.BackupRestoreMeta(
        config22, fileSystemAbstraction24, (java.util.Set<java.nio.file.Path>) pathSet28);
    io.github.onograph.backup.BackupEnvironment.Factory factory32 = factory6.config(config22);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction33 = null;
    io.github.onograph.cluster.raft.module.cuprot.LifecycleCatchupManagerImpl lifecycleCatchupManagerImpl34 = null;
    org.neo4j.scheduler.JobScheduler jobScheduler35 = null;
    org.neo4j.logging.LogProvider logProvider36 = null;
    org.neo4j.monitoring.Monitors monitors37 = null;
    org.neo4j.io.pagecache.PageCache pageCache38 = null;
    org.neo4j.io.pagecache.tracing.PageCacheTracer pageCacheTracer39 = null;
    org.neo4j.time.SystemNanoClock systemNanoClock40 = null;
    try {
      io.github.onograph.backup.RemoteBackupManager remoteBackupManager41 = new io.github.onograph.backup.RemoteBackupManager(
          config22, fileSystemAbstraction33, lifecycleCatchupManagerImpl34, jobScheduler35,
          logProvider36, monitors37, pageCache38, pageCacheTracer39, systemNanoClock40);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory0);
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(databaseNamePattern7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory12);
    org.junit.Assert.assertNotNull(factory14);
    org.junit.Assert.assertNotNull(factory16);
    org.junit.Assert.assertNotNull(factory17);
    org.junit.Assert.assertNotNull(factory19);
    org.junit.Assert.assertNotNull(factory21);
    org.junit.Assert.assertNotNull(config22);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(pathArray27);
    org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    org.junit.Assert.assertNotNull(factory32);
  }

  @Test
  public void test0497() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0497");
    }
    io.github.onograph.backup.CommandProviderBackupImpl commandProviderBackupImpl0 = new io.github.onograph.backup.CommandProviderBackupImpl();
    org.neo4j.cli.Command.CommandType commandType1 = commandProviderBackupImpl0.commandType();
    int int2 = commandProviderBackupImpl0.getPriority();
    int int3 = commandProviderBackupImpl0.getPriority();
    org.neo4j.cli.ExecutionContext executionContext4 = null;
    try {
      io.github.onograph.backup.BackupCommand backupCommand5 = commandProviderBackupImpl0.createCommand(
          executionContext4);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue(
        "'" + commandType1 + "' != '" + org.neo4j.cli.Command.CommandType.ONLINE_BACKUP + "'",
        commandType1.equals(org.neo4j.cli.Command.CommandType.ONLINE_BACKUP));
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
  }

  @Test
  public void test0498() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0498");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupMetadataRepository backupMetadataRepository1 = new io.github.onograph.backup.BackupMetadataRepository(
        fileSystemAbstraction0);
    io.github.onograph.backup.BackupEnvironment.Factory factory2 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = factory2.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory2.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory8 = factory2.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory10 = factory8.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory8.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment14 = factory8.bulBackupEnvironment();
    boolean boolean15 = backupEnvironment14.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional16 = backupEnvironment14.geicmaOptional();
    java.nio.file.Path path17 = backupEnvironment14.getPbPath();
    java.nio.file.Path path18 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path17);
    java.nio.file.Path path19 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path18);
    boolean boolean20 = io.github.onograph.backup.BackupMetadataRepository.isMedaflForPa(path19);
    java.nio.file.Path path21 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path19);
    io.github.onograph.backup.BackupEnvironment.Factory factory22 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = factory22.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory22.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory28 = factory22.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory30 = factory28.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory28.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment34 = factory28.bulBackupEnvironment();
    boolean boolean35 = backupEnvironment34.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional36 = backupEnvironment34.geicmaOptional();
    java.nio.file.Path path37 = backupEnvironment34.getPbPath();
    java.nio.file.Path path38 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path37);
    java.nio.file.Path path39 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path38);
    io.github.onograph.backup.FileMoverService fileMoverService40 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path19, path38);
    java.util.List<java.lang.String> strList41 = null;
    try {
      backupMetadataRepository1.wrtForPaLi(path19, strList41);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory2);
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory8);
    org.junit.Assert.assertNotNull(factory10);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(backupEnvironment14);
    org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional16);
    org.junit.Assert.assertNotNull(path17);
    org.junit.Assert.assertNotNull(path18);
    org.junit.Assert.assertNotNull(path19);
    org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    org.junit.Assert.assertNotNull(path21);
    org.junit.Assert.assertNotNull(factory22);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory28);
    org.junit.Assert.assertNotNull(factory30);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(backupEnvironment34);
    org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional36);
    org.junit.Assert.assertNotNull(path37);
    org.junit.Assert.assertNotNull(path38);
    org.junit.Assert.assertNotNull(path39);
    org.junit.Assert.assertNotNull(fileMoverService40);
  }

  @Test
  public void test0499() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0499");
    }
    io.github.onograph.backup.SetupForBackupRestorationCommandProvider setupForBackupRestorationCommandProvider0 = new io.github.onograph.backup.SetupForBackupRestorationCommandProvider();
    int int1 = setupForBackupRestorationCommandProvider0.getPriority();
    int int2 = setupForBackupRestorationCommandProvider0.getPriority();
    org.neo4j.cli.Command.CommandType commandType3 = setupForBackupRestorationCommandProvider0.commandType();
    org.neo4j.cli.Command.CommandType commandType4 = setupForBackupRestorationCommandProvider0.commandType();
    org.neo4j.cli.ExecutionContext executionContext5 = null;
    try {
      io.github.onograph.backup.SetupForBackupRestorationCommand setupForBackupRestorationCommand6 = setupForBackupRestorationCommandProvider0.createCommand(
          executionContext5);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    org.junit.Assert.assertTrue(
        "'" + commandType3 + "' != '" + org.neo4j.cli.Command.CommandType.PREPARE_RESTORE + "'",
        commandType3.equals(org.neo4j.cli.Command.CommandType.PREPARE_RESTORE));
    org.junit.Assert.assertTrue(
        "'" + commandType4 + "' != '" + org.neo4j.cli.Command.CommandType.PREPARE_RESTORE + "'",
        commandType4.equals(org.neo4j.cli.Command.CommandType.PREPARE_RESTORE));
  }

  @Test
  public void test0500() throws Throwable {
    if (debug) {
      System.out.format("%n%s%n", "ModRegTest0.test0500");
    }
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction0 = null;
    io.github.onograph.backup.BackupIOService backupIOService1 = new io.github.onograph.backup.BackupIOService(
        fileSystemAbstraction0);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction2 = null;
    io.github.onograph.backup.FileMover fileMover3 = new io.github.onograph.backup.FileMover(
        fileSystemAbstraction2);
    io.github.onograph.backup.BackupEnvironment.Factory factory4 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory6 = factory4.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory7 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory9 = factory7.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory11 = factory7.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory13 = factory7.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory15 = factory13.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory18 = factory13.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment19 = factory13.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern20 = backupEnvironment19.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress21 = backupEnvironment19.getSocketAddress();
    java.nio.file.Path path22 = backupEnvironment19.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory23 = factory4.pbPath(path22);
    io.github.onograph.backup.BackupEnvironment.Factory factory24 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory26 = factory24.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory27 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory29 = factory27.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory31 = factory27.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory33 = factory27.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory35 = factory33.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory38 = factory33.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment39 = factory33.bulBackupEnvironment();
    org.neo4j.configuration.helpers.DatabaseNamePattern databaseNamePattern40 = backupEnvironment39.getDatabaseNamePattern();
    org.neo4j.configuration.helpers.SocketAddress socketAddress41 = backupEnvironment39.getSocketAddress();
    java.nio.file.Path path42 = backupEnvironment39.getRpPath();
    io.github.onograph.backup.BackupEnvironment.Factory factory43 = factory24.pbPath(path42);
    io.github.onograph.backup.FileMoverService fileMoverService44 = io.github.onograph.backup.FileMoverService.covifeseFileMoverService(
        path22, path42);
    java.nio.file.Path path45 = io.github.onograph.backup.GdbIdRepo.gedtefpPath(path42);
    org.neo4j.io.fs.FileSystemAbstraction fileSystemAbstraction46 = null;
    io.github.onograph.backup.FileMover fileMover47 = new io.github.onograph.backup.FileMover(
        fileSystemAbstraction46);
    io.github.onograph.backup.BackupEnvironment.Factory factory48 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory50 = factory48.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory52 = factory48.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory54 = factory48.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory56 = factory54.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory59 = factory54.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment60 = factory54.bulBackupEnvironment();
    boolean boolean61 = backupEnvironment60.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional62 = backupEnvironment60.geicmaOptional();
    java.nio.file.Path path63 = backupEnvironment60.getPbPath();
    java.nio.file.Path path64 = io.github.onograph.backup.BackupMetadataRepository.gefeptPath(
        path63);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream65 = fileMover47._trrfrmnStream(
        path63);
    io.github.onograph.backup.BackupEnvironment.Factory factory66 = io.github.onograph.backup.BackupEnvironment.bulrBackupEnvironmentFactory();
    io.github.onograph.backup.BackupEnvironment.Factory factory68 = factory66.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory70 = factory66.isRp(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory72 = factory66.isIcc(
        (java.lang.Boolean) true);
    io.github.onograph.backup.BackupEnvironment.Factory factory74 = factory72.isCc(false);
    io.github.onograph.backup.BackupEnvironment.Factory factory77 = factory72.wihadsBackupEnvironmentFactory(
        100, "hi!");
    io.github.onograph.backup.BackupEnvironment backupEnvironment78 = factory72.bulBackupEnvironment();
    boolean boolean79 = backupEnvironment78.getIsBftf();
    java.util.Optional<io.github.onograph.cluster.raft.module.cuprot.current.core.AuthMetaOptions> authMetaOptionsOptional80 = backupEnvironment78.geicmaOptional();
    java.nio.file.Path path81 = backupEnvironment78.getPbPath();
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream82 = fileMover47._trrfrmnStream(
        path81);
    io.github.onograph.backup.FileMoverService fileMoverService83 = io.github.onograph.backup.FileMoverService.movifeseFileMoverService(
        path42, path81);
    java.util.stream.Stream<io.github.onograph.backup.FileMoverService> fileMoverServiceStream84 = fileMover3._trrfrmnStream(
        path81);
    try {
      boolean boolean85 = backupIOService1.isExsForPa(path81);
      org.junit.Assert.fail(
          "Expected exception of type java.lang.NullPointerException; message: null");
    } catch (java.lang.NullPointerException e) {
    }
    org.junit.Assert.assertNotNull(factory4);
    org.junit.Assert.assertNotNull(factory6);
    org.junit.Assert.assertNotNull(factory7);
    org.junit.Assert.assertNotNull(factory9);
    org.junit.Assert.assertNotNull(factory11);
    org.junit.Assert.assertNotNull(factory13);
    org.junit.Assert.assertNotNull(factory15);
    org.junit.Assert.assertNotNull(factory18);
    org.junit.Assert.assertNotNull(backupEnvironment19);
    org.junit.Assert.assertNotNull(databaseNamePattern20);
    org.junit.Assert.assertNotNull(socketAddress21);
    org.junit.Assert.assertNotNull(path22);
    org.junit.Assert.assertNotNull(factory23);
    org.junit.Assert.assertNotNull(factory24);
    org.junit.Assert.assertNotNull(factory26);
    org.junit.Assert.assertNotNull(factory27);
    org.junit.Assert.assertNotNull(factory29);
    org.junit.Assert.assertNotNull(factory31);
    org.junit.Assert.assertNotNull(factory33);
    org.junit.Assert.assertNotNull(factory35);
    org.junit.Assert.assertNotNull(factory38);
    org.junit.Assert.assertNotNull(backupEnvironment39);
    org.junit.Assert.assertNotNull(databaseNamePattern40);
    org.junit.Assert.assertNotNull(socketAddress41);
    org.junit.Assert.assertNotNull(path42);
    org.junit.Assert.assertNotNull(factory43);
    org.junit.Assert.assertNotNull(fileMoverService44);
    org.junit.Assert.assertNotNull(path45);
    org.junit.Assert.assertNotNull(factory48);
    org.junit.Assert.assertNotNull(factory50);
    org.junit.Assert.assertNotNull(factory52);
    org.junit.Assert.assertNotNull(factory54);
    org.junit.Assert.assertNotNull(factory56);
    org.junit.Assert.assertNotNull(factory59);
    org.junit.Assert.assertNotNull(backupEnvironment60);
    org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional62);
    org.junit.Assert.assertNotNull(path63);
    org.junit.Assert.assertNotNull(path64);
    org.junit.Assert.assertNotNull(fileMoverServiceStream65);
    org.junit.Assert.assertNotNull(factory66);
    org.junit.Assert.assertNotNull(factory68);
    org.junit.Assert.assertNotNull(factory70);
    org.junit.Assert.assertNotNull(factory72);
    org.junit.Assert.assertNotNull(factory74);
    org.junit.Assert.assertNotNull(factory77);
    org.junit.Assert.assertNotNull(backupEnvironment78);
    org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    org.junit.Assert.assertNotNull(authMetaOptionsOptional80);
    org.junit.Assert.assertNotNull(path81);
    org.junit.Assert.assertNotNull(fileMoverServiceStream82);
    org.junit.Assert.assertNotNull(fileMoverService83);
    org.junit.Assert.assertNotNull(fileMoverServiceStream84);
  }
}
